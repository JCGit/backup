// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSMailMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSMailMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSMailMsg_2eproto() {
  delete CSMailAttach::default_instance_;
  delete CSMail::default_instance_;
  delete CSMailSep::default_instance_;
  delete CSGrpMailBreif::default_instance_;
  delete CSMailBox::default_instance_;
  delete CSQueryMailRsp::default_instance_;
  delete CSReadMailRqst::default_instance_;
  delete CSOneMail::default_instance_;
  delete CSGetAttachRqst::default_instance_;
  delete CSGetAttachRsp::default_instance_;
  delete CSDeleteMailRqst::default_instance_;
  delete CSDeleteMailRsp::default_instance_;
  delete CSReadMailRsp::default_instance_;
  delete CSMailRequest::default_instance_;
  delete CSMailRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSMailMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSMailMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  CSMailAttach::default_instance_ = new CSMailAttach();
  CSMail::default_instance_ = new CSMail();
  CSMailSep::default_instance_ = new CSMailSep();
  CSGrpMailBreif::default_instance_ = new CSGrpMailBreif();
  CSMailBox::default_instance_ = new CSMailBox();
  CSQueryMailRsp::default_instance_ = new CSQueryMailRsp();
  CSReadMailRqst::default_instance_ = new CSReadMailRqst();
  CSOneMail::default_instance_ = new CSOneMail();
  CSGetAttachRqst::default_instance_ = new CSGetAttachRqst();
  CSGetAttachRsp::default_instance_ = new CSGetAttachRsp();
  CSDeleteMailRqst::default_instance_ = new CSDeleteMailRqst();
  CSDeleteMailRsp::default_instance_ = new CSDeleteMailRsp();
  CSReadMailRsp::default_instance_ = new CSReadMailRsp();
  CSMailRequest::default_instance_ = new CSMailRequest();
  CSMailRespond::default_instance_ = new CSMailRespond();
  CSMailAttach::default_instance_->InitAsDefaultInstance();
  CSMail::default_instance_->InitAsDefaultInstance();
  CSMailSep::default_instance_->InitAsDefaultInstance();
  CSGrpMailBreif::default_instance_->InitAsDefaultInstance();
  CSMailBox::default_instance_->InitAsDefaultInstance();
  CSQueryMailRsp::default_instance_->InitAsDefaultInstance();
  CSReadMailRqst::default_instance_->InitAsDefaultInstance();
  CSOneMail::default_instance_->InitAsDefaultInstance();
  CSGetAttachRqst::default_instance_->InitAsDefaultInstance();
  CSGetAttachRsp::default_instance_->InitAsDefaultInstance();
  CSDeleteMailRqst::default_instance_->InitAsDefaultInstance();
  CSDeleteMailRsp::default_instance_->InitAsDefaultInstance();
  CSReadMailRsp::default_instance_->InitAsDefaultInstance();
  CSMailRequest::default_instance_->InitAsDefaultInstance();
  CSMailRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSMailMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSMailMsg_2eproto_once_);
void protobuf_AddDesc_CSMailMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSMailMsg_2eproto_once_,
                 &protobuf_AddDesc_CSMailMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSMailMsg_2eproto {
  StaticDescriptorInitializer_CSMailMsg_2eproto() {
    protobuf_AddDesc_CSMailMsg_2eproto();
  }
} static_descriptor_initializer_CSMailMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSMailAttach::kAttachTypeFieldNumber;
const int CSMailAttach::kAttachCfgIDFieldNumber;
const int CSMailAttach::kAttachCntFieldNumber;
#endif  // !_MSC_VER

CSMailAttach::CSMailAttach()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMailAttach::InitAsDefaultInstance() {
}

CSMailAttach::CSMailAttach(const CSMailAttach& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMailAttach::SharedCtor() {
  _cached_size_ = 0;
  attachtype_ = 0u;
  attachcfgid_ = 0u;
  attachcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMailAttach::~CSMailAttach() {
  SharedDtor();
}

void CSMailAttach::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMailAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMailAttach& CSMailAttach::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSMailAttach* CSMailAttach::default_instance_ = NULL;

CSMailAttach* CSMailAttach::New() const {
  return new CSMailAttach;
}

void CSMailAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attachtype_ = 0u;
    attachcfgid_ = 0u;
    attachcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMailAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AttachType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachtype_)));
          set_has_attachtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AttachCfgID;
        break;
      }

      // required uint32 AttachCfgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttachCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachcfgid_)));
          set_has_attachcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AttachCnt;
        break;
      }

      // required uint32 AttachCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttachCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachcnt_)));
          set_has_attachcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMailAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AttachType = 1;
  if (has_attachtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attachtype(), output);
  }

  // required uint32 AttachCfgID = 2;
  if (has_attachcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attachcfgid(), output);
  }

  // required uint32 AttachCnt = 3;
  if (has_attachcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attachcnt(), output);
  }

}

int CSMailAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AttachType = 1;
    if (has_attachtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachtype());
    }

    // required uint32 AttachCfgID = 2;
    if (has_attachcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachcfgid());
    }

    // required uint32 AttachCnt = 3;
    if (has_attachcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMailAttach::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMailAttach*>(&from));
}

void CSMailAttach::MergeFrom(const CSMailAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attachtype()) {
      set_attachtype(from.attachtype());
    }
    if (from.has_attachcfgid()) {
      set_attachcfgid(from.attachcfgid());
    }
    if (from.has_attachcnt()) {
      set_attachcnt(from.attachcnt());
    }
  }
}

void CSMailAttach::CopyFrom(const CSMailAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMailAttach::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSMailAttach::Swap(CSMailAttach* other) {
  if (other != this) {
    std::swap(attachtype_, other->attachtype_);
    std::swap(attachcfgid_, other->attachcfgid_);
    std::swap(attachcnt_, other->attachcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMailAttach::GetTypeName() const {
  return "vmsg.CSMailAttach";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMail::kMailIDFieldNumber;
const int CSMail::kMailHeadFieldNumber;
const int CSMail::kSenderFieldNumber;
const int CSMail::kRemainTimeFieldNumber;
const int CSMail::kHadReadFieldNumber;
const int CSMail::kHadGetAttachFieldNumber;
const int CSMail::kHasAttachFieldNumber;
const int CSMail::kTimeStampFieldNumber;
#endif  // !_MSC_VER

CSMail::CSMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMail::InitAsDefaultInstance() {
}

CSMail::CSMail(const CSMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  mailhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ = GOOGLE_ULONGLONG(0);
  remaintime_ = 0;
  hadread_ = 0;
  hadgetattach_ = 0;
  hasattach_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMail::~CSMail() {
  SharedDtor();
}

void CSMail::SharedDtor() {
  if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
    delete mailhead_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMail& CSMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSMail* CSMail::default_instance_ = NULL;

CSMail* CSMail::New() const {
  return new CSMail;
}

void CSMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    if (has_mailhead()) {
      if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
        mailhead_->clear();
      }
    }
    sender_ = GOOGLE_ULONGLONG(0);
    remaintime_ = 0;
    hadread_ = 0;
    hadgetattach_ = 0;
    hasattach_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MailHead;
        break;
      }

      // required string MailHead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Sender;
        break;
      }

      // required uint64 Sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RemainTime;
        break;
      }

      // required int32 RemainTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HadRead;
        break;
      }

      // required int32 HadRead = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HadRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hadread_)));
          set_has_hadread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HadGetAttach;
        break;
      }

      // required int32 HadGetAttach = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HadGetAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hadgetattach_)));
          set_has_hadgetattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HasAttach;
        break;
      }

      // required int32 HasAttach = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TimeStamp;
        break;
      }

      // required int32 TimeStamp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required string MailHead = 2;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mailhead(), output);
  }

  // required uint64 Sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sender(), output);
  }

  // required int32 RemainTime = 4;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaintime(), output);
  }

  // required int32 HadRead = 5;
  if (has_hadread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hadread(), output);
  }

  // required int32 HadGetAttach = 6;
  if (has_hadgetattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hadgetattach(), output);
  }

  // required int32 HasAttach = 7;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hasattach(), output);
  }

  // required int32 TimeStamp = 8;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timestamp(), output);
  }

}

int CSMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required string MailHead = 2;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailhead());
    }

    // required uint64 Sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // required int32 RemainTime = 4;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // required int32 HadRead = 5;
    if (has_hadread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hadread());
    }

    // required int32 HadGetAttach = 6;
    if (has_hadgetattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hadgetattach());
    }

    // required int32 HasAttach = 7;
    if (has_hasattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasattach());
    }

    // required int32 TimeStamp = 8;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMail*>(&from));
}

void CSMail::MergeFrom(const CSMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailhead()) {
      set_mailhead(from.mailhead());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_hadread()) {
      set_hadread(from.hadread());
    }
    if (from.has_hadgetattach()) {
      set_hadgetattach(from.hadgetattach());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void CSMail::CopyFrom(const CSMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CSMail::Swap(CSMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(mailhead_, other->mailhead_);
    std::swap(sender_, other->sender_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(hadread_, other->hadread_);
    std::swap(hadgetattach_, other->hadgetattach_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMail::GetTypeName() const {
  return "vmsg.CSMail";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMailSep::kMailIDFieldNumber;
const int CSMailSep::kHadReadFieldNumber;
const int CSMailSep::kHadGetAttachFieldNumber;
#endif  // !_MSC_VER

CSMailSep::CSMailSep()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMailSep::InitAsDefaultInstance() {
}

CSMailSep::CSMailSep(const CSMailSep& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMailSep::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  hadread_ = 0;
  hadgetattach_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMailSep::~CSMailSep() {
  SharedDtor();
}

void CSMailSep::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMailSep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMailSep& CSMailSep::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSMailSep* CSMailSep::default_instance_ = NULL;

CSMailSep* CSMailSep::New() const {
  return new CSMailSep;
}

void CSMailSep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    hadread_ = 0;
    hadgetattach_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMailSep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HadRead;
        break;
      }

      // required int32 HadRead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HadRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hadread_)));
          set_has_hadread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HadGetAttach;
        break;
      }

      // required int32 HadGetAttach = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HadGetAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hadgetattach_)));
          set_has_hadgetattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMailSep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required int32 HadRead = 2;
  if (has_hadread()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hadread(), output);
  }

  // required int32 HadGetAttach = 3;
  if (has_hadgetattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hadgetattach(), output);
  }

}

int CSMailSep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required int32 HadRead = 2;
    if (has_hadread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hadread());
    }

    // required int32 HadGetAttach = 3;
    if (has_hadgetattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hadgetattach());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMailSep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMailSep*>(&from));
}

void CSMailSep::MergeFrom(const CSMailSep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_hadread()) {
      set_hadread(from.hadread());
    }
    if (from.has_hadgetattach()) {
      set_hadgetattach(from.hadgetattach());
    }
  }
}

void CSMailSep::CopyFrom(const CSMailSep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMailSep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSMailSep::Swap(CSMailSep* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(hadread_, other->hadread_);
    std::swap(hadgetattach_, other->hadgetattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMailSep::GetTypeName() const {
  return "vmsg.CSMailSep";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGrpMailBreif::kMailIDFieldNumber;
const int CSGrpMailBreif::kSenderFieldNumber;
const int CSGrpMailBreif::kMailHeadFieldNumber;
const int CSGrpMailBreif::kRemainTimeFieldNumber;
const int CSGrpMailBreif::kHasAttachFieldNumber;
const int CSGrpMailBreif::kTimeStampFieldNumber;
#endif  // !_MSC_VER

CSGrpMailBreif::CSGrpMailBreif()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGrpMailBreif::InitAsDefaultInstance() {
}

CSGrpMailBreif::CSGrpMailBreif(const CSGrpMailBreif& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGrpMailBreif::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  sender_ = GOOGLE_ULONGLONG(0);
  mailhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remaintime_ = 0;
  hasattach_ = 0;
  timestamp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGrpMailBreif::~CSGrpMailBreif() {
  SharedDtor();
}

void CSGrpMailBreif::SharedDtor() {
  if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
    delete mailhead_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGrpMailBreif::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGrpMailBreif& CSGrpMailBreif::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSGrpMailBreif* CSGrpMailBreif::default_instance_ = NULL;

CSGrpMailBreif* CSGrpMailBreif::New() const {
  return new CSGrpMailBreif;
}

void CSGrpMailBreif::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    sender_ = GOOGLE_ULONGLONG(0);
    if (has_mailhead()) {
      if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
        mailhead_->clear();
      }
    }
    remaintime_ = 0;
    hasattach_ = 0;
    timestamp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGrpMailBreif::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Sender;
        break;
      }

      // required uint64 Sender = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MailHead;
        break;
      }

      // required string MailHead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RemainTime;
        break;
      }

      // required int32 RemainTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HasAttach;
        break;
      }

      // required int32 HasAttach = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TimeStamp;
        break;
      }

      // required int32 TimeStamp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TimeStamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGrpMailBreif::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint64 Sender = 2;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sender(), output);
  }

  // required string MailHead = 3;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mailhead(), output);
  }

  // required int32 RemainTime = 4;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remaintime(), output);
  }

  // required int32 HasAttach = 5;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hasattach(), output);
  }

  // required int32 TimeStamp = 6;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->timestamp(), output);
  }

}

int CSGrpMailBreif::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint64 Sender = 2;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // required string MailHead = 3;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailhead());
    }

    // required int32 RemainTime = 4;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

    // required int32 HasAttach = 5;
    if (has_hasattach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hasattach());
    }

    // required int32 TimeStamp = 6;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timestamp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGrpMailBreif::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGrpMailBreif*>(&from));
}

void CSGrpMailBreif::MergeFrom(const CSGrpMailBreif& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_mailhead()) {
      set_mailhead(from.mailhead());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
  }
}

void CSGrpMailBreif::CopyFrom(const CSGrpMailBreif& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGrpMailBreif::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSGrpMailBreif::Swap(CSGrpMailBreif* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(sender_, other->sender_);
    std::swap(mailhead_, other->mailhead_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGrpMailBreif::GetTypeName() const {
  return "vmsg.CSGrpMailBreif";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMailBox::kGroupIDFieldNumber;
const int CSMailBox::kMailSepFieldNumber;
const int CSMailBox::kGrpMailLstFieldNumber;
#endif  // !_MSC_VER

CSMailBox::CSMailBox()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMailBox::InitAsDefaultInstance() {
}

CSMailBox::CSMailBox(const CSMailBox& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMailBox::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMailBox::~CSMailBox() {
  SharedDtor();
}

void CSMailBox::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMailBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMailBox& CSMailBox::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSMailBox* CSMailBox::default_instance_ = NULL;

CSMailBox* CSMailBox::New() const {
  return new CSMailBox;
}

void CSMailBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  mailsep_.Clear();
  grpmaillst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMailBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 GroupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MailSep;
        break;
      }

      // repeated .vmsg.CSMailSep MailSep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailSep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailsep()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MailSep;
        if (input->ExpectTag(26)) goto parse_GrpMailLst;
        break;
      }

      // repeated .vmsg.CSGrpMailBreif GrpMailLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GrpMailLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grpmaillst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GrpMailLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMailBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 GroupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // repeated .vmsg.CSMailSep MailSep = 2;
  for (int i = 0; i < this->mailsep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mailsep(i), output);
  }

  // repeated .vmsg.CSGrpMailBreif GrpMailLst = 3;
  for (int i = 0; i < this->grpmaillst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->grpmaillst(i), output);
  }

}

int CSMailBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 GroupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated .vmsg.CSMailSep MailSep = 2;
  total_size += 1 * this->mailsep_size();
  for (int i = 0; i < this->mailsep_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailsep(i));
  }

  // repeated .vmsg.CSGrpMailBreif GrpMailLst = 3;
  total_size += 1 * this->grpmaillst_size();
  for (int i = 0; i < this->grpmaillst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grpmaillst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMailBox::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMailBox*>(&from));
}

void CSMailBox::MergeFrom(const CSMailBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailsep_.MergeFrom(from.mailsep_);
  grpmaillst_.MergeFrom(from.grpmaillst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void CSMailBox::CopyFrom(const CSMailBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMailBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mailsep_size(); i++) {
    if (!this->mailsep(i).IsInitialized()) return false;
  }
  for (int i = 0; i < grpmaillst_size(); i++) {
    if (!this->grpmaillst(i).IsInitialized()) return false;
  }
  return true;
}

void CSMailBox::Swap(CSMailBox* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    mailsep_.Swap(&other->mailsep_);
    grpmaillst_.Swap(&other->grpmaillst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMailBox::GetTypeName() const {
  return "vmsg.CSMailBox";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryMailRsp::kSelfMailLstFieldNumber;
const int CSQueryMailRsp::kMailBoxFieldNumber;
#endif  // !_MSC_VER

CSQueryMailRsp::CSQueryMailRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryMailRsp::InitAsDefaultInstance() {
}

CSQueryMailRsp::CSQueryMailRsp(const CSQueryMailRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryMailRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryMailRsp::~CSQueryMailRsp() {
  SharedDtor();
}

void CSQueryMailRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryMailRsp& CSQueryMailRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryMailRsp* CSQueryMailRsp::default_instance_ = NULL;

CSQueryMailRsp* CSQueryMailRsp::New() const {
  return new CSQueryMailRsp;
}

void CSQueryMailRsp::Clear() {
  selfmaillst_.Clear();
  mailbox_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSMail SelfMailLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelfMailLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfmaillst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_SelfMailLst;
        if (input->ExpectTag(18)) goto parse_MailBox;
        break;
      }

      // repeated .vmsg.CSMailBox MailBox = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MailBox;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSMail SelfMailLst = 1;
  for (int i = 0; i < this->selfmaillst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->selfmaillst(i), output);
  }

  // repeated .vmsg.CSMailBox MailBox = 2;
  for (int i = 0; i < this->mailbox_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->mailbox(i), output);
  }

}

int CSQueryMailRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSMail SelfMailLst = 1;
  total_size += 1 * this->selfmaillst_size();
  for (int i = 0; i < this->selfmaillst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfmaillst(i));
  }

  // repeated .vmsg.CSMailBox MailBox = 2;
  total_size += 1 * this->mailbox_size();
  for (int i = 0; i < this->mailbox_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailbox(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryMailRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryMailRsp*>(&from));
}

void CSQueryMailRsp::MergeFrom(const CSQueryMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  selfmaillst_.MergeFrom(from.selfmaillst_);
  mailbox_.MergeFrom(from.mailbox_);
}

void CSQueryMailRsp::CopyFrom(const CSQueryMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryMailRsp::IsInitialized() const {

  for (int i = 0; i < selfmaillst_size(); i++) {
    if (!this->selfmaillst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mailbox_size(); i++) {
    if (!this->mailbox(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryMailRsp::Swap(CSQueryMailRsp* other) {
  if (other != this) {
    selfmaillst_.Swap(&other->selfmaillst_);
    mailbox_.Swap(&other->mailbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryMailRsp::GetTypeName() const {
  return "vmsg.CSQueryMailRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSReadMailRqst::kMailIDFieldNumber;
const int CSReadMailRqst::kGroupIDFieldNumber;
#endif  // !_MSC_VER

CSReadMailRqst::CSReadMailRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSReadMailRqst::InitAsDefaultInstance() {
}

CSReadMailRqst::CSReadMailRqst(const CSReadMailRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSReadMailRqst::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReadMailRqst::~CSReadMailRqst() {
  SharedDtor();
}

void CSReadMailRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSReadMailRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSReadMailRqst& CSReadMailRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSReadMailRqst* CSReadMailRqst::default_instance_ = NULL;

CSReadMailRqst* CSReadMailRqst::New() const {
  return new CSReadMailRqst;
}

void CSReadMailRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSReadMailRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required uint64 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReadMailRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint64 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

}

int CSReadMailRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint64 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReadMailRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSReadMailRqst*>(&from));
}

void CSReadMailRqst::MergeFrom(const CSReadMailRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void CSReadMailRqst::CopyFrom(const CSReadMailRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReadMailRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSReadMailRqst::Swap(CSReadMailRqst* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSReadMailRqst::GetTypeName() const {
  return "vmsg.CSReadMailRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSOneMail::kMailIDFieldNumber;
const int CSOneMail::kGroupIDFieldNumber;
#endif  // !_MSC_VER

CSOneMail::CSOneMail()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSOneMail::InitAsDefaultInstance() {
}

CSOneMail::CSOneMail(const CSOneMail& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSOneMail::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOneMail::~CSOneMail() {
  SharedDtor();
}

void CSOneMail::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSOneMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSOneMail& CSOneMail::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSOneMail* CSOneMail::default_instance_ = NULL;

CSOneMail* CSOneMail::New() const {
  return new CSOneMail;
}

void CSOneMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSOneMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required uint64 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOneMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint64 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

}

int CSOneMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint64 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOneMail::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSOneMail*>(&from));
}

void CSOneMail::MergeFrom(const CSOneMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void CSOneMail::CopyFrom(const CSOneMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOneMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSOneMail::Swap(CSOneMail* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSOneMail::GetTypeName() const {
  return "vmsg.CSOneMail";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetAttachRqst::kMailLstFieldNumber;
#endif  // !_MSC_VER

CSGetAttachRqst::CSGetAttachRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGetAttachRqst::InitAsDefaultInstance() {
}

CSGetAttachRqst::CSGetAttachRqst(const CSGetAttachRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetAttachRqst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetAttachRqst::~CSGetAttachRqst() {
  SharedDtor();
}

void CSGetAttachRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGetAttachRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGetAttachRqst& CSGetAttachRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSGetAttachRqst* CSGetAttachRqst::default_instance_ = NULL;

CSGetAttachRqst* CSGetAttachRqst::New() const {
  return new CSGetAttachRqst;
}

void CSGetAttachRqst::Clear() {
  maillst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGetAttachRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSOneMail MailLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maillst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MailLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetAttachRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSOneMail MailLst = 1;
  for (int i = 0; i < this->maillst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->maillst(i), output);
  }

}

int CSGetAttachRqst::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSOneMail MailLst = 1;
  total_size += 1 * this->maillst_size();
  for (int i = 0; i < this->maillst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maillst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetAttachRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGetAttachRqst*>(&from));
}

void CSGetAttachRqst::MergeFrom(const CSGetAttachRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  maillst_.MergeFrom(from.maillst_);
}

void CSGetAttachRqst::CopyFrom(const CSGetAttachRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetAttachRqst::IsInitialized() const {

  for (int i = 0; i < maillst_size(); i++) {
    if (!this->maillst(i).IsInitialized()) return false;
  }
  return true;
}

void CSGetAttachRqst::Swap(CSGetAttachRqst* other) {
  if (other != this) {
    maillst_.Swap(&other->maillst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGetAttachRqst::GetTypeName() const {
  return "vmsg.CSGetAttachRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGetAttachRsp::kMailIDLstFieldNumber;
#endif  // !_MSC_VER

CSGetAttachRsp::CSGetAttachRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGetAttachRsp::InitAsDefaultInstance() {
}

CSGetAttachRsp::CSGetAttachRsp(const CSGetAttachRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGetAttachRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGetAttachRsp::~CSGetAttachRsp() {
  SharedDtor();
}

void CSGetAttachRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGetAttachRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGetAttachRsp& CSGetAttachRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSGetAttachRsp* CSGetAttachRsp::default_instance_ = NULL;

CSGetAttachRsp* CSGetAttachRsp::New() const {
  return new CSGetAttachRsp;
}

void CSGetAttachRsp::Clear() {
  mailidlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGetAttachRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 MailIDLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MailIDLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_mailidlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_mailidlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_MailIDLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGetAttachRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 MailIDLst = 1;
  for (int i = 0; i < this->mailidlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->mailidlst(i), output);
  }

}

int CSGetAttachRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 MailIDLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mailidlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->mailidlst(i));
    }
    total_size += 1 * this->mailidlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGetAttachRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGetAttachRsp*>(&from));
}

void CSGetAttachRsp::MergeFrom(const CSGetAttachRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailidlst_.MergeFrom(from.mailidlst_);
}

void CSGetAttachRsp::CopyFrom(const CSGetAttachRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGetAttachRsp::IsInitialized() const {

  return true;
}

void CSGetAttachRsp::Swap(CSGetAttachRsp* other) {
  if (other != this) {
    mailidlst_.Swap(&other->mailidlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGetAttachRsp::GetTypeName() const {
  return "vmsg.CSGetAttachRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDeleteMailRqst::kMailIDFieldNumber;
const int CSDeleteMailRqst::kGroupIDFieldNumber;
#endif  // !_MSC_VER

CSDeleteMailRqst::CSDeleteMailRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDeleteMailRqst::InitAsDefaultInstance() {
}

CSDeleteMailRqst::CSDeleteMailRqst(const CSDeleteMailRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDeleteMailRqst::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDeleteMailRqst::~CSDeleteMailRqst() {
  SharedDtor();
}

void CSDeleteMailRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSDeleteMailRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDeleteMailRqst& CSDeleteMailRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSDeleteMailRqst* CSDeleteMailRqst::default_instance_ = NULL;

CSDeleteMailRqst* CSDeleteMailRqst::New() const {
  return new CSDeleteMailRqst;
}

void CSDeleteMailRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDeleteMailRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }

      // required uint64 GroupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDeleteMailRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required uint64 GroupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

}

int CSDeleteMailRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required uint64 GroupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDeleteMailRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDeleteMailRqst*>(&from));
}

void CSDeleteMailRqst::MergeFrom(const CSDeleteMailRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
}

void CSDeleteMailRqst::CopyFrom(const CSDeleteMailRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDeleteMailRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSDeleteMailRqst::Swap(CSDeleteMailRqst* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDeleteMailRqst::GetTypeName() const {
  return "vmsg.CSDeleteMailRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDeleteMailRsp::kMailIDFieldNumber;
#endif  // !_MSC_VER

CSDeleteMailRsp::CSDeleteMailRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDeleteMailRsp::InitAsDefaultInstance() {
}

CSDeleteMailRsp::CSDeleteMailRsp(const CSDeleteMailRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDeleteMailRsp::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDeleteMailRsp::~CSDeleteMailRsp() {
  SharedDtor();
}

void CSDeleteMailRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSDeleteMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDeleteMailRsp& CSDeleteMailRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSDeleteMailRsp* CSDeleteMailRsp::default_instance_ = NULL;

CSDeleteMailRsp* CSDeleteMailRsp::New() const {
  return new CSDeleteMailRsp;
}

void CSDeleteMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDeleteMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDeleteMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

}

int CSDeleteMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDeleteMailRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDeleteMailRsp*>(&from));
}

void CSDeleteMailRsp::MergeFrom(const CSDeleteMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
}

void CSDeleteMailRsp::CopyFrom(const CSDeleteMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDeleteMailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSDeleteMailRsp::Swap(CSDeleteMailRsp* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDeleteMailRsp::GetTypeName() const {
  return "vmsg.CSDeleteMailRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSReadMailRsp::kMailIDFieldNumber;
const int CSReadMailRsp::kMailBodyFieldNumber;
const int CSReadMailRsp::kAttachFieldNumber;
#endif  // !_MSC_VER

CSReadMailRsp::CSReadMailRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSReadMailRsp::InitAsDefaultInstance() {
}

CSReadMailRsp::CSReadMailRsp(const CSReadMailRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSReadMailRsp::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  mailbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReadMailRsp::~CSReadMailRsp() {
  SharedDtor();
}

void CSReadMailRsp::SharedDtor() {
  if (mailbody_ != &::google::protobuf::internal::kEmptyString) {
    delete mailbody_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSReadMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSReadMailRsp& CSReadMailRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSReadMailRsp* CSReadMailRsp::default_instance_ = NULL;

CSReadMailRsp* CSReadMailRsp::New() const {
  return new CSReadMailRsp;
}

void CSReadMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    if (has_mailbody()) {
      if (mailbody_ != &::google::protobuf::internal::kEmptyString) {
        mailbody_->clear();
      }
    }
  }
  attach_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSReadMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MailID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MailBody;
        break;
      }

      // required bytes MailBody = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mailbody()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Attach;
        break;
      }

      // repeated .vmsg.CSMailAttach Attach = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Attach:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attach()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Attach;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReadMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MailID = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // required bytes MailBody = 3;
  if (has_mailbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->mailbody(), output);
  }

  // repeated .vmsg.CSMailAttach Attach = 4;
  for (int i = 0; i < this->attach_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->attach(i), output);
  }

}

int CSReadMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MailID = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // required bytes MailBody = 3;
    if (has_mailbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mailbody());
    }

  }
  // repeated .vmsg.CSMailAttach Attach = 4;
  total_size += 1 * this->attach_size();
  for (int i = 0; i < this->attach_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attach(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReadMailRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSReadMailRsp*>(&from));
}

void CSReadMailRsp::MergeFrom(const CSReadMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attach_.MergeFrom(from.attach_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_mailbody()) {
      set_mailbody(from.mailbody());
    }
  }
}

void CSReadMailRsp::CopyFrom(const CSReadMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReadMailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < attach_size(); i++) {
    if (!this->attach(i).IsInitialized()) return false;
  }
  return true;
}

void CSReadMailRsp::Swap(CSReadMailRsp* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(mailbody_, other->mailbody_);
    attach_.Swap(&other->attach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSReadMailRsp::GetTypeName() const {
  return "vmsg.CSReadMailRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMailRequest::kReadMailRqstFieldNumber;
const int CSMailRequest::kGetAttachRqstFieldNumber;
const int CSMailRequest::kDeleteMailRqstFieldNumber;
#endif  // !_MSC_VER

CSMailRequest::CSMailRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMailRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  readmail_rqst_ = const_cast< ::vmsg::CSReadMailRqst*>(
      ::vmsg::CSReadMailRqst::internal_default_instance());
#else
  readmail_rqst_ = const_cast< ::vmsg::CSReadMailRqst*>(&::vmsg::CSReadMailRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getattach_rqst_ = const_cast< ::vmsg::CSGetAttachRqst*>(
      ::vmsg::CSGetAttachRqst::internal_default_instance());
#else
  getattach_rqst_ = const_cast< ::vmsg::CSGetAttachRqst*>(&::vmsg::CSGetAttachRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  deletemail_rqst_ = const_cast< ::vmsg::CSDeleteMailRqst*>(
      ::vmsg::CSDeleteMailRqst::internal_default_instance());
#else
  deletemail_rqst_ = const_cast< ::vmsg::CSDeleteMailRqst*>(&::vmsg::CSDeleteMailRqst::default_instance());
#endif
}

CSMailRequest::CSMailRequest(const CSMailRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMailRequest::SharedCtor() {
  _cached_size_ = 0;
  readmail_rqst_ = NULL;
  getattach_rqst_ = NULL;
  deletemail_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMailRequest::~CSMailRequest() {
  SharedDtor();
}

void CSMailRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete readmail_rqst_;
    delete getattach_rqst_;
    delete deletemail_rqst_;
  }
}

void CSMailRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMailRequest& CSMailRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSMailRequest* CSMailRequest::default_instance_ = NULL;

CSMailRequest* CSMailRequest::New() const {
  return new CSMailRequest;
}

void CSMailRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_readmail_rqst()) {
      if (readmail_rqst_ != NULL) readmail_rqst_->::vmsg::CSReadMailRqst::Clear();
    }
    if (has_getattach_rqst()) {
      if (getattach_rqst_ != NULL) getattach_rqst_->::vmsg::CSGetAttachRqst::Clear();
    }
    if (has_deletemail_rqst()) {
      if (deletemail_rqst_ != NULL) deletemail_rqst_->::vmsg::CSDeleteMailRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMailRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSReadMailRqst ReadMail_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readmail_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GetAttach_Rqst;
        break;
      }

      // optional .vmsg.CSGetAttachRqst GetAttach_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GetAttach_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getattach_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DeleteMail_Rqst;
        break;
      }

      // optional .vmsg.CSDeleteMailRqst DeleteMail_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeleteMail_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletemail_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMailRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSReadMailRqst ReadMail_Rqst = 1;
  if (has_readmail_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->readmail_rqst(), output);
  }

  // optional .vmsg.CSGetAttachRqst GetAttach_Rqst = 2;
  if (has_getattach_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->getattach_rqst(), output);
  }

  // optional .vmsg.CSDeleteMailRqst DeleteMail_Rqst = 3;
  if (has_deletemail_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->deletemail_rqst(), output);
  }

}

int CSMailRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSReadMailRqst ReadMail_Rqst = 1;
    if (has_readmail_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readmail_rqst());
    }

    // optional .vmsg.CSGetAttachRqst GetAttach_Rqst = 2;
    if (has_getattach_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getattach_rqst());
    }

    // optional .vmsg.CSDeleteMailRqst DeleteMail_Rqst = 3;
    if (has_deletemail_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletemail_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMailRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMailRequest*>(&from));
}

void CSMailRequest::MergeFrom(const CSMailRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_readmail_rqst()) {
      mutable_readmail_rqst()->::vmsg::CSReadMailRqst::MergeFrom(from.readmail_rqst());
    }
    if (from.has_getattach_rqst()) {
      mutable_getattach_rqst()->::vmsg::CSGetAttachRqst::MergeFrom(from.getattach_rqst());
    }
    if (from.has_deletemail_rqst()) {
      mutable_deletemail_rqst()->::vmsg::CSDeleteMailRqst::MergeFrom(from.deletemail_rqst());
    }
  }
}

void CSMailRequest::CopyFrom(const CSMailRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMailRequest::IsInitialized() const {

  if (has_readmail_rqst()) {
    if (!this->readmail_rqst().IsInitialized()) return false;
  }
  if (has_getattach_rqst()) {
    if (!this->getattach_rqst().IsInitialized()) return false;
  }
  if (has_deletemail_rqst()) {
    if (!this->deletemail_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSMailRequest::Swap(CSMailRequest* other) {
  if (other != this) {
    std::swap(readmail_rqst_, other->readmail_rqst_);
    std::swap(getattach_rqst_, other->getattach_rqst_);
    std::swap(deletemail_rqst_, other->deletemail_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMailRequest::GetTypeName() const {
  return "vmsg.CSMailRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMailRespond::kQueryMailRspFieldNumber;
const int CSMailRespond::kReadMailRspFieldNumber;
const int CSMailRespond::kGetAttachRspFieldNumber;
const int CSMailRespond::kDeleteMailRspFieldNumber;
const int CSMailRespond::kDeleteAllRspFieldNumber;
#endif  // !_MSC_VER

CSMailRespond::CSMailRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMailRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querymail_rsp_ = const_cast< ::vmsg::CSQueryMailRsp*>(
      ::vmsg::CSQueryMailRsp::internal_default_instance());
#else
  querymail_rsp_ = const_cast< ::vmsg::CSQueryMailRsp*>(&::vmsg::CSQueryMailRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  readmail_rsp_ = const_cast< ::vmsg::CSReadMailRsp*>(
      ::vmsg::CSReadMailRsp::internal_default_instance());
#else
  readmail_rsp_ = const_cast< ::vmsg::CSReadMailRsp*>(&::vmsg::CSReadMailRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getattach_rsp_ = const_cast< ::vmsg::CSGetAttachRsp*>(
      ::vmsg::CSGetAttachRsp::internal_default_instance());
#else
  getattach_rsp_ = const_cast< ::vmsg::CSGetAttachRsp*>(&::vmsg::CSGetAttachRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  deletemail_rsp_ = const_cast< ::vmsg::CSDeleteMailRsp*>(
      ::vmsg::CSDeleteMailRsp::internal_default_instance());
#else
  deletemail_rsp_ = const_cast< ::vmsg::CSDeleteMailRsp*>(&::vmsg::CSDeleteMailRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  deleteall_rsp_ = const_cast< ::vmsg::CSQueryMailRsp*>(
      ::vmsg::CSQueryMailRsp::internal_default_instance());
#else
  deleteall_rsp_ = const_cast< ::vmsg::CSQueryMailRsp*>(&::vmsg::CSQueryMailRsp::default_instance());
#endif
}

CSMailRespond::CSMailRespond(const CSMailRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMailRespond::SharedCtor() {
  _cached_size_ = 0;
  querymail_rsp_ = NULL;
  readmail_rsp_ = NULL;
  getattach_rsp_ = NULL;
  deletemail_rsp_ = NULL;
  deleteall_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMailRespond::~CSMailRespond() {
  SharedDtor();
}

void CSMailRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete querymail_rsp_;
    delete readmail_rsp_;
    delete getattach_rsp_;
    delete deletemail_rsp_;
    delete deleteall_rsp_;
  }
}

void CSMailRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMailRespond& CSMailRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSMailMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSMailMsg_2eproto();
#endif
  return *default_instance_;
}

CSMailRespond* CSMailRespond::default_instance_ = NULL;

CSMailRespond* CSMailRespond::New() const {
  return new CSMailRespond;
}

void CSMailRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_querymail_rsp()) {
      if (querymail_rsp_ != NULL) querymail_rsp_->::vmsg::CSQueryMailRsp::Clear();
    }
    if (has_readmail_rsp()) {
      if (readmail_rsp_ != NULL) readmail_rsp_->::vmsg::CSReadMailRsp::Clear();
    }
    if (has_getattach_rsp()) {
      if (getattach_rsp_ != NULL) getattach_rsp_->::vmsg::CSGetAttachRsp::Clear();
    }
    if (has_deletemail_rsp()) {
      if (deletemail_rsp_ != NULL) deletemail_rsp_->::vmsg::CSDeleteMailRsp::Clear();
    }
    if (has_deleteall_rsp()) {
      if (deleteall_rsp_ != NULL) deleteall_rsp_->::vmsg::CSQueryMailRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMailRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSQueryMailRsp QueryMail_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymail_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ReadMail_Rsp;
        break;
      }

      // optional .vmsg.CSReadMailRsp ReadMail_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReadMail_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readmail_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GetAttach_Rsp;
        break;
      }

      // optional .vmsg.CSGetAttachRsp GetAttach_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GetAttach_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getattach_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DeleteMail_Rsp;
        break;
      }

      // optional .vmsg.CSDeleteMailRsp DeleteMail_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeleteMail_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletemail_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DeleteAll_Rsp;
        break;
      }

      // optional .vmsg.CSQueryMailRsp DeleteAll_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeleteAll_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deleteall_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMailRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSQueryMailRsp QueryMail_Rsp = 1;
  if (has_querymail_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->querymail_rsp(), output);
  }

  // optional .vmsg.CSReadMailRsp ReadMail_Rsp = 2;
  if (has_readmail_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->readmail_rsp(), output);
  }

  // optional .vmsg.CSGetAttachRsp GetAttach_Rsp = 3;
  if (has_getattach_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->getattach_rsp(), output);
  }

  // optional .vmsg.CSDeleteMailRsp DeleteMail_Rsp = 4;
  if (has_deletemail_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->deletemail_rsp(), output);
  }

  // optional .vmsg.CSQueryMailRsp DeleteAll_Rsp = 5;
  if (has_deleteall_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->deleteall_rsp(), output);
  }

}

int CSMailRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSQueryMailRsp QueryMail_Rsp = 1;
    if (has_querymail_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querymail_rsp());
    }

    // optional .vmsg.CSReadMailRsp ReadMail_Rsp = 2;
    if (has_readmail_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readmail_rsp());
    }

    // optional .vmsg.CSGetAttachRsp GetAttach_Rsp = 3;
    if (has_getattach_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getattach_rsp());
    }

    // optional .vmsg.CSDeleteMailRsp DeleteMail_Rsp = 4;
    if (has_deletemail_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletemail_rsp());
    }

    // optional .vmsg.CSQueryMailRsp DeleteAll_Rsp = 5;
    if (has_deleteall_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deleteall_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMailRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMailRespond*>(&from));
}

void CSMailRespond::MergeFrom(const CSMailRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_querymail_rsp()) {
      mutable_querymail_rsp()->::vmsg::CSQueryMailRsp::MergeFrom(from.querymail_rsp());
    }
    if (from.has_readmail_rsp()) {
      mutable_readmail_rsp()->::vmsg::CSReadMailRsp::MergeFrom(from.readmail_rsp());
    }
    if (from.has_getattach_rsp()) {
      mutable_getattach_rsp()->::vmsg::CSGetAttachRsp::MergeFrom(from.getattach_rsp());
    }
    if (from.has_deletemail_rsp()) {
      mutable_deletemail_rsp()->::vmsg::CSDeleteMailRsp::MergeFrom(from.deletemail_rsp());
    }
    if (from.has_deleteall_rsp()) {
      mutable_deleteall_rsp()->::vmsg::CSQueryMailRsp::MergeFrom(from.deleteall_rsp());
    }
  }
}

void CSMailRespond::CopyFrom(const CSMailRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMailRespond::IsInitialized() const {

  if (has_querymail_rsp()) {
    if (!this->querymail_rsp().IsInitialized()) return false;
  }
  if (has_readmail_rsp()) {
    if (!this->readmail_rsp().IsInitialized()) return false;
  }
  if (has_deletemail_rsp()) {
    if (!this->deletemail_rsp().IsInitialized()) return false;
  }
  if (has_deleteall_rsp()) {
    if (!this->deleteall_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSMailRespond::Swap(CSMailRespond* other) {
  if (other != this) {
    std::swap(querymail_rsp_, other->querymail_rsp_);
    std::swap(readmail_rsp_, other->readmail_rsp_);
    std::swap(getattach_rsp_, other->getattach_rsp_);
    std::swap(deletemail_rsp_, other->deletemail_rsp_);
    std::swap(deleteall_rsp_, other->deleteall_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMailRespond::GetTypeName() const {
  return "vmsg.CSMailRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
