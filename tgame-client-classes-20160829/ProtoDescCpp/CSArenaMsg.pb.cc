// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSArenaMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSArenaMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSArenaMsg_2eproto() {
  delete CSArenaQueryRsp::default_instance_;
  delete CSArenaOneRecord::default_instance_;
  delete CSArenaQueryRecordRsp::default_instance_;
  delete CSArenaFindOpponentRsp::default_instance_;
  delete CSArenaBuyNumRsp::default_instance_;
  delete CSArenaStartFightRsp::default_instance_;
  delete CSArenaEndFightRqst::default_instance_;
  delete CSArenaEndFightRsp::default_instance_;
  delete CSArenaStroeItem::default_instance_;
  delete CSArenaStroeInfo::default_instance_;
  delete CSArenaStroeBuyRqst::default_instance_;
  delete CSArenaRequest::default_instance_;
  delete CSArenaRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSArenaMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSArenaMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSPlayerMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  CSArenaQueryRsp::default_instance_ = new CSArenaQueryRsp();
  CSArenaOneRecord::default_instance_ = new CSArenaOneRecord();
  CSArenaQueryRecordRsp::default_instance_ = new CSArenaQueryRecordRsp();
  CSArenaFindOpponentRsp::default_instance_ = new CSArenaFindOpponentRsp();
  CSArenaBuyNumRsp::default_instance_ = new CSArenaBuyNumRsp();
  CSArenaStartFightRsp::default_instance_ = new CSArenaStartFightRsp();
  CSArenaEndFightRqst::default_instance_ = new CSArenaEndFightRqst();
  CSArenaEndFightRsp::default_instance_ = new CSArenaEndFightRsp();
  CSArenaStroeItem::default_instance_ = new CSArenaStroeItem();
  CSArenaStroeInfo::default_instance_ = new CSArenaStroeInfo();
  CSArenaStroeBuyRqst::default_instance_ = new CSArenaStroeBuyRqst();
  CSArenaRequest::default_instance_ = new CSArenaRequest();
  CSArenaRespond::default_instance_ = new CSArenaRespond();
  CSArenaQueryRsp::default_instance_->InitAsDefaultInstance();
  CSArenaOneRecord::default_instance_->InitAsDefaultInstance();
  CSArenaQueryRecordRsp::default_instance_->InitAsDefaultInstance();
  CSArenaFindOpponentRsp::default_instance_->InitAsDefaultInstance();
  CSArenaBuyNumRsp::default_instance_->InitAsDefaultInstance();
  CSArenaStartFightRsp::default_instance_->InitAsDefaultInstance();
  CSArenaEndFightRqst::default_instance_->InitAsDefaultInstance();
  CSArenaEndFightRsp::default_instance_->InitAsDefaultInstance();
  CSArenaStroeItem::default_instance_->InitAsDefaultInstance();
  CSArenaStroeInfo::default_instance_->InitAsDefaultInstance();
  CSArenaStroeBuyRqst::default_instance_->InitAsDefaultInstance();
  CSArenaRequest::default_instance_->InitAsDefaultInstance();
  CSArenaRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSArenaMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSArenaMsg_2eproto_once_);
void protobuf_AddDesc_CSArenaMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSArenaMsg_2eproto_once_,
                 &protobuf_AddDesc_CSArenaMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSArenaMsg_2eproto {
  StaticDescriptorInitializer_CSArenaMsg_2eproto() {
    protobuf_AddDesc_CSArenaMsg_2eproto();
  }
} static_descriptor_initializer_CSArenaMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSArenaQueryRsp::kScoreFieldNumber;
const int CSArenaQueryRsp::kWinNumFieldNumber;
const int CSArenaQueryRsp::kLoseNumFieldNumber;
const int CSArenaQueryRsp::kTodayFightNumFieldNumber;
const int CSArenaQueryRsp::kTodayMatchNumFieldNumber;
const int CSArenaQueryRsp::kIsHaveTodayAwardFieldNumber;
const int CSArenaQueryRsp::kTodayBuyNumFieldNumber;
const int CSArenaQueryRsp::kArenaMoneyFieldNumber;
const int CSArenaQueryRsp::kArenaMaxBuyCntFieldNumber;
const int CSArenaQueryRsp::kIsFirstFightFieldNumber;
const int CSArenaQueryRsp::kRemainFightCDFieldNumber;
#endif  // !_MSC_VER

CSArenaQueryRsp::CSArenaQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaQueryRsp::InitAsDefaultInstance() {
}

CSArenaQueryRsp::CSArenaQueryRsp(const CSArenaQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  winnum_ = 0u;
  losenum_ = 0u;
  todayfightnum_ = 0u;
  todaymatchnum_ = 0u;
  ishavetodayaward_ = 0u;
  todaybuynum_ = 0u;
  arenamoney_ = 0u;
  arenamaxbuycnt_ = 0u;
  isfirstfight_ = 0u;
  remainfightcd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaQueryRsp::~CSArenaQueryRsp() {
  SharedDtor();
}

void CSArenaQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaQueryRsp& CSArenaQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaQueryRsp* CSArenaQueryRsp::default_instance_ = NULL;

CSArenaQueryRsp* CSArenaQueryRsp::New() const {
  return new CSArenaQueryRsp;
}

void CSArenaQueryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    winnum_ = 0u;
    losenum_ = 0u;
    todayfightnum_ = 0u;
    todaymatchnum_ = 0u;
    ishavetodayaward_ = 0u;
    todaybuynum_ = 0u;
    arenamoney_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arenamaxbuycnt_ = 0u;
    isfirstfight_ = 0u;
    remainfightcd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WinNum;
        break;
      }

      // required uint32 WinNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winnum_)));
          set_has_winnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LoseNum;
        break;
      }

      // required uint32 LoseNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TodayFightNum;
        break;
      }

      // required uint32 TodayFightNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayFightNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayfightnum_)));
          set_has_todayfightnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TodayMatchNum;
        break;
      }

      // required uint32 TodayMatchNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayMatchNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaymatchnum_)));
          set_has_todaymatchnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsHaveTodayAward;
        break;
      }

      // required uint32 IsHaveTodayAward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsHaveTodayAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ishavetodayaward_)));
          set_has_ishavetodayaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TodayBuyNum;
        break;
      }

      // required uint32 TodayBuyNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaybuynum_)));
          set_has_todaybuynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ArenaMoney;
        break;
      }

      // required uint32 ArenaMoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenamoney_)));
          set_has_arenamoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ArenaMaxBuyCnt;
        break;
      }

      // required uint32 ArenaMaxBuyCnt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaMaxBuyCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenamaxbuycnt_)));
          set_has_arenamaxbuycnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_IsFirstFight;
        break;
      }

      // required uint32 IsFirstFight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFirstFight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfirstfight_)));
          set_has_isfirstfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_RemainFightCD;
        break;
      }

      // required uint32 RemainFightCD = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainFightCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainfightcd_)));
          set_has_remainfightcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // required uint32 WinNum = 2;
  if (has_winnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winnum(), output);
  }

  // required uint32 LoseNum = 3;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->losenum(), output);
  }

  // required uint32 TodayFightNum = 4;
  if (has_todayfightnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->todayfightnum(), output);
  }

  // required uint32 TodayMatchNum = 5;
  if (has_todaymatchnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->todaymatchnum(), output);
  }

  // required uint32 IsHaveTodayAward = 6;
  if (has_ishavetodayaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ishavetodayaward(), output);
  }

  // required uint32 TodayBuyNum = 7;
  if (has_todaybuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->todaybuynum(), output);
  }

  // required uint32 ArenaMoney = 8;
  if (has_arenamoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->arenamoney(), output);
  }

  // required uint32 ArenaMaxBuyCnt = 9;
  if (has_arenamaxbuycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->arenamaxbuycnt(), output);
  }

  // required uint32 IsFirstFight = 10;
  if (has_isfirstfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->isfirstfight(), output);
  }

  // required uint32 RemainFightCD = 11;
  if (has_remainfightcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->remainfightcd(), output);
  }

}

int CSArenaQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 WinNum = 2;
    if (has_winnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winnum());
    }

    // required uint32 LoseNum = 3;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

    // required uint32 TodayFightNum = 4;
    if (has_todayfightnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todayfightnum());
    }

    // required uint32 TodayMatchNum = 5;
    if (has_todaymatchnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaymatchnum());
    }

    // required uint32 IsHaveTodayAward = 6;
    if (has_ishavetodayaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ishavetodayaward());
    }

    // required uint32 TodayBuyNum = 7;
    if (has_todaybuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaybuynum());
    }

    // required uint32 ArenaMoney = 8;
    if (has_arenamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenamoney());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ArenaMaxBuyCnt = 9;
    if (has_arenamaxbuycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenamaxbuycnt());
    }

    // required uint32 IsFirstFight = 10;
    if (has_isfirstfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfirstfight());
    }

    // required uint32 RemainFightCD = 11;
    if (has_remainfightcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainfightcd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaQueryRsp*>(&from));
}

void CSArenaQueryRsp::MergeFrom(const CSArenaQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_winnum()) {
      set_winnum(from.winnum());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
    if (from.has_todayfightnum()) {
      set_todayfightnum(from.todayfightnum());
    }
    if (from.has_todaymatchnum()) {
      set_todaymatchnum(from.todaymatchnum());
    }
    if (from.has_ishavetodayaward()) {
      set_ishavetodayaward(from.ishavetodayaward());
    }
    if (from.has_todaybuynum()) {
      set_todaybuynum(from.todaybuynum());
    }
    if (from.has_arenamoney()) {
      set_arenamoney(from.arenamoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arenamaxbuycnt()) {
      set_arenamaxbuycnt(from.arenamaxbuycnt());
    }
    if (from.has_isfirstfight()) {
      set_isfirstfight(from.isfirstfight());
    }
    if (from.has_remainfightcd()) {
      set_remainfightcd(from.remainfightcd());
    }
  }
}

void CSArenaQueryRsp::CopyFrom(const CSArenaQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void CSArenaQueryRsp::Swap(CSArenaQueryRsp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(winnum_, other->winnum_);
    std::swap(losenum_, other->losenum_);
    std::swap(todayfightnum_, other->todayfightnum_);
    std::swap(todaymatchnum_, other->todaymatchnum_);
    std::swap(ishavetodayaward_, other->ishavetodayaward_);
    std::swap(todaybuynum_, other->todaybuynum_);
    std::swap(arenamoney_, other->arenamoney_);
    std::swap(arenamaxbuycnt_, other->arenamaxbuycnt_);
    std::swap(isfirstfight_, other->isfirstfight_);
    std::swap(remainfightcd_, other->remainfightcd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaQueryRsp::GetTypeName() const {
  return "vmsg.CSArenaQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaOneRecord::kOpponentUinFieldNumber;
const int CSArenaOneRecord::kTimeFieldNumber;
const int CSArenaOneRecord::kIsMeWinFieldNumber;
const int CSArenaOneRecord::kIsMeChallengerFieldNumber;
const int CSArenaOneRecord::kOpponentNameFieldNumber;
const int CSArenaOneRecord::kIsFightBackFieldNumber;
const int CSArenaOneRecord::kScoreChangeFieldNumber;
const int CSArenaOneRecord::kCoinChangeFieldNumber;
#endif  // !_MSC_VER

CSArenaOneRecord::CSArenaOneRecord()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaOneRecord::InitAsDefaultInstance() {
}

CSArenaOneRecord::CSArenaOneRecord(const CSArenaOneRecord& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaOneRecord::SharedCtor() {
  _cached_size_ = 0;
  opponentuin_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  ismewin_ = 0u;
  ismechallenger_ = 0u;
  opponentname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isfightback_ = 0u;
  scorechange_ = 0;
  coinchange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaOneRecord::~CSArenaOneRecord() {
  SharedDtor();
}

void CSArenaOneRecord::SharedDtor() {
  if (opponentname_ != &::google::protobuf::internal::kEmptyString) {
    delete opponentname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaOneRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaOneRecord& CSArenaOneRecord::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaOneRecord* CSArenaOneRecord::default_instance_ = NULL;

CSArenaOneRecord* CSArenaOneRecord::New() const {
  return new CSArenaOneRecord;
}

void CSArenaOneRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opponentuin_ = GOOGLE_ULONGLONG(0);
    time_ = 0u;
    ismewin_ = 0u;
    ismechallenger_ = 0u;
    if (has_opponentname()) {
      if (opponentname_ != &::google::protobuf::internal::kEmptyString) {
        opponentname_->clear();
      }
    }
    isfightback_ = 0u;
    scorechange_ = 0;
    coinchange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaOneRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 OpponentUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opponentuin_)));
          set_has_opponentuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // required uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsMeWin;
        break;
      }

      // required uint32 IsMeWin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMeWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismewin_)));
          set_has_ismewin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsMeChallenger;
        break;
      }

      // required uint32 IsMeChallenger = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMeChallenger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismechallenger_)));
          set_has_ismechallenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OpponentName;
        break;
      }

      // required string OpponentName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpponentName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opponentname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsFightBack;
        break;
      }

      // required uint32 IsFightBack = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFightBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfightback_)));
          set_has_isfightback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ScoreChange;
        break;
      }

      // required int32 ScoreChange = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScoreChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scorechange_)));
          set_has_scorechange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CoinChange;
        break;
      }

      // required int32 CoinChange = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coinchange_)));
          set_has_coinchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaOneRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 OpponentUin = 1;
  if (has_opponentuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->opponentuin(), output);
  }

  // required uint32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 IsMeWin = 3;
  if (has_ismewin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ismewin(), output);
  }

  // required uint32 IsMeChallenger = 4;
  if (has_ismechallenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ismechallenger(), output);
  }

  // required string OpponentName = 5;
  if (has_opponentname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->opponentname(), output);
  }

  // required uint32 IsFightBack = 6;
  if (has_isfightback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isfightback(), output);
  }

  // required int32 ScoreChange = 7;
  if (has_scorechange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->scorechange(), output);
  }

  // required int32 CoinChange = 8;
  if (has_coinchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->coinchange(), output);
  }

}

int CSArenaOneRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 OpponentUin = 1;
    if (has_opponentuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opponentuin());
    }

    // required uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 IsMeWin = 3;
    if (has_ismewin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismewin());
    }

    // required uint32 IsMeChallenger = 4;
    if (has_ismechallenger()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismechallenger());
    }

    // required string OpponentName = 5;
    if (has_opponentname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opponentname());
    }

    // required uint32 IsFightBack = 6;
    if (has_isfightback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfightback());
    }

    // required int32 ScoreChange = 7;
    if (has_scorechange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scorechange());
    }

    // required int32 CoinChange = 8;
    if (has_coinchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coinchange());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaOneRecord::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaOneRecord*>(&from));
}

void CSArenaOneRecord::MergeFrom(const CSArenaOneRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opponentuin()) {
      set_opponentuin(from.opponentuin());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ismewin()) {
      set_ismewin(from.ismewin());
    }
    if (from.has_ismechallenger()) {
      set_ismechallenger(from.ismechallenger());
    }
    if (from.has_opponentname()) {
      set_opponentname(from.opponentname());
    }
    if (from.has_isfightback()) {
      set_isfightback(from.isfightback());
    }
    if (from.has_scorechange()) {
      set_scorechange(from.scorechange());
    }
    if (from.has_coinchange()) {
      set_coinchange(from.coinchange());
    }
  }
}

void CSArenaOneRecord::CopyFrom(const CSArenaOneRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaOneRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CSArenaOneRecord::Swap(CSArenaOneRecord* other) {
  if (other != this) {
    std::swap(opponentuin_, other->opponentuin_);
    std::swap(time_, other->time_);
    std::swap(ismewin_, other->ismewin_);
    std::swap(ismechallenger_, other->ismechallenger_);
    std::swap(opponentname_, other->opponentname_);
    std::swap(isfightback_, other->isfightback_);
    std::swap(scorechange_, other->scorechange_);
    std::swap(coinchange_, other->coinchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaOneRecord::GetTypeName() const {
  return "vmsg.CSArenaOneRecord";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaQueryRecordRsp::kRecordLstFieldNumber;
#endif  // !_MSC_VER

CSArenaQueryRecordRsp::CSArenaQueryRecordRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaQueryRecordRsp::InitAsDefaultInstance() {
}

CSArenaQueryRecordRsp::CSArenaQueryRecordRsp(const CSArenaQueryRecordRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaQueryRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaQueryRecordRsp::~CSArenaQueryRecordRsp() {
  SharedDtor();
}

void CSArenaQueryRecordRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaQueryRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaQueryRecordRsp& CSArenaQueryRecordRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaQueryRecordRsp* CSArenaQueryRecordRsp::default_instance_ = NULL;

CSArenaQueryRecordRsp* CSArenaQueryRecordRsp::New() const {
  return new CSArenaQueryRecordRsp;
}

void CSArenaQueryRecordRsp::Clear() {
  recordlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaQueryRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSArenaOneRecord RecordLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RecordLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_RecordLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaQueryRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSArenaOneRecord RecordLst = 1;
  for (int i = 0; i < this->recordlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->recordlst(i), output);
  }

}

int CSArenaQueryRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSArenaOneRecord RecordLst = 1;
  total_size += 1 * this->recordlst_size();
  for (int i = 0; i < this->recordlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaQueryRecordRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaQueryRecordRsp*>(&from));
}

void CSArenaQueryRecordRsp::MergeFrom(const CSArenaQueryRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordlst_.MergeFrom(from.recordlst_);
}

void CSArenaQueryRecordRsp::CopyFrom(const CSArenaQueryRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaQueryRecordRsp::IsInitialized() const {

  for (int i = 0; i < recordlst_size(); i++) {
    if (!this->recordlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSArenaQueryRecordRsp::Swap(CSArenaQueryRecordRsp* other) {
  if (other != this) {
    recordlst_.Swap(&other->recordlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaQueryRecordRsp::GetTypeName() const {
  return "vmsg.CSArenaQueryRecordRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaFindOpponentRsp::kUinFieldNumber;
const int CSArenaFindOpponentRsp::kNameFieldNumber;
const int CSArenaFindOpponentRsp::kScoreFieldNumber;
const int CSArenaFindOpponentRsp::kFightPowerFieldNumber;
const int CSArenaFindOpponentRsp::kTodayMatchNumFieldNumber;
const int CSArenaFindOpponentRsp::kShowIDFieldNumber;
const int CSArenaFindOpponentRsp::kOpponentLevelFieldNumber;
#endif  // !_MSC_VER

CSArenaFindOpponentRsp::CSArenaFindOpponentRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaFindOpponentRsp::InitAsDefaultInstance() {
}

CSArenaFindOpponentRsp::CSArenaFindOpponentRsp(const CSArenaFindOpponentRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaFindOpponentRsp::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  fightpower_ = 0u;
  todaymatchnum_ = 0u;
  showid_ = 0u;
  opponentlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaFindOpponentRsp::~CSArenaFindOpponentRsp() {
  SharedDtor();
}

void CSArenaFindOpponentRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaFindOpponentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaFindOpponentRsp& CSArenaFindOpponentRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaFindOpponentRsp* CSArenaFindOpponentRsp::default_instance_ = NULL;

CSArenaFindOpponentRsp* CSArenaFindOpponentRsp::New() const {
  return new CSArenaFindOpponentRsp;
}

void CSArenaFindOpponentRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
    fightpower_ = 0u;
    todaymatchnum_ = 0u;
    showid_ = 0u;
    opponentlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaFindOpponentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // required uint32 Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FightPower;
        break;
      }

      // required uint32 FightPower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TodayMatchNum;
        break;
      }

      // required uint32 TodayMatchNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayMatchNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaymatchnum_)));
          set_has_todaymatchnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_OpponentLevel;
        break;
      }

      // optional uint32 OpponentLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpponentLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opponentlevel_)));
          set_has_opponentlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaFindOpponentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  // required uint32 FightPower = 4;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fightpower(), output);
  }

  // required uint32 TodayMatchNum = 5;
  if (has_todaymatchnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->todaymatchnum(), output);
  }

  // required uint32 ShowID = 6;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->showid(), output);
  }

  // optional uint32 OpponentLevel = 7;
  if (has_opponentlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opponentlevel(), output);
  }

}

int CSArenaFindOpponentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 FightPower = 4;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }

    // required uint32 TodayMatchNum = 5;
    if (has_todaymatchnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaymatchnum());
    }

    // required uint32 ShowID = 6;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

    // optional uint32 OpponentLevel = 7;
    if (has_opponentlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opponentlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaFindOpponentRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaFindOpponentRsp*>(&from));
}

void CSArenaFindOpponentRsp::MergeFrom(const CSArenaFindOpponentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_todaymatchnum()) {
      set_todaymatchnum(from.todaymatchnum());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_opponentlevel()) {
      set_opponentlevel(from.opponentlevel());
    }
  }
}

void CSArenaFindOpponentRsp::CopyFrom(const CSArenaFindOpponentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaFindOpponentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSArenaFindOpponentRsp::Swap(CSArenaFindOpponentRsp* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(todaymatchnum_, other->todaymatchnum_);
    std::swap(showid_, other->showid_);
    std::swap(opponentlevel_, other->opponentlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaFindOpponentRsp::GetTypeName() const {
  return "vmsg.CSArenaFindOpponentRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaBuyNumRsp::kTodayFightNumFieldNumber;
const int CSArenaBuyNumRsp::kTodayBuyNumFieldNumber;
#endif  // !_MSC_VER

CSArenaBuyNumRsp::CSArenaBuyNumRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaBuyNumRsp::InitAsDefaultInstance() {
}

CSArenaBuyNumRsp::CSArenaBuyNumRsp(const CSArenaBuyNumRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaBuyNumRsp::SharedCtor() {
  _cached_size_ = 0;
  todayfightnum_ = 0u;
  todaybuynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaBuyNumRsp::~CSArenaBuyNumRsp() {
  SharedDtor();
}

void CSArenaBuyNumRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaBuyNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaBuyNumRsp& CSArenaBuyNumRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaBuyNumRsp* CSArenaBuyNumRsp::default_instance_ = NULL;

CSArenaBuyNumRsp* CSArenaBuyNumRsp::New() const {
  return new CSArenaBuyNumRsp;
}

void CSArenaBuyNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    todayfightnum_ = 0u;
    todaybuynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaBuyNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TodayFightNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayfightnum_)));
          set_has_todayfightnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TodayBuyNum;
        break;
      }

      // required uint32 TodayBuyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaybuynum_)));
          set_has_todaybuynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaBuyNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TodayFightNum = 1;
  if (has_todayfightnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->todayfightnum(), output);
  }

  // required uint32 TodayBuyNum = 2;
  if (has_todaybuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todaybuynum(), output);
  }

}

int CSArenaBuyNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TodayFightNum = 1;
    if (has_todayfightnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todayfightnum());
    }

    // required uint32 TodayBuyNum = 2;
    if (has_todaybuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaybuynum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaBuyNumRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaBuyNumRsp*>(&from));
}

void CSArenaBuyNumRsp::MergeFrom(const CSArenaBuyNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_todayfightnum()) {
      set_todayfightnum(from.todayfightnum());
    }
    if (from.has_todaybuynum()) {
      set_todaybuynum(from.todaybuynum());
    }
  }
}

void CSArenaBuyNumRsp::CopyFrom(const CSArenaBuyNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaBuyNumRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSArenaBuyNumRsp::Swap(CSArenaBuyNumRsp* other) {
  if (other != this) {
    std::swap(todayfightnum_, other->todayfightnum_);
    std::swap(todaybuynum_, other->todaybuynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaBuyNumRsp::GetTypeName() const {
  return "vmsg.CSArenaBuyNumRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaStartFightRsp::kMyDetailFieldNumber;
const int CSArenaStartFightRsp::kOpponentDetailFieldNumber;
#endif  // !_MSC_VER

CSArenaStartFightRsp::CSArenaStartFightRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaStartFightRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mydetail_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(
      ::vmsg::CSPlayerDetailInfo::internal_default_instance());
#else
  mydetail_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(&::vmsg::CSPlayerDetailInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  opponentdetail_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(
      ::vmsg::CSPlayerDetailInfo::internal_default_instance());
#else
  opponentdetail_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(&::vmsg::CSPlayerDetailInfo::default_instance());
#endif
}

CSArenaStartFightRsp::CSArenaStartFightRsp(const CSArenaStartFightRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaStartFightRsp::SharedCtor() {
  _cached_size_ = 0;
  mydetail_ = NULL;
  opponentdetail_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaStartFightRsp::~CSArenaStartFightRsp() {
  SharedDtor();
}

void CSArenaStartFightRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mydetail_;
    delete opponentdetail_;
  }
}

void CSArenaStartFightRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaStartFightRsp& CSArenaStartFightRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaStartFightRsp* CSArenaStartFightRsp::default_instance_ = NULL;

CSArenaStartFightRsp* CSArenaStartFightRsp::New() const {
  return new CSArenaStartFightRsp;
}

void CSArenaStartFightRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mydetail()) {
      if (mydetail_ != NULL) mydetail_->::vmsg::CSPlayerDetailInfo::Clear();
    }
    if (has_opponentdetail()) {
      if (opponentdetail_ != NULL) opponentdetail_->::vmsg::CSPlayerDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaStartFightRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerDetailInfo MyDetail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mydetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OpponentDetail;
        break;
      }

      // required .vmsg.CSPlayerDetailInfo OpponentDetail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpponentDetail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_opponentdetail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaStartFightRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerDetailInfo MyDetail = 1;
  if (has_mydetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mydetail(), output);
  }

  // required .vmsg.CSPlayerDetailInfo OpponentDetail = 2;
  if (has_opponentdetail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->opponentdetail(), output);
  }

}

int CSArenaStartFightRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerDetailInfo MyDetail = 1;
    if (has_mydetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mydetail());
    }

    // required .vmsg.CSPlayerDetailInfo OpponentDetail = 2;
    if (has_opponentdetail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->opponentdetail());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaStartFightRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaStartFightRsp*>(&from));
}

void CSArenaStartFightRsp::MergeFrom(const CSArenaStartFightRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mydetail()) {
      mutable_mydetail()->::vmsg::CSPlayerDetailInfo::MergeFrom(from.mydetail());
    }
    if (from.has_opponentdetail()) {
      mutable_opponentdetail()->::vmsg::CSPlayerDetailInfo::MergeFrom(from.opponentdetail());
    }
  }
}

void CSArenaStartFightRsp::CopyFrom(const CSArenaStartFightRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaStartFightRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_mydetail()) {
    if (!this->mydetail().IsInitialized()) return false;
  }
  if (has_opponentdetail()) {
    if (!this->opponentdetail().IsInitialized()) return false;
  }
  return true;
}

void CSArenaStartFightRsp::Swap(CSArenaStartFightRsp* other) {
  if (other != this) {
    std::swap(mydetail_, other->mydetail_);
    std::swap(opponentdetail_, other->opponentdetail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaStartFightRsp::GetTypeName() const {
  return "vmsg.CSArenaStartFightRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaEndFightRqst::kOpponentUinFieldNumber;
const int CSArenaEndFightRqst::kIsMyWinFieldNumber;
const int CSArenaEndFightRqst::kIsFightBackFieldNumber;
const int CSArenaEndFightRqst::kRecordTimeFieldNumber;
#endif  // !_MSC_VER

CSArenaEndFightRqst::CSArenaEndFightRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaEndFightRqst::InitAsDefaultInstance() {
}

CSArenaEndFightRqst::CSArenaEndFightRqst(const CSArenaEndFightRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaEndFightRqst::SharedCtor() {
  _cached_size_ = 0;
  opponentuin_ = GOOGLE_ULONGLONG(0);
  ismywin_ = 0u;
  isfightback_ = 0u;
  recordtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaEndFightRqst::~CSArenaEndFightRqst() {
  SharedDtor();
}

void CSArenaEndFightRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaEndFightRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaEndFightRqst& CSArenaEndFightRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaEndFightRqst* CSArenaEndFightRqst::default_instance_ = NULL;

CSArenaEndFightRqst* CSArenaEndFightRqst::New() const {
  return new CSArenaEndFightRqst;
}

void CSArenaEndFightRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    opponentuin_ = GOOGLE_ULONGLONG(0);
    ismywin_ = 0u;
    isfightback_ = 0u;
    recordtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaEndFightRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 OpponentUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opponentuin_)));
          set_has_opponentuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsMyWin;
        break;
      }

      // required uint32 IsMyWin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsMyWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ismywin_)));
          set_has_ismywin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsFightBack;
        break;
      }

      // required uint32 IsFightBack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFightBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfightback_)));
          set_has_isfightback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RecordTime;
        break;
      }

      // required uint32 RecordTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaEndFightRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 OpponentUin = 1;
  if (has_opponentuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->opponentuin(), output);
  }

  // required uint32 IsMyWin = 2;
  if (has_ismywin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ismywin(), output);
  }

  // required uint32 IsFightBack = 3;
  if (has_isfightback()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isfightback(), output);
  }

  // required uint32 RecordTime = 4;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->recordtime(), output);
  }

}

int CSArenaEndFightRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 OpponentUin = 1;
    if (has_opponentuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opponentuin());
    }

    // required uint32 IsMyWin = 2;
    if (has_ismywin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ismywin());
    }

    // required uint32 IsFightBack = 3;
    if (has_isfightback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfightback());
    }

    // required uint32 RecordTime = 4;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordtime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaEndFightRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaEndFightRqst*>(&from));
}

void CSArenaEndFightRqst::MergeFrom(const CSArenaEndFightRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_opponentuin()) {
      set_opponentuin(from.opponentuin());
    }
    if (from.has_ismywin()) {
      set_ismywin(from.ismywin());
    }
    if (from.has_isfightback()) {
      set_isfightback(from.isfightback());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
  }
}

void CSArenaEndFightRqst::CopyFrom(const CSArenaEndFightRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaEndFightRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSArenaEndFightRqst::Swap(CSArenaEndFightRqst* other) {
  if (other != this) {
    std::swap(opponentuin_, other->opponentuin_);
    std::swap(ismywin_, other->ismywin_);
    std::swap(isfightback_, other->isfightback_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaEndFightRqst::GetTypeName() const {
  return "vmsg.CSArenaEndFightRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaEndFightRsp::kCoinChangeFieldNumber;
const int CSArenaEndFightRsp::kArenaMoneyChangeFieldNumber;
#endif  // !_MSC_VER

CSArenaEndFightRsp::CSArenaEndFightRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaEndFightRsp::InitAsDefaultInstance() {
}

CSArenaEndFightRsp::CSArenaEndFightRsp(const CSArenaEndFightRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaEndFightRsp::SharedCtor() {
  _cached_size_ = 0;
  coinchange_ = 0;
  arenamoneychange_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaEndFightRsp::~CSArenaEndFightRsp() {
  SharedDtor();
}

void CSArenaEndFightRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaEndFightRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaEndFightRsp& CSArenaEndFightRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaEndFightRsp* CSArenaEndFightRsp::default_instance_ = NULL;

CSArenaEndFightRsp* CSArenaEndFightRsp::New() const {
  return new CSArenaEndFightRsp;
}

void CSArenaEndFightRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coinchange_ = 0;
    arenamoneychange_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaEndFightRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CoinChange = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coinchange_)));
          set_has_coinchange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ArenaMoneyChange;
        break;
      }

      // required int32 ArenaMoneyChange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaMoneyChange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arenamoneychange_)));
          set_has_arenamoneychange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaEndFightRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CoinChange = 1;
  if (has_coinchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coinchange(), output);
  }

  // required int32 ArenaMoneyChange = 2;
  if (has_arenamoneychange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->arenamoneychange(), output);
  }

}

int CSArenaEndFightRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CoinChange = 1;
    if (has_coinchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coinchange());
    }

    // required int32 ArenaMoneyChange = 2;
    if (has_arenamoneychange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arenamoneychange());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaEndFightRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaEndFightRsp*>(&from));
}

void CSArenaEndFightRsp::MergeFrom(const CSArenaEndFightRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coinchange()) {
      set_coinchange(from.coinchange());
    }
    if (from.has_arenamoneychange()) {
      set_arenamoneychange(from.arenamoneychange());
    }
  }
}

void CSArenaEndFightRsp::CopyFrom(const CSArenaEndFightRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaEndFightRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSArenaEndFightRsp::Swap(CSArenaEndFightRsp* other) {
  if (other != this) {
    std::swap(coinchange_, other->coinchange_);
    std::swap(arenamoneychange_, other->arenamoneychange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaEndFightRsp::GetTypeName() const {
  return "vmsg.CSArenaEndFightRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaStroeItem::kItemTypeFieldNumber;
const int CSArenaStroeItem::kItemIDFieldNumber;
const int CSArenaStroeItem::kItemCntFieldNumber;
const int CSArenaStroeItem::kItemBoughtFieldNumber;
const int CSArenaStroeItem::kArenaMoneyFieldNumber;
#endif  // !_MSC_VER

CSArenaStroeItem::CSArenaStroeItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaStroeItem::InitAsDefaultInstance() {
}

CSArenaStroeItem::CSArenaStroeItem(const CSArenaStroeItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaStroeItem::SharedCtor() {
  _cached_size_ = 0;
  itemtype_ = 0u;
  itemid_ = 0u;
  itemcnt_ = 0u;
  itembought_ = 0u;
  arenamoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaStroeItem::~CSArenaStroeItem() {
  SharedDtor();
}

void CSArenaStroeItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaStroeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaStroeItem& CSArenaStroeItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaStroeItem* CSArenaStroeItem::default_instance_ = NULL;

CSArenaStroeItem* CSArenaStroeItem::New() const {
  return new CSArenaStroeItem;
}

void CSArenaStroeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemtype_ = 0u;
    itemid_ = 0u;
    itemcnt_ = 0u;
    itembought_ = 0u;
    arenamoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaStroeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }

      // required uint32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemCnt;
        break;
      }

      // required uint32 ItemCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcnt_)));
          set_has_itemcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ItemBought;
        break;
      }

      // required uint32 ItemBought = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemBought:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itembought_)));
          set_has_itembought();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ArenaMoney;
        break;
      }

      // required uint32 ArenaMoney = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenamoney_)));
          set_has_arenamoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaStroeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemType = 1;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemtype(), output);
  }

  // required uint32 ItemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // required uint32 ItemCnt = 3;
  if (has_itemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcnt(), output);
  }

  // required uint32 ItemBought = 4;
  if (has_itembought()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itembought(), output);
  }

  // required uint32 ArenaMoney = 5;
  if (has_arenamoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->arenamoney(), output);
  }

}

int CSArenaStroeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemType = 1;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

    // required uint32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 ItemCnt = 3;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcnt());
    }

    // required uint32 ItemBought = 4;
    if (has_itembought()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itembought());
    }

    // required uint32 ArenaMoney = 5;
    if (has_arenamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenamoney());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaStroeItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaStroeItem*>(&from));
}

void CSArenaStroeItem::MergeFrom(const CSArenaStroeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcnt()) {
      set_itemcnt(from.itemcnt());
    }
    if (from.has_itembought()) {
      set_itembought(from.itembought());
    }
    if (from.has_arenamoney()) {
      set_arenamoney(from.arenamoney());
    }
  }
}

void CSArenaStroeItem::CopyFrom(const CSArenaStroeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaStroeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSArenaStroeItem::Swap(CSArenaStroeItem* other) {
  if (other != this) {
    std::swap(itemtype_, other->itemtype_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(itembought_, other->itembought_);
    std::swap(arenamoney_, other->arenamoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaStroeItem::GetTypeName() const {
  return "vmsg.CSArenaStroeItem";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaStroeInfo::kArenaMoneyFieldNumber;
const int CSArenaStroeInfo::kLastRefreshTimeFieldNumber;
const int CSArenaStroeInfo::kItemLstFieldNumber;
const int CSArenaStroeInfo::kBagInfoFieldNumber;
const int CSArenaStroeInfo::kMaxRefreshCntFieldNumber;
const int CSArenaStroeInfo::kRefreshCntFieldNumber;
#endif  // !_MSC_VER

CSArenaStroeInfo::CSArenaStroeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaStroeInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSArenaStroeInfo::CSArenaStroeInfo(const CSArenaStroeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaStroeInfo::SharedCtor() {
  _cached_size_ = 0;
  arenamoney_ = 0u;
  lastrefreshtime_ = 0u;
  baginfo_ = NULL;
  maxrefreshcnt_ = 0u;
  refreshcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaStroeInfo::~CSArenaStroeInfo() {
  SharedDtor();
}

void CSArenaStroeInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSArenaStroeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaStroeInfo& CSArenaStroeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaStroeInfo* CSArenaStroeInfo::default_instance_ = NULL;

CSArenaStroeInfo* CSArenaStroeInfo::New() const {
  return new CSArenaStroeInfo;
}

void CSArenaStroeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    arenamoney_ = 0u;
    lastrefreshtime_ = 0u;
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    maxrefreshcnt_ = 0u;
    refreshcnt_ = 0u;
  }
  itemlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaStroeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ArenaMoney = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenamoney_)));
          set_has_arenamoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LastRefreshTime;
        break;
      }

      // required uint32 LastRefreshTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastrefreshtime_)));
          set_has_lastrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemLst;
        break;
      }

      // repeated .vmsg.CSArenaStroeItem ItemLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemLst;
        if (input->ExpectTag(34)) goto parse_BagInfo;
        break;
      }

      // required .vmsg.CSBagInfo BagInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_MaxRefreshCnt;
        break;
      }

      // required uint32 MaxRefreshCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxRefreshCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxrefreshcnt_)));
          set_has_maxrefreshcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RefreshCnt;
        break;
      }

      // required uint32 RefreshCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefreshCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshcnt_)));
          set_has_refreshcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaStroeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ArenaMoney = 1;
  if (has_arenamoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->arenamoney(), output);
  }

  // required uint32 LastRefreshTime = 2;
  if (has_lastrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lastrefreshtime(), output);
  }

  // repeated .vmsg.CSArenaStroeItem ItemLst = 3;
  for (int i = 0; i < this->itemlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->itemlst(i), output);
  }

  // required .vmsg.CSBagInfo BagInfo = 4;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->baginfo(), output);
  }

  // required uint32 MaxRefreshCnt = 5;
  if (has_maxrefreshcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxrefreshcnt(), output);
  }

  // required uint32 RefreshCnt = 6;
  if (has_refreshcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->refreshcnt(), output);
  }

}

int CSArenaStroeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ArenaMoney = 1;
    if (has_arenamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenamoney());
    }

    // required uint32 LastRefreshTime = 2;
    if (has_lastrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastrefreshtime());
    }

    // required .vmsg.CSBagInfo BagInfo = 4;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required uint32 MaxRefreshCnt = 5;
    if (has_maxrefreshcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxrefreshcnt());
    }

    // required uint32 RefreshCnt = 6;
    if (has_refreshcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshcnt());
    }

  }
  // repeated .vmsg.CSArenaStroeItem ItemLst = 3;
  total_size += 1 * this->itemlst_size();
  for (int i = 0; i < this->itemlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaStroeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaStroeInfo*>(&from));
}

void CSArenaStroeInfo::MergeFrom(const CSArenaStroeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlst_.MergeFrom(from.itemlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arenamoney()) {
      set_arenamoney(from.arenamoney());
    }
    if (from.has_lastrefreshtime()) {
      set_lastrefreshtime(from.lastrefreshtime());
    }
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_maxrefreshcnt()) {
      set_maxrefreshcnt(from.maxrefreshcnt());
    }
    if (from.has_refreshcnt()) {
      set_refreshcnt(from.refreshcnt());
    }
  }
}

void CSArenaStroeInfo::CopyFrom(const CSArenaStroeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaStroeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  for (int i = 0; i < itemlst_size(); i++) {
    if (!this->itemlst(i).IsInitialized()) return false;
  }
  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  return true;
}

void CSArenaStroeInfo::Swap(CSArenaStroeInfo* other) {
  if (other != this) {
    std::swap(arenamoney_, other->arenamoney_);
    std::swap(lastrefreshtime_, other->lastrefreshtime_);
    itemlst_.Swap(&other->itemlst_);
    std::swap(baginfo_, other->baginfo_);
    std::swap(maxrefreshcnt_, other->maxrefreshcnt_);
    std::swap(refreshcnt_, other->refreshcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaStroeInfo::GetTypeName() const {
  return "vmsg.CSArenaStroeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaStroeBuyRqst::kItemIdxFieldNumber;
const int CSArenaStroeBuyRqst::kItemCfgIDFieldNumber;
#endif  // !_MSC_VER

CSArenaStroeBuyRqst::CSArenaStroeBuyRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaStroeBuyRqst::InitAsDefaultInstance() {
}

CSArenaStroeBuyRqst::CSArenaStroeBuyRqst(const CSArenaStroeBuyRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaStroeBuyRqst::SharedCtor() {
  _cached_size_ = 0;
  itemidx_ = 0u;
  itemcfgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaStroeBuyRqst::~CSArenaStroeBuyRqst() {
  SharedDtor();
}

void CSArenaStroeBuyRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSArenaStroeBuyRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaStroeBuyRqst& CSArenaStroeBuyRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaStroeBuyRqst* CSArenaStroeBuyRqst::default_instance_ = NULL;

CSArenaStroeBuyRqst* CSArenaStroeBuyRqst::New() const {
  return new CSArenaStroeBuyRqst;
}

void CSArenaStroeBuyRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemidx_ = 0u;
    itemcfgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaStroeBuyRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemidx_)));
          set_has_itemidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemCfgID;
        break;
      }

      // required uint32 ItemCfgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcfgid_)));
          set_has_itemcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaStroeBuyRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemIdx = 1;
  if (has_itemidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemidx(), output);
  }

  // required uint32 ItemCfgID = 2;
  if (has_itemcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcfgid(), output);
  }

}

int CSArenaStroeBuyRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemIdx = 1;
    if (has_itemidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemidx());
    }

    // required uint32 ItemCfgID = 2;
    if (has_itemcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcfgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaStroeBuyRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaStroeBuyRqst*>(&from));
}

void CSArenaStroeBuyRqst::MergeFrom(const CSArenaStroeBuyRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemidx()) {
      set_itemidx(from.itemidx());
    }
    if (from.has_itemcfgid()) {
      set_itemcfgid(from.itemcfgid());
    }
  }
}

void CSArenaStroeBuyRqst::CopyFrom(const CSArenaStroeBuyRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaStroeBuyRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSArenaStroeBuyRqst::Swap(CSArenaStroeBuyRqst* other) {
  if (other != this) {
    std::swap(itemidx_, other->itemidx_);
    std::swap(itemcfgid_, other->itemcfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaStroeBuyRqst::GetTypeName() const {
  return "vmsg.CSArenaStroeBuyRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaRequest::kStartFightUinRqstFieldNumber;
const int CSArenaRequest::kEndFightUinRqstFieldNumber;
const int CSArenaRequest::kArenaStoreBuyRqstFieldNumber;
const int CSArenaRequest::kOpponentUinRqstFieldNumber;
#endif  // !_MSC_VER

CSArenaRequest::CSArenaRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endfightuin_rqst_ = const_cast< ::vmsg::CSArenaEndFightRqst*>(
      ::vmsg::CSArenaEndFightRqst::internal_default_instance());
#else
  endfightuin_rqst_ = const_cast< ::vmsg::CSArenaEndFightRqst*>(&::vmsg::CSArenaEndFightRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arenastorebuy_rqst_ = const_cast< ::vmsg::CSArenaStroeBuyRqst*>(
      ::vmsg::CSArenaStroeBuyRqst::internal_default_instance());
#else
  arenastorebuy_rqst_ = const_cast< ::vmsg::CSArenaStroeBuyRqst*>(&::vmsg::CSArenaStroeBuyRqst::default_instance());
#endif
}

CSArenaRequest::CSArenaRequest(const CSArenaRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaRequest::SharedCtor() {
  _cached_size_ = 0;
  startfightuin_rqst_ = GOOGLE_ULONGLONG(0);
  endfightuin_rqst_ = NULL;
  arenastorebuy_rqst_ = NULL;
  opponentuin_rqst_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaRequest::~CSArenaRequest() {
  SharedDtor();
}

void CSArenaRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete endfightuin_rqst_;
    delete arenastorebuy_rqst_;
  }
}

void CSArenaRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaRequest& CSArenaRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaRequest* CSArenaRequest::default_instance_ = NULL;

CSArenaRequest* CSArenaRequest::New() const {
  return new CSArenaRequest;
}

void CSArenaRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startfightuin_rqst_ = GOOGLE_ULONGLONG(0);
    if (has_endfightuin_rqst()) {
      if (endfightuin_rqst_ != NULL) endfightuin_rqst_->::vmsg::CSArenaEndFightRqst::Clear();
    }
    if (has_arenastorebuy_rqst()) {
      if (arenastorebuy_rqst_ != NULL) arenastorebuy_rqst_->::vmsg::CSArenaStroeBuyRqst::Clear();
    }
    opponentuin_rqst_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 StartFightUin_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startfightuin_rqst_)));
          set_has_startfightuin_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EndFightUin_Rqst;
        break;
      }

      // optional .vmsg.CSArenaEndFightRqst EndFightUin_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndFightUin_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endfightuin_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ArenaStoreBuy_Rqst;
        break;
      }

      // optional .vmsg.CSArenaStroeBuyRqst ArenaStoreBuy_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ArenaStoreBuy_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenastorebuy_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OpponentUin_Rqst;
        break;
      }

      // optional uint64 OpponentUin_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpponentUin_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opponentuin_rqst_)));
          set_has_opponentuin_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 StartFightUin_Rqst = 1;
  if (has_startfightuin_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->startfightuin_rqst(), output);
  }

  // optional .vmsg.CSArenaEndFightRqst EndFightUin_Rqst = 2;
  if (has_endfightuin_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->endfightuin_rqst(), output);
  }

  // optional .vmsg.CSArenaStroeBuyRqst ArenaStoreBuy_Rqst = 3;
  if (has_arenastorebuy_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->arenastorebuy_rqst(), output);
  }

  // optional uint64 OpponentUin_Rqst = 4;
  if (has_opponentuin_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->opponentuin_rqst(), output);
  }

}

int CSArenaRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 StartFightUin_Rqst = 1;
    if (has_startfightuin_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->startfightuin_rqst());
    }

    // optional .vmsg.CSArenaEndFightRqst EndFightUin_Rqst = 2;
    if (has_endfightuin_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endfightuin_rqst());
    }

    // optional .vmsg.CSArenaStroeBuyRqst ArenaStoreBuy_Rqst = 3;
    if (has_arenastorebuy_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenastorebuy_rqst());
    }

    // optional uint64 OpponentUin_Rqst = 4;
    if (has_opponentuin_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opponentuin_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaRequest*>(&from));
}

void CSArenaRequest::MergeFrom(const CSArenaRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startfightuin_rqst()) {
      set_startfightuin_rqst(from.startfightuin_rqst());
    }
    if (from.has_endfightuin_rqst()) {
      mutable_endfightuin_rqst()->::vmsg::CSArenaEndFightRqst::MergeFrom(from.endfightuin_rqst());
    }
    if (from.has_arenastorebuy_rqst()) {
      mutable_arenastorebuy_rqst()->::vmsg::CSArenaStroeBuyRqst::MergeFrom(from.arenastorebuy_rqst());
    }
    if (from.has_opponentuin_rqst()) {
      set_opponentuin_rqst(from.opponentuin_rqst());
    }
  }
}

void CSArenaRequest::CopyFrom(const CSArenaRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaRequest::IsInitialized() const {

  if (has_endfightuin_rqst()) {
    if (!this->endfightuin_rqst().IsInitialized()) return false;
  }
  if (has_arenastorebuy_rqst()) {
    if (!this->arenastorebuy_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSArenaRequest::Swap(CSArenaRequest* other) {
  if (other != this) {
    std::swap(startfightuin_rqst_, other->startfightuin_rqst_);
    std::swap(endfightuin_rqst_, other->endfightuin_rqst_);
    std::swap(arenastorebuy_rqst_, other->arenastorebuy_rqst_);
    std::swap(opponentuin_rqst_, other->opponentuin_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaRequest::GetTypeName() const {
  return "vmsg.CSArenaRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSArenaRespond::kArenaQueryRspFieldNumber;
const int CSArenaRespond::kRecordRspFieldNumber;
const int CSArenaRespond::kFindOpponentRspFieldNumber;
const int CSArenaRespond::kGetAwardRspFieldNumber;
const int CSArenaRespond::kBuyNumRspFieldNumber;
const int CSArenaRespond::kStartFightRspFieldNumber;
const int CSArenaRespond::kEndFightRspFieldNumber;
const int CSArenaRespond::kStoreQueryRspFieldNumber;
const int CSArenaRespond::kStoreBuyRspFieldNumber;
const int CSArenaRespond::kStoreRefreshRspFieldNumber;
#endif  // !_MSC_VER

CSArenaRespond::CSArenaRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSArenaRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arenaquery_rsp_ = const_cast< ::vmsg::CSArenaQueryRsp*>(
      ::vmsg::CSArenaQueryRsp::internal_default_instance());
#else
  arenaquery_rsp_ = const_cast< ::vmsg::CSArenaQueryRsp*>(&::vmsg::CSArenaQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  record_rsp_ = const_cast< ::vmsg::CSArenaQueryRecordRsp*>(
      ::vmsg::CSArenaQueryRecordRsp::internal_default_instance());
#else
  record_rsp_ = const_cast< ::vmsg::CSArenaQueryRecordRsp*>(&::vmsg::CSArenaQueryRecordRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  findopponent_rsp_ = const_cast< ::vmsg::CSArenaFindOpponentRsp*>(
      ::vmsg::CSArenaFindOpponentRsp::internal_default_instance());
#else
  findopponent_rsp_ = const_cast< ::vmsg::CSArenaFindOpponentRsp*>(&::vmsg::CSArenaFindOpponentRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buynum_rsp_ = const_cast< ::vmsg::CSArenaBuyNumRsp*>(
      ::vmsg::CSArenaBuyNumRsp::internal_default_instance());
#else
  buynum_rsp_ = const_cast< ::vmsg::CSArenaBuyNumRsp*>(&::vmsg::CSArenaBuyNumRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  startfight_rsp_ = const_cast< ::vmsg::CSArenaStartFightRsp*>(
      ::vmsg::CSArenaStartFightRsp::internal_default_instance());
#else
  startfight_rsp_ = const_cast< ::vmsg::CSArenaStartFightRsp*>(&::vmsg::CSArenaStartFightRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endfight_rsp_ = const_cast< ::vmsg::CSArenaEndFightRsp*>(
      ::vmsg::CSArenaEndFightRsp::internal_default_instance());
#else
  endfight_rsp_ = const_cast< ::vmsg::CSArenaEndFightRsp*>(&::vmsg::CSArenaEndFightRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storequery_rsp_ = const_cast< ::vmsg::CSArenaStroeInfo*>(
      ::vmsg::CSArenaStroeInfo::internal_default_instance());
#else
  storequery_rsp_ = const_cast< ::vmsg::CSArenaStroeInfo*>(&::vmsg::CSArenaStroeInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storebuy_rsp_ = const_cast< ::vmsg::CSArenaStroeInfo*>(
      ::vmsg::CSArenaStroeInfo::internal_default_instance());
#else
  storebuy_rsp_ = const_cast< ::vmsg::CSArenaStroeInfo*>(&::vmsg::CSArenaStroeInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storerefresh_rsp_ = const_cast< ::vmsg::CSArenaStroeInfo*>(
      ::vmsg::CSArenaStroeInfo::internal_default_instance());
#else
  storerefresh_rsp_ = const_cast< ::vmsg::CSArenaStroeInfo*>(&::vmsg::CSArenaStroeInfo::default_instance());
#endif
}

CSArenaRespond::CSArenaRespond(const CSArenaRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSArenaRespond::SharedCtor() {
  _cached_size_ = 0;
  arenaquery_rsp_ = NULL;
  record_rsp_ = NULL;
  findopponent_rsp_ = NULL;
  getaward_rsp_ = 0u;
  buynum_rsp_ = NULL;
  startfight_rsp_ = NULL;
  endfight_rsp_ = NULL;
  storequery_rsp_ = NULL;
  storebuy_rsp_ = NULL;
  storerefresh_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSArenaRespond::~CSArenaRespond() {
  SharedDtor();
}

void CSArenaRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete arenaquery_rsp_;
    delete record_rsp_;
    delete findopponent_rsp_;
    delete buynum_rsp_;
    delete startfight_rsp_;
    delete endfight_rsp_;
    delete storequery_rsp_;
    delete storebuy_rsp_;
    delete storerefresh_rsp_;
  }
}

void CSArenaRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSArenaRespond& CSArenaRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSArenaMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSArenaMsg_2eproto();
#endif
  return *default_instance_;
}

CSArenaRespond* CSArenaRespond::default_instance_ = NULL;

CSArenaRespond* CSArenaRespond::New() const {
  return new CSArenaRespond;
}

void CSArenaRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_arenaquery_rsp()) {
      if (arenaquery_rsp_ != NULL) arenaquery_rsp_->::vmsg::CSArenaQueryRsp::Clear();
    }
    if (has_record_rsp()) {
      if (record_rsp_ != NULL) record_rsp_->::vmsg::CSArenaQueryRecordRsp::Clear();
    }
    if (has_findopponent_rsp()) {
      if (findopponent_rsp_ != NULL) findopponent_rsp_->::vmsg::CSArenaFindOpponentRsp::Clear();
    }
    getaward_rsp_ = 0u;
    if (has_buynum_rsp()) {
      if (buynum_rsp_ != NULL) buynum_rsp_->::vmsg::CSArenaBuyNumRsp::Clear();
    }
    if (has_startfight_rsp()) {
      if (startfight_rsp_ != NULL) startfight_rsp_->::vmsg::CSArenaStartFightRsp::Clear();
    }
    if (has_endfight_rsp()) {
      if (endfight_rsp_ != NULL) endfight_rsp_->::vmsg::CSArenaEndFightRsp::Clear();
    }
    if (has_storequery_rsp()) {
      if (storequery_rsp_ != NULL) storequery_rsp_->::vmsg::CSArenaStroeInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_storebuy_rsp()) {
      if (storebuy_rsp_ != NULL) storebuy_rsp_->::vmsg::CSArenaStroeInfo::Clear();
    }
    if (has_storerefresh_rsp()) {
      if (storerefresh_rsp_ != NULL) storerefresh_rsp_->::vmsg::CSArenaStroeInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSArenaRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSArenaQueryRsp ArenaQuery_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenaquery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Record_Rsp;
        break;
      }

      // optional .vmsg.CSArenaQueryRecordRsp Record_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Record_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FindOpponent_Rsp;
        break;
      }

      // optional .vmsg.CSArenaFindOpponentRsp FindOpponent_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FindOpponent_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_findopponent_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GetAward_Rsp;
        break;
      }

      // optional uint32 GetAward_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GetAward_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getaward_rsp_)));
          set_has_getaward_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BuyNum_Rsp;
        break;
      }

      // optional .vmsg.CSArenaBuyNumRsp BuyNum_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyNum_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buynum_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_StartFight_Rsp;
        break;
      }

      // optional .vmsg.CSArenaStartFightRsp StartFight_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartFight_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startfight_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_EndFight_Rsp;
        break;
      }

      // optional .vmsg.CSArenaEndFightRsp EndFight_Rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndFight_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endfight_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_StoreQuery_Rsp;
        break;
      }

      // optional .vmsg.CSArenaStroeInfo StoreQuery_Rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StoreQuery_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storequery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_StoreBuy_Rsp;
        break;
      }

      // optional .vmsg.CSArenaStroeInfo StoreBuy_Rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StoreBuy_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storebuy_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_StoreRefresh_Rsp;
        break;
      }

      // optional .vmsg.CSArenaStroeInfo StoreRefresh_Rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StoreRefresh_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storerefresh_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSArenaRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSArenaQueryRsp ArenaQuery_Rsp = 1;
  if (has_arenaquery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->arenaquery_rsp(), output);
  }

  // optional .vmsg.CSArenaQueryRecordRsp Record_Rsp = 2;
  if (has_record_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->record_rsp(), output);
  }

  // optional .vmsg.CSArenaFindOpponentRsp FindOpponent_Rsp = 3;
  if (has_findopponent_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->findopponent_rsp(), output);
  }

  // optional uint32 GetAward_Rsp = 4;
  if (has_getaward_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->getaward_rsp(), output);
  }

  // optional .vmsg.CSArenaBuyNumRsp BuyNum_Rsp = 5;
  if (has_buynum_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->buynum_rsp(), output);
  }

  // optional .vmsg.CSArenaStartFightRsp StartFight_Rsp = 6;
  if (has_startfight_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->startfight_rsp(), output);
  }

  // optional .vmsg.CSArenaEndFightRsp EndFight_Rsp = 7;
  if (has_endfight_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->endfight_rsp(), output);
  }

  // optional .vmsg.CSArenaStroeInfo StoreQuery_Rsp = 8;
  if (has_storequery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->storequery_rsp(), output);
  }

  // optional .vmsg.CSArenaStroeInfo StoreBuy_Rsp = 9;
  if (has_storebuy_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->storebuy_rsp(), output);
  }

  // optional .vmsg.CSArenaStroeInfo StoreRefresh_Rsp = 10;
  if (has_storerefresh_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->storerefresh_rsp(), output);
  }

}

int CSArenaRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSArenaQueryRsp ArenaQuery_Rsp = 1;
    if (has_arenaquery_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenaquery_rsp());
    }

    // optional .vmsg.CSArenaQueryRecordRsp Record_Rsp = 2;
    if (has_record_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record_rsp());
    }

    // optional .vmsg.CSArenaFindOpponentRsp FindOpponent_Rsp = 3;
    if (has_findopponent_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->findopponent_rsp());
    }

    // optional uint32 GetAward_Rsp = 4;
    if (has_getaward_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getaward_rsp());
    }

    // optional .vmsg.CSArenaBuyNumRsp BuyNum_Rsp = 5;
    if (has_buynum_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buynum_rsp());
    }

    // optional .vmsg.CSArenaStartFightRsp StartFight_Rsp = 6;
    if (has_startfight_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startfight_rsp());
    }

    // optional .vmsg.CSArenaEndFightRsp EndFight_Rsp = 7;
    if (has_endfight_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endfight_rsp());
    }

    // optional .vmsg.CSArenaStroeInfo StoreQuery_Rsp = 8;
    if (has_storequery_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storequery_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSArenaStroeInfo StoreBuy_Rsp = 9;
    if (has_storebuy_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storebuy_rsp());
    }

    // optional .vmsg.CSArenaStroeInfo StoreRefresh_Rsp = 10;
    if (has_storerefresh_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storerefresh_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSArenaRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSArenaRespond*>(&from));
}

void CSArenaRespond::MergeFrom(const CSArenaRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_arenaquery_rsp()) {
      mutable_arenaquery_rsp()->::vmsg::CSArenaQueryRsp::MergeFrom(from.arenaquery_rsp());
    }
    if (from.has_record_rsp()) {
      mutable_record_rsp()->::vmsg::CSArenaQueryRecordRsp::MergeFrom(from.record_rsp());
    }
    if (from.has_findopponent_rsp()) {
      mutable_findopponent_rsp()->::vmsg::CSArenaFindOpponentRsp::MergeFrom(from.findopponent_rsp());
    }
    if (from.has_getaward_rsp()) {
      set_getaward_rsp(from.getaward_rsp());
    }
    if (from.has_buynum_rsp()) {
      mutable_buynum_rsp()->::vmsg::CSArenaBuyNumRsp::MergeFrom(from.buynum_rsp());
    }
    if (from.has_startfight_rsp()) {
      mutable_startfight_rsp()->::vmsg::CSArenaStartFightRsp::MergeFrom(from.startfight_rsp());
    }
    if (from.has_endfight_rsp()) {
      mutable_endfight_rsp()->::vmsg::CSArenaEndFightRsp::MergeFrom(from.endfight_rsp());
    }
    if (from.has_storequery_rsp()) {
      mutable_storequery_rsp()->::vmsg::CSArenaStroeInfo::MergeFrom(from.storequery_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_storebuy_rsp()) {
      mutable_storebuy_rsp()->::vmsg::CSArenaStroeInfo::MergeFrom(from.storebuy_rsp());
    }
    if (from.has_storerefresh_rsp()) {
      mutable_storerefresh_rsp()->::vmsg::CSArenaStroeInfo::MergeFrom(from.storerefresh_rsp());
    }
  }
}

void CSArenaRespond::CopyFrom(const CSArenaRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSArenaRespond::IsInitialized() const {

  if (has_arenaquery_rsp()) {
    if (!this->arenaquery_rsp().IsInitialized()) return false;
  }
  if (has_record_rsp()) {
    if (!this->record_rsp().IsInitialized()) return false;
  }
  if (has_findopponent_rsp()) {
    if (!this->findopponent_rsp().IsInitialized()) return false;
  }
  if (has_buynum_rsp()) {
    if (!this->buynum_rsp().IsInitialized()) return false;
  }
  if (has_startfight_rsp()) {
    if (!this->startfight_rsp().IsInitialized()) return false;
  }
  if (has_endfight_rsp()) {
    if (!this->endfight_rsp().IsInitialized()) return false;
  }
  if (has_storequery_rsp()) {
    if (!this->storequery_rsp().IsInitialized()) return false;
  }
  if (has_storebuy_rsp()) {
    if (!this->storebuy_rsp().IsInitialized()) return false;
  }
  if (has_storerefresh_rsp()) {
    if (!this->storerefresh_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSArenaRespond::Swap(CSArenaRespond* other) {
  if (other != this) {
    std::swap(arenaquery_rsp_, other->arenaquery_rsp_);
    std::swap(record_rsp_, other->record_rsp_);
    std::swap(findopponent_rsp_, other->findopponent_rsp_);
    std::swap(getaward_rsp_, other->getaward_rsp_);
    std::swap(buynum_rsp_, other->buynum_rsp_);
    std::swap(startfight_rsp_, other->startfight_rsp_);
    std::swap(endfight_rsp_, other->endfight_rsp_);
    std::swap(storequery_rsp_, other->storequery_rsp_);
    std::swap(storebuy_rsp_, other->storebuy_rsp_);
    std::swap(storerefresh_rsp_, other->storerefresh_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSArenaRespond::GetTypeName() const {
  return "vmsg.CSArenaRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
