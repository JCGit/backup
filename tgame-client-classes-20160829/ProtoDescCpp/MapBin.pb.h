// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapBin.proto

#ifndef PROTOBUF_MapBin_2eproto__INCLUDED
#define PROTOBUF_MapBin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MapBin_2eproto();
void protobuf_AssignDesc_MapBin_2eproto();
void protobuf_ShutdownFile_MapBin_2eproto();

class CMapItem;
class CMapMonster;
class CMapNPC;
class CMapBegin;
class CMapTouch;
class CPropItem;
class CFloorBuff;
class CTrap;
class CMapBin;

// ===================================================================

class CMapItem : public ::google::protobuf::MessageLite {
 public:
  CMapItem();
  virtual ~CMapItem();

  CMapItem(const CMapItem& from);

  inline CMapItem& operator=(const CMapItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMapItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMapItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMapItem* other);

  // implements Message ----------------------------------------------

  CMapItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMapItem& from);
  void MergeFrom(const CMapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 stage = 4;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // required string path = 5;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 5;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // @@protoc_insertion_point(class_scope:CMapItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_path();
  inline void clear_has_path();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 stage_;
  ::std::string* path_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CMapItem* default_instance_;
};
// -------------------------------------------------------------------

class CMapMonster : public ::google::protobuf::MessageLite {
 public:
  CMapMonster();
  virtual ~CMapMonster();

  CMapMonster(const CMapMonster& from);

  inline CMapMonster& operator=(const CMapMonster& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMapMonster& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMapMonster* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMapMonster* other);

  // implements Message ----------------------------------------------

  CMapMonster* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMapMonster& from);
  void MergeFrom(const CMapMonster& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 stage = 4;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 4;
  inline ::google::protobuf::uint32 stage() const;
  inline void set_stage(::google::protobuf::uint32 value);

  // required uint32 touchId = 5;
  inline bool has_touchid() const;
  inline void clear_touchid();
  static const int kTouchIdFieldNumber = 5;
  inline ::google::protobuf::uint32 touchid() const;
  inline void set_touchid(::google::protobuf::uint32 value);

  // required uint32 type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 num = 8;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 8;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 inter = 9;
  inline bool has_inter() const;
  inline void clear_inter();
  static const int kInterFieldNumber = 9;
  inline ::google::protobuf::uint32 inter() const;
  inline void set_inter(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMapMonster)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_touchid();
  inline void clear_has_touchid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_inter();
  inline void clear_has_inter();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 stage_;
  ::google::protobuf::uint32 touchid_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 inter_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CMapMonster* default_instance_;
};
// -------------------------------------------------------------------

class CMapNPC : public ::google::protobuf::MessageLite {
 public:
  CMapNPC();
  virtual ~CMapNPC();

  CMapNPC(const CMapNPC& from);

  inline CMapNPC& operator=(const CMapNPC& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMapNPC& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMapNPC* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMapNPC* other);

  // implements Message ----------------------------------------------

  CMapNPC* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMapNPC& from);
  void MergeFrom(const CMapNPC& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMapNPC)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CMapNPC* default_instance_;
};
// -------------------------------------------------------------------

class CMapBegin : public ::google::protobuf::MessageLite {
 public:
  CMapBegin();
  virtual ~CMapBegin();

  CMapBegin(const CMapBegin& from);

  inline CMapBegin& operator=(const CMapBegin& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMapBegin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMapBegin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMapBegin* other);

  // implements Message ----------------------------------------------

  CMapBegin* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMapBegin& from);
  void MergeFrom(const CMapBegin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 condition = 3;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 3;
  inline ::google::protobuf::uint32 condition() const;
  inline void set_condition(::google::protobuf::uint32 value);

  // required uint32 targetid = 4;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 4;
  inline ::google::protobuf::uint32 targetid() const;
  inline void set_targetid(::google::protobuf::uint32 value);

  // required uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMapBegin)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 condition_;
  ::google::protobuf::uint32 targetid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CMapBegin* default_instance_;
};
// -------------------------------------------------------------------

class CMapTouch : public ::google::protobuf::MessageLite {
 public:
  CMapTouch();
  virtual ~CMapTouch();

  CMapTouch(const CMapTouch& from);

  inline CMapTouch& operator=(const CMapTouch& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMapTouch& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMapTouch* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMapTouch* other);

  // implements Message ----------------------------------------------

  CMapTouch* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMapTouch& from);
  void MergeFrom(const CMapTouch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CMapTouch)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CMapTouch* default_instance_;
};
// -------------------------------------------------------------------

class CPropItem : public ::google::protobuf::MessageLite {
 public:
  CPropItem();
  virtual ~CPropItem();

  CPropItem(const CPropItem& from);

  inline CPropItem& operator=(const CPropItem& from) {
    CopyFrom(from);
    return *this;
  }

  static const CPropItem& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CPropItem* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CPropItem* other);

  // implements Message ----------------------------------------------

  CPropItem* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CPropItem& from);
  void MergeFrom(const CPropItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 touchId = 4;
  inline bool has_touchid() const;
  inline void clear_touchid();
  static const int kTouchIdFieldNumber = 4;
  inline ::google::protobuf::uint32 touchid() const;
  inline void set_touchid(::google::protobuf::uint32 value);

  // required uint32 dropId = 5;
  inline bool has_dropid() const;
  inline void clear_dropid();
  static const int kDropIdFieldNumber = 5;
  inline ::google::protobuf::uint32 dropid() const;
  inline void set_dropid(::google::protobuf::uint32 value);

  // required uint32 dropType = 6;
  inline bool has_droptype() const;
  inline void clear_droptype();
  static const int kDropTypeFieldNumber = 6;
  inline ::google::protobuf::uint32 droptype() const;
  inline void set_droptype(::google::protobuf::uint32 value);

  // required uint32 dropParty = 7;
  inline bool has_dropparty() const;
  inline void clear_dropparty();
  static const int kDropPartyFieldNumber = 7;
  inline ::google::protobuf::uint32 dropparty() const;
  inline void set_dropparty(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CPropItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_touchid();
  inline void clear_has_touchid();
  inline void set_has_dropid();
  inline void clear_has_dropid();
  inline void set_has_droptype();
  inline void clear_has_droptype();
  inline void set_has_dropparty();
  inline void clear_has_dropparty();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 touchid_;
  ::google::protobuf::uint32 dropid_;
  ::google::protobuf::uint32 droptype_;
  ::google::protobuf::uint32 dropparty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CPropItem* default_instance_;
};
// -------------------------------------------------------------------

class CFloorBuff : public ::google::protobuf::MessageLite {
 public:
  CFloorBuff();
  virtual ~CFloorBuff();

  CFloorBuff(const CFloorBuff& from);

  inline CFloorBuff& operator=(const CFloorBuff& from) {
    CopyFrom(from);
    return *this;
  }

  static const CFloorBuff& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CFloorBuff* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CFloorBuff* other);

  // implements Message ----------------------------------------------

  CFloorBuff* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CFloorBuff& from);
  void MergeFrom(const CFloorBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 touchId = 4;
  inline bool has_touchid() const;
  inline void clear_touchid();
  static const int kTouchIdFieldNumber = 4;
  inline ::google::protobuf::uint32 touchid() const;
  inline void set_touchid(::google::protobuf::uint32 value);

  // required uint32 party = 5;
  inline bool has_party() const;
  inline void clear_party();
  static const int kPartyFieldNumber = 5;
  inline ::google::protobuf::uint32 party() const;
  inline void set_party(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CFloorBuff)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_touchid();
  inline void clear_has_touchid();
  inline void set_has_party();
  inline void clear_has_party();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 touchid_;
  ::google::protobuf::uint32 party_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CFloorBuff* default_instance_;
};
// -------------------------------------------------------------------

class CTrap : public ::google::protobuf::MessageLite {
 public:
  CTrap();
  virtual ~CTrap();

  CTrap(const CTrap& from);

  inline CTrap& operator=(const CTrap& from) {
    CopyFrom(from);
    return *this;
  }

  static const CTrap& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CTrap* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CTrap* other);

  // implements Message ----------------------------------------------

  CTrap* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CTrap& from);
  void MergeFrom(const CTrap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // required uint32 touchId = 4;
  inline bool has_touchid() const;
  inline void clear_touchid();
  static const int kTouchIdFieldNumber = 4;
  inline ::google::protobuf::uint32 touchid() const;
  inline void set_touchid(::google::protobuf::uint32 value);

  // required uint32 party = 5;
  inline bool has_party() const;
  inline void clear_party();
  static const int kPartyFieldNumber = 5;
  inline ::google::protobuf::uint32 party() const;
  inline void set_party(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:CTrap)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_touchid();
  inline void clear_has_touchid();
  inline void set_has_party();
  inline void clear_has_party();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 touchid_;
  ::google::protobuf::uint32 party_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CTrap* default_instance_;
};
// -------------------------------------------------------------------

class CMapBin : public ::google::protobuf::MessageLite {
 public:
  CMapBin();
  virtual ~CMapBin();

  CMapBin(const CMapBin& from);

  inline CMapBin& operator=(const CMapBin& from) {
    CopyFrom(from);
    return *this;
  }

  static const CMapBin& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CMapBin* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CMapBin* other);

  // implements Message ----------------------------------------------

  CMapBin* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CMapBin& from);
  void MergeFrom(const CMapBin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 walkH = 1;
  inline bool has_walkh() const;
  inline void clear_walkh();
  static const int kWalkHFieldNumber = 1;
  inline ::google::protobuf::uint32 walkh() const;
  inline void set_walkh(::google::protobuf::uint32 value);

  // required uint32 sceenNum = 2;
  inline bool has_sceennum() const;
  inline void clear_sceennum();
  static const int kSceenNumFieldNumber = 2;
  inline ::google::protobuf::uint32 sceennum() const;
  inline void set_sceennum(::google::protobuf::uint32 value);

  // required uint32 mapH = 3;
  inline bool has_maph() const;
  inline void clear_maph();
  static const int kMapHFieldNumber = 3;
  inline ::google::protobuf::uint32 maph() const;
  inline void set_maph(::google::protobuf::uint32 value);

  // required uint32 mapW = 4;
  inline bool has_mapw() const;
  inline void clear_mapw();
  static const int kMapWFieldNumber = 4;
  inline ::google::protobuf::uint32 mapw() const;
  inline void set_mapw(::google::protobuf::uint32 value);

  // required uint32 midResNum = 5;
  inline bool has_midresnum() const;
  inline void clear_midresnum();
  static const int kMidResNumFieldNumber = 5;
  inline ::google::protobuf::uint32 midresnum() const;
  inline void set_midresnum(::google::protobuf::uint32 value);

  // required uint32 realSceenNum = 6;
  inline bool has_realsceennum() const;
  inline void clear_realsceennum();
  static const int kRealSceenNumFieldNumber = 6;
  inline ::google::protobuf::uint32 realsceennum() const;
  inline void set_realsceennum(::google::protobuf::uint32 value);

  // required uint32 sceenW = 7;
  inline bool has_sceenw() const;
  inline void clear_sceenw();
  static const int kSceenWFieldNumber = 7;
  inline ::google::protobuf::uint32 sceenw() const;
  inline void set_sceenw(::google::protobuf::uint32 value);

  // required uint32 gridH = 8;
  inline bool has_gridh() const;
  inline void clear_gridh();
  static const int kGridHFieldNumber = 8;
  inline ::google::protobuf::uint32 gridh() const;
  inline void set_gridh(::google::protobuf::uint32 value);

  // required uint32 gridW = 9;
  inline bool has_gridw() const;
  inline void clear_gridw();
  static const int kGridWFieldNumber = 9;
  inline ::google::protobuf::uint32 gridw() const;
  inline void set_gridw(::google::protobuf::uint32 value);

  // required string curBgPath = 10;
  inline bool has_curbgpath() const;
  inline void clear_curbgpath();
  static const int kCurBgPathFieldNumber = 10;
  inline const ::std::string& curbgpath() const;
  inline void set_curbgpath(const ::std::string& value);
  inline void set_curbgpath(const char* value);
  inline void set_curbgpath(const char* value, size_t size);
  inline ::std::string* mutable_curbgpath();
  inline ::std::string* release_curbgpath();
  inline void set_allocated_curbgpath(::std::string* curbgpath);

  // required string name = 11;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 11;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .CMapItem itemList = 12;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 12;
  inline const ::CMapItem& itemlist(int index) const;
  inline ::CMapItem* mutable_itemlist(int index);
  inline ::CMapItem* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMapItem >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMapItem >*
      mutable_itemlist();

  // repeated .CMapNPC npcList = 13;
  inline int npclist_size() const;
  inline void clear_npclist();
  static const int kNpcListFieldNumber = 13;
  inline const ::CMapNPC& npclist(int index) const;
  inline ::CMapNPC* mutable_npclist(int index);
  inline ::CMapNPC* add_npclist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMapNPC >&
      npclist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMapNPC >*
      mutable_npclist();

  // repeated .CMapMonster monsterList = 14;
  inline int monsterlist_size() const;
  inline void clear_monsterlist();
  static const int kMonsterListFieldNumber = 14;
  inline const ::CMapMonster& monsterlist(int index) const;
  inline ::CMapMonster* mutable_monsterlist(int index);
  inline ::CMapMonster* add_monsterlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMapMonster >&
      monsterlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMapMonster >*
      mutable_monsterlist();

  // repeated .CMapBegin beginList = 15;
  inline int beginlist_size() const;
  inline void clear_beginlist();
  static const int kBeginListFieldNumber = 15;
  inline const ::CMapBegin& beginlist(int index) const;
  inline ::CMapBegin* mutable_beginlist(int index);
  inline ::CMapBegin* add_beginlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMapBegin >&
      beginlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMapBegin >*
      mutable_beginlist();

  // repeated .CMapTouch touchList = 16;
  inline int touchlist_size() const;
  inline void clear_touchlist();
  static const int kTouchListFieldNumber = 16;
  inline const ::CMapTouch& touchlist(int index) const;
  inline ::CMapTouch* mutable_touchlist(int index);
  inline ::CMapTouch* add_touchlist();
  inline const ::google::protobuf::RepeatedPtrField< ::CMapTouch >&
      touchlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CMapTouch >*
      mutable_touchlist();

  // repeated .CPropItem propList = 17;
  inline int proplist_size() const;
  inline void clear_proplist();
  static const int kPropListFieldNumber = 17;
  inline const ::CPropItem& proplist(int index) const;
  inline ::CPropItem* mutable_proplist(int index);
  inline ::CPropItem* add_proplist();
  inline const ::google::protobuf::RepeatedPtrField< ::CPropItem >&
      proplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CPropItem >*
      mutable_proplist();

  // repeated .CFloorBuff buffList = 18;
  inline int bufflist_size() const;
  inline void clear_bufflist();
  static const int kBuffListFieldNumber = 18;
  inline const ::CFloorBuff& bufflist(int index) const;
  inline ::CFloorBuff* mutable_bufflist(int index);
  inline ::CFloorBuff* add_bufflist();
  inline const ::google::protobuf::RepeatedPtrField< ::CFloorBuff >&
      bufflist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CFloorBuff >*
      mutable_bufflist();

  // repeated .CTrap trapList = 19;
  inline int traplist_size() const;
  inline void clear_traplist();
  static const int kTrapListFieldNumber = 19;
  inline const ::CTrap& traplist(int index) const;
  inline ::CTrap* mutable_traplist(int index);
  inline ::CTrap* add_traplist();
  inline const ::google::protobuf::RepeatedPtrField< ::CTrap >&
      traplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::CTrap >*
      mutable_traplist();

  // @@protoc_insertion_point(class_scope:CMapBin)
 private:
  inline void set_has_walkh();
  inline void clear_has_walkh();
  inline void set_has_sceennum();
  inline void clear_has_sceennum();
  inline void set_has_maph();
  inline void clear_has_maph();
  inline void set_has_mapw();
  inline void clear_has_mapw();
  inline void set_has_midresnum();
  inline void clear_has_midresnum();
  inline void set_has_realsceennum();
  inline void clear_has_realsceennum();
  inline void set_has_sceenw();
  inline void clear_has_sceenw();
  inline void set_has_gridh();
  inline void clear_has_gridh();
  inline void set_has_gridw();
  inline void clear_has_gridw();
  inline void set_has_curbgpath();
  inline void clear_has_curbgpath();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::uint32 walkh_;
  ::google::protobuf::uint32 sceennum_;
  ::google::protobuf::uint32 maph_;
  ::google::protobuf::uint32 mapw_;
  ::google::protobuf::uint32 midresnum_;
  ::google::protobuf::uint32 realsceennum_;
  ::google::protobuf::uint32 sceenw_;
  ::google::protobuf::uint32 gridh_;
  ::std::string* curbgpath_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::CMapItem > itemlist_;
  ::google::protobuf::RepeatedPtrField< ::CMapNPC > npclist_;
  ::google::protobuf::RepeatedPtrField< ::CMapMonster > monsterlist_;
  ::google::protobuf::RepeatedPtrField< ::CMapBegin > beginlist_;
  ::google::protobuf::RepeatedPtrField< ::CMapTouch > touchlist_;
  ::google::protobuf::RepeatedPtrField< ::CPropItem > proplist_;
  ::google::protobuf::RepeatedPtrField< ::CFloorBuff > bufflist_;
  ::google::protobuf::RepeatedPtrField< ::CTrap > traplist_;
  ::google::protobuf::uint32 gridw_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapBin_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapBin_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapBin_2eproto();
  friend void protobuf_ShutdownFile_MapBin_2eproto();

  void InitAsDefaultInstance();
  static CMapBin* default_instance_;
};
// ===================================================================


// ===================================================================

// CMapItem

// required uint32 id = 1;
inline bool CMapItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMapItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMapItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMapItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMapItem::id() const {
  return id_;
}
inline void CMapItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CMapItem::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMapItem::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMapItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMapItem::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CMapItem::x() const {
  return x_;
}
inline void CMapItem::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 3;
inline bool CMapItem::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMapItem::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMapItem::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMapItem::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CMapItem::y() const {
  return y_;
}
inline void CMapItem::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 stage = 4;
inline bool CMapItem::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMapItem::set_has_stage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMapItem::clear_has_stage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMapItem::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 CMapItem::stage() const {
  return stage_;
}
inline void CMapItem::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// required string path = 5;
inline bool CMapItem::has_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMapItem::set_has_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMapItem::clear_has_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMapItem::clear_path() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& CMapItem::path() const {
  return *path_;
}
inline void CMapItem::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CMapItem::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(value);
}
inline void CMapItem::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMapItem::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    path_ = new ::std::string;
  }
  return path_;
}
inline ::std::string* CMapItem::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMapItem::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CMapMonster

// required uint32 id = 1;
inline bool CMapMonster::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMapMonster::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMapMonster::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMapMonster::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMapMonster::id() const {
  return id_;
}
inline void CMapMonster::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CMapMonster::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMapMonster::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMapMonster::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMapMonster::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CMapMonster::x() const {
  return x_;
}
inline void CMapMonster::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 3;
inline bool CMapMonster::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMapMonster::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMapMonster::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMapMonster::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CMapMonster::y() const {
  return y_;
}
inline void CMapMonster::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 stage = 4;
inline bool CMapMonster::has_stage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMapMonster::set_has_stage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMapMonster::clear_has_stage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMapMonster::clear_stage() {
  stage_ = 0u;
  clear_has_stage();
}
inline ::google::protobuf::uint32 CMapMonster::stage() const {
  return stage_;
}
inline void CMapMonster::set_stage(::google::protobuf::uint32 value) {
  set_has_stage();
  stage_ = value;
}

// required uint32 touchId = 5;
inline bool CMapMonster::has_touchid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMapMonster::set_has_touchid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMapMonster::clear_has_touchid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMapMonster::clear_touchid() {
  touchid_ = 0u;
  clear_has_touchid();
}
inline ::google::protobuf::uint32 CMapMonster::touchid() const {
  return touchid_;
}
inline void CMapMonster::set_touchid(::google::protobuf::uint32 value) {
  set_has_touchid();
  touchid_ = value;
}

// required uint32 type = 6;
inline bool CMapMonster::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMapMonster::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMapMonster::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMapMonster::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMapMonster::type() const {
  return type_;
}
inline void CMapMonster::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required uint32 time = 7;
inline bool CMapMonster::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMapMonster::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMapMonster::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMapMonster::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMapMonster::time() const {
  return time_;
}
inline void CMapMonster::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 num = 8;
inline bool CMapMonster::has_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMapMonster::set_has_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMapMonster::clear_has_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMapMonster::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 CMapMonster::num() const {
  return num_;
}
inline void CMapMonster::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 inter = 9;
inline bool CMapMonster::has_inter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMapMonster::set_has_inter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMapMonster::clear_has_inter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMapMonster::clear_inter() {
  inter_ = 0u;
  clear_has_inter();
}
inline ::google::protobuf::uint32 CMapMonster::inter() const {
  return inter_;
}
inline void CMapMonster::set_inter(::google::protobuf::uint32 value) {
  set_has_inter();
  inter_ = value;
}

// -------------------------------------------------------------------

// CMapNPC

// required uint32 id = 1;
inline bool CMapNPC::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMapNPC::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMapNPC::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMapNPC::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMapNPC::id() const {
  return id_;
}
inline void CMapNPC::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CMapNPC::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMapNPC::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMapNPC::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMapNPC::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CMapNPC::x() const {
  return x_;
}
inline void CMapNPC::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 3;
inline bool CMapNPC::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMapNPC::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMapNPC::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMapNPC::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CMapNPC::y() const {
  return y_;
}
inline void CMapNPC::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// CMapBegin

// required uint32 id = 1;
inline bool CMapBegin::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMapBegin::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMapBegin::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMapBegin::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMapBegin::id() const {
  return id_;
}
inline void CMapBegin::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CMapBegin::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMapBegin::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMapBegin::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMapBegin::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CMapBegin::x() const {
  return x_;
}
inline void CMapBegin::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 condition = 3;
inline bool CMapBegin::has_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMapBegin::set_has_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMapBegin::clear_has_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMapBegin::clear_condition() {
  condition_ = 0u;
  clear_has_condition();
}
inline ::google::protobuf::uint32 CMapBegin::condition() const {
  return condition_;
}
inline void CMapBegin::set_condition(::google::protobuf::uint32 value) {
  set_has_condition();
  condition_ = value;
}

// required uint32 targetid = 4;
inline bool CMapBegin::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMapBegin::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMapBegin::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMapBegin::clear_targetid() {
  targetid_ = 0u;
  clear_has_targetid();
}
inline ::google::protobuf::uint32 CMapBegin::targetid() const {
  return targetid_;
}
inline void CMapBegin::set_targetid(::google::protobuf::uint32 value) {
  set_has_targetid();
  targetid_ = value;
}

// required uint32 time = 5;
inline bool CMapBegin::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMapBegin::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMapBegin::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMapBegin::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 CMapBegin::time() const {
  return time_;
}
inline void CMapBegin::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 num = 6;
inline bool CMapBegin::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMapBegin::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMapBegin::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMapBegin::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 CMapBegin::num() const {
  return num_;
}
inline void CMapBegin::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 type = 7;
inline bool CMapBegin::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMapBegin::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMapBegin::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMapBegin::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 CMapBegin::type() const {
  return type_;
}
inline void CMapBegin::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// CMapTouch

// required uint32 id = 1;
inline bool CMapTouch::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMapTouch::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMapTouch::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMapTouch::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CMapTouch::id() const {
  return id_;
}
inline void CMapTouch::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CMapTouch::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMapTouch::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMapTouch::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMapTouch::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CMapTouch::x() const {
  return x_;
}
inline void CMapTouch::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// -------------------------------------------------------------------

// CPropItem

// required uint32 id = 1;
inline bool CPropItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CPropItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CPropItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CPropItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CPropItem::id() const {
  return id_;
}
inline void CPropItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CPropItem::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CPropItem::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CPropItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CPropItem::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CPropItem::x() const {
  return x_;
}
inline void CPropItem::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 3;
inline bool CPropItem::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CPropItem::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CPropItem::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CPropItem::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CPropItem::y() const {
  return y_;
}
inline void CPropItem::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 touchId = 4;
inline bool CPropItem::has_touchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CPropItem::set_has_touchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CPropItem::clear_has_touchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CPropItem::clear_touchid() {
  touchid_ = 0u;
  clear_has_touchid();
}
inline ::google::protobuf::uint32 CPropItem::touchid() const {
  return touchid_;
}
inline void CPropItem::set_touchid(::google::protobuf::uint32 value) {
  set_has_touchid();
  touchid_ = value;
}

// required uint32 dropId = 5;
inline bool CPropItem::has_dropid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CPropItem::set_has_dropid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CPropItem::clear_has_dropid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CPropItem::clear_dropid() {
  dropid_ = 0u;
  clear_has_dropid();
}
inline ::google::protobuf::uint32 CPropItem::dropid() const {
  return dropid_;
}
inline void CPropItem::set_dropid(::google::protobuf::uint32 value) {
  set_has_dropid();
  dropid_ = value;
}

// required uint32 dropType = 6;
inline bool CPropItem::has_droptype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CPropItem::set_has_droptype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CPropItem::clear_has_droptype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CPropItem::clear_droptype() {
  droptype_ = 0u;
  clear_has_droptype();
}
inline ::google::protobuf::uint32 CPropItem::droptype() const {
  return droptype_;
}
inline void CPropItem::set_droptype(::google::protobuf::uint32 value) {
  set_has_droptype();
  droptype_ = value;
}

// required uint32 dropParty = 7;
inline bool CPropItem::has_dropparty() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CPropItem::set_has_dropparty() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CPropItem::clear_has_dropparty() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CPropItem::clear_dropparty() {
  dropparty_ = 0u;
  clear_has_dropparty();
}
inline ::google::protobuf::uint32 CPropItem::dropparty() const {
  return dropparty_;
}
inline void CPropItem::set_dropparty(::google::protobuf::uint32 value) {
  set_has_dropparty();
  dropparty_ = value;
}

// -------------------------------------------------------------------

// CFloorBuff

// required uint32 id = 1;
inline bool CFloorBuff::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CFloorBuff::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CFloorBuff::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CFloorBuff::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CFloorBuff::id() const {
  return id_;
}
inline void CFloorBuff::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CFloorBuff::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CFloorBuff::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CFloorBuff::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CFloorBuff::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CFloorBuff::x() const {
  return x_;
}
inline void CFloorBuff::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 3;
inline bool CFloorBuff::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CFloorBuff::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CFloorBuff::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CFloorBuff::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CFloorBuff::y() const {
  return y_;
}
inline void CFloorBuff::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 touchId = 4;
inline bool CFloorBuff::has_touchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CFloorBuff::set_has_touchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CFloorBuff::clear_has_touchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CFloorBuff::clear_touchid() {
  touchid_ = 0u;
  clear_has_touchid();
}
inline ::google::protobuf::uint32 CFloorBuff::touchid() const {
  return touchid_;
}
inline void CFloorBuff::set_touchid(::google::protobuf::uint32 value) {
  set_has_touchid();
  touchid_ = value;
}

// required uint32 party = 5;
inline bool CFloorBuff::has_party() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CFloorBuff::set_has_party() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CFloorBuff::clear_has_party() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CFloorBuff::clear_party() {
  party_ = 0u;
  clear_has_party();
}
inline ::google::protobuf::uint32 CFloorBuff::party() const {
  return party_;
}
inline void CFloorBuff::set_party(::google::protobuf::uint32 value) {
  set_has_party();
  party_ = value;
}

// -------------------------------------------------------------------

// CTrap

// required uint32 id = 1;
inline bool CTrap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CTrap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CTrap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CTrap::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 CTrap::id() const {
  return id_;
}
inline void CTrap::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 x = 2;
inline bool CTrap::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CTrap::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CTrap::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CTrap::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 CTrap::x() const {
  return x_;
}
inline void CTrap::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// required uint32 y = 3;
inline bool CTrap::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CTrap::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CTrap::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CTrap::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 CTrap::y() const {
  return y_;
}
inline void CTrap::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// required uint32 touchId = 4;
inline bool CTrap::has_touchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CTrap::set_has_touchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CTrap::clear_has_touchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CTrap::clear_touchid() {
  touchid_ = 0u;
  clear_has_touchid();
}
inline ::google::protobuf::uint32 CTrap::touchid() const {
  return touchid_;
}
inline void CTrap::set_touchid(::google::protobuf::uint32 value) {
  set_has_touchid();
  touchid_ = value;
}

// required uint32 party = 5;
inline bool CTrap::has_party() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CTrap::set_has_party() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CTrap::clear_has_party() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CTrap::clear_party() {
  party_ = 0u;
  clear_has_party();
}
inline ::google::protobuf::uint32 CTrap::party() const {
  return party_;
}
inline void CTrap::set_party(::google::protobuf::uint32 value) {
  set_has_party();
  party_ = value;
}

// -------------------------------------------------------------------

// CMapBin

// required uint32 walkH = 1;
inline bool CMapBin::has_walkh() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMapBin::set_has_walkh() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CMapBin::clear_has_walkh() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CMapBin::clear_walkh() {
  walkh_ = 0u;
  clear_has_walkh();
}
inline ::google::protobuf::uint32 CMapBin::walkh() const {
  return walkh_;
}
inline void CMapBin::set_walkh(::google::protobuf::uint32 value) {
  set_has_walkh();
  walkh_ = value;
}

// required uint32 sceenNum = 2;
inline bool CMapBin::has_sceennum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMapBin::set_has_sceennum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CMapBin::clear_has_sceennum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CMapBin::clear_sceennum() {
  sceennum_ = 0u;
  clear_has_sceennum();
}
inline ::google::protobuf::uint32 CMapBin::sceennum() const {
  return sceennum_;
}
inline void CMapBin::set_sceennum(::google::protobuf::uint32 value) {
  set_has_sceennum();
  sceennum_ = value;
}

// required uint32 mapH = 3;
inline bool CMapBin::has_maph() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMapBin::set_has_maph() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CMapBin::clear_has_maph() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CMapBin::clear_maph() {
  maph_ = 0u;
  clear_has_maph();
}
inline ::google::protobuf::uint32 CMapBin::maph() const {
  return maph_;
}
inline void CMapBin::set_maph(::google::protobuf::uint32 value) {
  set_has_maph();
  maph_ = value;
}

// required uint32 mapW = 4;
inline bool CMapBin::has_mapw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMapBin::set_has_mapw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CMapBin::clear_has_mapw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CMapBin::clear_mapw() {
  mapw_ = 0u;
  clear_has_mapw();
}
inline ::google::protobuf::uint32 CMapBin::mapw() const {
  return mapw_;
}
inline void CMapBin::set_mapw(::google::protobuf::uint32 value) {
  set_has_mapw();
  mapw_ = value;
}

// required uint32 midResNum = 5;
inline bool CMapBin::has_midresnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMapBin::set_has_midresnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CMapBin::clear_has_midresnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CMapBin::clear_midresnum() {
  midresnum_ = 0u;
  clear_has_midresnum();
}
inline ::google::protobuf::uint32 CMapBin::midresnum() const {
  return midresnum_;
}
inline void CMapBin::set_midresnum(::google::protobuf::uint32 value) {
  set_has_midresnum();
  midresnum_ = value;
}

// required uint32 realSceenNum = 6;
inline bool CMapBin::has_realsceennum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMapBin::set_has_realsceennum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CMapBin::clear_has_realsceennum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CMapBin::clear_realsceennum() {
  realsceennum_ = 0u;
  clear_has_realsceennum();
}
inline ::google::protobuf::uint32 CMapBin::realsceennum() const {
  return realsceennum_;
}
inline void CMapBin::set_realsceennum(::google::protobuf::uint32 value) {
  set_has_realsceennum();
  realsceennum_ = value;
}

// required uint32 sceenW = 7;
inline bool CMapBin::has_sceenw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMapBin::set_has_sceenw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CMapBin::clear_has_sceenw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CMapBin::clear_sceenw() {
  sceenw_ = 0u;
  clear_has_sceenw();
}
inline ::google::protobuf::uint32 CMapBin::sceenw() const {
  return sceenw_;
}
inline void CMapBin::set_sceenw(::google::protobuf::uint32 value) {
  set_has_sceenw();
  sceenw_ = value;
}

// required uint32 gridH = 8;
inline bool CMapBin::has_gridh() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMapBin::set_has_gridh() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CMapBin::clear_has_gridh() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CMapBin::clear_gridh() {
  gridh_ = 0u;
  clear_has_gridh();
}
inline ::google::protobuf::uint32 CMapBin::gridh() const {
  return gridh_;
}
inline void CMapBin::set_gridh(::google::protobuf::uint32 value) {
  set_has_gridh();
  gridh_ = value;
}

// required uint32 gridW = 9;
inline bool CMapBin::has_gridw() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMapBin::set_has_gridw() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CMapBin::clear_has_gridw() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CMapBin::clear_gridw() {
  gridw_ = 0u;
  clear_has_gridw();
}
inline ::google::protobuf::uint32 CMapBin::gridw() const {
  return gridw_;
}
inline void CMapBin::set_gridw(::google::protobuf::uint32 value) {
  set_has_gridw();
  gridw_ = value;
}

// required string curBgPath = 10;
inline bool CMapBin::has_curbgpath() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMapBin::set_has_curbgpath() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CMapBin::clear_has_curbgpath() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CMapBin::clear_curbgpath() {
  if (curbgpath_ != &::google::protobuf::internal::kEmptyString) {
    curbgpath_->clear();
  }
  clear_has_curbgpath();
}
inline const ::std::string& CMapBin::curbgpath() const {
  return *curbgpath_;
}
inline void CMapBin::set_curbgpath(const ::std::string& value) {
  set_has_curbgpath();
  if (curbgpath_ == &::google::protobuf::internal::kEmptyString) {
    curbgpath_ = new ::std::string;
  }
  curbgpath_->assign(value);
}
inline void CMapBin::set_curbgpath(const char* value) {
  set_has_curbgpath();
  if (curbgpath_ == &::google::protobuf::internal::kEmptyString) {
    curbgpath_ = new ::std::string;
  }
  curbgpath_->assign(value);
}
inline void CMapBin::set_curbgpath(const char* value, size_t size) {
  set_has_curbgpath();
  if (curbgpath_ == &::google::protobuf::internal::kEmptyString) {
    curbgpath_ = new ::std::string;
  }
  curbgpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMapBin::mutable_curbgpath() {
  set_has_curbgpath();
  if (curbgpath_ == &::google::protobuf::internal::kEmptyString) {
    curbgpath_ = new ::std::string;
  }
  return curbgpath_;
}
inline ::std::string* CMapBin::release_curbgpath() {
  clear_has_curbgpath();
  if (curbgpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = curbgpath_;
    curbgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMapBin::set_allocated_curbgpath(::std::string* curbgpath) {
  if (curbgpath_ != &::google::protobuf::internal::kEmptyString) {
    delete curbgpath_;
  }
  if (curbgpath) {
    set_has_curbgpath();
    curbgpath_ = curbgpath;
  } else {
    clear_has_curbgpath();
    curbgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 11;
inline bool CMapBin::has_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMapBin::set_has_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CMapBin::clear_has_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CMapBin::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CMapBin::name() const {
  return *name_;
}
inline void CMapBin::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMapBin::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CMapBin::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CMapBin::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CMapBin::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CMapBin::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .CMapItem itemList = 12;
inline int CMapBin::itemlist_size() const {
  return itemlist_.size();
}
inline void CMapBin::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::CMapItem& CMapBin::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::CMapItem* CMapBin::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::CMapItem* CMapBin::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMapItem >&
CMapBin::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMapItem >*
CMapBin::mutable_itemlist() {
  return &itemlist_;
}

// repeated .CMapNPC npcList = 13;
inline int CMapBin::npclist_size() const {
  return npclist_.size();
}
inline void CMapBin::clear_npclist() {
  npclist_.Clear();
}
inline const ::CMapNPC& CMapBin::npclist(int index) const {
  return npclist_.Get(index);
}
inline ::CMapNPC* CMapBin::mutable_npclist(int index) {
  return npclist_.Mutable(index);
}
inline ::CMapNPC* CMapBin::add_npclist() {
  return npclist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMapNPC >&
CMapBin::npclist() const {
  return npclist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMapNPC >*
CMapBin::mutable_npclist() {
  return &npclist_;
}

// repeated .CMapMonster monsterList = 14;
inline int CMapBin::monsterlist_size() const {
  return monsterlist_.size();
}
inline void CMapBin::clear_monsterlist() {
  monsterlist_.Clear();
}
inline const ::CMapMonster& CMapBin::monsterlist(int index) const {
  return monsterlist_.Get(index);
}
inline ::CMapMonster* CMapBin::mutable_monsterlist(int index) {
  return monsterlist_.Mutable(index);
}
inline ::CMapMonster* CMapBin::add_monsterlist() {
  return monsterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMapMonster >&
CMapBin::monsterlist() const {
  return monsterlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMapMonster >*
CMapBin::mutable_monsterlist() {
  return &monsterlist_;
}

// repeated .CMapBegin beginList = 15;
inline int CMapBin::beginlist_size() const {
  return beginlist_.size();
}
inline void CMapBin::clear_beginlist() {
  beginlist_.Clear();
}
inline const ::CMapBegin& CMapBin::beginlist(int index) const {
  return beginlist_.Get(index);
}
inline ::CMapBegin* CMapBin::mutable_beginlist(int index) {
  return beginlist_.Mutable(index);
}
inline ::CMapBegin* CMapBin::add_beginlist() {
  return beginlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMapBegin >&
CMapBin::beginlist() const {
  return beginlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMapBegin >*
CMapBin::mutable_beginlist() {
  return &beginlist_;
}

// repeated .CMapTouch touchList = 16;
inline int CMapBin::touchlist_size() const {
  return touchlist_.size();
}
inline void CMapBin::clear_touchlist() {
  touchlist_.Clear();
}
inline const ::CMapTouch& CMapBin::touchlist(int index) const {
  return touchlist_.Get(index);
}
inline ::CMapTouch* CMapBin::mutable_touchlist(int index) {
  return touchlist_.Mutable(index);
}
inline ::CMapTouch* CMapBin::add_touchlist() {
  return touchlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CMapTouch >&
CMapBin::touchlist() const {
  return touchlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CMapTouch >*
CMapBin::mutable_touchlist() {
  return &touchlist_;
}

// repeated .CPropItem propList = 17;
inline int CMapBin::proplist_size() const {
  return proplist_.size();
}
inline void CMapBin::clear_proplist() {
  proplist_.Clear();
}
inline const ::CPropItem& CMapBin::proplist(int index) const {
  return proplist_.Get(index);
}
inline ::CPropItem* CMapBin::mutable_proplist(int index) {
  return proplist_.Mutable(index);
}
inline ::CPropItem* CMapBin::add_proplist() {
  return proplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CPropItem >&
CMapBin::proplist() const {
  return proplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CPropItem >*
CMapBin::mutable_proplist() {
  return &proplist_;
}

// repeated .CFloorBuff buffList = 18;
inline int CMapBin::bufflist_size() const {
  return bufflist_.size();
}
inline void CMapBin::clear_bufflist() {
  bufflist_.Clear();
}
inline const ::CFloorBuff& CMapBin::bufflist(int index) const {
  return bufflist_.Get(index);
}
inline ::CFloorBuff* CMapBin::mutable_bufflist(int index) {
  return bufflist_.Mutable(index);
}
inline ::CFloorBuff* CMapBin::add_bufflist() {
  return bufflist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CFloorBuff >&
CMapBin::bufflist() const {
  return bufflist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CFloorBuff >*
CMapBin::mutable_bufflist() {
  return &bufflist_;
}

// repeated .CTrap trapList = 19;
inline int CMapBin::traplist_size() const {
  return traplist_.size();
}
inline void CMapBin::clear_traplist() {
  traplist_.Clear();
}
inline const ::CTrap& CMapBin::traplist(int index) const {
  return traplist_.Get(index);
}
inline ::CTrap* CMapBin::mutable_traplist(int index) {
  return traplist_.Mutable(index);
}
inline ::CTrap* CMapBin::add_traplist() {
  return traplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CTrap >&
CMapBin::traplist() const {
  return traplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::CTrap >*
CMapBin::mutable_traplist() {
  return &traplist_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MapBin_2eproto__INCLUDED
