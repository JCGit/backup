// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSWarMapMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSWarMapMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSWarMapMsg_2eproto() {
  delete CSWarMapQueryRqst::default_instance_;
  delete CSWarMapHidenAwardElmt::default_instance_;
  delete CSStarAwardElmt::default_instance_;
  delete CSWarStarAward::default_instance_;
  delete CSWarMapInfo::default_instance_;
  delete CSWarMapQueryRsp::default_instance_;
  delete CSWarMapStartRqst::default_instance_;
  delete CSWarMapDropInfo::default_instance_;
  delete CSWarMapStartRsp::default_instance_;
  delete CSKillMonsterInfo::default_instance_;
  delete CSWarMapEndRqst::default_instance_;
  delete CSWarMapEndRsp::default_instance_;
  delete CSWarMapCardRqst::default_instance_;
  delete CSWarMapCardRsp::default_instance_;
  delete CSSweepWarRqst::default_instance_;
  delete CSSweepAward::default_instance_;
  delete CSSweepWarRsp::default_instance_;
  delete CSQueryEliteWarMapRqst::default_instance_;
  delete CSEliteWarInfo::default_instance_;
  delete CSResetEliteWarMapRqst::default_instance_;
  delete CSStartEliteWarMapRqst::default_instance_;
  delete CSStartEliteWarMapRsp::default_instance_;
  delete CSEndEliteWarMapRqst::default_instance_;
  delete CSEliteAward::default_instance_;
  delete CSEndEliteWarMapRsp::default_instance_;
  delete CSSweepEliteWarRqst::default_instance_;
  delete CSSweepEliteWarRsp::default_instance_;
  delete CSDailyInstanceElmt::default_instance_;
  delete CSQueryDailyInstanceRsp::default_instance_;
  delete CSDailyInstancePassRqst::default_instance_;
  delete CSDailyInstancePassRsp::default_instance_;
  delete CSReliveRqst::default_instance_;
  delete CSReliveRsp::default_instance_;
  delete CSBuyBulletRqst::default_instance_;
  delete CSBuyBulletRsp::default_instance_;
  delete CSBuyInstanceRqst::default_instance_;
  delete CSBuyInstanceRsp::default_instance_;
  delete CSWarmapStarAwardRqst::default_instance_;
  delete CSWarmapStarAwardRsp::default_instance_;
  delete CSWarMapRequest::default_instance_;
  delete CSWarMapRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSWarMapMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSWarMapMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  CSWarMapQueryRqst::default_instance_ = new CSWarMapQueryRqst();
  CSWarMapHidenAwardElmt::default_instance_ = new CSWarMapHidenAwardElmt();
  CSStarAwardElmt::default_instance_ = new CSStarAwardElmt();
  CSWarStarAward::default_instance_ = new CSWarStarAward();
  CSWarMapInfo::default_instance_ = new CSWarMapInfo();
  CSWarMapQueryRsp::default_instance_ = new CSWarMapQueryRsp();
  CSWarMapStartRqst::default_instance_ = new CSWarMapStartRqst();
  CSWarMapDropInfo::default_instance_ = new CSWarMapDropInfo();
  CSWarMapStartRsp::default_instance_ = new CSWarMapStartRsp();
  CSKillMonsterInfo::default_instance_ = new CSKillMonsterInfo();
  CSWarMapEndRqst::default_instance_ = new CSWarMapEndRqst();
  CSWarMapEndRsp::default_instance_ = new CSWarMapEndRsp();
  CSWarMapCardRqst::default_instance_ = new CSWarMapCardRqst();
  CSWarMapCardRsp::default_instance_ = new CSWarMapCardRsp();
  CSSweepWarRqst::default_instance_ = new CSSweepWarRqst();
  CSSweepAward::default_instance_ = new CSSweepAward();
  CSSweepWarRsp::default_instance_ = new CSSweepWarRsp();
  CSQueryEliteWarMapRqst::default_instance_ = new CSQueryEliteWarMapRqst();
  CSEliteWarInfo::default_instance_ = new CSEliteWarInfo();
  CSResetEliteWarMapRqst::default_instance_ = new CSResetEliteWarMapRqst();
  CSStartEliteWarMapRqst::default_instance_ = new CSStartEliteWarMapRqst();
  CSStartEliteWarMapRsp::default_instance_ = new CSStartEliteWarMapRsp();
  CSEndEliteWarMapRqst::default_instance_ = new CSEndEliteWarMapRqst();
  CSEliteAward::default_instance_ = new CSEliteAward();
  CSEndEliteWarMapRsp::default_instance_ = new CSEndEliteWarMapRsp();
  CSSweepEliteWarRqst::default_instance_ = new CSSweepEliteWarRqst();
  CSSweepEliteWarRsp::default_instance_ = new CSSweepEliteWarRsp();
  CSDailyInstanceElmt::default_instance_ = new CSDailyInstanceElmt();
  CSQueryDailyInstanceRsp::default_instance_ = new CSQueryDailyInstanceRsp();
  CSDailyInstancePassRqst::default_instance_ = new CSDailyInstancePassRqst();
  CSDailyInstancePassRsp::default_instance_ = new CSDailyInstancePassRsp();
  CSReliveRqst::default_instance_ = new CSReliveRqst();
  CSReliveRsp::default_instance_ = new CSReliveRsp();
  CSBuyBulletRqst::default_instance_ = new CSBuyBulletRqst();
  CSBuyBulletRsp::default_instance_ = new CSBuyBulletRsp();
  CSBuyInstanceRqst::default_instance_ = new CSBuyInstanceRqst();
  CSBuyInstanceRsp::default_instance_ = new CSBuyInstanceRsp();
  CSWarmapStarAwardRqst::default_instance_ = new CSWarmapStarAwardRqst();
  CSWarmapStarAwardRsp::default_instance_ = new CSWarmapStarAwardRsp();
  CSWarMapRequest::default_instance_ = new CSWarMapRequest();
  CSWarMapRespond::default_instance_ = new CSWarMapRespond();
  CSWarMapQueryRqst::default_instance_->InitAsDefaultInstance();
  CSWarMapHidenAwardElmt::default_instance_->InitAsDefaultInstance();
  CSStarAwardElmt::default_instance_->InitAsDefaultInstance();
  CSWarStarAward::default_instance_->InitAsDefaultInstance();
  CSWarMapInfo::default_instance_->InitAsDefaultInstance();
  CSWarMapQueryRsp::default_instance_->InitAsDefaultInstance();
  CSWarMapStartRqst::default_instance_->InitAsDefaultInstance();
  CSWarMapDropInfo::default_instance_->InitAsDefaultInstance();
  CSWarMapStartRsp::default_instance_->InitAsDefaultInstance();
  CSKillMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSWarMapEndRqst::default_instance_->InitAsDefaultInstance();
  CSWarMapEndRsp::default_instance_->InitAsDefaultInstance();
  CSWarMapCardRqst::default_instance_->InitAsDefaultInstance();
  CSWarMapCardRsp::default_instance_->InitAsDefaultInstance();
  CSSweepWarRqst::default_instance_->InitAsDefaultInstance();
  CSSweepAward::default_instance_->InitAsDefaultInstance();
  CSSweepWarRsp::default_instance_->InitAsDefaultInstance();
  CSQueryEliteWarMapRqst::default_instance_->InitAsDefaultInstance();
  CSEliteWarInfo::default_instance_->InitAsDefaultInstance();
  CSResetEliteWarMapRqst::default_instance_->InitAsDefaultInstance();
  CSStartEliteWarMapRqst::default_instance_->InitAsDefaultInstance();
  CSStartEliteWarMapRsp::default_instance_->InitAsDefaultInstance();
  CSEndEliteWarMapRqst::default_instance_->InitAsDefaultInstance();
  CSEliteAward::default_instance_->InitAsDefaultInstance();
  CSEndEliteWarMapRsp::default_instance_->InitAsDefaultInstance();
  CSSweepEliteWarRqst::default_instance_->InitAsDefaultInstance();
  CSSweepEliteWarRsp::default_instance_->InitAsDefaultInstance();
  CSDailyInstanceElmt::default_instance_->InitAsDefaultInstance();
  CSQueryDailyInstanceRsp::default_instance_->InitAsDefaultInstance();
  CSDailyInstancePassRqst::default_instance_->InitAsDefaultInstance();
  CSDailyInstancePassRsp::default_instance_->InitAsDefaultInstance();
  CSReliveRqst::default_instance_->InitAsDefaultInstance();
  CSReliveRsp::default_instance_->InitAsDefaultInstance();
  CSBuyBulletRqst::default_instance_->InitAsDefaultInstance();
  CSBuyBulletRsp::default_instance_->InitAsDefaultInstance();
  CSBuyInstanceRqst::default_instance_->InitAsDefaultInstance();
  CSBuyInstanceRsp::default_instance_->InitAsDefaultInstance();
  CSWarmapStarAwardRqst::default_instance_->InitAsDefaultInstance();
  CSWarmapStarAwardRsp::default_instance_->InitAsDefaultInstance();
  CSWarMapRequest::default_instance_->InitAsDefaultInstance();
  CSWarMapRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSWarMapMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSWarMapMsg_2eproto_once_);
void protobuf_AddDesc_CSWarMapMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSWarMapMsg_2eproto_once_,
                 &protobuf_AddDesc_CSWarMapMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSWarMapMsg_2eproto {
  StaticDescriptorInitializer_CSWarMapMsg_2eproto() {
    protobuf_AddDesc_CSWarMapMsg_2eproto();
  }
} static_descriptor_initializer_CSWarMapMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSWarMapQueryRqst::kFromIdFieldNumber;
const int CSWarMapQueryRqst::kToIdFieldNumber;
#endif  // !_MSC_VER

CSWarMapQueryRqst::CSWarMapQueryRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapQueryRqst::InitAsDefaultInstance() {
}

CSWarMapQueryRqst::CSWarMapQueryRqst(const CSWarMapQueryRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapQueryRqst::SharedCtor() {
  _cached_size_ = 0;
  fromid_ = 0u;
  toid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapQueryRqst::~CSWarMapQueryRqst() {
  SharedDtor();
}

void CSWarMapQueryRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapQueryRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapQueryRqst& CSWarMapQueryRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapQueryRqst* CSWarMapQueryRqst::default_instance_ = NULL;

CSWarMapQueryRqst* CSWarMapQueryRqst::New() const {
  return new CSWarMapQueryRqst;
}

void CSWarMapQueryRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromid_ = 0u;
    toid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapQueryRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FromId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ToId;
        break;
      }

      // required uint32 ToId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapQueryRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 FromId = 1;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromid(), output);
  }

  // required uint32 ToId = 2;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->toid(), output);
  }

}

int CSWarMapQueryRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 FromId = 1;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // required uint32 ToId = 2;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapQueryRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapQueryRqst*>(&from));
}

void CSWarMapQueryRqst::MergeFrom(const CSWarMapQueryRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
  }
}

void CSWarMapQueryRqst::CopyFrom(const CSWarMapQueryRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapQueryRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSWarMapQueryRqst::Swap(CSWarMapQueryRqst* other) {
  if (other != this) {
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapQueryRqst::GetTypeName() const {
  return "vmsg.CSWarMapQueryRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapHidenAwardElmt::kPackageIDFieldNumber;
const int CSWarMapHidenAwardElmt::kPacakceStatusFieldNumber;
#endif  // !_MSC_VER

CSWarMapHidenAwardElmt::CSWarMapHidenAwardElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapHidenAwardElmt::InitAsDefaultInstance() {
}

CSWarMapHidenAwardElmt::CSWarMapHidenAwardElmt(const CSWarMapHidenAwardElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapHidenAwardElmt::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  pacakcestatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapHidenAwardElmt::~CSWarMapHidenAwardElmt() {
  SharedDtor();
}

void CSWarMapHidenAwardElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapHidenAwardElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapHidenAwardElmt& CSWarMapHidenAwardElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapHidenAwardElmt* CSWarMapHidenAwardElmt::default_instance_ = NULL;

CSWarMapHidenAwardElmt* CSWarMapHidenAwardElmt::New() const {
  return new CSWarMapHidenAwardElmt;
}

void CSWarMapHidenAwardElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    pacakcestatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapHidenAwardElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PackageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PacakceStatus;
        break;
      }

      // required uint32 PacakceStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PacakceStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pacakcestatus_)));
          set_has_pacakcestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapHidenAwardElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PackageID = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // required uint32 PacakceStatus = 2;
  if (has_pacakcestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pacakcestatus(), output);
  }

}

int CSWarMapHidenAwardElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PackageID = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // required uint32 PacakceStatus = 2;
    if (has_pacakcestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pacakcestatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapHidenAwardElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapHidenAwardElmt*>(&from));
}

void CSWarMapHidenAwardElmt::MergeFrom(const CSWarMapHidenAwardElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_pacakcestatus()) {
      set_pacakcestatus(from.pacakcestatus());
    }
  }
}

void CSWarMapHidenAwardElmt::CopyFrom(const CSWarMapHidenAwardElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapHidenAwardElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSWarMapHidenAwardElmt::Swap(CSWarMapHidenAwardElmt* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(pacakcestatus_, other->pacakcestatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapHidenAwardElmt::GetTypeName() const {
  return "vmsg.CSWarMapHidenAwardElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int CSStarAwardElmt::kStarCntFieldNumber;
const int CSStarAwardElmt::kStarAwardFieldNumber;
const int CSStarAwardElmt::kClaimStatusFieldNumber;
#endif  // !_MSC_VER

CSStarAwardElmt::CSStarAwardElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSStarAwardElmt::InitAsDefaultInstance() {
}

CSStarAwardElmt::CSStarAwardElmt(const CSStarAwardElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSStarAwardElmt::SharedCtor() {
  _cached_size_ = 0;
  starcnt_ = 0u;
  staraward_ = 0u;
  claimstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStarAwardElmt::~CSStarAwardElmt() {
  SharedDtor();
}

void CSStarAwardElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSStarAwardElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSStarAwardElmt& CSStarAwardElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSStarAwardElmt* CSStarAwardElmt::default_instance_ = NULL;

CSStarAwardElmt* CSStarAwardElmt::New() const {
  return new CSStarAwardElmt;
}

void CSStarAwardElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starcnt_ = 0u;
    staraward_ = 0u;
    claimstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSStarAwardElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StarCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starcnt_)));
          set_has_starcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StarAward;
        break;
      }

      // required uint32 StarAward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StarAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &staraward_)));
          set_has_staraward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ClaimStatus;
        break;
      }

      // required uint32 ClaimStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClaimStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimstatus_)));
          set_has_claimstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStarAwardElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StarCnt = 1;
  if (has_starcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starcnt(), output);
  }

  // required uint32 StarAward = 2;
  if (has_staraward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->staraward(), output);
  }

  // required uint32 ClaimStatus = 3;
  if (has_claimstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->claimstatus(), output);
  }

}

int CSStarAwardElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StarCnt = 1;
    if (has_starcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starcnt());
    }

    // required uint32 StarAward = 2;
    if (has_staraward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->staraward());
    }

    // required uint32 ClaimStatus = 3;
    if (has_claimstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStarAwardElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSStarAwardElmt*>(&from));
}

void CSStarAwardElmt::MergeFrom(const CSStarAwardElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starcnt()) {
      set_starcnt(from.starcnt());
    }
    if (from.has_staraward()) {
      set_staraward(from.staraward());
    }
    if (from.has_claimstatus()) {
      set_claimstatus(from.claimstatus());
    }
  }
}

void CSStarAwardElmt::CopyFrom(const CSStarAwardElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStarAwardElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSStarAwardElmt::Swap(CSStarAwardElmt* other) {
  if (other != this) {
    std::swap(starcnt_, other->starcnt_);
    std::swap(staraward_, other->staraward_);
    std::swap(claimstatus_, other->claimstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSStarAwardElmt::GetTypeName() const {
  return "vmsg.CSStarAwardElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarStarAward::kStarAwardsFieldNumber;
const int CSWarStarAward::kTotalStarCntFieldNumber;
#endif  // !_MSC_VER

CSWarStarAward::CSWarStarAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarStarAward::InitAsDefaultInstance() {
}

CSWarStarAward::CSWarStarAward(const CSWarStarAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarStarAward::SharedCtor() {
  _cached_size_ = 0;
  totalstarcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarStarAward::~CSWarStarAward() {
  SharedDtor();
}

void CSWarStarAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarStarAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarStarAward& CSWarStarAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarStarAward* CSWarStarAward::default_instance_ = NULL;

CSWarStarAward* CSWarStarAward::New() const {
  return new CSWarStarAward;
}

void CSWarStarAward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    totalstarcnt_ = 0u;
  }
  starawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarStarAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSStarAwardElmt StarAwards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StarAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_StarAwards;
        if (input->ExpectTag(16)) goto parse_TotalStarCnt;
        break;
      }

      // required uint32 TotalStarCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalStarCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalstarcnt_)));
          set_has_totalstarcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarStarAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSStarAwardElmt StarAwards = 1;
  for (int i = 0; i < this->starawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->starawards(i), output);
  }

  // required uint32 TotalStarCnt = 2;
  if (has_totalstarcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalstarcnt(), output);
  }

}

int CSWarStarAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 TotalStarCnt = 2;
    if (has_totalstarcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalstarcnt());
    }

  }
  // repeated .vmsg.CSStarAwardElmt StarAwards = 1;
  total_size += 1 * this->starawards_size();
  for (int i = 0; i < this->starawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starawards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarStarAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarStarAward*>(&from));
}

void CSWarStarAward::MergeFrom(const CSWarStarAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  starawards_.MergeFrom(from.starawards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_totalstarcnt()) {
      set_totalstarcnt(from.totalstarcnt());
    }
  }
}

void CSWarStarAward::CopyFrom(const CSWarStarAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarStarAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < starawards_size(); i++) {
    if (!this->starawards(i).IsInitialized()) return false;
  }
  return true;
}

void CSWarStarAward::Swap(CSWarStarAward* other) {
  if (other != this) {
    starawards_.Swap(&other->starawards_);
    std::swap(totalstarcnt_, other->totalstarcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarStarAward::GetTypeName() const {
  return "vmsg.CSWarStarAward";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapInfo::kScoreFieldNumber;
const int CSWarMapInfo::kFightCntFieldNumber;
const int CSWarMapInfo::kBoughtCntFieldNumber;
const int CSWarMapInfo::kTotalCntFieldNumber;
const int CSWarMapInfo::kHidenAwardsFieldNumber;
#endif  // !_MSC_VER

CSWarMapInfo::CSWarMapInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapInfo::InitAsDefaultInstance() {
}

CSWarMapInfo::CSWarMapInfo(const CSWarMapInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  fightcnt_ = 0u;
  boughtcnt_ = 0u;
  totalcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapInfo::~CSWarMapInfo() {
  SharedDtor();
}

void CSWarMapInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapInfo& CSWarMapInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapInfo* CSWarMapInfo::default_instance_ = NULL;

CSWarMapInfo* CSWarMapInfo::New() const {
  return new CSWarMapInfo;
}

void CSWarMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    fightcnt_ = 0u;
    boughtcnt_ = 0u;
    totalcnt_ = 0u;
  }
  hidenawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FightCnt;
        break;
      }

      // required uint32 FightCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcnt_)));
          set_has_fightcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BoughtCnt;
        break;
      }

      // required uint32 BoughtCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoughtCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughtcnt_)));
          set_has_boughtcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalCnt;
        break;
      }

      // required uint32 TotalCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcnt_)));
          set_has_totalcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HidenAwards;
        break;
      }

      // repeated .vmsg.CSWarMapHidenAwardElmt HidenAwards = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HidenAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hidenawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_HidenAwards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // required uint32 FightCnt = 2;
  if (has_fightcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fightcnt(), output);
  }

  // required uint32 BoughtCnt = 3;
  if (has_boughtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->boughtcnt(), output);
  }

  // required uint32 TotalCnt = 4;
  if (has_totalcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalcnt(), output);
  }

  // repeated .vmsg.CSWarMapHidenAwardElmt HidenAwards = 5;
  for (int i = 0; i < this->hidenawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->hidenawards(i), output);
  }

}

int CSWarMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 FightCnt = 2;
    if (has_fightcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcnt());
    }

    // required uint32 BoughtCnt = 3;
    if (has_boughtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughtcnt());
    }

    // required uint32 TotalCnt = 4;
    if (has_totalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcnt());
    }

  }
  // repeated .vmsg.CSWarMapHidenAwardElmt HidenAwards = 5;
  total_size += 1 * this->hidenawards_size();
  for (int i = 0; i < this->hidenawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hidenawards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapInfo*>(&from));
}

void CSWarMapInfo::MergeFrom(const CSWarMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hidenawards_.MergeFrom(from.hidenawards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_fightcnt()) {
      set_fightcnt(from.fightcnt());
    }
    if (from.has_boughtcnt()) {
      set_boughtcnt(from.boughtcnt());
    }
    if (from.has_totalcnt()) {
      set_totalcnt(from.totalcnt());
    }
  }
}

void CSWarMapInfo::CopyFrom(const CSWarMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < hidenawards_size(); i++) {
    if (!this->hidenawards(i).IsInitialized()) return false;
  }
  return true;
}

void CSWarMapInfo::Swap(CSWarMapInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(fightcnt_, other->fightcnt_);
    std::swap(boughtcnt_, other->boughtcnt_);
    std::swap(totalcnt_, other->totalcnt_);
    hidenawards_.Swap(&other->hidenawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapInfo::GetTypeName() const {
  return "vmsg.CSWarMapInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapQueryRsp::kFromIdFieldNumber;
const int CSWarMapQueryRsp::kToIdFieldNumber;
const int CSWarMapQueryRsp::kInfosFieldNumber;
const int CSWarMapQueryRsp::kNewestWarMapIDFieldNumber;
const int CSWarMapQueryRsp::kInBattleWeaponsFieldNumber;
const int CSWarMapQueryRsp::kWarStarAwardsFieldNumber;
#endif  // !_MSC_VER

CSWarMapQueryRsp::CSWarMapQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapQueryRsp::InitAsDefaultInstance() {
}

CSWarMapQueryRsp::CSWarMapQueryRsp(const CSWarMapQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  fromid_ = 0u;
  toid_ = 0u;
  newestwarmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapQueryRsp::~CSWarMapQueryRsp() {
  SharedDtor();
}

void CSWarMapQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapQueryRsp& CSWarMapQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapQueryRsp* CSWarMapQueryRsp::default_instance_ = NULL;

CSWarMapQueryRsp* CSWarMapQueryRsp::New() const {
  return new CSWarMapQueryRsp;
}

void CSWarMapQueryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromid_ = 0u;
    toid_ = 0u;
    newestwarmapid_ = 0u;
  }
  infos_.Clear();
  inbattleweapons_.Clear();
  warstarawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FromId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ToId;
        break;
      }

      // required uint32 ToId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &toid_)));
          set_has_toid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Infos;
        break;
      }

      // repeated .vmsg.CSWarMapInfo Infos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Infos;
        if (input->ExpectTag(32)) goto parse_NewestWarMapID;
        break;
      }

      // required uint32 NewestWarMapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewestWarMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newestwarmapid_)));
          set_has_newestwarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InBattleWeapons;
        break;
      }

      // repeated .vmsg.CSWeapon InBattleWeapons = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InBattleWeapons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inbattleweapons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InBattleWeapons;
        if (input->ExpectTag(50)) goto parse_WarStarAwards;
        break;
      }

      // repeated .vmsg.CSWarStarAward WarStarAwards = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarStarAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warstarawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_WarStarAwards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 FromId = 1;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromid(), output);
  }

  // required uint32 ToId = 2;
  if (has_toid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->toid(), output);
  }

  // repeated .vmsg.CSWarMapInfo Infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->infos(i), output);
  }

  // required uint32 NewestWarMapID = 4;
  if (has_newestwarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newestwarmapid(), output);
  }

  // repeated .vmsg.CSWeapon InBattleWeapons = 5;
  for (int i = 0; i < this->inbattleweapons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->inbattleweapons(i), output);
  }

  // repeated .vmsg.CSWarStarAward WarStarAwards = 6;
  for (int i = 0; i < this->warstarawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->warstarawards(i), output);
  }

}

int CSWarMapQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 FromId = 1;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromid());
    }

    // required uint32 ToId = 2;
    if (has_toid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->toid());
    }

    // required uint32 NewestWarMapID = 4;
    if (has_newestwarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newestwarmapid());
    }

  }
  // repeated .vmsg.CSWarMapInfo Infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .vmsg.CSWeapon InBattleWeapons = 5;
  total_size += 1 * this->inbattleweapons_size();
  for (int i = 0; i < this->inbattleweapons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inbattleweapons(i));
  }

  // repeated .vmsg.CSWarStarAward WarStarAwards = 6;
  total_size += 1 * this->warstarawards_size();
  for (int i = 0; i < this->warstarawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warstarawards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapQueryRsp*>(&from));
}

void CSWarMapQueryRsp::MergeFrom(const CSWarMapQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  inbattleweapons_.MergeFrom(from.inbattleweapons_);
  warstarawards_.MergeFrom(from.warstarawards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_toid()) {
      set_toid(from.toid());
    }
    if (from.has_newestwarmapid()) {
      set_newestwarmapid(from.newestwarmapid());
    }
  }
}

void CSWarMapQueryRsp::CopyFrom(const CSWarMapQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < inbattleweapons_size(); i++) {
    if (!this->inbattleweapons(i).IsInitialized()) return false;
  }
  for (int i = 0; i < warstarawards_size(); i++) {
    if (!this->warstarawards(i).IsInitialized()) return false;
  }
  return true;
}

void CSWarMapQueryRsp::Swap(CSWarMapQueryRsp* other) {
  if (other != this) {
    std::swap(fromid_, other->fromid_);
    std::swap(toid_, other->toid_);
    infos_.Swap(&other->infos_);
    std::swap(newestwarmapid_, other->newestwarmapid_);
    inbattleweapons_.Swap(&other->inbattleweapons_);
    warstarawards_.Swap(&other->warstarawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapQueryRsp::GetTypeName() const {
  return "vmsg.CSWarMapQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapStartRqst::kWarMapIdFieldNumber;
#endif  // !_MSC_VER

CSWarMapStartRqst::CSWarMapStartRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapStartRqst::InitAsDefaultInstance() {
}

CSWarMapStartRqst::CSWarMapStartRqst(const CSWarMapStartRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapStartRqst::SharedCtor() {
  _cached_size_ = 0;
  warmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapStartRqst::~CSWarMapStartRqst() {
  SharedDtor();
}

void CSWarMapStartRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapStartRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapStartRqst& CSWarMapStartRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapStartRqst* CSWarMapStartRqst::default_instance_ = NULL;

CSWarMapStartRqst* CSWarMapStartRqst::New() const {
  return new CSWarMapStartRqst;
}

void CSWarMapStartRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warmapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapStartRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmapid_)));
          set_has_warmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapStartRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarMapId = 1;
  if (has_warmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warmapid(), output);
  }

}

int CSWarMapStartRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarMapId = 1;
    if (has_warmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warmapid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapStartRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapStartRqst*>(&from));
}

void CSWarMapStartRqst::MergeFrom(const CSWarMapStartRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapid()) {
      set_warmapid(from.warmapid());
    }
  }
}

void CSWarMapStartRqst::CopyFrom(const CSWarMapStartRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapStartRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSWarMapStartRqst::Swap(CSWarMapStartRqst* other) {
  if (other != this) {
    std::swap(warmapid_, other->warmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapStartRqst::GetTypeName() const {
  return "vmsg.CSWarMapStartRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapDropInfo::kIdFieldNumber;
const int CSWarMapDropInfo::kDropCntFieldNumber;
#endif  // !_MSC_VER

CSWarMapDropInfo::CSWarMapDropInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapDropInfo::InitAsDefaultInstance() {
}

CSWarMapDropInfo::CSWarMapDropInfo(const CSWarMapDropInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapDropInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  dropcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapDropInfo::~CSWarMapDropInfo() {
  SharedDtor();
}

void CSWarMapDropInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapDropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapDropInfo& CSWarMapDropInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapDropInfo* CSWarMapDropInfo::default_instance_ = NULL;

CSWarMapDropInfo* CSWarMapDropInfo::New() const {
  return new CSWarMapDropInfo;
}

void CSWarMapDropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    dropcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapDropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DropCnt;
        break;
      }

      // required uint32 DropCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DropCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropcnt_)));
          set_has_dropcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapDropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 DropCnt = 2;
  if (has_dropcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dropcnt(), output);
  }

}

int CSWarMapDropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 DropCnt = 2;
    if (has_dropcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapDropInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapDropInfo*>(&from));
}

void CSWarMapDropInfo::MergeFrom(const CSWarMapDropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dropcnt()) {
      set_dropcnt(from.dropcnt());
    }
  }
}

void CSWarMapDropInfo::CopyFrom(const CSWarMapDropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapDropInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSWarMapDropInfo::Swap(CSWarMapDropInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(dropcnt_, other->dropcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapDropInfo::GetTypeName() const {
  return "vmsg.CSWarMapDropInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapStartRsp::kWarMapIdFieldNumber;
#endif  // !_MSC_VER

CSWarMapStartRsp::CSWarMapStartRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapStartRsp::InitAsDefaultInstance() {
}

CSWarMapStartRsp::CSWarMapStartRsp(const CSWarMapStartRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapStartRsp::SharedCtor() {
  _cached_size_ = 0;
  warmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapStartRsp::~CSWarMapStartRsp() {
  SharedDtor();
}

void CSWarMapStartRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapStartRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapStartRsp& CSWarMapStartRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapStartRsp* CSWarMapStartRsp::default_instance_ = NULL;

CSWarMapStartRsp* CSWarMapStartRsp::New() const {
  return new CSWarMapStartRsp;
}

void CSWarMapStartRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warmapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapStartRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmapid_)));
          set_has_warmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapStartRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarMapId = 1;
  if (has_warmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warmapid(), output);
  }

}

int CSWarMapStartRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarMapId = 1;
    if (has_warmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warmapid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapStartRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapStartRsp*>(&from));
}

void CSWarMapStartRsp::MergeFrom(const CSWarMapStartRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapid()) {
      set_warmapid(from.warmapid());
    }
  }
}

void CSWarMapStartRsp::CopyFrom(const CSWarMapStartRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapStartRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSWarMapStartRsp::Swap(CSWarMapStartRsp* other) {
  if (other != this) {
    std::swap(warmapid_, other->warmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapStartRsp::GetTypeName() const {
  return "vmsg.CSWarMapStartRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSKillMonsterInfo::kMonsterIDFieldNumber;
const int CSKillMonsterInfo::kMonsterCntFieldNumber;
#endif  // !_MSC_VER

CSKillMonsterInfo::CSKillMonsterInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSKillMonsterInfo::InitAsDefaultInstance() {
}

CSKillMonsterInfo::CSKillMonsterInfo(const CSKillMonsterInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSKillMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  monstercnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSKillMonsterInfo::~CSKillMonsterInfo() {
  SharedDtor();
}

void CSKillMonsterInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSKillMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSKillMonsterInfo& CSKillMonsterInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSKillMonsterInfo* CSKillMonsterInfo::default_instance_ = NULL;

CSKillMonsterInfo* CSKillMonsterInfo::New() const {
  return new CSKillMonsterInfo;
}

void CSKillMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    monstercnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSKillMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsterCnt;
        break;
      }

      // required uint32 MonsterCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monstercnt_)));
          set_has_monstercnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSKillMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint32 MonsterCnt = 2;
  if (has_monstercnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monstercnt(), output);
  }

}

int CSKillMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint32 MonsterCnt = 2;
    if (has_monstercnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monstercnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSKillMonsterInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSKillMonsterInfo*>(&from));
}

void CSKillMonsterInfo::MergeFrom(const CSKillMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monstercnt()) {
      set_monstercnt(from.monstercnt());
    }
  }
}

void CSKillMonsterInfo::CopyFrom(const CSKillMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSKillMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSKillMonsterInfo::Swap(CSKillMonsterInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monstercnt_, other->monstercnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSKillMonsterInfo::GetTypeName() const {
  return "vmsg.CSKillMonsterInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapEndRqst::kWarMapIdFieldNumber;
const int CSWarMapEndRqst::kMonsterInfosFieldNumber;
const int CSWarMapEndRqst::kBossIDFieldNumber;
const int CSWarMapEndRqst::kEvolutionUseCntFieldNumber;
const int CSWarMapEndRqst::kScoreFieldNumber;
const int CSWarMapEndRqst::kHidenAwardCellFieldNumber;
#endif  // !_MSC_VER

CSWarMapEndRqst::CSWarMapEndRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapEndRqst::InitAsDefaultInstance() {
}

CSWarMapEndRqst::CSWarMapEndRqst(const CSWarMapEndRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapEndRqst::SharedCtor() {
  _cached_size_ = 0;
  warmapid_ = 0u;
  bossid_ = 0u;
  evolutionusecnt_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapEndRqst::~CSWarMapEndRqst() {
  SharedDtor();
}

void CSWarMapEndRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapEndRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapEndRqst& CSWarMapEndRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapEndRqst* CSWarMapEndRqst::default_instance_ = NULL;

CSWarMapEndRqst* CSWarMapEndRqst::New() const {
  return new CSWarMapEndRqst;
}

void CSWarMapEndRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warmapid_ = 0u;
    bossid_ = 0u;
    evolutionusecnt_ = 0u;
    score_ = 0u;
  }
  monsterinfos_.Clear();
  hidenawardcell_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapEndRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmapid_)));
          set_has_warmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MonsterInfos;
        break;
      }

      // repeated .vmsg.CSKillMonsterInfo MonsterInfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MonsterInfos;
        if (input->ExpectTag(48)) goto parse_BossID;
        break;
      }

      // required uint32 BossID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_EvolutionUseCnt;
        break;
      }

      // required uint32 EvolutionUseCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionUseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionusecnt_)));
          set_has_evolutionusecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Score;
        break;
      }

      // required uint32 Score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_HidenAwardCell;
        break;
      }

      // repeated uint32 HidenAwardCell = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HidenAwardCell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 72, input, this->mutable_hidenawardcell())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hidenawardcell())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_HidenAwardCell;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapEndRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarMapId = 1;
  if (has_warmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warmapid(), output);
  }

  // repeated .vmsg.CSKillMonsterInfo MonsterInfos = 5;
  for (int i = 0; i < this->monsterinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->monsterinfos(i), output);
  }

  // required uint32 BossID = 6;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bossid(), output);
  }

  // required uint32 EvolutionUseCnt = 7;
  if (has_evolutionusecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->evolutionusecnt(), output);
  }

  // required uint32 Score = 8;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->score(), output);
  }

  // repeated uint32 HidenAwardCell = 9;
  for (int i = 0; i < this->hidenawardcell_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      9, this->hidenawardcell(i), output);
  }

}

int CSWarMapEndRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarMapId = 1;
    if (has_warmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warmapid());
    }

    // required uint32 BossID = 6;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // required uint32 EvolutionUseCnt = 7;
    if (has_evolutionusecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionusecnt());
    }

    // required uint32 Score = 8;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .vmsg.CSKillMonsterInfo MonsterInfos = 5;
  total_size += 1 * this->monsterinfos_size();
  for (int i = 0; i < this->monsterinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterinfos(i));
  }

  // repeated uint32 HidenAwardCell = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->hidenawardcell_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hidenawardcell(i));
    }
    total_size += 1 * this->hidenawardcell_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapEndRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapEndRqst*>(&from));
}

void CSWarMapEndRqst::MergeFrom(const CSWarMapEndRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterinfos_.MergeFrom(from.monsterinfos_);
  hidenawardcell_.MergeFrom(from.hidenawardcell_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapid()) {
      set_warmapid(from.warmapid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_evolutionusecnt()) {
      set_evolutionusecnt(from.evolutionusecnt());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CSWarMapEndRqst::CopyFrom(const CSWarMapEndRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapEndRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  for (int i = 0; i < monsterinfos_size(); i++) {
    if (!this->monsterinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CSWarMapEndRqst::Swap(CSWarMapEndRqst* other) {
  if (other != this) {
    std::swap(warmapid_, other->warmapid_);
    monsterinfos_.Swap(&other->monsterinfos_);
    std::swap(bossid_, other->bossid_);
    std::swap(evolutionusecnt_, other->evolutionusecnt_);
    std::swap(score_, other->score_);
    hidenawardcell_.Swap(&other->hidenawardcell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapEndRqst::GetTypeName() const {
  return "vmsg.CSWarMapEndRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapEndRsp::kPackAwardsFieldNumber;
const int CSWarMapEndRsp::kAwardCoinFieldNumber;
const int CSWarMapEndRsp::kAwardExpFieldNumber;
const int CSWarMapEndRsp::kHidenAwardsFieldNumber;
#endif  // !_MSC_VER

CSWarMapEndRsp::CSWarMapEndRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapEndRsp::InitAsDefaultInstance() {
}

CSWarMapEndRsp::CSWarMapEndRsp(const CSWarMapEndRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapEndRsp::SharedCtor() {
  _cached_size_ = 0;
  awardcoin_ = 0u;
  awardexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapEndRsp::~CSWarMapEndRsp() {
  SharedDtor();
}

void CSWarMapEndRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapEndRsp& CSWarMapEndRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapEndRsp* CSWarMapEndRsp::default_instance_ = NULL;

CSWarMapEndRsp* CSWarMapEndRsp::New() const {
  return new CSWarMapEndRsp;
}

void CSWarMapEndRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    awardcoin_ = 0u;
    awardexp_ = 0u;
  }
  packawards_.Clear();
  hidenawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSAwardElement PackAwards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PackAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PackAwards;
        if (input->ExpectTag(16)) goto parse_AwardCoin;
        break;
      }

      // required uint32 AwardCoin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcoin_)));
          set_has_awardcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AwardExp;
        break;
      }

      // required uint32 AwardExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardexp_)));
          set_has_awardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_HidenAwards;
        break;
      }

      // repeated .vmsg.CSAwardElement HidenAwards = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HidenAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hidenawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_HidenAwards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSAwardElement PackAwards = 1;
  for (int i = 0; i < this->packawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->packawards(i), output);
  }

  // required uint32 AwardCoin = 2;
  if (has_awardcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardcoin(), output);
  }

  // required uint32 AwardExp = 3;
  if (has_awardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->awardexp(), output);
  }

  // repeated .vmsg.CSAwardElement HidenAwards = 4;
  for (int i = 0; i < this->hidenawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->hidenawards(i), output);
  }

}

int CSWarMapEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 AwardCoin = 2;
    if (has_awardcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcoin());
    }

    // required uint32 AwardExp = 3;
    if (has_awardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardexp());
    }

  }
  // repeated .vmsg.CSAwardElement PackAwards = 1;
  total_size += 1 * this->packawards_size();
  for (int i = 0; i < this->packawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packawards(i));
  }

  // repeated .vmsg.CSAwardElement HidenAwards = 4;
  total_size += 1 * this->hidenawards_size();
  for (int i = 0; i < this->hidenawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hidenawards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapEndRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapEndRsp*>(&from));
}

void CSWarMapEndRsp::MergeFrom(const CSWarMapEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  packawards_.MergeFrom(from.packawards_);
  hidenawards_.MergeFrom(from.hidenawards_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_awardcoin()) {
      set_awardcoin(from.awardcoin());
    }
    if (from.has_awardexp()) {
      set_awardexp(from.awardexp());
    }
  }
}

void CSWarMapEndRsp::CopyFrom(const CSWarMapEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < packawards_size(); i++) {
    if (!this->packawards(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hidenawards_size(); i++) {
    if (!this->hidenawards(i).IsInitialized()) return false;
  }
  return true;
}

void CSWarMapEndRsp::Swap(CSWarMapEndRsp* other) {
  if (other != this) {
    packawards_.Swap(&other->packawards_);
    std::swap(awardcoin_, other->awardcoin_);
    std::swap(awardexp_, other->awardexp_);
    hidenawards_.Swap(&other->hidenawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapEndRsp::GetTypeName() const {
  return "vmsg.CSWarMapEndRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapCardRqst::kWarMapIdFieldNumber;
const int CSWarMapCardRqst::kIsFreeFieldNumber;
#endif  // !_MSC_VER

CSWarMapCardRqst::CSWarMapCardRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapCardRqst::InitAsDefaultInstance() {
}

CSWarMapCardRqst::CSWarMapCardRqst(const CSWarMapCardRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapCardRqst::SharedCtor() {
  _cached_size_ = 0;
  warmapid_ = 0u;
  isfree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapCardRqst::~CSWarMapCardRqst() {
  SharedDtor();
}

void CSWarMapCardRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapCardRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapCardRqst& CSWarMapCardRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapCardRqst* CSWarMapCardRqst::default_instance_ = NULL;

CSWarMapCardRqst* CSWarMapCardRqst::New() const {
  return new CSWarMapCardRqst;
}

void CSWarMapCardRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warmapid_ = 0u;
    isfree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapCardRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarMapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmapid_)));
          set_has_warmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsFree;
        break;
      }

      // required uint32 IsFree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfree_)));
          set_has_isfree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapCardRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarMapId = 1;
  if (has_warmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warmapid(), output);
  }

  // required uint32 IsFree = 2;
  if (has_isfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->isfree(), output);
  }

}

int CSWarMapCardRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarMapId = 1;
    if (has_warmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warmapid());
    }

    // required uint32 IsFree = 2;
    if (has_isfree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfree());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapCardRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapCardRqst*>(&from));
}

void CSWarMapCardRqst::MergeFrom(const CSWarMapCardRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapid()) {
      set_warmapid(from.warmapid());
    }
    if (from.has_isfree()) {
      set_isfree(from.isfree());
    }
  }
}

void CSWarMapCardRqst::CopyFrom(const CSWarMapCardRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapCardRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSWarMapCardRqst::Swap(CSWarMapCardRqst* other) {
  if (other != this) {
    std::swap(warmapid_, other->warmapid_);
    std::swap(isfree_, other->isfree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapCardRqst::GetTypeName() const {
  return "vmsg.CSWarMapCardRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapCardRsp::kIsFreeFieldNumber;
const int CSWarMapCardRsp::kAwardTypeFieldNumber;
const int CSWarMapCardRsp::kAwardIDFieldNumber;
const int CSWarMapCardRsp::kAwardCntFieldNumber;
#endif  // !_MSC_VER

CSWarMapCardRsp::CSWarMapCardRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapCardRsp::InitAsDefaultInstance() {
}

CSWarMapCardRsp::CSWarMapCardRsp(const CSWarMapCardRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapCardRsp::SharedCtor() {
  _cached_size_ = 0;
  isfree_ = 0u;
  awardtype_ = 0u;
  awardid_ = 0u;
  awardcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapCardRsp::~CSWarMapCardRsp() {
  SharedDtor();
}

void CSWarMapCardRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarMapCardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapCardRsp& CSWarMapCardRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapCardRsp* CSWarMapCardRsp::default_instance_ = NULL;

CSWarMapCardRsp* CSWarMapCardRsp::New() const {
  return new CSWarMapCardRsp;
}

void CSWarMapCardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isfree_ = 0u;
    awardtype_ = 0u;
    awardid_ = 0u;
    awardcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapCardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IsFree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isfree_)));
          set_has_isfree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardType;
        break;
      }

      // required uint32 AwardType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AwardID;
        break;
      }

      // required uint32 AwardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardid_)));
          set_has_awardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardCnt;
        break;
      }

      // required uint32 AwardCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcnt_)));
          set_has_awardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapCardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IsFree = 1;
  if (has_isfree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isfree(), output);
  }

  // required uint32 AwardType = 2;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardtype(), output);
  }

  // required uint32 AwardID = 3;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->awardid(), output);
  }

  // required uint32 AwardCnt = 4;
  if (has_awardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->awardcnt(), output);
  }

}

int CSWarMapCardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IsFree = 1;
    if (has_isfree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isfree());
    }

    // required uint32 AwardType = 2;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // required uint32 AwardID = 3;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardid());
    }

    // required uint32 AwardCnt = 4;
    if (has_awardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapCardRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapCardRsp*>(&from));
}

void CSWarMapCardRsp::MergeFrom(const CSWarMapCardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isfree()) {
      set_isfree(from.isfree());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardid()) {
      set_awardid(from.awardid());
    }
    if (from.has_awardcnt()) {
      set_awardcnt(from.awardcnt());
    }
  }
}

void CSWarMapCardRsp::CopyFrom(const CSWarMapCardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapCardRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSWarMapCardRsp::Swap(CSWarMapCardRsp* other) {
  if (other != this) {
    std::swap(isfree_, other->isfree_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardid_, other->awardid_);
    std::swap(awardcnt_, other->awardcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapCardRsp::GetTypeName() const {
  return "vmsg.CSWarMapCardRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSweepWarRqst::kWarMapIDFieldNumber;
const int CSSweepWarRqst::kSweepRoundFieldNumber;
#endif  // !_MSC_VER

CSSweepWarRqst::CSSweepWarRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSweepWarRqst::InitAsDefaultInstance() {
}

CSSweepWarRqst::CSSweepWarRqst(const CSSweepWarRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSweepWarRqst::SharedCtor() {
  _cached_size_ = 0;
  warmapid_ = 0u;
  sweepround_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSweepWarRqst::~CSSweepWarRqst() {
  SharedDtor();
}

void CSSweepWarRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSweepWarRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSweepWarRqst& CSSweepWarRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSSweepWarRqst* CSSweepWarRqst::default_instance_ = NULL;

CSSweepWarRqst* CSSweepWarRqst::New() const {
  return new CSSweepWarRqst;
}

void CSSweepWarRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warmapid_ = 0u;
    sweepround_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSweepWarRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warmapid_)));
          set_has_warmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SweepRound;
        break;
      }

      // required uint32 SweepRound = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SweepRound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sweepround_)));
          set_has_sweepround();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSweepWarRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarMapID = 1;
  if (has_warmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warmapid(), output);
  }

  // required uint32 SweepRound = 2;
  if (has_sweepround()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sweepround(), output);
  }

}

int CSSweepWarRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarMapID = 1;
    if (has_warmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warmapid());
    }

    // required uint32 SweepRound = 2;
    if (has_sweepround()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sweepround());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSweepWarRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSweepWarRqst*>(&from));
}

void CSSweepWarRqst::MergeFrom(const CSSweepWarRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapid()) {
      set_warmapid(from.warmapid());
    }
    if (from.has_sweepround()) {
      set_sweepround(from.sweepround());
    }
  }
}

void CSSweepWarRqst::CopyFrom(const CSSweepWarRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSweepWarRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSSweepWarRqst::Swap(CSSweepWarRqst* other) {
  if (other != this) {
    std::swap(warmapid_, other->warmapid_);
    std::swap(sweepround_, other->sweepround_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSweepWarRqst::GetTypeName() const {
  return "vmsg.CSSweepWarRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSweepAward::kAwardFieldNumber;
const int CSSweepAward::kExpFieldNumber;
const int CSSweepAward::kCoinFieldNumber;
#endif  // !_MSC_VER

CSSweepAward::CSSweepAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSweepAward::InitAsDefaultInstance() {
}

CSSweepAward::CSSweepAward(const CSSweepAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSweepAward::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSweepAward::~CSSweepAward() {
  SharedDtor();
}

void CSSweepAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSweepAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSweepAward& CSSweepAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSSweepAward* CSSweepAward::default_instance_ = NULL;

CSSweepAward* CSSweepAward::New() const {
  return new CSSweepAward;
}

void CSSweepAward::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    exp_ = 0u;
    coin_ = 0u;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSweepAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSAwardElement Award = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Award;
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // required uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Coin;
        break;
      }

      // required uint32 Coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSweepAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSAwardElement Award = 1;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->award(i), output);
  }

  // required uint32 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // required uint32 Coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

}

int CSSweepAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 Coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  // repeated .vmsg.CSAwardElement Award = 1;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSweepAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSweepAward*>(&from));
}

void CSSweepAward::MergeFrom(const CSSweepAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
}

void CSSweepAward::CopyFrom(const CSSweepAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSweepAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < award_size(); i++) {
    if (!this->award(i).IsInitialized()) return false;
  }
  return true;
}

void CSSweepAward::Swap(CSSweepAward* other) {
  if (other != this) {
    award_.Swap(&other->award_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSweepAward::GetTypeName() const {
  return "vmsg.CSSweepAward";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSweepWarRsp::kAwardLstFieldNumber;
const int CSSweepWarRsp::kErrorNoFieldNumber;
const int CSSweepWarRsp::kBagInfoFieldNumber;
#endif  // !_MSC_VER

CSSweepWarRsp::CSSweepWarRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSweepWarRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSSweepWarRsp::CSSweepWarRsp(const CSSweepWarRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSweepWarRsp::SharedCtor() {
  _cached_size_ = 0;
  errorno_ = 0u;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSweepWarRsp::~CSSweepWarRsp() {
  SharedDtor();
}

void CSSweepWarRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSSweepWarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSweepWarRsp& CSSweepWarRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSSweepWarRsp* CSSweepWarRsp::default_instance_ = NULL;

CSSweepWarRsp* CSSweepWarRsp::New() const {
  return new CSSweepWarRsp;
}

void CSSweepWarRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    errorno_ = 0u;
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSweepWarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSSweepAward AwardLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AwardLst;
        if (input->ExpectTag(16)) goto parse_ErrorNo;
        break;
      }

      // required uint32 ErrorNo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BagInfo;
        break;
      }

      // required .vmsg.CSBagInfo BagInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSweepWarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSSweepAward AwardLst = 1;
  for (int i = 0; i < this->awardlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->awardlst(i), output);
  }

  // required uint32 ErrorNo = 2;
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errorno(), output);
  }

  // required .vmsg.CSBagInfo BagInfo = 3;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->baginfo(), output);
  }

}

int CSSweepWarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 ErrorNo = 2;
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorno());
    }

    // required .vmsg.CSBagInfo BagInfo = 3;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.CSSweepAward AwardLst = 1;
  total_size += 1 * this->awardlst_size();
  for (int i = 0; i < this->awardlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSweepWarRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSweepWarRsp*>(&from));
}

void CSSweepWarRsp::MergeFrom(const CSSweepWarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlst_.MergeFrom(from.awardlst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void CSSweepWarRsp::CopyFrom(const CSSweepWarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSweepWarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < awardlst_size(); i++) {
    if (!this->awardlst(i).IsInitialized()) return false;
  }
  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  return true;
}

void CSSweepWarRsp::Swap(CSSweepWarRsp* other) {
  if (other != this) {
    awardlst_.Swap(&other->awardlst_);
    std::swap(errorno_, other->errorno_);
    std::swap(baginfo_, other->baginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSweepWarRsp::GetTypeName() const {
  return "vmsg.CSSweepWarRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryEliteWarMapRqst::kEliteWarIDFieldNumber;
#endif  // !_MSC_VER

CSQueryEliteWarMapRqst::CSQueryEliteWarMapRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryEliteWarMapRqst::InitAsDefaultInstance() {
}

CSQueryEliteWarMapRqst::CSQueryEliteWarMapRqst(const CSQueryEliteWarMapRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryEliteWarMapRqst::SharedCtor() {
  _cached_size_ = 0;
  elitewarid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryEliteWarMapRqst::~CSQueryEliteWarMapRqst() {
  SharedDtor();
}

void CSQueryEliteWarMapRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryEliteWarMapRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryEliteWarMapRqst& CSQueryEliteWarMapRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryEliteWarMapRqst* CSQueryEliteWarMapRqst::default_instance_ = NULL;

CSQueryEliteWarMapRqst* CSQueryEliteWarMapRqst::New() const {
  return new CSQueryEliteWarMapRqst;
}

void CSQueryEliteWarMapRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryEliteWarMapRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarid_)));
          set_has_elitewarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryEliteWarMapRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarID = 1;
  if (has_elitewarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarid(), output);
  }

}

int CSQueryEliteWarMapRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarID = 1;
    if (has_elitewarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryEliteWarMapRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryEliteWarMapRqst*>(&from));
}

void CSQueryEliteWarMapRqst::MergeFrom(const CSQueryEliteWarMapRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarid()) {
      set_elitewarid(from.elitewarid());
    }
  }
}

void CSQueryEliteWarMapRqst::CopyFrom(const CSQueryEliteWarMapRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryEliteWarMapRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSQueryEliteWarMapRqst::Swap(CSQueryEliteWarMapRqst* other) {
  if (other != this) {
    std::swap(elitewarid_, other->elitewarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryEliteWarMapRqst::GetTypeName() const {
  return "vmsg.CSQueryEliteWarMapRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEliteWarInfo::kEliteWarIDFieldNumber;
const int CSEliteWarInfo::kFightMapIDsFieldNumber;
const int CSEliteWarInfo::kRemainResetCntFieldNumber;
const int CSEliteWarInfo::kMaxEliteWarMapIDFieldNumber;
const int CSEliteWarInfo::kResetCostFieldNumber;
#endif  // !_MSC_VER

CSEliteWarInfo::CSEliteWarInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEliteWarInfo::InitAsDefaultInstance() {
}

CSEliteWarInfo::CSEliteWarInfo(const CSEliteWarInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEliteWarInfo::SharedCtor() {
  _cached_size_ = 0;
  elitewarid_ = 0u;
  remainresetcnt_ = 0u;
  maxelitewarmapid_ = 0u;
  resetcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEliteWarInfo::~CSEliteWarInfo() {
  SharedDtor();
}

void CSEliteWarInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEliteWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEliteWarInfo& CSEliteWarInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSEliteWarInfo* CSEliteWarInfo::default_instance_ = NULL;

CSEliteWarInfo* CSEliteWarInfo::New() const {
  return new CSEliteWarInfo;
}

void CSEliteWarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarid_ = 0u;
    remainresetcnt_ = 0u;
    maxelitewarmapid_ = 0u;
    resetcost_ = 0u;
  }
  fightmapids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEliteWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarid_)));
          set_has_elitewarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FightMapIDs;
        break;
      }

      // repeated uint32 FightMapIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightMapIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_fightmapids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fightmapids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FightMapIDs;
        if (input->ExpectTag(24)) goto parse_RemainResetCnt;
        break;
      }

      // required uint32 RemainResetCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainResetCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainresetcnt_)));
          set_has_remainresetcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxEliteWarMapID;
        break;
      }

      // required uint32 MaxEliteWarMapID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxEliteWarMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxelitewarmapid_)));
          set_has_maxelitewarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ResetCost;
        break;
      }

      // required uint32 ResetCost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResetCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetcost_)));
          set_has_resetcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEliteWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarID = 1;
  if (has_elitewarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarid(), output);
  }

  // repeated uint32 FightMapIDs = 2;
  for (int i = 0; i < this->fightmapids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->fightmapids(i), output);
  }

  // required uint32 RemainResetCnt = 3;
  if (has_remainresetcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remainresetcnt(), output);
  }

  // required uint32 MaxEliteWarMapID = 4;
  if (has_maxelitewarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxelitewarmapid(), output);
  }

  // required uint32 ResetCost = 5;
  if (has_resetcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resetcost(), output);
  }

}

int CSEliteWarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarID = 1;
    if (has_elitewarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarid());
    }

    // required uint32 RemainResetCnt = 3;
    if (has_remainresetcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainresetcnt());
    }

    // required uint32 MaxEliteWarMapID = 4;
    if (has_maxelitewarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxelitewarmapid());
    }

    // required uint32 ResetCost = 5;
    if (has_resetcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetcost());
    }

  }
  // repeated uint32 FightMapIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fightmapids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fightmapids(i));
    }
    total_size += 1 * this->fightmapids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEliteWarInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEliteWarInfo*>(&from));
}

void CSEliteWarInfo::MergeFrom(const CSEliteWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightmapids_.MergeFrom(from.fightmapids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarid()) {
      set_elitewarid(from.elitewarid());
    }
    if (from.has_remainresetcnt()) {
      set_remainresetcnt(from.remainresetcnt());
    }
    if (from.has_maxelitewarmapid()) {
      set_maxelitewarmapid(from.maxelitewarmapid());
    }
    if (from.has_resetcost()) {
      set_resetcost(from.resetcost());
    }
  }
}

void CSEliteWarInfo::CopyFrom(const CSEliteWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEliteWarInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  return true;
}

void CSEliteWarInfo::Swap(CSEliteWarInfo* other) {
  if (other != this) {
    std::swap(elitewarid_, other->elitewarid_);
    fightmapids_.Swap(&other->fightmapids_);
    std::swap(remainresetcnt_, other->remainresetcnt_);
    std::swap(maxelitewarmapid_, other->maxelitewarmapid_);
    std::swap(resetcost_, other->resetcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEliteWarInfo::GetTypeName() const {
  return "vmsg.CSEliteWarInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSResetEliteWarMapRqst::kEliteWarIDFieldNumber;
#endif  // !_MSC_VER

CSResetEliteWarMapRqst::CSResetEliteWarMapRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSResetEliteWarMapRqst::InitAsDefaultInstance() {
}

CSResetEliteWarMapRqst::CSResetEliteWarMapRqst(const CSResetEliteWarMapRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSResetEliteWarMapRqst::SharedCtor() {
  _cached_size_ = 0;
  elitewarid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSResetEliteWarMapRqst::~CSResetEliteWarMapRqst() {
  SharedDtor();
}

void CSResetEliteWarMapRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSResetEliteWarMapRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSResetEliteWarMapRqst& CSResetEliteWarMapRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSResetEliteWarMapRqst* CSResetEliteWarMapRqst::default_instance_ = NULL;

CSResetEliteWarMapRqst* CSResetEliteWarMapRqst::New() const {
  return new CSResetEliteWarMapRqst;
}

void CSResetEliteWarMapRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSResetEliteWarMapRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarid_)));
          set_has_elitewarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSResetEliteWarMapRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarID = 1;
  if (has_elitewarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarid(), output);
  }

}

int CSResetEliteWarMapRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarID = 1;
    if (has_elitewarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSResetEliteWarMapRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSResetEliteWarMapRqst*>(&from));
}

void CSResetEliteWarMapRqst::MergeFrom(const CSResetEliteWarMapRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarid()) {
      set_elitewarid(from.elitewarid());
    }
  }
}

void CSResetEliteWarMapRqst::CopyFrom(const CSResetEliteWarMapRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSResetEliteWarMapRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSResetEliteWarMapRqst::Swap(CSResetEliteWarMapRqst* other) {
  if (other != this) {
    std::swap(elitewarid_, other->elitewarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSResetEliteWarMapRqst::GetTypeName() const {
  return "vmsg.CSResetEliteWarMapRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSStartEliteWarMapRqst::kEliteWarMapIDFieldNumber;
#endif  // !_MSC_VER

CSStartEliteWarMapRqst::CSStartEliteWarMapRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSStartEliteWarMapRqst::InitAsDefaultInstance() {
}

CSStartEliteWarMapRqst::CSStartEliteWarMapRqst(const CSStartEliteWarMapRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSStartEliteWarMapRqst::SharedCtor() {
  _cached_size_ = 0;
  elitewarmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStartEliteWarMapRqst::~CSStartEliteWarMapRqst() {
  SharedDtor();
}

void CSStartEliteWarMapRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSStartEliteWarMapRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSStartEliteWarMapRqst& CSStartEliteWarMapRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSStartEliteWarMapRqst* CSStartEliteWarMapRqst::default_instance_ = NULL;

CSStartEliteWarMapRqst* CSStartEliteWarMapRqst::New() const {
  return new CSStartEliteWarMapRqst;
}

void CSStartEliteWarMapRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarmapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSStartEliteWarMapRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarmapid_)));
          set_has_elitewarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStartEliteWarMapRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarMapID = 1;
  if (has_elitewarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarmapid(), output);
  }

}

int CSStartEliteWarMapRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarMapID = 1;
    if (has_elitewarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarmapid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStartEliteWarMapRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSStartEliteWarMapRqst*>(&from));
}

void CSStartEliteWarMapRqst::MergeFrom(const CSStartEliteWarMapRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarmapid()) {
      set_elitewarmapid(from.elitewarmapid());
    }
  }
}

void CSStartEliteWarMapRqst::CopyFrom(const CSStartEliteWarMapRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStartEliteWarMapRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSStartEliteWarMapRqst::Swap(CSStartEliteWarMapRqst* other) {
  if (other != this) {
    std::swap(elitewarmapid_, other->elitewarmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSStartEliteWarMapRqst::GetTypeName() const {
  return "vmsg.CSStartEliteWarMapRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSStartEliteWarMapRsp::kEliteWarMapIDFieldNumber;
#endif  // !_MSC_VER

CSStartEliteWarMapRsp::CSStartEliteWarMapRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSStartEliteWarMapRsp::InitAsDefaultInstance() {
}

CSStartEliteWarMapRsp::CSStartEliteWarMapRsp(const CSStartEliteWarMapRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSStartEliteWarMapRsp::SharedCtor() {
  _cached_size_ = 0;
  elitewarmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStartEliteWarMapRsp::~CSStartEliteWarMapRsp() {
  SharedDtor();
}

void CSStartEliteWarMapRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSStartEliteWarMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSStartEliteWarMapRsp& CSStartEliteWarMapRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSStartEliteWarMapRsp* CSStartEliteWarMapRsp::default_instance_ = NULL;

CSStartEliteWarMapRsp* CSStartEliteWarMapRsp::New() const {
  return new CSStartEliteWarMapRsp;
}

void CSStartEliteWarMapRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarmapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSStartEliteWarMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarmapid_)));
          set_has_elitewarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStartEliteWarMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarMapID = 1;
  if (has_elitewarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarmapid(), output);
  }

}

int CSStartEliteWarMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarMapID = 1;
    if (has_elitewarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarmapid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStartEliteWarMapRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSStartEliteWarMapRsp*>(&from));
}

void CSStartEliteWarMapRsp::MergeFrom(const CSStartEliteWarMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarmapid()) {
      set_elitewarmapid(from.elitewarmapid());
    }
  }
}

void CSStartEliteWarMapRsp::CopyFrom(const CSStartEliteWarMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStartEliteWarMapRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSStartEliteWarMapRsp::Swap(CSStartEliteWarMapRsp* other) {
  if (other != this) {
    std::swap(elitewarmapid_, other->elitewarmapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSStartEliteWarMapRsp::GetTypeName() const {
  return "vmsg.CSStartEliteWarMapRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEndEliteWarMapRqst::kEliteWarMapIDFieldNumber;
const int CSEndEliteWarMapRqst::kEvolutionUseCntFieldNumber;
const int CSEndEliteWarMapRqst::kScoreFieldNumber;
#endif  // !_MSC_VER

CSEndEliteWarMapRqst::CSEndEliteWarMapRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEndEliteWarMapRqst::InitAsDefaultInstance() {
}

CSEndEliteWarMapRqst::CSEndEliteWarMapRqst(const CSEndEliteWarMapRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEndEliteWarMapRqst::SharedCtor() {
  _cached_size_ = 0;
  elitewarmapid_ = 0u;
  evolutionusecnt_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEndEliteWarMapRqst::~CSEndEliteWarMapRqst() {
  SharedDtor();
}

void CSEndEliteWarMapRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEndEliteWarMapRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEndEliteWarMapRqst& CSEndEliteWarMapRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSEndEliteWarMapRqst* CSEndEliteWarMapRqst::default_instance_ = NULL;

CSEndEliteWarMapRqst* CSEndEliteWarMapRqst::New() const {
  return new CSEndEliteWarMapRqst;
}

void CSEndEliteWarMapRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarmapid_ = 0u;
    evolutionusecnt_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEndEliteWarMapRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarmapid_)));
          set_has_elitewarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EvolutionUseCnt;
        break;
      }

      // required uint32 EvolutionUseCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionUseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionusecnt_)));
          set_has_evolutionusecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // required uint32 Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEndEliteWarMapRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarMapID = 1;
  if (has_elitewarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarmapid(), output);
  }

  // required uint32 EvolutionUseCnt = 2;
  if (has_evolutionusecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->evolutionusecnt(), output);
  }

  // required uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

}

int CSEndEliteWarMapRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarMapID = 1;
    if (has_elitewarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarmapid());
    }

    // required uint32 EvolutionUseCnt = 2;
    if (has_evolutionusecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionusecnt());
    }

    // required uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEndEliteWarMapRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEndEliteWarMapRqst*>(&from));
}

void CSEndEliteWarMapRqst::MergeFrom(const CSEndEliteWarMapRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarmapid()) {
      set_elitewarmapid(from.elitewarmapid());
    }
    if (from.has_evolutionusecnt()) {
      set_evolutionusecnt(from.evolutionusecnt());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CSEndEliteWarMapRqst::CopyFrom(const CSEndEliteWarMapRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEndEliteWarMapRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSEndEliteWarMapRqst::Swap(CSEndEliteWarMapRqst* other) {
  if (other != this) {
    std::swap(elitewarmapid_, other->elitewarmapid_);
    std::swap(evolutionusecnt_, other->evolutionusecnt_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEndEliteWarMapRqst::GetTypeName() const {
  return "vmsg.CSEndEliteWarMapRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEliteAward::kEliteWarMapIDFieldNumber;
const int CSEliteAward::kAwardFieldNumber;
#endif  // !_MSC_VER

CSEliteAward::CSEliteAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEliteAward::InitAsDefaultInstance() {
}

CSEliteAward::CSEliteAward(const CSEliteAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEliteAward::SharedCtor() {
  _cached_size_ = 0;
  elitewarmapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEliteAward::~CSEliteAward() {
  SharedDtor();
}

void CSEliteAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEliteAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEliteAward& CSEliteAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSEliteAward* CSEliteAward::default_instance_ = NULL;

CSEliteAward* CSEliteAward::New() const {
  return new CSEliteAward;
}

void CSEliteAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarmapid_ = 0u;
  }
  award_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEliteAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarmapid_)));
          set_has_elitewarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Award;
        break;
      }

      // repeated .vmsg.CSAwardElement Award = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Award;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEliteAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarMapID = 1;
  if (has_elitewarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarmapid(), output);
  }

  // repeated .vmsg.CSAwardElement Award = 2;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->award(i), output);
  }

}

int CSEliteAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarMapID = 1;
    if (has_elitewarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarmapid());
    }

  }
  // repeated .vmsg.CSAwardElement Award = 2;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEliteAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEliteAward*>(&from));
}

void CSEliteAward::MergeFrom(const CSEliteAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarmapid()) {
      set_elitewarmapid(from.elitewarmapid());
    }
  }
}

void CSEliteAward::CopyFrom(const CSEliteAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEliteAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < award_size(); i++) {
    if (!this->award(i).IsInitialized()) return false;
  }
  return true;
}

void CSEliteAward::Swap(CSEliteAward* other) {
  if (other != this) {
    std::swap(elitewarmapid_, other->elitewarmapid_);
    award_.Swap(&other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEliteAward::GetTypeName() const {
  return "vmsg.CSEliteAward";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEndEliteWarMapRsp::kEliteAwardFieldNumber;
#endif  // !_MSC_VER

CSEndEliteWarMapRsp::CSEndEliteWarMapRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEndEliteWarMapRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  eliteaward_ = const_cast< ::vmsg::CSEliteAward*>(
      ::vmsg::CSEliteAward::internal_default_instance());
#else
  eliteaward_ = const_cast< ::vmsg::CSEliteAward*>(&::vmsg::CSEliteAward::default_instance());
#endif
}

CSEndEliteWarMapRsp::CSEndEliteWarMapRsp(const CSEndEliteWarMapRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEndEliteWarMapRsp::SharedCtor() {
  _cached_size_ = 0;
  eliteaward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEndEliteWarMapRsp::~CSEndEliteWarMapRsp() {
  SharedDtor();
}

void CSEndEliteWarMapRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete eliteaward_;
  }
}

void CSEndEliteWarMapRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEndEliteWarMapRsp& CSEndEliteWarMapRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSEndEliteWarMapRsp* CSEndEliteWarMapRsp::default_instance_ = NULL;

CSEndEliteWarMapRsp* CSEndEliteWarMapRsp::New() const {
  return new CSEndEliteWarMapRsp;
}

void CSEndEliteWarMapRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eliteaward()) {
      if (eliteaward_ != NULL) eliteaward_->::vmsg::CSEliteAward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEndEliteWarMapRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSEliteAward EliteAward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eliteaward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEndEliteWarMapRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSEliteAward EliteAward = 1;
  if (has_eliteaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->eliteaward(), output);
  }

}

int CSEndEliteWarMapRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSEliteAward EliteAward = 1;
    if (has_eliteaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eliteaward());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEndEliteWarMapRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEndEliteWarMapRsp*>(&from));
}

void CSEndEliteWarMapRsp::MergeFrom(const CSEndEliteWarMapRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eliteaward()) {
      mutable_eliteaward()->::vmsg::CSEliteAward::MergeFrom(from.eliteaward());
    }
  }
}

void CSEndEliteWarMapRsp::CopyFrom(const CSEndEliteWarMapRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEndEliteWarMapRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_eliteaward()) {
    if (!this->eliteaward().IsInitialized()) return false;
  }
  return true;
}

void CSEndEliteWarMapRsp::Swap(CSEndEliteWarMapRsp* other) {
  if (other != this) {
    std::swap(eliteaward_, other->eliteaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEndEliteWarMapRsp::GetTypeName() const {
  return "vmsg.CSEndEliteWarMapRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSweepEliteWarRqst::kEliteWarIDFieldNumber;
#endif  // !_MSC_VER

CSSweepEliteWarRqst::CSSweepEliteWarRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSweepEliteWarRqst::InitAsDefaultInstance() {
}

CSSweepEliteWarRqst::CSSweepEliteWarRqst(const CSSweepEliteWarRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSweepEliteWarRqst::SharedCtor() {
  _cached_size_ = 0;
  elitewarid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSweepEliteWarRqst::~CSSweepEliteWarRqst() {
  SharedDtor();
}

void CSSweepEliteWarRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSweepEliteWarRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSweepEliteWarRqst& CSSweepEliteWarRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSSweepEliteWarRqst* CSSweepEliteWarRqst::default_instance_ = NULL;

CSSweepEliteWarRqst* CSSweepEliteWarRqst::New() const {
  return new CSSweepEliteWarRqst;
}

void CSSweepEliteWarRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elitewarid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSweepEliteWarRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EliteWarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elitewarid_)));
          set_has_elitewarid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSweepEliteWarRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EliteWarID = 1;
  if (has_elitewarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elitewarid(), output);
  }

}

int CSSweepEliteWarRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EliteWarID = 1;
    if (has_elitewarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elitewarid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSweepEliteWarRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSweepEliteWarRqst*>(&from));
}

void CSSweepEliteWarRqst::MergeFrom(const CSSweepEliteWarRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elitewarid()) {
      set_elitewarid(from.elitewarid());
    }
  }
}

void CSSweepEliteWarRqst::CopyFrom(const CSSweepEliteWarRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSweepEliteWarRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSweepEliteWarRqst::Swap(CSSweepEliteWarRqst* other) {
  if (other != this) {
    std::swap(elitewarid_, other->elitewarid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSweepEliteWarRqst::GetTypeName() const {
  return "vmsg.CSSweepEliteWarRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSweepEliteWarRsp::kInfoFieldNumber;
const int CSSweepEliteWarRsp::kAwardListFieldNumber;
const int CSSweepEliteWarRsp::kErrorNoFieldNumber;
#endif  // !_MSC_VER

CSSweepEliteWarRsp::CSSweepEliteWarRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSweepEliteWarRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::vmsg::CSEliteWarInfo*>(
      ::vmsg::CSEliteWarInfo::internal_default_instance());
#else
  info_ = const_cast< ::vmsg::CSEliteWarInfo*>(&::vmsg::CSEliteWarInfo::default_instance());
#endif
}

CSSweepEliteWarRsp::CSSweepEliteWarRsp(const CSSweepEliteWarRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSweepEliteWarRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  errorno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSweepEliteWarRsp::~CSSweepEliteWarRsp() {
  SharedDtor();
}

void CSSweepEliteWarRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void CSSweepEliteWarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSweepEliteWarRsp& CSSweepEliteWarRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSSweepEliteWarRsp* CSSweepEliteWarRsp::default_instance_ = NULL;

CSSweepEliteWarRsp* CSSweepEliteWarRsp::New() const {
  return new CSSweepEliteWarRsp;
}

void CSSweepEliteWarRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::vmsg::CSEliteWarInfo::Clear();
    }
    errorno_ = 0;
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSweepEliteWarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSEliteWarInfo Info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardList;
        break;
      }

      // repeated .vmsg.CSEliteAward AwardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardList;
        if (input->ExpectTag(24)) goto parse_ErrorNo;
        break;
      }

      // optional int32 ErrorNo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorNo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errorno_)));
          set_has_errorno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSweepEliteWarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSEliteWarInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // repeated .vmsg.CSEliteAward AwardList = 2;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardlist(i), output);
  }

  // optional int32 ErrorNo = 3;
  if (has_errorno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->errorno(), output);
  }

}

int CSSweepEliteWarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSEliteWarInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional int32 ErrorNo = 3;
    if (has_errorno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->errorno());
    }

  }
  // repeated .vmsg.CSEliteAward AwardList = 2;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSweepEliteWarRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSweepEliteWarRsp*>(&from));
}

void CSSweepEliteWarRsp::MergeFrom(const CSSweepEliteWarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::vmsg::CSEliteWarInfo::MergeFrom(from.info());
    }
    if (from.has_errorno()) {
      set_errorno(from.errorno());
    }
  }
}

void CSSweepEliteWarRsp::CopyFrom(const CSSweepEliteWarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSweepEliteWarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  for (int i = 0; i < awardlist_size(); i++) {
    if (!this->awardlist(i).IsInitialized()) return false;
  }
  return true;
}

void CSSweepEliteWarRsp::Swap(CSSweepEliteWarRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    awardlist_.Swap(&other->awardlist_);
    std::swap(errorno_, other->errorno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSweepEliteWarRsp::GetTypeName() const {
  return "vmsg.CSSweepEliteWarRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyInstanceElmt::kKeyFieldNumber;
const int CSDailyInstanceElmt::kChallengeCntFieldNumber;
#endif  // !_MSC_VER

CSDailyInstanceElmt::CSDailyInstanceElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyInstanceElmt::InitAsDefaultInstance() {
}

CSDailyInstanceElmt::CSDailyInstanceElmt(const CSDailyInstanceElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyInstanceElmt::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  challengecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyInstanceElmt::~CSDailyInstanceElmt() {
  SharedDtor();
}

void CSDailyInstanceElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSDailyInstanceElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyInstanceElmt& CSDailyInstanceElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyInstanceElmt* CSDailyInstanceElmt::default_instance_ = NULL;

CSDailyInstanceElmt* CSDailyInstanceElmt::New() const {
  return new CSDailyInstanceElmt;
}

void CSDailyInstanceElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    challengecnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyInstanceElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ChallengeCnt;
        break;
      }

      // required uint32 ChallengeCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChallengeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengecnt_)));
          set_has_challengecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyInstanceElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // required uint32 ChallengeCnt = 2;
  if (has_challengecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengecnt(), output);
  }

}

int CSDailyInstanceElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required uint32 ChallengeCnt = 2;
    if (has_challengecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengecnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyInstanceElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyInstanceElmt*>(&from));
}

void CSDailyInstanceElmt::MergeFrom(const CSDailyInstanceElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_challengecnt()) {
      set_challengecnt(from.challengecnt());
    }
  }
}

void CSDailyInstanceElmt::CopyFrom(const CSDailyInstanceElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyInstanceElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSDailyInstanceElmt::Swap(CSDailyInstanceElmt* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(challengecnt_, other->challengecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyInstanceElmt::GetTypeName() const {
  return "vmsg.CSDailyInstanceElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryDailyInstanceRsp::kInstancesFieldNumber;
#endif  // !_MSC_VER

CSQueryDailyInstanceRsp::CSQueryDailyInstanceRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryDailyInstanceRsp::InitAsDefaultInstance() {
}

CSQueryDailyInstanceRsp::CSQueryDailyInstanceRsp(const CSQueryDailyInstanceRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDailyInstanceRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDailyInstanceRsp::~CSQueryDailyInstanceRsp() {
  SharedDtor();
}

void CSQueryDailyInstanceRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryDailyInstanceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryDailyInstanceRsp& CSQueryDailyInstanceRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryDailyInstanceRsp* CSQueryDailyInstanceRsp::default_instance_ = NULL;

CSQueryDailyInstanceRsp* CSQueryDailyInstanceRsp::New() const {
  return new CSQueryDailyInstanceRsp;
}

void CSQueryDailyInstanceRsp::Clear() {
  instances_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryDailyInstanceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSDailyInstanceElmt Instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Instances;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryDailyInstanceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSDailyInstanceElmt Instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->instances(i), output);
  }

}

int CSQueryDailyInstanceRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSDailyInstanceElmt Instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDailyInstanceRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryDailyInstanceRsp*>(&from));
}

void CSQueryDailyInstanceRsp::MergeFrom(const CSQueryDailyInstanceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
}

void CSQueryDailyInstanceRsp::CopyFrom(const CSQueryDailyInstanceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDailyInstanceRsp::IsInitialized() const {

  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryDailyInstanceRsp::Swap(CSQueryDailyInstanceRsp* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryDailyInstanceRsp::GetTypeName() const {
  return "vmsg.CSQueryDailyInstanceRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyInstancePassRqst::kPassLvlFieldNumber;
const int CSDailyInstancePassRqst::kKeyFieldNumber;
#endif  // !_MSC_VER

CSDailyInstancePassRqst::CSDailyInstancePassRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyInstancePassRqst::InitAsDefaultInstance() {
}

CSDailyInstancePassRqst::CSDailyInstancePassRqst(const CSDailyInstancePassRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyInstancePassRqst::SharedCtor() {
  _cached_size_ = 0;
  passlvl_ = 0u;
  key_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyInstancePassRqst::~CSDailyInstancePassRqst() {
  SharedDtor();
}

void CSDailyInstancePassRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSDailyInstancePassRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyInstancePassRqst& CSDailyInstancePassRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyInstancePassRqst* CSDailyInstancePassRqst::default_instance_ = NULL;

CSDailyInstancePassRqst* CSDailyInstancePassRqst::New() const {
  return new CSDailyInstancePassRqst;
}

void CSDailyInstancePassRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    passlvl_ = 0u;
    key_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyInstancePassRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PassLvl = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passlvl_)));
          set_has_passlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Key;
        break;
      }

      // required uint32 Key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyInstancePassRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PassLvl = 1;
  if (has_passlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->passlvl(), output);
  }

  // required uint32 Key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->key(), output);
  }

}

int CSDailyInstancePassRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PassLvl = 1;
    if (has_passlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passlvl());
    }

    // required uint32 Key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyInstancePassRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyInstancePassRqst*>(&from));
}

void CSDailyInstancePassRqst::MergeFrom(const CSDailyInstancePassRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passlvl()) {
      set_passlvl(from.passlvl());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
}

void CSDailyInstancePassRqst::CopyFrom(const CSDailyInstancePassRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyInstancePassRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSDailyInstancePassRqst::Swap(CSDailyInstancePassRqst* other) {
  if (other != this) {
    std::swap(passlvl_, other->passlvl_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyInstancePassRqst::GetTypeName() const {
  return "vmsg.CSDailyInstancePassRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyInstancePassRsp::kInstancesFieldNumber;
const int CSDailyInstancePassRsp::kAwardLstFieldNumber;
#endif  // !_MSC_VER

CSDailyInstancePassRsp::CSDailyInstancePassRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyInstancePassRsp::InitAsDefaultInstance() {
}

CSDailyInstancePassRsp::CSDailyInstancePassRsp(const CSDailyInstancePassRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyInstancePassRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyInstancePassRsp::~CSDailyInstancePassRsp() {
  SharedDtor();
}

void CSDailyInstancePassRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSDailyInstancePassRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyInstancePassRsp& CSDailyInstancePassRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyInstancePassRsp* CSDailyInstancePassRsp::default_instance_ = NULL;

CSDailyInstancePassRsp* CSDailyInstancePassRsp::New() const {
  return new CSDailyInstancePassRsp;
}

void CSDailyInstancePassRsp::Clear() {
  instances_.Clear();
  awardlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyInstancePassRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSDailyInstanceElmt Instances = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Instances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Instances;
        if (input->ExpectTag(18)) goto parse_AwardLst;
        break;
      }

      // repeated .vmsg.CSAwardElement AwardLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyInstancePassRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSDailyInstanceElmt Instances = 1;
  for (int i = 0; i < this->instances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->instances(i), output);
  }

  // repeated .vmsg.CSAwardElement AwardLst = 2;
  for (int i = 0; i < this->awardlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardlst(i), output);
  }

}

int CSDailyInstancePassRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSDailyInstanceElmt Instances = 1;
  total_size += 1 * this->instances_size();
  for (int i = 0; i < this->instances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instances(i));
  }

  // repeated .vmsg.CSAwardElement AwardLst = 2;
  total_size += 1 * this->awardlst_size();
  for (int i = 0; i < this->awardlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyInstancePassRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyInstancePassRsp*>(&from));
}

void CSDailyInstancePassRsp::MergeFrom(const CSDailyInstancePassRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  instances_.MergeFrom(from.instances_);
  awardlst_.MergeFrom(from.awardlst_);
}

void CSDailyInstancePassRsp::CopyFrom(const CSDailyInstancePassRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyInstancePassRsp::IsInitialized() const {

  for (int i = 0; i < instances_size(); i++) {
    if (!this->instances(i).IsInitialized()) return false;
  }
  for (int i = 0; i < awardlst_size(); i++) {
    if (!this->awardlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSDailyInstancePassRsp::Swap(CSDailyInstancePassRsp* other) {
  if (other != this) {
    instances_.Swap(&other->instances_);
    awardlst_.Swap(&other->awardlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyInstancePassRsp::GetTypeName() const {
  return "vmsg.CSDailyInstancePassRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSReliveRqst::kIsUseItemFieldNumber;
const int CSReliveRqst::kItemIDFieldNumber;
const int CSReliveRqst::kItemBagIdxFieldNumber;
#endif  // !_MSC_VER

CSReliveRqst::CSReliveRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSReliveRqst::InitAsDefaultInstance() {
}

CSReliveRqst::CSReliveRqst(const CSReliveRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSReliveRqst::SharedCtor() {
  _cached_size_ = 0;
  isuseitem_ = 0;
  itemid_ = 0;
  itembagidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReliveRqst::~CSReliveRqst() {
  SharedDtor();
}

void CSReliveRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSReliveRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSReliveRqst& CSReliveRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSReliveRqst* CSReliveRqst::default_instance_ = NULL;

CSReliveRqst* CSReliveRqst::New() const {
  return new CSReliveRqst;
}

void CSReliveRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isuseitem_ = 0;
    itemid_ = 0;
    itembagidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSReliveRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 IsUseItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isuseitem_)));
          set_has_isuseitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }

      // optional int32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemBagIdx;
        break;
      }

      // optional int32 ItemBagIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemBagIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itembagidx_)));
          set_has_itembagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReliveRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 IsUseItem = 1;
  if (has_isuseitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isuseitem(), output);
  }

  // optional int32 ItemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 ItemBagIdx = 3;
  if (has_itembagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itembagidx(), output);
  }

}

int CSReliveRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 IsUseItem = 1;
    if (has_isuseitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isuseitem());
    }

    // optional int32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 ItemBagIdx = 3;
    if (has_itembagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itembagidx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReliveRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSReliveRqst*>(&from));
}

void CSReliveRqst::MergeFrom(const CSReliveRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isuseitem()) {
      set_isuseitem(from.isuseitem());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itembagidx()) {
      set_itembagidx(from.itembagidx());
    }
  }
}

void CSReliveRqst::CopyFrom(const CSReliveRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReliveRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSReliveRqst::Swap(CSReliveRqst* other) {
  if (other != this) {
    std::swap(isuseitem_, other->isuseitem_);
    std::swap(itemid_, other->itemid_);
    std::swap(itembagidx_, other->itembagidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSReliveRqst::GetTypeName() const {
  return "vmsg.CSReliveRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSReliveRsp::kBagInfoFieldNumber;
const int CSReliveRsp::kNextReliveCostFieldNumber;
#endif  // !_MSC_VER

CSReliveRsp::CSReliveRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSReliveRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSReliveRsp::CSReliveRsp(const CSReliveRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSReliveRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  nextrelivecost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSReliveRsp::~CSReliveRsp() {
  SharedDtor();
}

void CSReliveRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSReliveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSReliveRsp& CSReliveRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSReliveRsp* CSReliveRsp::default_instance_ = NULL;

CSReliveRsp* CSReliveRsp::New() const {
  return new CSReliveRsp;
}

void CSReliveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    nextrelivecost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSReliveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NextReliveCost;
        break;
      }

      // required uint32 NextReliveCost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextReliveCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextrelivecost_)));
          set_has_nextrelivecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSReliveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required uint32 NextReliveCost = 2;
  if (has_nextrelivecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextrelivecost(), output);
  }

}

int CSReliveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required uint32 NextReliveCost = 2;
    if (has_nextrelivecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextrelivecost());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSReliveRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSReliveRsp*>(&from));
}

void CSReliveRsp::MergeFrom(const CSReliveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_nextrelivecost()) {
      set_nextrelivecost(from.nextrelivecost());
    }
  }
}

void CSReliveRsp::CopyFrom(const CSReliveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSReliveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  return true;
}

void CSReliveRsp::Swap(CSReliveRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(nextrelivecost_, other->nextrelivecost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSReliveRsp::GetTypeName() const {
  return "vmsg.CSReliveRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyBulletRqst::kIsUseItemFieldNumber;
const int CSBuyBulletRqst::kItemIDFieldNumber;
const int CSBuyBulletRqst::kItemBagIdxFieldNumber;
#endif  // !_MSC_VER

CSBuyBulletRqst::CSBuyBulletRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyBulletRqst::InitAsDefaultInstance() {
}

CSBuyBulletRqst::CSBuyBulletRqst(const CSBuyBulletRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyBulletRqst::SharedCtor() {
  _cached_size_ = 0;
  isuseitem_ = 0;
  itemid_ = 0;
  itembagidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyBulletRqst::~CSBuyBulletRqst() {
  SharedDtor();
}

void CSBuyBulletRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyBulletRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyBulletRqst& CSBuyBulletRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyBulletRqst* CSBuyBulletRqst::default_instance_ = NULL;

CSBuyBulletRqst* CSBuyBulletRqst::New() const {
  return new CSBuyBulletRqst;
}

void CSBuyBulletRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isuseitem_ = 0;
    itemid_ = 0;
    itembagidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyBulletRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 IsUseItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isuseitem_)));
          set_has_isuseitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }

      // optional int32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemBagIdx;
        break;
      }

      // optional int32 ItemBagIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemBagIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itembagidx_)));
          set_has_itembagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyBulletRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 IsUseItem = 1;
  if (has_isuseitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isuseitem(), output);
  }

  // optional int32 ItemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // optional int32 ItemBagIdx = 3;
  if (has_itembagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itembagidx(), output);
  }

}

int CSBuyBulletRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 IsUseItem = 1;
    if (has_isuseitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isuseitem());
    }

    // optional int32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 ItemBagIdx = 3;
    if (has_itembagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itembagidx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyBulletRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyBulletRqst*>(&from));
}

void CSBuyBulletRqst::MergeFrom(const CSBuyBulletRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isuseitem()) {
      set_isuseitem(from.isuseitem());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itembagidx()) {
      set_itembagidx(from.itembagidx());
    }
  }
}

void CSBuyBulletRqst::CopyFrom(const CSBuyBulletRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyBulletRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBuyBulletRqst::Swap(CSBuyBulletRqst* other) {
  if (other != this) {
    std::swap(isuseitem_, other->isuseitem_);
    std::swap(itemid_, other->itemid_);
    std::swap(itembagidx_, other->itembagidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyBulletRqst::GetTypeName() const {
  return "vmsg.CSBuyBulletRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyBulletRsp::kBagInfoFieldNumber;
const int CSBuyBulletRsp::kNextBulletCostFieldNumber;
#endif  // !_MSC_VER

CSBuyBulletRsp::CSBuyBulletRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyBulletRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSBuyBulletRsp::CSBuyBulletRsp(const CSBuyBulletRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyBulletRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  nextbulletcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyBulletRsp::~CSBuyBulletRsp() {
  SharedDtor();
}

void CSBuyBulletRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSBuyBulletRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyBulletRsp& CSBuyBulletRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyBulletRsp* CSBuyBulletRsp::default_instance_ = NULL;

CSBuyBulletRsp* CSBuyBulletRsp::New() const {
  return new CSBuyBulletRsp;
}

void CSBuyBulletRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    nextbulletcost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyBulletRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NextBulletCost;
        break;
      }

      // required uint32 NextBulletCost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextBulletCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextbulletcost_)));
          set_has_nextbulletcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyBulletRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required uint32 NextBulletCost = 2;
  if (has_nextbulletcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextbulletcost(), output);
  }

}

int CSBuyBulletRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required uint32 NextBulletCost = 2;
    if (has_nextbulletcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextbulletcost());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyBulletRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyBulletRsp*>(&from));
}

void CSBuyBulletRsp::MergeFrom(const CSBuyBulletRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_nextbulletcost()) {
      set_nextbulletcost(from.nextbulletcost());
    }
  }
}

void CSBuyBulletRsp::CopyFrom(const CSBuyBulletRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyBulletRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  return true;
}

void CSBuyBulletRsp::Swap(CSBuyBulletRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(nextbulletcost_, other->nextbulletcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyBulletRsp::GetTypeName() const {
  return "vmsg.CSBuyBulletRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyInstanceRqst::kCountFieldNumber;
const int CSBuyInstanceRqst::kWarIDFieldNumber;
#endif  // !_MSC_VER

CSBuyInstanceRqst::CSBuyInstanceRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyInstanceRqst::InitAsDefaultInstance() {
}

CSBuyInstanceRqst::CSBuyInstanceRqst(const CSBuyInstanceRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyInstanceRqst::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  warid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyInstanceRqst::~CSBuyInstanceRqst() {
  SharedDtor();
}

void CSBuyInstanceRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyInstanceRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyInstanceRqst& CSBuyInstanceRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyInstanceRqst* CSBuyInstanceRqst::default_instance_ = NULL;

CSBuyInstanceRqst* CSBuyInstanceRqst::New() const {
  return new CSBuyInstanceRqst;
}

void CSBuyInstanceRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    warid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyInstanceRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WarID;
        break;
      }

      // required uint32 WarID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyInstanceRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 WarID = 2;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->warid(), output);
  }

}

int CSBuyInstanceRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 WarID = 2;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyInstanceRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyInstanceRqst*>(&from));
}

void CSBuyInstanceRqst::MergeFrom(const CSBuyInstanceRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_warid()) {
      set_warid(from.warid());
    }
  }
}

void CSBuyInstanceRqst::CopyFrom(const CSBuyInstanceRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyInstanceRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSBuyInstanceRqst::Swap(CSBuyInstanceRqst* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(warid_, other->warid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyInstanceRqst::GetTypeName() const {
  return "vmsg.CSBuyInstanceRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyInstanceRsp::kWarIDFieldNumber;
const int CSBuyInstanceRsp::kTotalCntFieldNumber;
const int CSBuyInstanceRsp::kUsedCntFieldNumber;
const int CSBuyInstanceRsp::kBoughtCntFieldNumber;
#endif  // !_MSC_VER

CSBuyInstanceRsp::CSBuyInstanceRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyInstanceRsp::InitAsDefaultInstance() {
}

CSBuyInstanceRsp::CSBuyInstanceRsp(const CSBuyInstanceRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyInstanceRsp::SharedCtor() {
  _cached_size_ = 0;
  warid_ = 0u;
  totalcnt_ = 0u;
  usedcnt_ = 0u;
  boughtcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyInstanceRsp::~CSBuyInstanceRsp() {
  SharedDtor();
}

void CSBuyInstanceRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyInstanceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyInstanceRsp& CSBuyInstanceRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyInstanceRsp* CSBuyInstanceRsp::default_instance_ = NULL;

CSBuyInstanceRsp* CSBuyInstanceRsp::New() const {
  return new CSBuyInstanceRsp;
}

void CSBuyInstanceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warid_ = 0u;
    totalcnt_ = 0u;
    usedcnt_ = 0u;
    boughtcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyInstanceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TotalCnt;
        break;
      }

      // required uint32 TotalCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcnt_)));
          set_has_totalcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_UsedCnt;
        break;
      }

      // required uint32 UsedCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UsedCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usedcnt_)));
          set_has_usedcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BoughtCnt;
        break;
      }

      // required uint32 BoughtCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoughtCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughtcnt_)));
          set_has_boughtcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyInstanceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarID = 1;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warid(), output);
  }

  // required uint32 TotalCnt = 2;
  if (has_totalcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalcnt(), output);
  }

  // required uint32 UsedCnt = 3;
  if (has_usedcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usedcnt(), output);
  }

  // required uint32 BoughtCnt = 4;
  if (has_boughtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boughtcnt(), output);
  }

}

int CSBuyInstanceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarID = 1;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

    // required uint32 TotalCnt = 2;
    if (has_totalcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcnt());
    }

    // required uint32 UsedCnt = 3;
    if (has_usedcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usedcnt());
    }

    // required uint32 BoughtCnt = 4;
    if (has_boughtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughtcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyInstanceRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyInstanceRsp*>(&from));
}

void CSBuyInstanceRsp::MergeFrom(const CSBuyInstanceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warid()) {
      set_warid(from.warid());
    }
    if (from.has_totalcnt()) {
      set_totalcnt(from.totalcnt());
    }
    if (from.has_usedcnt()) {
      set_usedcnt(from.usedcnt());
    }
    if (from.has_boughtcnt()) {
      set_boughtcnt(from.boughtcnt());
    }
  }
}

void CSBuyInstanceRsp::CopyFrom(const CSBuyInstanceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyInstanceRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSBuyInstanceRsp::Swap(CSBuyInstanceRsp* other) {
  if (other != this) {
    std::swap(warid_, other->warid_);
    std::swap(totalcnt_, other->totalcnt_);
    std::swap(usedcnt_, other->usedcnt_);
    std::swap(boughtcnt_, other->boughtcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyInstanceRsp::GetTypeName() const {
  return "vmsg.CSBuyInstanceRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarmapStarAwardRqst::kWarIDFieldNumber;
const int CSWarmapStarAwardRqst::kStarCntFieldNumber;
#endif  // !_MSC_VER

CSWarmapStarAwardRqst::CSWarmapStarAwardRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarmapStarAwardRqst::InitAsDefaultInstance() {
}

CSWarmapStarAwardRqst::CSWarmapStarAwardRqst(const CSWarmapStarAwardRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarmapStarAwardRqst::SharedCtor() {
  _cached_size_ = 0;
  warid_ = 0u;
  starcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarmapStarAwardRqst::~CSWarmapStarAwardRqst() {
  SharedDtor();
}

void CSWarmapStarAwardRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarmapStarAwardRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarmapStarAwardRqst& CSWarmapStarAwardRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarmapStarAwardRqst* CSWarmapStarAwardRqst::default_instance_ = NULL;

CSWarmapStarAwardRqst* CSWarmapStarAwardRqst::New() const {
  return new CSWarmapStarAwardRqst;
}

void CSWarmapStarAwardRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warid_ = 0u;
    starcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarmapStarAwardRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StarCnt;
        break;
      }

      // required uint32 StarCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StarCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starcnt_)));
          set_has_starcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarmapStarAwardRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarID = 1;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warid(), output);
  }

  // required uint32 StarCnt = 2;
  if (has_starcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starcnt(), output);
  }

}

int CSWarmapStarAwardRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarID = 1;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

    // required uint32 StarCnt = 2;
    if (has_starcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarmapStarAwardRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarmapStarAwardRqst*>(&from));
}

void CSWarmapStarAwardRqst::MergeFrom(const CSWarmapStarAwardRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warid()) {
      set_warid(from.warid());
    }
    if (from.has_starcnt()) {
      set_starcnt(from.starcnt());
    }
  }
}

void CSWarmapStarAwardRqst::CopyFrom(const CSWarmapStarAwardRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarmapStarAwardRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSWarmapStarAwardRqst::Swap(CSWarmapStarAwardRqst* other) {
  if (other != this) {
    std::swap(warid_, other->warid_);
    std::swap(starcnt_, other->starcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarmapStarAwardRqst::GetTypeName() const {
  return "vmsg.CSWarmapStarAwardRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarmapStarAwardRsp::kAwardFieldNumber;
const int CSWarmapStarAwardRsp::kWarStarAwardsFieldNumber;
#endif  // !_MSC_VER

CSWarmapStarAwardRsp::CSWarmapStarAwardRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarmapStarAwardRsp::InitAsDefaultInstance() {
}

CSWarmapStarAwardRsp::CSWarmapStarAwardRsp(const CSWarmapStarAwardRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarmapStarAwardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarmapStarAwardRsp::~CSWarmapStarAwardRsp() {
  SharedDtor();
}

void CSWarmapStarAwardRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWarmapStarAwardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarmapStarAwardRsp& CSWarmapStarAwardRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarmapStarAwardRsp* CSWarmapStarAwardRsp::default_instance_ = NULL;

CSWarmapStarAwardRsp* CSWarmapStarAwardRsp::New() const {
  return new CSWarmapStarAwardRsp;
}

void CSWarmapStarAwardRsp::Clear() {
  award_.Clear();
  warstarawards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarmapStarAwardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSAwardElement Award = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Award;
        if (input->ExpectTag(18)) goto parse_WarStarAwards;
        break;
      }

      // repeated .vmsg.CSWarStarAward WarStarAwards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarStarAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warstarawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WarStarAwards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarmapStarAwardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSAwardElement Award = 1;
  for (int i = 0; i < this->award_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->award(i), output);
  }

  // repeated .vmsg.CSWarStarAward WarStarAwards = 2;
  for (int i = 0; i < this->warstarawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->warstarawards(i), output);
  }

}

int CSWarmapStarAwardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSAwardElement Award = 1;
  total_size += 1 * this->award_size();
  for (int i = 0; i < this->award_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->award(i));
  }

  // repeated .vmsg.CSWarStarAward WarStarAwards = 2;
  total_size += 1 * this->warstarawards_size();
  for (int i = 0; i < this->warstarawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warstarawards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarmapStarAwardRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarmapStarAwardRsp*>(&from));
}

void CSWarmapStarAwardRsp::MergeFrom(const CSWarmapStarAwardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  award_.MergeFrom(from.award_);
  warstarawards_.MergeFrom(from.warstarawards_);
}

void CSWarmapStarAwardRsp::CopyFrom(const CSWarmapStarAwardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarmapStarAwardRsp::IsInitialized() const {

  for (int i = 0; i < award_size(); i++) {
    if (!this->award(i).IsInitialized()) return false;
  }
  for (int i = 0; i < warstarawards_size(); i++) {
    if (!this->warstarawards(i).IsInitialized()) return false;
  }
  return true;
}

void CSWarmapStarAwardRsp::Swap(CSWarmapStarAwardRsp* other) {
  if (other != this) {
    award_.Swap(&other->award_);
    warstarawards_.Swap(&other->warstarawards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarmapStarAwardRsp::GetTypeName() const {
  return "vmsg.CSWarmapStarAwardRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapRequest::kWarMapQueryRqstFieldNumber;
const int CSWarMapRequest::kWarMapStartRqstFieldNumber;
const int CSWarMapRequest::kWarMapEndRqstFieldNumber;
const int CSWarMapRequest::kWarMapCardRqstFieldNumber;
const int CSWarMapRequest::kSweepWarRqstFieldNumber;
const int CSWarMapRequest::kQueryEliteWarMapRqstFieldNumber;
const int CSWarMapRequest::kResetEliteWarMapRqstFieldNumber;
const int CSWarMapRequest::kStartEliteWarMapRqstFieldNumber;
const int CSWarMapRequest::kEndEliteWarMapRqstFieldNumber;
const int CSWarMapRequest::kSweepEliteWarMapRqstFieldNumber;
const int CSWarMapRequest::kPassDailyInstanceRqstFieldNumber;
const int CSWarMapRequest::kReliveRqstFieldNumber;
const int CSWarMapRequest::kBuyBulletRqstFieldNumber;
const int CSWarMapRequest::kBuyInstanceRqstFieldNumber;
const int CSWarMapRequest::kClaimStarAwardRqstFieldNumber;
#endif  // !_MSC_VER

CSWarMapRequest::CSWarMapRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapquery_rqst_ = const_cast< ::vmsg::CSWarMapQueryRqst*>(
      ::vmsg::CSWarMapQueryRqst::internal_default_instance());
#else
  warmapquery_rqst_ = const_cast< ::vmsg::CSWarMapQueryRqst*>(&::vmsg::CSWarMapQueryRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapstart_rqst_ = const_cast< ::vmsg::CSWarMapStartRqst*>(
      ::vmsg::CSWarMapStartRqst::internal_default_instance());
#else
  warmapstart_rqst_ = const_cast< ::vmsg::CSWarMapStartRqst*>(&::vmsg::CSWarMapStartRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapend_rqst_ = const_cast< ::vmsg::CSWarMapEndRqst*>(
      ::vmsg::CSWarMapEndRqst::internal_default_instance());
#else
  warmapend_rqst_ = const_cast< ::vmsg::CSWarMapEndRqst*>(&::vmsg::CSWarMapEndRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapcard_rqst_ = const_cast< ::vmsg::CSWarMapCardRqst*>(
      ::vmsg::CSWarMapCardRqst::internal_default_instance());
#else
  warmapcard_rqst_ = const_cast< ::vmsg::CSWarMapCardRqst*>(&::vmsg::CSWarMapCardRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sweepwar_rqst_ = const_cast< ::vmsg::CSSweepWarRqst*>(
      ::vmsg::CSSweepWarRqst::internal_default_instance());
#else
  sweepwar_rqst_ = const_cast< ::vmsg::CSSweepWarRqst*>(&::vmsg::CSSweepWarRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryelitewarmap_rqst_ = const_cast< ::vmsg::CSQueryEliteWarMapRqst*>(
      ::vmsg::CSQueryEliteWarMapRqst::internal_default_instance());
#else
  queryelitewarmap_rqst_ = const_cast< ::vmsg::CSQueryEliteWarMapRqst*>(&::vmsg::CSQueryEliteWarMapRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resetelitewarmap_rqst_ = const_cast< ::vmsg::CSResetEliteWarMapRqst*>(
      ::vmsg::CSResetEliteWarMapRqst::internal_default_instance());
#else
  resetelitewarmap_rqst_ = const_cast< ::vmsg::CSResetEliteWarMapRqst*>(&::vmsg::CSResetEliteWarMapRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  startelitewarmap_rqst_ = const_cast< ::vmsg::CSStartEliteWarMapRqst*>(
      ::vmsg::CSStartEliteWarMapRqst::internal_default_instance());
#else
  startelitewarmap_rqst_ = const_cast< ::vmsg::CSStartEliteWarMapRqst*>(&::vmsg::CSStartEliteWarMapRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endelitewarmap_rqst_ = const_cast< ::vmsg::CSEndEliteWarMapRqst*>(
      ::vmsg::CSEndEliteWarMapRqst::internal_default_instance());
#else
  endelitewarmap_rqst_ = const_cast< ::vmsg::CSEndEliteWarMapRqst*>(&::vmsg::CSEndEliteWarMapRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sweepelitewarmap_rqst_ = const_cast< ::vmsg::CSSweepEliteWarRqst*>(
      ::vmsg::CSSweepEliteWarRqst::internal_default_instance());
#else
  sweepelitewarmap_rqst_ = const_cast< ::vmsg::CSSweepEliteWarRqst*>(&::vmsg::CSSweepEliteWarRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  passdailyinstance_rqst_ = const_cast< ::vmsg::CSDailyInstancePassRqst*>(
      ::vmsg::CSDailyInstancePassRqst::internal_default_instance());
#else
  passdailyinstance_rqst_ = const_cast< ::vmsg::CSDailyInstancePassRqst*>(&::vmsg::CSDailyInstancePassRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  relive_rqst_ = const_cast< ::vmsg::CSReliveRqst*>(
      ::vmsg::CSReliveRqst::internal_default_instance());
#else
  relive_rqst_ = const_cast< ::vmsg::CSReliveRqst*>(&::vmsg::CSReliveRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buybullet_rqst_ = const_cast< ::vmsg::CSBuyBulletRqst*>(
      ::vmsg::CSBuyBulletRqst::internal_default_instance());
#else
  buybullet_rqst_ = const_cast< ::vmsg::CSBuyBulletRqst*>(&::vmsg::CSBuyBulletRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyinstance_rqst_ = const_cast< ::vmsg::CSBuyInstanceRqst*>(
      ::vmsg::CSBuyInstanceRqst::internal_default_instance());
#else
  buyinstance_rqst_ = const_cast< ::vmsg::CSBuyInstanceRqst*>(&::vmsg::CSBuyInstanceRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claimstaraward_rqst_ = const_cast< ::vmsg::CSWarmapStarAwardRqst*>(
      ::vmsg::CSWarmapStarAwardRqst::internal_default_instance());
#else
  claimstaraward_rqst_ = const_cast< ::vmsg::CSWarmapStarAwardRqst*>(&::vmsg::CSWarmapStarAwardRqst::default_instance());
#endif
}

CSWarMapRequest::CSWarMapRequest(const CSWarMapRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapRequest::SharedCtor() {
  _cached_size_ = 0;
  warmapquery_rqst_ = NULL;
  warmapstart_rqst_ = NULL;
  warmapend_rqst_ = NULL;
  warmapcard_rqst_ = NULL;
  sweepwar_rqst_ = NULL;
  queryelitewarmap_rqst_ = NULL;
  resetelitewarmap_rqst_ = NULL;
  startelitewarmap_rqst_ = NULL;
  endelitewarmap_rqst_ = NULL;
  sweepelitewarmap_rqst_ = NULL;
  passdailyinstance_rqst_ = NULL;
  relive_rqst_ = NULL;
  buybullet_rqst_ = NULL;
  buyinstance_rqst_ = NULL;
  claimstaraward_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapRequest::~CSWarMapRequest() {
  SharedDtor();
}

void CSWarMapRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete warmapquery_rqst_;
    delete warmapstart_rqst_;
    delete warmapend_rqst_;
    delete warmapcard_rqst_;
    delete sweepwar_rqst_;
    delete queryelitewarmap_rqst_;
    delete resetelitewarmap_rqst_;
    delete startelitewarmap_rqst_;
    delete endelitewarmap_rqst_;
    delete sweepelitewarmap_rqst_;
    delete passdailyinstance_rqst_;
    delete relive_rqst_;
    delete buybullet_rqst_;
    delete buyinstance_rqst_;
    delete claimstaraward_rqst_;
  }
}

void CSWarMapRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapRequest& CSWarMapRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapRequest* CSWarMapRequest::default_instance_ = NULL;

CSWarMapRequest* CSWarMapRequest::New() const {
  return new CSWarMapRequest;
}

void CSWarMapRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_warmapquery_rqst()) {
      if (warmapquery_rqst_ != NULL) warmapquery_rqst_->::vmsg::CSWarMapQueryRqst::Clear();
    }
    if (has_warmapstart_rqst()) {
      if (warmapstart_rqst_ != NULL) warmapstart_rqst_->::vmsg::CSWarMapStartRqst::Clear();
    }
    if (has_warmapend_rqst()) {
      if (warmapend_rqst_ != NULL) warmapend_rqst_->::vmsg::CSWarMapEndRqst::Clear();
    }
    if (has_warmapcard_rqst()) {
      if (warmapcard_rqst_ != NULL) warmapcard_rqst_->::vmsg::CSWarMapCardRqst::Clear();
    }
    if (has_sweepwar_rqst()) {
      if (sweepwar_rqst_ != NULL) sweepwar_rqst_->::vmsg::CSSweepWarRqst::Clear();
    }
    if (has_queryelitewarmap_rqst()) {
      if (queryelitewarmap_rqst_ != NULL) queryelitewarmap_rqst_->::vmsg::CSQueryEliteWarMapRqst::Clear();
    }
    if (has_resetelitewarmap_rqst()) {
      if (resetelitewarmap_rqst_ != NULL) resetelitewarmap_rqst_->::vmsg::CSResetEliteWarMapRqst::Clear();
    }
    if (has_startelitewarmap_rqst()) {
      if (startelitewarmap_rqst_ != NULL) startelitewarmap_rqst_->::vmsg::CSStartEliteWarMapRqst::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_endelitewarmap_rqst()) {
      if (endelitewarmap_rqst_ != NULL) endelitewarmap_rqst_->::vmsg::CSEndEliteWarMapRqst::Clear();
    }
    if (has_sweepelitewarmap_rqst()) {
      if (sweepelitewarmap_rqst_ != NULL) sweepelitewarmap_rqst_->::vmsg::CSSweepEliteWarRqst::Clear();
    }
    if (has_passdailyinstance_rqst()) {
      if (passdailyinstance_rqst_ != NULL) passdailyinstance_rqst_->::vmsg::CSDailyInstancePassRqst::Clear();
    }
    if (has_relive_rqst()) {
      if (relive_rqst_ != NULL) relive_rqst_->::vmsg::CSReliveRqst::Clear();
    }
    if (has_buybullet_rqst()) {
      if (buybullet_rqst_ != NULL) buybullet_rqst_->::vmsg::CSBuyBulletRqst::Clear();
    }
    if (has_buyinstance_rqst()) {
      if (buyinstance_rqst_ != NULL) buyinstance_rqst_->::vmsg::CSBuyInstanceRqst::Clear();
    }
    if (has_claimstaraward_rqst()) {
      if (claimstaraward_rqst_ != NULL) claimstaraward_rqst_->::vmsg::CSWarmapStarAwardRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSWarMapQueryRqst WarMapQuery_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapquery_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WarMapStart_Rqst;
        break;
      }

      // optional .vmsg.CSWarMapStartRqst WarMapStart_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapStart_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapstart_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_WarMapEnd_Rqst;
        break;
      }

      // optional .vmsg.CSWarMapEndRqst WarMapEnd_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapEnd_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapend_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_WarMapCard_Rqst;
        break;
      }

      // optional .vmsg.CSWarMapCardRqst WarMapCard_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapCard_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapcard_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SweepWar_Rqst;
        break;
      }

      // optional .vmsg.CSSweepWarRqst SweepWar_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SweepWar_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepwar_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_QueryEliteWarMap_Rqst;
        break;
      }

      // optional .vmsg.CSQueryEliteWarMapRqst QueryEliteWarMap_Rqst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryEliteWarMap_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryelitewarmap_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ResetEliteWarMap_Rqst;
        break;
      }

      // optional .vmsg.CSResetEliteWarMapRqst ResetEliteWarMap_Rqst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResetEliteWarMap_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resetelitewarmap_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_StartEliteWarMap_Rqst;
        break;
      }

      // optional .vmsg.CSStartEliteWarMapRqst StartEliteWarMap_Rqst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartEliteWarMap_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startelitewarmap_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_EndEliteWarMap_Rqst;
        break;
      }

      // optional .vmsg.CSEndEliteWarMapRqst EndEliteWarMap_Rqst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndEliteWarMap_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endelitewarmap_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SweepEliteWarMap_Rqst;
        break;
      }

      // optional .vmsg.CSSweepEliteWarRqst SweepEliteWarMap_Rqst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SweepEliteWarMap_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepelitewarmap_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_PassDailyInstance_Rqst;
        break;
      }

      // optional .vmsg.CSDailyInstancePassRqst PassDailyInstance_Rqst = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassDailyInstance_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passdailyinstance_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_Relive_Rqst;
        break;
      }

      // optional .vmsg.CSReliveRqst Relive_Rqst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Relive_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relive_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_BuyBullet_Rqst;
        break;
      }

      // optional .vmsg.CSBuyBulletRqst BuyBullet_Rqst = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyBullet_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buybullet_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_BuyInstance_Rqst;
        break;
      }

      // optional .vmsg.CSBuyInstanceRqst BuyInstance_Rqst = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyInstance_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyinstance_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ClaimStarAward_Rqst;
        break;
      }

      // optional .vmsg.CSWarmapStarAwardRqst ClaimStarAward_Rqst = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClaimStarAward_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claimstaraward_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSWarMapQueryRqst WarMapQuery_Rqst = 1;
  if (has_warmapquery_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->warmapquery_rqst(), output);
  }

  // optional .vmsg.CSWarMapStartRqst WarMapStart_Rqst = 2;
  if (has_warmapstart_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->warmapstart_rqst(), output);
  }

  // optional .vmsg.CSWarMapEndRqst WarMapEnd_Rqst = 3;
  if (has_warmapend_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->warmapend_rqst(), output);
  }

  // optional .vmsg.CSWarMapCardRqst WarMapCard_Rqst = 4;
  if (has_warmapcard_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->warmapcard_rqst(), output);
  }

  // optional .vmsg.CSSweepWarRqst SweepWar_Rqst = 5;
  if (has_sweepwar_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->sweepwar_rqst(), output);
  }

  // optional .vmsg.CSQueryEliteWarMapRqst QueryEliteWarMap_Rqst = 6;
  if (has_queryelitewarmap_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->queryelitewarmap_rqst(), output);
  }

  // optional .vmsg.CSResetEliteWarMapRqst ResetEliteWarMap_Rqst = 7;
  if (has_resetelitewarmap_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->resetelitewarmap_rqst(), output);
  }

  // optional .vmsg.CSStartEliteWarMapRqst StartEliteWarMap_Rqst = 8;
  if (has_startelitewarmap_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->startelitewarmap_rqst(), output);
  }

  // optional .vmsg.CSEndEliteWarMapRqst EndEliteWarMap_Rqst = 9;
  if (has_endelitewarmap_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->endelitewarmap_rqst(), output);
  }

  // optional .vmsg.CSSweepEliteWarRqst SweepEliteWarMap_Rqst = 10;
  if (has_sweepelitewarmap_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->sweepelitewarmap_rqst(), output);
  }

  // optional .vmsg.CSDailyInstancePassRqst PassDailyInstance_Rqst = 11;
  if (has_passdailyinstance_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->passdailyinstance_rqst(), output);
  }

  // optional .vmsg.CSReliveRqst Relive_Rqst = 12;
  if (has_relive_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->relive_rqst(), output);
  }

  // optional .vmsg.CSBuyBulletRqst BuyBullet_Rqst = 13;
  if (has_buybullet_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->buybullet_rqst(), output);
  }

  // optional .vmsg.CSBuyInstanceRqst BuyInstance_Rqst = 14;
  if (has_buyinstance_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->buyinstance_rqst(), output);
  }

  // optional .vmsg.CSWarmapStarAwardRqst ClaimStarAward_Rqst = 15;
  if (has_claimstaraward_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->claimstaraward_rqst(), output);
  }

}

int CSWarMapRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSWarMapQueryRqst WarMapQuery_Rqst = 1;
    if (has_warmapquery_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapquery_rqst());
    }

    // optional .vmsg.CSWarMapStartRqst WarMapStart_Rqst = 2;
    if (has_warmapstart_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapstart_rqst());
    }

    // optional .vmsg.CSWarMapEndRqst WarMapEnd_Rqst = 3;
    if (has_warmapend_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapend_rqst());
    }

    // optional .vmsg.CSWarMapCardRqst WarMapCard_Rqst = 4;
    if (has_warmapcard_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapcard_rqst());
    }

    // optional .vmsg.CSSweepWarRqst SweepWar_Rqst = 5;
    if (has_sweepwar_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepwar_rqst());
    }

    // optional .vmsg.CSQueryEliteWarMapRqst QueryEliteWarMap_Rqst = 6;
    if (has_queryelitewarmap_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryelitewarmap_rqst());
    }

    // optional .vmsg.CSResetEliteWarMapRqst ResetEliteWarMap_Rqst = 7;
    if (has_resetelitewarmap_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resetelitewarmap_rqst());
    }

    // optional .vmsg.CSStartEliteWarMapRqst StartEliteWarMap_Rqst = 8;
    if (has_startelitewarmap_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startelitewarmap_rqst());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSEndEliteWarMapRqst EndEliteWarMap_Rqst = 9;
    if (has_endelitewarmap_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endelitewarmap_rqst());
    }

    // optional .vmsg.CSSweepEliteWarRqst SweepEliteWarMap_Rqst = 10;
    if (has_sweepelitewarmap_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepelitewarmap_rqst());
    }

    // optional .vmsg.CSDailyInstancePassRqst PassDailyInstance_Rqst = 11;
    if (has_passdailyinstance_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passdailyinstance_rqst());
    }

    // optional .vmsg.CSReliveRqst Relive_Rqst = 12;
    if (has_relive_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relive_rqst());
    }

    // optional .vmsg.CSBuyBulletRqst BuyBullet_Rqst = 13;
    if (has_buybullet_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buybullet_rqst());
    }

    // optional .vmsg.CSBuyInstanceRqst BuyInstance_Rqst = 14;
    if (has_buyinstance_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyinstance_rqst());
    }

    // optional .vmsg.CSWarmapStarAwardRqst ClaimStarAward_Rqst = 15;
    if (has_claimstaraward_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claimstaraward_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapRequest*>(&from));
}

void CSWarMapRequest::MergeFrom(const CSWarMapRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapquery_rqst()) {
      mutable_warmapquery_rqst()->::vmsg::CSWarMapQueryRqst::MergeFrom(from.warmapquery_rqst());
    }
    if (from.has_warmapstart_rqst()) {
      mutable_warmapstart_rqst()->::vmsg::CSWarMapStartRqst::MergeFrom(from.warmapstart_rqst());
    }
    if (from.has_warmapend_rqst()) {
      mutable_warmapend_rqst()->::vmsg::CSWarMapEndRqst::MergeFrom(from.warmapend_rqst());
    }
    if (from.has_warmapcard_rqst()) {
      mutable_warmapcard_rqst()->::vmsg::CSWarMapCardRqst::MergeFrom(from.warmapcard_rqst());
    }
    if (from.has_sweepwar_rqst()) {
      mutable_sweepwar_rqst()->::vmsg::CSSweepWarRqst::MergeFrom(from.sweepwar_rqst());
    }
    if (from.has_queryelitewarmap_rqst()) {
      mutable_queryelitewarmap_rqst()->::vmsg::CSQueryEliteWarMapRqst::MergeFrom(from.queryelitewarmap_rqst());
    }
    if (from.has_resetelitewarmap_rqst()) {
      mutable_resetelitewarmap_rqst()->::vmsg::CSResetEliteWarMapRqst::MergeFrom(from.resetelitewarmap_rqst());
    }
    if (from.has_startelitewarmap_rqst()) {
      mutable_startelitewarmap_rqst()->::vmsg::CSStartEliteWarMapRqst::MergeFrom(from.startelitewarmap_rqst());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endelitewarmap_rqst()) {
      mutable_endelitewarmap_rqst()->::vmsg::CSEndEliteWarMapRqst::MergeFrom(from.endelitewarmap_rqst());
    }
    if (from.has_sweepelitewarmap_rqst()) {
      mutable_sweepelitewarmap_rqst()->::vmsg::CSSweepEliteWarRqst::MergeFrom(from.sweepelitewarmap_rqst());
    }
    if (from.has_passdailyinstance_rqst()) {
      mutable_passdailyinstance_rqst()->::vmsg::CSDailyInstancePassRqst::MergeFrom(from.passdailyinstance_rqst());
    }
    if (from.has_relive_rqst()) {
      mutable_relive_rqst()->::vmsg::CSReliveRqst::MergeFrom(from.relive_rqst());
    }
    if (from.has_buybullet_rqst()) {
      mutable_buybullet_rqst()->::vmsg::CSBuyBulletRqst::MergeFrom(from.buybullet_rqst());
    }
    if (from.has_buyinstance_rqst()) {
      mutable_buyinstance_rqst()->::vmsg::CSBuyInstanceRqst::MergeFrom(from.buyinstance_rqst());
    }
    if (from.has_claimstaraward_rqst()) {
      mutable_claimstaraward_rqst()->::vmsg::CSWarmapStarAwardRqst::MergeFrom(from.claimstaraward_rqst());
    }
  }
}

void CSWarMapRequest::CopyFrom(const CSWarMapRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapRequest::IsInitialized() const {

  if (has_warmapquery_rqst()) {
    if (!this->warmapquery_rqst().IsInitialized()) return false;
  }
  if (has_warmapstart_rqst()) {
    if (!this->warmapstart_rqst().IsInitialized()) return false;
  }
  if (has_warmapend_rqst()) {
    if (!this->warmapend_rqst().IsInitialized()) return false;
  }
  if (has_warmapcard_rqst()) {
    if (!this->warmapcard_rqst().IsInitialized()) return false;
  }
  if (has_sweepwar_rqst()) {
    if (!this->sweepwar_rqst().IsInitialized()) return false;
  }
  if (has_queryelitewarmap_rqst()) {
    if (!this->queryelitewarmap_rqst().IsInitialized()) return false;
  }
  if (has_resetelitewarmap_rqst()) {
    if (!this->resetelitewarmap_rqst().IsInitialized()) return false;
  }
  if (has_startelitewarmap_rqst()) {
    if (!this->startelitewarmap_rqst().IsInitialized()) return false;
  }
  if (has_endelitewarmap_rqst()) {
    if (!this->endelitewarmap_rqst().IsInitialized()) return false;
  }
  if (has_sweepelitewarmap_rqst()) {
    if (!this->sweepelitewarmap_rqst().IsInitialized()) return false;
  }
  if (has_passdailyinstance_rqst()) {
    if (!this->passdailyinstance_rqst().IsInitialized()) return false;
  }
  if (has_relive_rqst()) {
    if (!this->relive_rqst().IsInitialized()) return false;
  }
  if (has_buybullet_rqst()) {
    if (!this->buybullet_rqst().IsInitialized()) return false;
  }
  if (has_buyinstance_rqst()) {
    if (!this->buyinstance_rqst().IsInitialized()) return false;
  }
  if (has_claimstaraward_rqst()) {
    if (!this->claimstaraward_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSWarMapRequest::Swap(CSWarMapRequest* other) {
  if (other != this) {
    std::swap(warmapquery_rqst_, other->warmapquery_rqst_);
    std::swap(warmapstart_rqst_, other->warmapstart_rqst_);
    std::swap(warmapend_rqst_, other->warmapend_rqst_);
    std::swap(warmapcard_rqst_, other->warmapcard_rqst_);
    std::swap(sweepwar_rqst_, other->sweepwar_rqst_);
    std::swap(queryelitewarmap_rqst_, other->queryelitewarmap_rqst_);
    std::swap(resetelitewarmap_rqst_, other->resetelitewarmap_rqst_);
    std::swap(startelitewarmap_rqst_, other->startelitewarmap_rqst_);
    std::swap(endelitewarmap_rqst_, other->endelitewarmap_rqst_);
    std::swap(sweepelitewarmap_rqst_, other->sweepelitewarmap_rqst_);
    std::swap(passdailyinstance_rqst_, other->passdailyinstance_rqst_);
    std::swap(relive_rqst_, other->relive_rqst_);
    std::swap(buybullet_rqst_, other->buybullet_rqst_);
    std::swap(buyinstance_rqst_, other->buyinstance_rqst_);
    std::swap(claimstaraward_rqst_, other->claimstaraward_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapRequest::GetTypeName() const {
  return "vmsg.CSWarMapRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWarMapRespond::kWarMapQueryRspFieldNumber;
const int CSWarMapRespond::kWarMapStartRspFieldNumber;
const int CSWarMapRespond::kWarMapEndRspFieldNumber;
const int CSWarMapRespond::kWarMapCardRspFieldNumber;
const int CSWarMapRespond::kSweepWarRspFieldNumber;
const int CSWarMapRespond::kQueryEliteWarMapRspFieldNumber;
const int CSWarMapRespond::kResetEliteWarMapRspFieldNumber;
const int CSWarMapRespond::kStartEliteWarMapRspFieldNumber;
const int CSWarMapRespond::kEndEliteWarMapRspFieldNumber;
const int CSWarMapRespond::kSweepEliteWarRspFieldNumber;
const int CSWarMapRespond::kQueryDailyInstanceRspFieldNumber;
const int CSWarMapRespond::kPassDailyInstanceRspFieldNumber;
const int CSWarMapRespond::kReliveRspFieldNumber;
const int CSWarMapRespond::kBuyBulletRspFieldNumber;
const int CSWarMapRespond::kBuyInstanceRspFieldNumber;
const int CSWarMapRespond::kClaimStarAwardRspFieldNumber;
#endif  // !_MSC_VER

CSWarMapRespond::CSWarMapRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWarMapRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapquery_rsp_ = const_cast< ::vmsg::CSWarMapQueryRsp*>(
      ::vmsg::CSWarMapQueryRsp::internal_default_instance());
#else
  warmapquery_rsp_ = const_cast< ::vmsg::CSWarMapQueryRsp*>(&::vmsg::CSWarMapQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapstart_rsp_ = const_cast< ::vmsg::CSWarMapStartRsp*>(
      ::vmsg::CSWarMapStartRsp::internal_default_instance());
#else
  warmapstart_rsp_ = const_cast< ::vmsg::CSWarMapStartRsp*>(&::vmsg::CSWarMapStartRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapend_rsp_ = const_cast< ::vmsg::CSWarMapEndRsp*>(
      ::vmsg::CSWarMapEndRsp::internal_default_instance());
#else
  warmapend_rsp_ = const_cast< ::vmsg::CSWarMapEndRsp*>(&::vmsg::CSWarMapEndRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmapcard_rsp_ = const_cast< ::vmsg::CSWarMapCardRsp*>(
      ::vmsg::CSWarMapCardRsp::internal_default_instance());
#else
  warmapcard_rsp_ = const_cast< ::vmsg::CSWarMapCardRsp*>(&::vmsg::CSWarMapCardRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sweepwar_rsp_ = const_cast< ::vmsg::CSSweepWarRsp*>(
      ::vmsg::CSSweepWarRsp::internal_default_instance());
#else
  sweepwar_rsp_ = const_cast< ::vmsg::CSSweepWarRsp*>(&::vmsg::CSSweepWarRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryelitewarmap_rsp_ = const_cast< ::vmsg::CSEliteWarInfo*>(
      ::vmsg::CSEliteWarInfo::internal_default_instance());
#else
  queryelitewarmap_rsp_ = const_cast< ::vmsg::CSEliteWarInfo*>(&::vmsg::CSEliteWarInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resetelitewarmap_rsp_ = const_cast< ::vmsg::CSEliteWarInfo*>(
      ::vmsg::CSEliteWarInfo::internal_default_instance());
#else
  resetelitewarmap_rsp_ = const_cast< ::vmsg::CSEliteWarInfo*>(&::vmsg::CSEliteWarInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  startelitewarmap_rsp_ = const_cast< ::vmsg::CSStartEliteWarMapRsp*>(
      ::vmsg::CSStartEliteWarMapRsp::internal_default_instance());
#else
  startelitewarmap_rsp_ = const_cast< ::vmsg::CSStartEliteWarMapRsp*>(&::vmsg::CSStartEliteWarMapRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  endelitewarmap_rsp_ = const_cast< ::vmsg::CSEndEliteWarMapRsp*>(
      ::vmsg::CSEndEliteWarMapRsp::internal_default_instance());
#else
  endelitewarmap_rsp_ = const_cast< ::vmsg::CSEndEliteWarMapRsp*>(&::vmsg::CSEndEliteWarMapRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sweepelitewar_rsp_ = const_cast< ::vmsg::CSSweepEliteWarRsp*>(
      ::vmsg::CSSweepEliteWarRsp::internal_default_instance());
#else
  sweepelitewar_rsp_ = const_cast< ::vmsg::CSSweepEliteWarRsp*>(&::vmsg::CSSweepEliteWarRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querydailyinstance_rsp_ = const_cast< ::vmsg::CSQueryDailyInstanceRsp*>(
      ::vmsg::CSQueryDailyInstanceRsp::internal_default_instance());
#else
  querydailyinstance_rsp_ = const_cast< ::vmsg::CSQueryDailyInstanceRsp*>(&::vmsg::CSQueryDailyInstanceRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  passdailyinstance_rsp_ = const_cast< ::vmsg::CSDailyInstancePassRsp*>(
      ::vmsg::CSDailyInstancePassRsp::internal_default_instance());
#else
  passdailyinstance_rsp_ = const_cast< ::vmsg::CSDailyInstancePassRsp*>(&::vmsg::CSDailyInstancePassRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  relive_rsp_ = const_cast< ::vmsg::CSReliveRsp*>(
      ::vmsg::CSReliveRsp::internal_default_instance());
#else
  relive_rsp_ = const_cast< ::vmsg::CSReliveRsp*>(&::vmsg::CSReliveRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buybullet_rsp_ = const_cast< ::vmsg::CSBuyBulletRsp*>(
      ::vmsg::CSBuyBulletRsp::internal_default_instance());
#else
  buybullet_rsp_ = const_cast< ::vmsg::CSBuyBulletRsp*>(&::vmsg::CSBuyBulletRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyinstance_rsp_ = const_cast< ::vmsg::CSBuyInstanceRsp*>(
      ::vmsg::CSBuyInstanceRsp::internal_default_instance());
#else
  buyinstance_rsp_ = const_cast< ::vmsg::CSBuyInstanceRsp*>(&::vmsg::CSBuyInstanceRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claimstaraward_rsp_ = const_cast< ::vmsg::CSWarmapStarAwardRsp*>(
      ::vmsg::CSWarmapStarAwardRsp::internal_default_instance());
#else
  claimstaraward_rsp_ = const_cast< ::vmsg::CSWarmapStarAwardRsp*>(&::vmsg::CSWarmapStarAwardRsp::default_instance());
#endif
}

CSWarMapRespond::CSWarMapRespond(const CSWarMapRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWarMapRespond::SharedCtor() {
  _cached_size_ = 0;
  warmapquery_rsp_ = NULL;
  warmapstart_rsp_ = NULL;
  warmapend_rsp_ = NULL;
  warmapcard_rsp_ = NULL;
  sweepwar_rsp_ = NULL;
  queryelitewarmap_rsp_ = NULL;
  resetelitewarmap_rsp_ = NULL;
  startelitewarmap_rsp_ = NULL;
  endelitewarmap_rsp_ = NULL;
  sweepelitewar_rsp_ = NULL;
  querydailyinstance_rsp_ = NULL;
  passdailyinstance_rsp_ = NULL;
  relive_rsp_ = NULL;
  buybullet_rsp_ = NULL;
  buyinstance_rsp_ = NULL;
  claimstaraward_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWarMapRespond::~CSWarMapRespond() {
  SharedDtor();
}

void CSWarMapRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete warmapquery_rsp_;
    delete warmapstart_rsp_;
    delete warmapend_rsp_;
    delete warmapcard_rsp_;
    delete sweepwar_rsp_;
    delete queryelitewarmap_rsp_;
    delete resetelitewarmap_rsp_;
    delete startelitewarmap_rsp_;
    delete endelitewarmap_rsp_;
    delete sweepelitewar_rsp_;
    delete querydailyinstance_rsp_;
    delete passdailyinstance_rsp_;
    delete relive_rsp_;
    delete buybullet_rsp_;
    delete buyinstance_rsp_;
    delete claimstaraward_rsp_;
  }
}

void CSWarMapRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWarMapRespond& CSWarMapRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSWarMapMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSWarMapMsg_2eproto();
#endif
  return *default_instance_;
}

CSWarMapRespond* CSWarMapRespond::default_instance_ = NULL;

CSWarMapRespond* CSWarMapRespond::New() const {
  return new CSWarMapRespond;
}

void CSWarMapRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_warmapquery_rsp()) {
      if (warmapquery_rsp_ != NULL) warmapquery_rsp_->::vmsg::CSWarMapQueryRsp::Clear();
    }
    if (has_warmapstart_rsp()) {
      if (warmapstart_rsp_ != NULL) warmapstart_rsp_->::vmsg::CSWarMapStartRsp::Clear();
    }
    if (has_warmapend_rsp()) {
      if (warmapend_rsp_ != NULL) warmapend_rsp_->::vmsg::CSWarMapEndRsp::Clear();
    }
    if (has_warmapcard_rsp()) {
      if (warmapcard_rsp_ != NULL) warmapcard_rsp_->::vmsg::CSWarMapCardRsp::Clear();
    }
    if (has_sweepwar_rsp()) {
      if (sweepwar_rsp_ != NULL) sweepwar_rsp_->::vmsg::CSSweepWarRsp::Clear();
    }
    if (has_queryelitewarmap_rsp()) {
      if (queryelitewarmap_rsp_ != NULL) queryelitewarmap_rsp_->::vmsg::CSEliteWarInfo::Clear();
    }
    if (has_resetelitewarmap_rsp()) {
      if (resetelitewarmap_rsp_ != NULL) resetelitewarmap_rsp_->::vmsg::CSEliteWarInfo::Clear();
    }
    if (has_startelitewarmap_rsp()) {
      if (startelitewarmap_rsp_ != NULL) startelitewarmap_rsp_->::vmsg::CSStartEliteWarMapRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_endelitewarmap_rsp()) {
      if (endelitewarmap_rsp_ != NULL) endelitewarmap_rsp_->::vmsg::CSEndEliteWarMapRsp::Clear();
    }
    if (has_sweepelitewar_rsp()) {
      if (sweepelitewar_rsp_ != NULL) sweepelitewar_rsp_->::vmsg::CSSweepEliteWarRsp::Clear();
    }
    if (has_querydailyinstance_rsp()) {
      if (querydailyinstance_rsp_ != NULL) querydailyinstance_rsp_->::vmsg::CSQueryDailyInstanceRsp::Clear();
    }
    if (has_passdailyinstance_rsp()) {
      if (passdailyinstance_rsp_ != NULL) passdailyinstance_rsp_->::vmsg::CSDailyInstancePassRsp::Clear();
    }
    if (has_relive_rsp()) {
      if (relive_rsp_ != NULL) relive_rsp_->::vmsg::CSReliveRsp::Clear();
    }
    if (has_buybullet_rsp()) {
      if (buybullet_rsp_ != NULL) buybullet_rsp_->::vmsg::CSBuyBulletRsp::Clear();
    }
    if (has_buyinstance_rsp()) {
      if (buyinstance_rsp_ != NULL) buyinstance_rsp_->::vmsg::CSBuyInstanceRsp::Clear();
    }
    if (has_claimstaraward_rsp()) {
      if (claimstaraward_rsp_ != NULL) claimstaraward_rsp_->::vmsg::CSWarmapStarAwardRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWarMapRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSWarMapQueryRsp WarMapQuery_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapquery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_WarMapStart_Rsp;
        break;
      }

      // optional .vmsg.CSWarMapStartRsp WarMapStart_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapStart_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapstart_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_WarMapEnd_Rsp;
        break;
      }

      // optional .vmsg.CSWarMapEndRsp WarMapEnd_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapEnd_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_WarMapCard_Rsp;
        break;
      }

      // optional .vmsg.CSWarMapCardRsp WarMapCard_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapCard_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmapcard_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SweepWar_Rsp;
        break;
      }

      // optional .vmsg.CSSweepWarRsp SweepWar_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SweepWar_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepwar_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_QueryEliteWarMap_Rsp;
        break;
      }

      // optional .vmsg.CSEliteWarInfo QueryEliteWarMap_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryEliteWarMap_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryelitewarmap_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ResetEliteWarMap_Rsp;
        break;
      }

      // optional .vmsg.CSEliteWarInfo ResetEliteWarMap_Rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResetEliteWarMap_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resetelitewarmap_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_StartEliteWarMap_Rsp;
        break;
      }

      // optional .vmsg.CSStartEliteWarMapRsp StartEliteWarMap_Rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartEliteWarMap_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startelitewarmap_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_EndEliteWarMap_Rsp;
        break;
      }

      // optional .vmsg.CSEndEliteWarMapRsp EndEliteWarMap_Rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EndEliteWarMap_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endelitewarmap_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SweepEliteWar_Rsp;
        break;
      }

      // optional .vmsg.CSSweepEliteWarRsp SweepEliteWar_Rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SweepEliteWar_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sweepelitewar_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_QueryDailyInstance_Rsp;
        break;
      }

      // optional .vmsg.CSQueryDailyInstanceRsp QueryDailyInstance_Rsp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryDailyInstance_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querydailyinstance_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_PassDailyInstance_Rsp;
        break;
      }

      // optional .vmsg.CSDailyInstancePassRsp PassDailyInstance_Rsp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PassDailyInstance_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_passdailyinstance_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Relive_Rsp;
        break;
      }

      // optional .vmsg.CSReliveRsp Relive_Rsp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Relive_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relive_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_BuyBullet_Rsp;
        break;
      }

      // optional .vmsg.CSBuyBulletRsp BuyBullet_Rsp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyBullet_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buybullet_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_BuyInstance_Rsp;
        break;
      }

      // optional .vmsg.CSBuyInstanceRsp BuyInstance_Rsp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyInstance_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyinstance_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_ClaimStarAward_Rsp;
        break;
      }

      // optional .vmsg.CSWarmapStarAwardRsp ClaimStarAward_Rsp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClaimStarAward_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claimstaraward_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWarMapRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSWarMapQueryRsp WarMapQuery_Rsp = 1;
  if (has_warmapquery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->warmapquery_rsp(), output);
  }

  // optional .vmsg.CSWarMapStartRsp WarMapStart_Rsp = 2;
  if (has_warmapstart_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->warmapstart_rsp(), output);
  }

  // optional .vmsg.CSWarMapEndRsp WarMapEnd_Rsp = 3;
  if (has_warmapend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->warmapend_rsp(), output);
  }

  // optional .vmsg.CSWarMapCardRsp WarMapCard_Rsp = 4;
  if (has_warmapcard_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->warmapcard_rsp(), output);
  }

  // optional .vmsg.CSSweepWarRsp SweepWar_Rsp = 5;
  if (has_sweepwar_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->sweepwar_rsp(), output);
  }

  // optional .vmsg.CSEliteWarInfo QueryEliteWarMap_Rsp = 6;
  if (has_queryelitewarmap_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->queryelitewarmap_rsp(), output);
  }

  // optional .vmsg.CSEliteWarInfo ResetEliteWarMap_Rsp = 7;
  if (has_resetelitewarmap_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->resetelitewarmap_rsp(), output);
  }

  // optional .vmsg.CSStartEliteWarMapRsp StartEliteWarMap_Rsp = 8;
  if (has_startelitewarmap_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->startelitewarmap_rsp(), output);
  }

  // optional .vmsg.CSEndEliteWarMapRsp EndEliteWarMap_Rsp = 9;
  if (has_endelitewarmap_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->endelitewarmap_rsp(), output);
  }

  // optional .vmsg.CSSweepEliteWarRsp SweepEliteWar_Rsp = 10;
  if (has_sweepelitewar_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->sweepelitewar_rsp(), output);
  }

  // optional .vmsg.CSQueryDailyInstanceRsp QueryDailyInstance_Rsp = 11;
  if (has_querydailyinstance_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->querydailyinstance_rsp(), output);
  }

  // optional .vmsg.CSDailyInstancePassRsp PassDailyInstance_Rsp = 12;
  if (has_passdailyinstance_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->passdailyinstance_rsp(), output);
  }

  // optional .vmsg.CSReliveRsp Relive_Rsp = 13;
  if (has_relive_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->relive_rsp(), output);
  }

  // optional .vmsg.CSBuyBulletRsp BuyBullet_Rsp = 14;
  if (has_buybullet_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->buybullet_rsp(), output);
  }

  // optional .vmsg.CSBuyInstanceRsp BuyInstance_Rsp = 15;
  if (has_buyinstance_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->buyinstance_rsp(), output);
  }

  // optional .vmsg.CSWarmapStarAwardRsp ClaimStarAward_Rsp = 16;
  if (has_claimstaraward_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->claimstaraward_rsp(), output);
  }

}

int CSWarMapRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSWarMapQueryRsp WarMapQuery_Rsp = 1;
    if (has_warmapquery_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapquery_rsp());
    }

    // optional .vmsg.CSWarMapStartRsp WarMapStart_Rsp = 2;
    if (has_warmapstart_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapstart_rsp());
    }

    // optional .vmsg.CSWarMapEndRsp WarMapEnd_Rsp = 3;
    if (has_warmapend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapend_rsp());
    }

    // optional .vmsg.CSWarMapCardRsp WarMapCard_Rsp = 4;
    if (has_warmapcard_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmapcard_rsp());
    }

    // optional .vmsg.CSSweepWarRsp SweepWar_Rsp = 5;
    if (has_sweepwar_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepwar_rsp());
    }

    // optional .vmsg.CSEliteWarInfo QueryEliteWarMap_Rsp = 6;
    if (has_queryelitewarmap_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryelitewarmap_rsp());
    }

    // optional .vmsg.CSEliteWarInfo ResetEliteWarMap_Rsp = 7;
    if (has_resetelitewarmap_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resetelitewarmap_rsp());
    }

    // optional .vmsg.CSStartEliteWarMapRsp StartEliteWarMap_Rsp = 8;
    if (has_startelitewarmap_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startelitewarmap_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSEndEliteWarMapRsp EndEliteWarMap_Rsp = 9;
    if (has_endelitewarmap_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endelitewarmap_rsp());
    }

    // optional .vmsg.CSSweepEliteWarRsp SweepEliteWar_Rsp = 10;
    if (has_sweepelitewar_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sweepelitewar_rsp());
    }

    // optional .vmsg.CSQueryDailyInstanceRsp QueryDailyInstance_Rsp = 11;
    if (has_querydailyinstance_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querydailyinstance_rsp());
    }

    // optional .vmsg.CSDailyInstancePassRsp PassDailyInstance_Rsp = 12;
    if (has_passdailyinstance_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->passdailyinstance_rsp());
    }

    // optional .vmsg.CSReliveRsp Relive_Rsp = 13;
    if (has_relive_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relive_rsp());
    }

    // optional .vmsg.CSBuyBulletRsp BuyBullet_Rsp = 14;
    if (has_buybullet_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buybullet_rsp());
    }

    // optional .vmsg.CSBuyInstanceRsp BuyInstance_Rsp = 15;
    if (has_buyinstance_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyinstance_rsp());
    }

    // optional .vmsg.CSWarmapStarAwardRsp ClaimStarAward_Rsp = 16;
    if (has_claimstaraward_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claimstaraward_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWarMapRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWarMapRespond*>(&from));
}

void CSWarMapRespond::MergeFrom(const CSWarMapRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warmapquery_rsp()) {
      mutable_warmapquery_rsp()->::vmsg::CSWarMapQueryRsp::MergeFrom(from.warmapquery_rsp());
    }
    if (from.has_warmapstart_rsp()) {
      mutable_warmapstart_rsp()->::vmsg::CSWarMapStartRsp::MergeFrom(from.warmapstart_rsp());
    }
    if (from.has_warmapend_rsp()) {
      mutable_warmapend_rsp()->::vmsg::CSWarMapEndRsp::MergeFrom(from.warmapend_rsp());
    }
    if (from.has_warmapcard_rsp()) {
      mutable_warmapcard_rsp()->::vmsg::CSWarMapCardRsp::MergeFrom(from.warmapcard_rsp());
    }
    if (from.has_sweepwar_rsp()) {
      mutable_sweepwar_rsp()->::vmsg::CSSweepWarRsp::MergeFrom(from.sweepwar_rsp());
    }
    if (from.has_queryelitewarmap_rsp()) {
      mutable_queryelitewarmap_rsp()->::vmsg::CSEliteWarInfo::MergeFrom(from.queryelitewarmap_rsp());
    }
    if (from.has_resetelitewarmap_rsp()) {
      mutable_resetelitewarmap_rsp()->::vmsg::CSEliteWarInfo::MergeFrom(from.resetelitewarmap_rsp());
    }
    if (from.has_startelitewarmap_rsp()) {
      mutable_startelitewarmap_rsp()->::vmsg::CSStartEliteWarMapRsp::MergeFrom(from.startelitewarmap_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endelitewarmap_rsp()) {
      mutable_endelitewarmap_rsp()->::vmsg::CSEndEliteWarMapRsp::MergeFrom(from.endelitewarmap_rsp());
    }
    if (from.has_sweepelitewar_rsp()) {
      mutable_sweepelitewar_rsp()->::vmsg::CSSweepEliteWarRsp::MergeFrom(from.sweepelitewar_rsp());
    }
    if (from.has_querydailyinstance_rsp()) {
      mutable_querydailyinstance_rsp()->::vmsg::CSQueryDailyInstanceRsp::MergeFrom(from.querydailyinstance_rsp());
    }
    if (from.has_passdailyinstance_rsp()) {
      mutable_passdailyinstance_rsp()->::vmsg::CSDailyInstancePassRsp::MergeFrom(from.passdailyinstance_rsp());
    }
    if (from.has_relive_rsp()) {
      mutable_relive_rsp()->::vmsg::CSReliveRsp::MergeFrom(from.relive_rsp());
    }
    if (from.has_buybullet_rsp()) {
      mutable_buybullet_rsp()->::vmsg::CSBuyBulletRsp::MergeFrom(from.buybullet_rsp());
    }
    if (from.has_buyinstance_rsp()) {
      mutable_buyinstance_rsp()->::vmsg::CSBuyInstanceRsp::MergeFrom(from.buyinstance_rsp());
    }
    if (from.has_claimstaraward_rsp()) {
      mutable_claimstaraward_rsp()->::vmsg::CSWarmapStarAwardRsp::MergeFrom(from.claimstaraward_rsp());
    }
  }
}

void CSWarMapRespond::CopyFrom(const CSWarMapRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWarMapRespond::IsInitialized() const {

  if (has_warmapquery_rsp()) {
    if (!this->warmapquery_rsp().IsInitialized()) return false;
  }
  if (has_warmapstart_rsp()) {
    if (!this->warmapstart_rsp().IsInitialized()) return false;
  }
  if (has_warmapend_rsp()) {
    if (!this->warmapend_rsp().IsInitialized()) return false;
  }
  if (has_warmapcard_rsp()) {
    if (!this->warmapcard_rsp().IsInitialized()) return false;
  }
  if (has_sweepwar_rsp()) {
    if (!this->sweepwar_rsp().IsInitialized()) return false;
  }
  if (has_queryelitewarmap_rsp()) {
    if (!this->queryelitewarmap_rsp().IsInitialized()) return false;
  }
  if (has_resetelitewarmap_rsp()) {
    if (!this->resetelitewarmap_rsp().IsInitialized()) return false;
  }
  if (has_startelitewarmap_rsp()) {
    if (!this->startelitewarmap_rsp().IsInitialized()) return false;
  }
  if (has_endelitewarmap_rsp()) {
    if (!this->endelitewarmap_rsp().IsInitialized()) return false;
  }
  if (has_sweepelitewar_rsp()) {
    if (!this->sweepelitewar_rsp().IsInitialized()) return false;
  }
  if (has_querydailyinstance_rsp()) {
    if (!this->querydailyinstance_rsp().IsInitialized()) return false;
  }
  if (has_passdailyinstance_rsp()) {
    if (!this->passdailyinstance_rsp().IsInitialized()) return false;
  }
  if (has_relive_rsp()) {
    if (!this->relive_rsp().IsInitialized()) return false;
  }
  if (has_buybullet_rsp()) {
    if (!this->buybullet_rsp().IsInitialized()) return false;
  }
  if (has_buyinstance_rsp()) {
    if (!this->buyinstance_rsp().IsInitialized()) return false;
  }
  if (has_claimstaraward_rsp()) {
    if (!this->claimstaraward_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSWarMapRespond::Swap(CSWarMapRespond* other) {
  if (other != this) {
    std::swap(warmapquery_rsp_, other->warmapquery_rsp_);
    std::swap(warmapstart_rsp_, other->warmapstart_rsp_);
    std::swap(warmapend_rsp_, other->warmapend_rsp_);
    std::swap(warmapcard_rsp_, other->warmapcard_rsp_);
    std::swap(sweepwar_rsp_, other->sweepwar_rsp_);
    std::swap(queryelitewarmap_rsp_, other->queryelitewarmap_rsp_);
    std::swap(resetelitewarmap_rsp_, other->resetelitewarmap_rsp_);
    std::swap(startelitewarmap_rsp_, other->startelitewarmap_rsp_);
    std::swap(endelitewarmap_rsp_, other->endelitewarmap_rsp_);
    std::swap(sweepelitewar_rsp_, other->sweepelitewar_rsp_);
    std::swap(querydailyinstance_rsp_, other->querydailyinstance_rsp_);
    std::swap(passdailyinstance_rsp_, other->passdailyinstance_rsp_);
    std::swap(relive_rsp_, other->relive_rsp_);
    std::swap(buybullet_rsp_, other->buybullet_rsp_);
    std::swap(buyinstance_rsp_, other->buyinstance_rsp_);
    std::swap(claimstaraward_rsp_, other->claimstaraward_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWarMapRespond::GetTypeName() const {
  return "vmsg.CSWarMapRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
