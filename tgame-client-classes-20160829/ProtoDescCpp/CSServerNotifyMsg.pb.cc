// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSServerNotifyMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSServerNotifyMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSServerNotifyMsg_2eproto() {
  delete CSServerNotifyPkg::default_instance_;
  delete CSServerNotify::default_instance_;
  delete CSServerNotifyRequest::default_instance_;
  delete CSServerNotifyRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSServerNotifyMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSServerNotifyMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSServerNotifyPkg::default_instance_ = new CSServerNotifyPkg();
  CSServerNotify::default_instance_ = new CSServerNotify();
  CSServerNotifyRequest::default_instance_ = new CSServerNotifyRequest();
  CSServerNotifyRespond::default_instance_ = new CSServerNotifyRespond();
  CSServerNotifyPkg::default_instance_->InitAsDefaultInstance();
  CSServerNotify::default_instance_->InitAsDefaultInstance();
  CSServerNotifyRequest::default_instance_->InitAsDefaultInstance();
  CSServerNotifyRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSServerNotifyMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSServerNotifyMsg_2eproto_once_);
void protobuf_AddDesc_CSServerNotifyMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSServerNotifyMsg_2eproto_once_,
                 &protobuf_AddDesc_CSServerNotifyMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSServerNotifyMsg_2eproto {
  StaticDescriptorInitializer_CSServerNotifyMsg_2eproto() {
    protobuf_AddDesc_CSServerNotifyMsg_2eproto();
  }
} static_descriptor_initializer_CSServerNotifyMsg_2eproto_;
#endif
bool NOTIFY_SPEC_ID_IsValid(int value) {
  switch(value) {
    case 0:
    case 10000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSServerNotifyPkg::CSServerNotifyPkg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSServerNotifyPkg::InitAsDefaultInstance() {
}

CSServerNotifyPkg::CSServerNotifyPkg(const CSServerNotifyPkg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSServerNotifyPkg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSServerNotifyPkg::~CSServerNotifyPkg() {
  SharedDtor();
}

void CSServerNotifyPkg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSServerNotifyPkg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSServerNotifyPkg& CSServerNotifyPkg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#endif
  return *default_instance_;
}

CSServerNotifyPkg* CSServerNotifyPkg::default_instance_ = NULL;

CSServerNotifyPkg* CSServerNotifyPkg::New() const {
  return new CSServerNotifyPkg;
}

void CSServerNotifyPkg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSServerNotifyPkg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CSServerNotifyPkg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CSServerNotifyPkg::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSServerNotifyPkg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSServerNotifyPkg*>(&from));
}

void CSServerNotifyPkg::MergeFrom(const CSServerNotifyPkg& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CSServerNotifyPkg::CopyFrom(const CSServerNotifyPkg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSServerNotifyPkg::IsInitialized() const {

  return true;
}

void CSServerNotifyPkg::Swap(CSServerNotifyPkg* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSServerNotifyPkg::GetTypeName() const {
  return "vmsg.CSServerNotifyPkg";
}


// ===================================================================

#ifndef _MSC_VER
const int CSServerNotify::kNotifyIDFieldNumber;
const int CSServerNotify::kNotifyStrFieldNumber;
const int CSServerNotify::kServerNotifyPkgFieldNumber;
#endif  // !_MSC_VER

CSServerNotify::CSServerNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSServerNotify::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  servernotifypkg_ = const_cast< ::vmsg::CSServerNotifyPkg*>(
      ::vmsg::CSServerNotifyPkg::internal_default_instance());
#else
  servernotifypkg_ = const_cast< ::vmsg::CSServerNotifyPkg*>(&::vmsg::CSServerNotifyPkg::default_instance());
#endif
}

CSServerNotify::CSServerNotify(const CSServerNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSServerNotify::SharedCtor() {
  _cached_size_ = 0;
  notifyid_ = 0u;
  servernotifypkg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSServerNotify::~CSServerNotify() {
  SharedDtor();
}

void CSServerNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete servernotifypkg_;
  }
}

void CSServerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSServerNotify& CSServerNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#endif
  return *default_instance_;
}

CSServerNotify* CSServerNotify::default_instance_ = NULL;

CSServerNotify* CSServerNotify::New() const {
  return new CSServerNotify;
}

void CSServerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notifyid_ = 0u;
    if (has_servernotifypkg()) {
      if (servernotifypkg_ != NULL) servernotifypkg_->::vmsg::CSServerNotifyPkg::Clear();
    }
  }
  notifystr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSServerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NotifyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notifyid_)));
          set_has_notifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NotifyStr;
        break;
      }

      // repeated string NotifyStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NotifyStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_notifystr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NotifyStr;
        if (input->ExpectTag(26)) goto parse_ServerNotifyPkg;
        break;
      }

      // optional .vmsg.CSServerNotifyPkg ServerNotifyPkg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerNotifyPkg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servernotifypkg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSServerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 NotifyID = 1;
  if (has_notifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notifyid(), output);
  }

  // repeated string NotifyStr = 2;
  for (int i = 0; i < this->notifystr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notifystr(i), output);
  }

  // optional .vmsg.CSServerNotifyPkg ServerNotifyPkg = 3;
  if (has_servernotifypkg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->servernotifypkg(), output);
  }

}

int CSServerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 NotifyID = 1;
    if (has_notifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notifyid());
    }

    // optional .vmsg.CSServerNotifyPkg ServerNotifyPkg = 3;
    if (has_servernotifypkg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servernotifypkg());
    }

  }
  // repeated string NotifyStr = 2;
  total_size += 1 * this->notifystr_size();
  for (int i = 0; i < this->notifystr_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->notifystr(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSServerNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSServerNotify*>(&from));
}

void CSServerNotify::MergeFrom(const CSServerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  notifystr_.MergeFrom(from.notifystr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notifyid()) {
      set_notifyid(from.notifyid());
    }
    if (from.has_servernotifypkg()) {
      mutable_servernotifypkg()->::vmsg::CSServerNotifyPkg::MergeFrom(from.servernotifypkg());
    }
  }
}

void CSServerNotify::CopyFrom(const CSServerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSServerNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSServerNotify::Swap(CSServerNotify* other) {
  if (other != this) {
    std::swap(notifyid_, other->notifyid_);
    notifystr_.Swap(&other->notifystr_);
    std::swap(servernotifypkg_, other->servernotifypkg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSServerNotify::GetTypeName() const {
  return "vmsg.CSServerNotify";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSServerNotifyRequest::CSServerNotifyRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSServerNotifyRequest::InitAsDefaultInstance() {
}

CSServerNotifyRequest::CSServerNotifyRequest(const CSServerNotifyRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSServerNotifyRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSServerNotifyRequest::~CSServerNotifyRequest() {
  SharedDtor();
}

void CSServerNotifyRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSServerNotifyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSServerNotifyRequest& CSServerNotifyRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#endif
  return *default_instance_;
}

CSServerNotifyRequest* CSServerNotifyRequest::default_instance_ = NULL;

CSServerNotifyRequest* CSServerNotifyRequest::New() const {
  return new CSServerNotifyRequest;
}

void CSServerNotifyRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSServerNotifyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CSServerNotifyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CSServerNotifyRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSServerNotifyRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSServerNotifyRequest*>(&from));
}

void CSServerNotifyRequest::MergeFrom(const CSServerNotifyRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CSServerNotifyRequest::CopyFrom(const CSServerNotifyRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSServerNotifyRequest::IsInitialized() const {

  return true;
}

void CSServerNotifyRequest::Swap(CSServerNotifyRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSServerNotifyRequest::GetTypeName() const {
  return "vmsg.CSServerNotifyRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSServerNotifyRespond::kServerNotifyFieldNumber;
#endif  // !_MSC_VER

CSServerNotifyRespond::CSServerNotifyRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSServerNotifyRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  server_notify_ = const_cast< ::vmsg::CSServerNotify*>(
      ::vmsg::CSServerNotify::internal_default_instance());
#else
  server_notify_ = const_cast< ::vmsg::CSServerNotify*>(&::vmsg::CSServerNotify::default_instance());
#endif
}

CSServerNotifyRespond::CSServerNotifyRespond(const CSServerNotifyRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSServerNotifyRespond::SharedCtor() {
  _cached_size_ = 0;
  server_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSServerNotifyRespond::~CSServerNotifyRespond() {
  SharedDtor();
}

void CSServerNotifyRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete server_notify_;
  }
}

void CSServerNotifyRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSServerNotifyRespond& CSServerNotifyRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSServerNotifyMsg_2eproto();
#endif
  return *default_instance_;
}

CSServerNotifyRespond* CSServerNotifyRespond::default_instance_ = NULL;

CSServerNotifyRespond* CSServerNotifyRespond::New() const {
  return new CSServerNotifyRespond;
}

void CSServerNotifyRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_server_notify()) {
      if (server_notify_ != NULL) server_notify_->::vmsg::CSServerNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSServerNotifyRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSServerNotify Server_Notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSServerNotifyRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSServerNotify Server_Notify = 1;
  if (has_server_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->server_notify(), output);
  }

}

int CSServerNotifyRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSServerNotify Server_Notify = 1;
    if (has_server_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_notify());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSServerNotifyRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSServerNotifyRespond*>(&from));
}

void CSServerNotifyRespond::MergeFrom(const CSServerNotifyRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_server_notify()) {
      mutable_server_notify()->::vmsg::CSServerNotify::MergeFrom(from.server_notify());
    }
  }
}

void CSServerNotifyRespond::CopyFrom(const CSServerNotifyRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSServerNotifyRespond::IsInitialized() const {

  if (has_server_notify()) {
    if (!this->server_notify().IsInitialized()) return false;
  }
  return true;
}

void CSServerNotifyRespond::Swap(CSServerNotifyRespond* other) {
  if (other != this) {
    std::swap(server_notify_, other->server_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSServerNotifyRespond::GetTypeName() const {
  return "vmsg.CSServerNotifyRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
