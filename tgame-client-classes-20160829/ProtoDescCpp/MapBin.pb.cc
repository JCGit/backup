// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapBin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MapBin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

void protobuf_ShutdownFile_MapBin_2eproto() {
  delete CMapItem::default_instance_;
  delete CMapMonster::default_instance_;
  delete CMapNPC::default_instance_;
  delete CMapBegin::default_instance_;
  delete CMapTouch::default_instance_;
  delete CPropItem::default_instance_;
  delete CFloorBuff::default_instance_;
  delete CTrap::default_instance_;
  delete CMapBin::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MapBin_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MapBin_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CMapItem::default_instance_ = new CMapItem();
  CMapMonster::default_instance_ = new CMapMonster();
  CMapNPC::default_instance_ = new CMapNPC();
  CMapBegin::default_instance_ = new CMapBegin();
  CMapTouch::default_instance_ = new CMapTouch();
  CPropItem::default_instance_ = new CPropItem();
  CFloorBuff::default_instance_ = new CFloorBuff();
  CTrap::default_instance_ = new CTrap();
  CMapBin::default_instance_ = new CMapBin();
  CMapItem::default_instance_->InitAsDefaultInstance();
  CMapMonster::default_instance_->InitAsDefaultInstance();
  CMapNPC::default_instance_->InitAsDefaultInstance();
  CMapBegin::default_instance_->InitAsDefaultInstance();
  CMapTouch::default_instance_->InitAsDefaultInstance();
  CPropItem::default_instance_->InitAsDefaultInstance();
  CFloorBuff::default_instance_->InitAsDefaultInstance();
  CTrap::default_instance_->InitAsDefaultInstance();
  CMapBin::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MapBin_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MapBin_2eproto_once_);
void protobuf_AddDesc_MapBin_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MapBin_2eproto_once_,
                 &protobuf_AddDesc_MapBin_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MapBin_2eproto {
  StaticDescriptorInitializer_MapBin_2eproto() {
    protobuf_AddDesc_MapBin_2eproto();
  }
} static_descriptor_initializer_MapBin_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CMapItem::kIdFieldNumber;
const int CMapItem::kXFieldNumber;
const int CMapItem::kYFieldNumber;
const int CMapItem::kStageFieldNumber;
const int CMapItem::kPathFieldNumber;
#endif  // !_MSC_VER

CMapItem::CMapItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMapItem::InitAsDefaultInstance() {
}

CMapItem::CMapItem(const CMapItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMapItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  stage_ = 0u;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapItem::~CMapItem() {
  SharedDtor();
}

void CMapItem::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMapItem& CMapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CMapItem* CMapItem::default_instance_ = NULL;

CMapItem* CMapItem::New() const {
  return new CMapItem;
}

void CMapItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    stage_ = 0u;
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required uint32 stage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_path;
        break;
      }

      // required string path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // required string path = 5;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->path(), output);
  }

}

int CMapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required string path = 5;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMapItem*>(&from));
}

void CMapItem::MergeFrom(const CMapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_path()) {
      set_path(from.path());
    }
  }
}

void CMapItem::CopyFrom(const CMapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CMapItem::Swap(CMapItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(stage_, other->stage_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMapItem::GetTypeName() const {
  return "CMapItem";
}


// ===================================================================

#ifndef _MSC_VER
const int CMapMonster::kIdFieldNumber;
const int CMapMonster::kXFieldNumber;
const int CMapMonster::kYFieldNumber;
const int CMapMonster::kStageFieldNumber;
const int CMapMonster::kTouchIdFieldNumber;
const int CMapMonster::kTypeFieldNumber;
const int CMapMonster::kTimeFieldNumber;
const int CMapMonster::kNumFieldNumber;
const int CMapMonster::kInterFieldNumber;
#endif  // !_MSC_VER

CMapMonster::CMapMonster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMapMonster::InitAsDefaultInstance() {
}

CMapMonster::CMapMonster(const CMapMonster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMapMonster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  stage_ = 0u;
  touchid_ = 0u;
  type_ = 0u;
  time_ = 0u;
  num_ = 0u;
  inter_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapMonster::~CMapMonster() {
  SharedDtor();
}

void CMapMonster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMapMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMapMonster& CMapMonster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CMapMonster* CMapMonster::default_instance_ = NULL;

CMapMonster* CMapMonster::New() const {
  return new CMapMonster;
}

void CMapMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    stage_ = 0u;
    touchid_ = 0u;
    type_ = 0u;
    time_ = 0u;
    num_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inter_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMapMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stage;
        break;
      }

      // required uint32 stage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_touchId;
        break;
      }

      // required uint32 touchId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touchid_)));
          set_has_touchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // required uint32 type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_time;
        break;
      }

      // required uint32 time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_num;
        break;
      }

      // required uint32 num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inter;
        break;
      }

      // required uint32 inter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inter_)));
          set_has_inter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 stage = 4;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stage(), output);
  }

  // required uint32 touchId = 5;
  if (has_touchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->touchid(), output);
  }

  // required uint32 type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  // required uint32 time = 7;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // required uint32 num = 8;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num(), output);
  }

  // required uint32 inter = 9;
  if (has_inter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->inter(), output);
  }

}

int CMapMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 stage = 4;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stage());
    }

    // required uint32 touchId = 5;
    if (has_touchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touchid());
    }

    // required uint32 type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 time = 7;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 num = 8;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 inter = 9;
    if (has_inter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inter());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMapMonster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMapMonster*>(&from));
}

void CMapMonster::MergeFrom(const CMapMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_touchid()) {
      set_touchid(from.touchid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inter()) {
      set_inter(from.inter());
    }
  }
}

void CMapMonster::CopyFrom(const CMapMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMapMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void CMapMonster::Swap(CMapMonster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(stage_, other->stage_);
    std::swap(touchid_, other->touchid_);
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(num_, other->num_);
    std::swap(inter_, other->inter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMapMonster::GetTypeName() const {
  return "CMapMonster";
}


// ===================================================================

#ifndef _MSC_VER
const int CMapNPC::kIdFieldNumber;
const int CMapNPC::kXFieldNumber;
const int CMapNPC::kYFieldNumber;
#endif  // !_MSC_VER

CMapNPC::CMapNPC()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMapNPC::InitAsDefaultInstance() {
}

CMapNPC::CMapNPC(const CMapNPC& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMapNPC::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapNPC::~CMapNPC() {
  SharedDtor();
}

void CMapNPC::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMapNPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMapNPC& CMapNPC::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CMapNPC* CMapNPC::default_instance_ = NULL;

CMapNPC* CMapNPC::New() const {
  return new CMapNPC;
}

void CMapNPC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMapNPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapNPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

}

int CMapNPC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMapNPC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMapNPC*>(&from));
}

void CMapNPC::MergeFrom(const CMapNPC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void CMapNPC::CopyFrom(const CMapNPC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMapNPC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CMapNPC::Swap(CMapNPC* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMapNPC::GetTypeName() const {
  return "CMapNPC";
}


// ===================================================================

#ifndef _MSC_VER
const int CMapBegin::kIdFieldNumber;
const int CMapBegin::kXFieldNumber;
const int CMapBegin::kConditionFieldNumber;
const int CMapBegin::kTargetidFieldNumber;
const int CMapBegin::kTimeFieldNumber;
const int CMapBegin::kNumFieldNumber;
const int CMapBegin::kTypeFieldNumber;
#endif  // !_MSC_VER

CMapBegin::CMapBegin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMapBegin::InitAsDefaultInstance() {
}

CMapBegin::CMapBegin(const CMapBegin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMapBegin::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  condition_ = 0u;
  targetid_ = 0u;
  time_ = 0u;
  num_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapBegin::~CMapBegin() {
  SharedDtor();
}

void CMapBegin::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMapBegin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMapBegin& CMapBegin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CMapBegin* CMapBegin::default_instance_ = NULL;

CMapBegin* CMapBegin::New() const {
  return new CMapBegin;
}

void CMapBegin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    condition_ = 0u;
    targetid_ = 0u;
    time_ = 0u;
    num_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMapBegin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_condition;
        break;
      }

      // required uint32 condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // required uint32 targetid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // required uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // required uint32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // required uint32 type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapBegin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->condition(), output);
  }

  // required uint32 targetid = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->targetid(), output);
  }

  // required uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // required uint32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num(), output);
  }

  // required uint32 type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->type(), output);
  }

}

int CMapBegin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition());
    }

    // required uint32 targetid = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetid());
    }

    // required uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMapBegin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMapBegin*>(&from));
}

void CMapBegin::MergeFrom(const CMapBegin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void CMapBegin::CopyFrom(const CMapBegin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMapBegin::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CMapBegin::Swap(CMapBegin* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(condition_, other->condition_);
    std::swap(targetid_, other->targetid_);
    std::swap(time_, other->time_);
    std::swap(num_, other->num_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMapBegin::GetTypeName() const {
  return "CMapBegin";
}


// ===================================================================

#ifndef _MSC_VER
const int CMapTouch::kIdFieldNumber;
const int CMapTouch::kXFieldNumber;
#endif  // !_MSC_VER

CMapTouch::CMapTouch()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMapTouch::InitAsDefaultInstance() {
}

CMapTouch::CMapTouch(const CMapTouch& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMapTouch::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapTouch::~CMapTouch() {
  SharedDtor();
}

void CMapTouch::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMapTouch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMapTouch& CMapTouch::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CMapTouch* CMapTouch::default_instance_ = NULL;

CMapTouch* CMapTouch::New() const {
  return new CMapTouch;
}

void CMapTouch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMapTouch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapTouch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

}

int CMapTouch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMapTouch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMapTouch*>(&from));
}

void CMapTouch::MergeFrom(const CMapTouch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
  }
}

void CMapTouch::CopyFrom(const CMapTouch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMapTouch::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CMapTouch::Swap(CMapTouch* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMapTouch::GetTypeName() const {
  return "CMapTouch";
}


// ===================================================================

#ifndef _MSC_VER
const int CPropItem::kIdFieldNumber;
const int CPropItem::kXFieldNumber;
const int CPropItem::kYFieldNumber;
const int CPropItem::kTouchIdFieldNumber;
const int CPropItem::kDropIdFieldNumber;
const int CPropItem::kDropTypeFieldNumber;
const int CPropItem::kDropPartyFieldNumber;
#endif  // !_MSC_VER

CPropItem::CPropItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CPropItem::InitAsDefaultInstance() {
}

CPropItem::CPropItem(const CPropItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CPropItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  touchid_ = 0u;
  dropid_ = 0u;
  droptype_ = 0u;
  dropparty_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CPropItem::~CPropItem() {
  SharedDtor();
}

void CPropItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CPropItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CPropItem& CPropItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CPropItem* CPropItem::default_instance_ = NULL;

CPropItem* CPropItem::New() const {
  return new CPropItem;
}

void CPropItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    touchid_ = 0u;
    dropid_ = 0u;
    droptype_ = 0u;
    dropparty_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CPropItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_touchId;
        break;
      }

      // required uint32 touchId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touchid_)));
          set_has_touchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dropId;
        break;
      }

      // required uint32 dropId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_dropType;
        break;
      }

      // required uint32 dropType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &droptype_)));
          set_has_droptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dropParty;
        break;
      }

      // required uint32 dropParty = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropParty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropparty_)));
          set_has_dropparty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CPropItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 touchId = 4;
  if (has_touchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->touchid(), output);
  }

  // required uint32 dropId = 5;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dropid(), output);
  }

  // required uint32 dropType = 6;
  if (has_droptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->droptype(), output);
  }

  // required uint32 dropParty = 7;
  if (has_dropparty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dropparty(), output);
  }

}

int CPropItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 touchId = 4;
    if (has_touchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touchid());
    }

    // required uint32 dropId = 5;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }

    // required uint32 dropType = 6;
    if (has_droptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->droptype());
    }

    // required uint32 dropParty = 7;
    if (has_dropparty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropparty());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CPropItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CPropItem*>(&from));
}

void CPropItem::MergeFrom(const CPropItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_touchid()) {
      set_touchid(from.touchid());
    }
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
    if (from.has_droptype()) {
      set_droptype(from.droptype());
    }
    if (from.has_dropparty()) {
      set_dropparty(from.dropparty());
    }
  }
}

void CPropItem::CopyFrom(const CPropItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPropItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CPropItem::Swap(CPropItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(touchid_, other->touchid_);
    std::swap(dropid_, other->dropid_);
    std::swap(droptype_, other->droptype_);
    std::swap(dropparty_, other->dropparty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CPropItem::GetTypeName() const {
  return "CPropItem";
}


// ===================================================================

#ifndef _MSC_VER
const int CFloorBuff::kIdFieldNumber;
const int CFloorBuff::kXFieldNumber;
const int CFloorBuff::kYFieldNumber;
const int CFloorBuff::kTouchIdFieldNumber;
const int CFloorBuff::kPartyFieldNumber;
#endif  // !_MSC_VER

CFloorBuff::CFloorBuff()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CFloorBuff::InitAsDefaultInstance() {
}

CFloorBuff::CFloorBuff(const CFloorBuff& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CFloorBuff::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  touchid_ = 0u;
  party_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CFloorBuff::~CFloorBuff() {
  SharedDtor();
}

void CFloorBuff::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CFloorBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CFloorBuff& CFloorBuff::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CFloorBuff* CFloorBuff::default_instance_ = NULL;

CFloorBuff* CFloorBuff::New() const {
  return new CFloorBuff;
}

void CFloorBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    touchid_ = 0u;
    party_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CFloorBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_touchId;
        break;
      }

      // required uint32 touchId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touchid_)));
          set_has_touchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_party;
        break;
      }

      // required uint32 party = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_)));
          set_has_party();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CFloorBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 touchId = 4;
  if (has_touchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->touchid(), output);
  }

  // required uint32 party = 5;
  if (has_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->party(), output);
  }

}

int CFloorBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 touchId = 4;
    if (has_touchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touchid());
    }

    // required uint32 party = 5;
    if (has_party()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CFloorBuff::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CFloorBuff*>(&from));
}

void CFloorBuff::MergeFrom(const CFloorBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_touchid()) {
      set_touchid(from.touchid());
    }
    if (from.has_party()) {
      set_party(from.party());
    }
  }
}

void CFloorBuff::CopyFrom(const CFloorBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CFloorBuff::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CFloorBuff::Swap(CFloorBuff* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(touchid_, other->touchid_);
    std::swap(party_, other->party_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CFloorBuff::GetTypeName() const {
  return "CFloorBuff";
}


// ===================================================================

#ifndef _MSC_VER
const int CTrap::kIdFieldNumber;
const int CTrap::kXFieldNumber;
const int CTrap::kYFieldNumber;
const int CTrap::kTouchIdFieldNumber;
const int CTrap::kPartyFieldNumber;
#endif  // !_MSC_VER

CTrap::CTrap()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CTrap::InitAsDefaultInstance() {
}

CTrap::CTrap(const CTrap& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CTrap::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  x_ = 0u;
  y_ = 0u;
  touchid_ = 0u;
  party_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CTrap::~CTrap() {
  SharedDtor();
}

void CTrap::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CTrap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CTrap& CTrap::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CTrap* CTrap::default_instance_ = NULL;

CTrap* CTrap::New() const {
  return new CTrap;
}

void CTrap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    x_ = 0u;
    y_ = 0u;
    touchid_ = 0u;
    party_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CTrap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // required uint32 x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // required uint32 y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_touchId;
        break;
      }

      // required uint32 touchId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &touchid_)));
          set_has_touchid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_party;
        break;
      }

      // required uint32 party = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_party:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_)));
          set_has_party();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CTrap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // required uint32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  // required uint32 touchId = 4;
  if (has_touchid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->touchid(), output);
  }

  // required uint32 party = 5;
  if (has_party()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->party(), output);
  }

}

int CTrap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // required uint32 touchId = 4;
    if (has_touchid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->touchid());
    }

    // required uint32 party = 5;
    if (has_party()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CTrap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CTrap*>(&from));
}

void CTrap::MergeFrom(const CTrap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_touchid()) {
      set_touchid(from.touchid());
    }
    if (from.has_party()) {
      set_party(from.party());
    }
  }
}

void CTrap::CopyFrom(const CTrap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CTrap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CTrap::Swap(CTrap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(touchid_, other->touchid_);
    std::swap(party_, other->party_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CTrap::GetTypeName() const {
  return "CTrap";
}


// ===================================================================

#ifndef _MSC_VER
const int CMapBin::kWalkHFieldNumber;
const int CMapBin::kSceenNumFieldNumber;
const int CMapBin::kMapHFieldNumber;
const int CMapBin::kMapWFieldNumber;
const int CMapBin::kMidResNumFieldNumber;
const int CMapBin::kRealSceenNumFieldNumber;
const int CMapBin::kSceenWFieldNumber;
const int CMapBin::kGridHFieldNumber;
const int CMapBin::kGridWFieldNumber;
const int CMapBin::kCurBgPathFieldNumber;
const int CMapBin::kNameFieldNumber;
const int CMapBin::kItemListFieldNumber;
const int CMapBin::kNpcListFieldNumber;
const int CMapBin::kMonsterListFieldNumber;
const int CMapBin::kBeginListFieldNumber;
const int CMapBin::kTouchListFieldNumber;
const int CMapBin::kPropListFieldNumber;
const int CMapBin::kBuffListFieldNumber;
const int CMapBin::kTrapListFieldNumber;
#endif  // !_MSC_VER

CMapBin::CMapBin()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CMapBin::InitAsDefaultInstance() {
}

CMapBin::CMapBin(const CMapBin& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CMapBin::SharedCtor() {
  _cached_size_ = 0;
  walkh_ = 0u;
  sceennum_ = 0u;
  maph_ = 0u;
  mapw_ = 0u;
  midresnum_ = 0u;
  realsceennum_ = 0u;
  sceenw_ = 0u;
  gridh_ = 0u;
  gridw_ = 0u;
  curbgpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CMapBin::~CMapBin() {
  SharedDtor();
}

void CMapBin::SharedDtor() {
  if (curbgpath_ != &::google::protobuf::internal::kEmptyString) {
    delete curbgpath_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CMapBin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CMapBin& CMapBin::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MapBin_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MapBin_2eproto();
#endif
  return *default_instance_;
}

CMapBin* CMapBin::default_instance_ = NULL;

CMapBin* CMapBin::New() const {
  return new CMapBin;
}

void CMapBin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    walkh_ = 0u;
    sceennum_ = 0u;
    maph_ = 0u;
    mapw_ = 0u;
    midresnum_ = 0u;
    realsceennum_ = 0u;
    sceenw_ = 0u;
    gridh_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gridw_ = 0u;
    if (has_curbgpath()) {
      if (curbgpath_ != &::google::protobuf::internal::kEmptyString) {
        curbgpath_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  itemlist_.Clear();
  npclist_.Clear();
  monsterlist_.Clear();
  beginlist_.Clear();
  touchlist_.Clear();
  proplist_.Clear();
  bufflist_.Clear();
  traplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CMapBin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 walkH = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &walkh_)));
          set_has_walkh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceenNum;
        break;
      }

      // required uint32 sceenNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceennum_)));
          set_has_sceennum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapH;
        break;
      }

      // required uint32 mapH = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maph_)));
          set_has_maph();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapW;
        break;
      }

      // required uint32 mapW = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapw_)));
          set_has_mapw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_midResNum;
        break;
      }

      // required uint32 midResNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_midResNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midresnum_)));
          set_has_midresnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_realSceenNum;
        break;
      }

      // required uint32 realSceenNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realSceenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &realsceennum_)));
          set_has_realsceennum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sceenW;
        break;
      }

      // required uint32 sceenW = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceenW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceenw_)));
          set_has_sceenw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gridH;
        break;
      }

      // required uint32 gridH = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridh_)));
          set_has_gridh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gridW;
        break;
      }

      // required uint32 gridW = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gridW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gridw_)));
          set_has_gridw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_curBgPath;
        break;
      }

      // required string curBgPath = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curBgPath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curbgpath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // required string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_itemList;
        break;
      }

      // repeated .CMapItem itemList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_itemList;
        if (input->ExpectTag(106)) goto parse_npcList;
        break;
      }

      // repeated .CMapNPC npcList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npcList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npclist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_npcList;
        if (input->ExpectTag(114)) goto parse_monsterList;
        break;
      }

      // repeated .CMapMonster monsterList = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_monsterList;
        if (input->ExpectTag(122)) goto parse_beginList;
        break;
      }

      // repeated .CMapBegin beginList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beginList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beginlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_beginList;
        if (input->ExpectTag(130)) goto parse_touchList;
        break;
      }

      // repeated .CMapTouch touchList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_touchList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_touchlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_touchList;
        if (input->ExpectTag(138)) goto parse_propList;
        break;
      }

      // repeated .CPropItem propList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_propList;
        if (input->ExpectTag(146)) goto parse_buffList;
        break;
      }

      // repeated .CFloorBuff buffList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buffList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bufflist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_buffList;
        if (input->ExpectTag(154)) goto parse_trapList;
        break;
      }

      // repeated .CTrap trapList = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trapList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_trapList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CMapBin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 walkH = 1;
  if (has_walkh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->walkh(), output);
  }

  // required uint32 sceenNum = 2;
  if (has_sceennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sceennum(), output);
  }

  // required uint32 mapH = 3;
  if (has_maph()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maph(), output);
  }

  // required uint32 mapW = 4;
  if (has_mapw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapw(), output);
  }

  // required uint32 midResNum = 5;
  if (has_midresnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->midresnum(), output);
  }

  // required uint32 realSceenNum = 6;
  if (has_realsceennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->realsceennum(), output);
  }

  // required uint32 sceenW = 7;
  if (has_sceenw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sceenw(), output);
  }

  // required uint32 gridH = 8;
  if (has_gridh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gridh(), output);
  }

  // required uint32 gridW = 9;
  if (has_gridw()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->gridw(), output);
  }

  // required string curBgPath = 10;
  if (has_curbgpath()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->curbgpath(), output);
  }

  // required string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }

  // repeated .CMapItem itemList = 12;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->itemlist(i), output);
  }

  // repeated .CMapNPC npcList = 13;
  for (int i = 0; i < this->npclist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->npclist(i), output);
  }

  // repeated .CMapMonster monsterList = 14;
  for (int i = 0; i < this->monsterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->monsterlist(i), output);
  }

  // repeated .CMapBegin beginList = 15;
  for (int i = 0; i < this->beginlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->beginlist(i), output);
  }

  // repeated .CMapTouch touchList = 16;
  for (int i = 0; i < this->touchlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->touchlist(i), output);
  }

  // repeated .CPropItem propList = 17;
  for (int i = 0; i < this->proplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->proplist(i), output);
  }

  // repeated .CFloorBuff buffList = 18;
  for (int i = 0; i < this->bufflist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->bufflist(i), output);
  }

  // repeated .CTrap trapList = 19;
  for (int i = 0; i < this->traplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->traplist(i), output);
  }

}

int CMapBin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 walkH = 1;
    if (has_walkh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->walkh());
    }

    // required uint32 sceenNum = 2;
    if (has_sceennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceennum());
    }

    // required uint32 mapH = 3;
    if (has_maph()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maph());
    }

    // required uint32 mapW = 4;
    if (has_mapw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapw());
    }

    // required uint32 midResNum = 5;
    if (has_midresnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->midresnum());
    }

    // required uint32 realSceenNum = 6;
    if (has_realsceennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->realsceennum());
    }

    // required uint32 sceenW = 7;
    if (has_sceenw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceenw());
    }

    // required uint32 gridH = 8;
    if (has_gridh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridh());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 gridW = 9;
    if (has_gridw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gridw());
    }

    // required string curBgPath = 10;
    if (has_curbgpath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curbgpath());
    }

    // required string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .CMapItem itemList = 12;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  // repeated .CMapNPC npcList = 13;
  total_size += 1 * this->npclist_size();
  for (int i = 0; i < this->npclist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npclist(i));
  }

  // repeated .CMapMonster monsterList = 14;
  total_size += 1 * this->monsterlist_size();
  for (int i = 0; i < this->monsterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterlist(i));
  }

  // repeated .CMapBegin beginList = 15;
  total_size += 1 * this->beginlist_size();
  for (int i = 0; i < this->beginlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beginlist(i));
  }

  // repeated .CMapTouch touchList = 16;
  total_size += 2 * this->touchlist_size();
  for (int i = 0; i < this->touchlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->touchlist(i));
  }

  // repeated .CPropItem propList = 17;
  total_size += 2 * this->proplist_size();
  for (int i = 0; i < this->proplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proplist(i));
  }

  // repeated .CFloorBuff buffList = 18;
  total_size += 2 * this->bufflist_size();
  for (int i = 0; i < this->bufflist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bufflist(i));
  }

  // repeated .CTrap trapList = 19;
  total_size += 2 * this->traplist_size();
  for (int i = 0; i < this->traplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traplist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CMapBin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CMapBin*>(&from));
}

void CMapBin::MergeFrom(const CMapBin& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  npclist_.MergeFrom(from.npclist_);
  monsterlist_.MergeFrom(from.monsterlist_);
  beginlist_.MergeFrom(from.beginlist_);
  touchlist_.MergeFrom(from.touchlist_);
  proplist_.MergeFrom(from.proplist_);
  bufflist_.MergeFrom(from.bufflist_);
  traplist_.MergeFrom(from.traplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_walkh()) {
      set_walkh(from.walkh());
    }
    if (from.has_sceennum()) {
      set_sceennum(from.sceennum());
    }
    if (from.has_maph()) {
      set_maph(from.maph());
    }
    if (from.has_mapw()) {
      set_mapw(from.mapw());
    }
    if (from.has_midresnum()) {
      set_midresnum(from.midresnum());
    }
    if (from.has_realsceennum()) {
      set_realsceennum(from.realsceennum());
    }
    if (from.has_sceenw()) {
      set_sceenw(from.sceenw());
    }
    if (from.has_gridh()) {
      set_gridh(from.gridh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gridw()) {
      set_gridw(from.gridw());
    }
    if (from.has_curbgpath()) {
      set_curbgpath(from.curbgpath());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
}

void CMapBin::CopyFrom(const CMapBin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMapBin::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < npclist_size(); i++) {
    if (!this->npclist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monsterlist_size(); i++) {
    if (!this->monsterlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < beginlist_size(); i++) {
    if (!this->beginlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < touchlist_size(); i++) {
    if (!this->touchlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < proplist_size(); i++) {
    if (!this->proplist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bufflist_size(); i++) {
    if (!this->bufflist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < traplist_size(); i++) {
    if (!this->traplist(i).IsInitialized()) return false;
  }
  return true;
}

void CMapBin::Swap(CMapBin* other) {
  if (other != this) {
    std::swap(walkh_, other->walkh_);
    std::swap(sceennum_, other->sceennum_);
    std::swap(maph_, other->maph_);
    std::swap(mapw_, other->mapw_);
    std::swap(midresnum_, other->midresnum_);
    std::swap(realsceennum_, other->realsceennum_);
    std::swap(sceenw_, other->sceenw_);
    std::swap(gridh_, other->gridh_);
    std::swap(gridw_, other->gridw_);
    std::swap(curbgpath_, other->curbgpath_);
    std::swap(name_, other->name_);
    itemlist_.Swap(&other->itemlist_);
    npclist_.Swap(&other->npclist_);
    monsterlist_.Swap(&other->monsterlist_);
    beginlist_.Swap(&other->beginlist_);
    touchlist_.Swap(&other->touchlist_);
    proplist_.Swap(&other->proplist_);
    bufflist_.Swap(&other->bufflist_);
    traplist_.Swap(&other->traplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CMapBin::GetTypeName() const {
  return "CMapBin";
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
