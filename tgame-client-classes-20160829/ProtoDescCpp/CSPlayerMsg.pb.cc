// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSPlayerMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSPlayerMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSPlayerMsg_2eproto() {
  delete CSPlayerAttr::default_instance_;
  delete CSPlayerDetailInfo::default_instance_;
  delete CSNothinglandInfo::default_instance_;
  delete CSDailyRegInfo::default_instance_;
  delete CSMonthCardInfo::default_instance_;
  delete CSPlayerInfo::default_instance_;
  delete CSQueryPlayerInfoRsp::default_instance_;
  delete CSSetSettingParamRqst::default_instance_;
  delete CSRegPlayerInfoRqst::default_instance_;
  delete CSRegPlayerInfoRsp::default_instance_;
  delete CSChangeArmorRsp::default_instance_;
  delete CSPlayerRoleInfo::default_instance_;
  delete CSQueryRoleLstRsp::default_instance_;
  delete CSRoleLoginRqst::default_instance_;
  delete CSRoleLoginRsp::default_instance_;
  delete CSRoleLogoutRqst::default_instance_;
  delete CSRoleLogoutRsp::default_instance_;
  delete CSPlayerManualNotify::default_instance_;
  delete CSBuyManualInfo::default_instance_;
  delete CSQueryPlayerManualRsp::default_instance_;
  delete CSPlayerEvolutionInfo::default_instance_;
  delete CSEvolutionSkill::default_instance_;
  delete CSPlayerEvolutionSkillInfo::default_instance_;
  delete CSChangePlayerEvolutionSkillRqst::default_instance_;
  delete CSChangePlayerEvolutionSkillRsp::default_instance_;
  delete CSAttrStrengthenRqst::default_instance_;
  delete CSAttrStrengthenInfo::default_instance_;
  delete CSWeaponLotQueryRsp::default_instance_;
  delete CSWeaponLotRqst::default_instance_;
  delete CSWeaponLotRsp::default_instance_;
  delete CSAwardRankInfo::default_instance_;
  delete CSAwardRankRsp::default_instance_;
  delete CSFetchRankAwardRqst::default_instance_;
  delete CSPlayerLvUpRsp::default_instance_;
  delete CSVIPNotify::default_instance_;
  delete CSVIPInfos::default_instance_;
  delete CSFightPowerNotify::default_instance_;
  delete CSOtherPlayerInfoRsp::default_instance_;
  delete CSBlackProductInfo::default_instance_;
  delete CSBlackMarketInfo::default_instance_;
  delete CSQuickLoginRqst::default_instance_;
  delete CSQuickLoginRsp::default_instance_;
  delete CSBuyCoinInfo::default_instance_;
  delete CSBuyCoinRsp::default_instance_;
  delete CSGuestRegisterRsp::default_instance_;
  delete CSGuestBindRqst::default_instance_;
  delete CSPlayerEnforceMyselfRqst::default_instance_;
  delete CSPlayerEnforceMyselfRsp::default_instance_;
  delete CSPlayerEnforceMyselfConfirmRqst::default_instance_;
  delete CSPlayerEnforceMyselfConfirmRsp::default_instance_;
  delete CSPlayerEnforceMyselfQueryRsp::default_instance_;
  delete CSPlayerRequest::default_instance_;
  delete CSPlayerRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSPlayerMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSPlayerMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  CSPlayerAttr::default_instance_ = new CSPlayerAttr();
  CSPlayerDetailInfo::default_instance_ = new CSPlayerDetailInfo();
  CSNothinglandInfo::default_instance_ = new CSNothinglandInfo();
  CSDailyRegInfo::default_instance_ = new CSDailyRegInfo();
  CSMonthCardInfo::default_instance_ = new CSMonthCardInfo();
  CSPlayerInfo::default_instance_ = new CSPlayerInfo();
  CSQueryPlayerInfoRsp::default_instance_ = new CSQueryPlayerInfoRsp();
  CSSetSettingParamRqst::default_instance_ = new CSSetSettingParamRqst();
  CSRegPlayerInfoRqst::default_instance_ = new CSRegPlayerInfoRqst();
  CSRegPlayerInfoRsp::default_instance_ = new CSRegPlayerInfoRsp();
  CSChangeArmorRsp::default_instance_ = new CSChangeArmorRsp();
  CSPlayerRoleInfo::default_instance_ = new CSPlayerRoleInfo();
  CSQueryRoleLstRsp::default_instance_ = new CSQueryRoleLstRsp();
  CSRoleLoginRqst::default_instance_ = new CSRoleLoginRqst();
  CSRoleLoginRsp::default_instance_ = new CSRoleLoginRsp();
  CSRoleLogoutRqst::default_instance_ = new CSRoleLogoutRqst();
  CSRoleLogoutRsp::default_instance_ = new CSRoleLogoutRsp();
  CSPlayerManualNotify::default_instance_ = new CSPlayerManualNotify();
  CSBuyManualInfo::default_instance_ = new CSBuyManualInfo();
  CSQueryPlayerManualRsp::default_instance_ = new CSQueryPlayerManualRsp();
  CSPlayerEvolutionInfo::default_instance_ = new CSPlayerEvolutionInfo();
  CSEvolutionSkill::default_instance_ = new CSEvolutionSkill();
  CSPlayerEvolutionSkillInfo::default_instance_ = new CSPlayerEvolutionSkillInfo();
  CSChangePlayerEvolutionSkillRqst::default_instance_ = new CSChangePlayerEvolutionSkillRqst();
  CSChangePlayerEvolutionSkillRsp::default_instance_ = new CSChangePlayerEvolutionSkillRsp();
  CSAttrStrengthenRqst::default_instance_ = new CSAttrStrengthenRqst();
  CSAttrStrengthenInfo::default_instance_ = new CSAttrStrengthenInfo();
  CSWeaponLotQueryRsp::default_instance_ = new CSWeaponLotQueryRsp();
  CSWeaponLotRqst::default_instance_ = new CSWeaponLotRqst();
  CSWeaponLotRsp::default_instance_ = new CSWeaponLotRsp();
  CSAwardRankInfo::default_instance_ = new CSAwardRankInfo();
  CSAwardRankRsp::default_instance_ = new CSAwardRankRsp();
  CSFetchRankAwardRqst::default_instance_ = new CSFetchRankAwardRqst();
  CSPlayerLvUpRsp::default_instance_ = new CSPlayerLvUpRsp();
  CSVIPNotify::default_instance_ = new CSVIPNotify();
  CSVIPInfos::default_instance_ = new CSVIPInfos();
  CSFightPowerNotify::default_instance_ = new CSFightPowerNotify();
  CSOtherPlayerInfoRsp::default_instance_ = new CSOtherPlayerInfoRsp();
  CSBlackProductInfo::default_instance_ = new CSBlackProductInfo();
  CSBlackMarketInfo::default_instance_ = new CSBlackMarketInfo();
  CSQuickLoginRqst::default_instance_ = new CSQuickLoginRqst();
  CSQuickLoginRsp::default_instance_ = new CSQuickLoginRsp();
  CSBuyCoinInfo::default_instance_ = new CSBuyCoinInfo();
  CSBuyCoinRsp::default_instance_ = new CSBuyCoinRsp();
  CSGuestRegisterRsp::default_instance_ = new CSGuestRegisterRsp();
  CSGuestBindRqst::default_instance_ = new CSGuestBindRqst();
  CSPlayerEnforceMyselfRqst::default_instance_ = new CSPlayerEnforceMyselfRqst();
  CSPlayerEnforceMyselfRsp::default_instance_ = new CSPlayerEnforceMyselfRsp();
  CSPlayerEnforceMyselfConfirmRqst::default_instance_ = new CSPlayerEnforceMyselfConfirmRqst();
  CSPlayerEnforceMyselfConfirmRsp::default_instance_ = new CSPlayerEnforceMyselfConfirmRsp();
  CSPlayerEnforceMyselfQueryRsp::default_instance_ = new CSPlayerEnforceMyselfQueryRsp();
  CSPlayerRequest::default_instance_ = new CSPlayerRequest();
  CSPlayerRespond::default_instance_ = new CSPlayerRespond();
  CSPlayerAttr::default_instance_->InitAsDefaultInstance();
  CSPlayerDetailInfo::default_instance_->InitAsDefaultInstance();
  CSNothinglandInfo::default_instance_->InitAsDefaultInstance();
  CSDailyRegInfo::default_instance_->InitAsDefaultInstance();
  CSMonthCardInfo::default_instance_->InitAsDefaultInstance();
  CSPlayerInfo::default_instance_->InitAsDefaultInstance();
  CSQueryPlayerInfoRsp::default_instance_->InitAsDefaultInstance();
  CSSetSettingParamRqst::default_instance_->InitAsDefaultInstance();
  CSRegPlayerInfoRqst::default_instance_->InitAsDefaultInstance();
  CSRegPlayerInfoRsp::default_instance_->InitAsDefaultInstance();
  CSChangeArmorRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerRoleInfo::default_instance_->InitAsDefaultInstance();
  CSQueryRoleLstRsp::default_instance_->InitAsDefaultInstance();
  CSRoleLoginRqst::default_instance_->InitAsDefaultInstance();
  CSRoleLoginRsp::default_instance_->InitAsDefaultInstance();
  CSRoleLogoutRqst::default_instance_->InitAsDefaultInstance();
  CSRoleLogoutRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerManualNotify::default_instance_->InitAsDefaultInstance();
  CSBuyManualInfo::default_instance_->InitAsDefaultInstance();
  CSQueryPlayerManualRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerEvolutionInfo::default_instance_->InitAsDefaultInstance();
  CSEvolutionSkill::default_instance_->InitAsDefaultInstance();
  CSPlayerEvolutionSkillInfo::default_instance_->InitAsDefaultInstance();
  CSChangePlayerEvolutionSkillRqst::default_instance_->InitAsDefaultInstance();
  CSChangePlayerEvolutionSkillRsp::default_instance_->InitAsDefaultInstance();
  CSAttrStrengthenRqst::default_instance_->InitAsDefaultInstance();
  CSAttrStrengthenInfo::default_instance_->InitAsDefaultInstance();
  CSWeaponLotQueryRsp::default_instance_->InitAsDefaultInstance();
  CSWeaponLotRqst::default_instance_->InitAsDefaultInstance();
  CSWeaponLotRsp::default_instance_->InitAsDefaultInstance();
  CSAwardRankInfo::default_instance_->InitAsDefaultInstance();
  CSAwardRankRsp::default_instance_->InitAsDefaultInstance();
  CSFetchRankAwardRqst::default_instance_->InitAsDefaultInstance();
  CSPlayerLvUpRsp::default_instance_->InitAsDefaultInstance();
  CSVIPNotify::default_instance_->InitAsDefaultInstance();
  CSVIPInfos::default_instance_->InitAsDefaultInstance();
  CSFightPowerNotify::default_instance_->InitAsDefaultInstance();
  CSOtherPlayerInfoRsp::default_instance_->InitAsDefaultInstance();
  CSBlackProductInfo::default_instance_->InitAsDefaultInstance();
  CSBlackMarketInfo::default_instance_->InitAsDefaultInstance();
  CSQuickLoginRqst::default_instance_->InitAsDefaultInstance();
  CSQuickLoginRsp::default_instance_->InitAsDefaultInstance();
  CSBuyCoinInfo::default_instance_->InitAsDefaultInstance();
  CSBuyCoinRsp::default_instance_->InitAsDefaultInstance();
  CSGuestRegisterRsp::default_instance_->InitAsDefaultInstance();
  CSGuestBindRqst::default_instance_->InitAsDefaultInstance();
  CSPlayerEnforceMyselfRqst::default_instance_->InitAsDefaultInstance();
  CSPlayerEnforceMyselfRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerEnforceMyselfConfirmRqst::default_instance_->InitAsDefaultInstance();
  CSPlayerEnforceMyselfConfirmRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerEnforceMyselfQueryRsp::default_instance_->InitAsDefaultInstance();
  CSPlayerRequest::default_instance_->InitAsDefaultInstance();
  CSPlayerRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSPlayerMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSPlayerMsg_2eproto_once_);
void protobuf_AddDesc_CSPlayerMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSPlayerMsg_2eproto_once_,
                 &protobuf_AddDesc_CSPlayerMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSPlayerMsg_2eproto {
  StaticDescriptorInitializer_CSPlayerMsg_2eproto() {
    protobuf_AddDesc_CSPlayerMsg_2eproto();
  }
} static_descriptor_initializer_CSPlayerMsg_2eproto_;
#endif
bool CS_LOTTERY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerAttr::kAttrTypeFieldNumber;
const int CSPlayerAttr::kAttrValFieldNumber;
#endif  // !_MSC_VER

CSPlayerAttr::CSPlayerAttr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerAttr::InitAsDefaultInstance() {
}

CSPlayerAttr::CSPlayerAttr(const CSPlayerAttr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerAttr::SharedCtor() {
  _cached_size_ = 0;
  attrtype_ = 0u;
  attrval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerAttr::~CSPlayerAttr() {
  SharedDtor();
}

void CSPlayerAttr::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerAttr& CSPlayerAttr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerAttr* CSPlayerAttr::default_instance_ = NULL;

CSPlayerAttr* CSPlayerAttr::New() const {
  return new CSPlayerAttr;
}

void CSPlayerAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrtype_ = 0u;
    attrval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AttrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrtype_)));
          set_has_attrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AttrVal;
        break;
      }

      // required uint32 AttrVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttrVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrval_)));
          set_has_attrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AttrType = 1;
  if (has_attrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrtype(), output);
  }

  // required uint32 AttrVal = 2;
  if (has_attrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrval(), output);
  }

}

int CSPlayerAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AttrType = 1;
    if (has_attrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrtype());
    }

    // required uint32 AttrVal = 2;
    if (has_attrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrval());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerAttr*>(&from));
}

void CSPlayerAttr::MergeFrom(const CSPlayerAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrtype()) {
      set_attrtype(from.attrtype());
    }
    if (from.has_attrval()) {
      set_attrval(from.attrval());
    }
  }
}

void CSPlayerAttr::CopyFrom(const CSPlayerAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPlayerAttr::Swap(CSPlayerAttr* other) {
  if (other != this) {
    std::swap(attrtype_, other->attrtype_);
    std::swap(attrval_, other->attrval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerAttr::GetTypeName() const {
  return "vmsg.CSPlayerAttr";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerDetailInfo::kHPFieldNumber;
const int CSPlayerDetailInfo::kMPFieldNumber;
const int CSPlayerDetailInfo::kDEFFieldNumber;
const int CSPlayerDetailInfo::kATKFieldNumber;
const int CSPlayerDetailInfo::kDEFTypeFieldNumber;
const int CSPlayerDetailInfo::kATKTypeFieldNumber;
const int CSPlayerDetailInfo::kATKAttrsFieldNumber;
const int CSPlayerDetailInfo::kDEFAttrsFieldNumber;
const int CSPlayerDetailInfo::kMoveSpeedFieldNumber;
const int CSPlayerDetailInfo::kRunSpeedFieldNumber;
const int CSPlayerDetailInfo::kBackSpeedFieldNumber;
const int CSPlayerDetailInfo::kFightPowerFieldNumber;
const int CSPlayerDetailInfo::kEquipLstFieldNumber;
const int CSPlayerDetailInfo::kSpareEquipFieldNumber;
const int CSPlayerDetailInfo::kWeaponFieldNumber;
const int CSPlayerDetailInfo::kShowIDFieldNumber;
const int CSPlayerDetailInfo::kDodgeDistFieldNumber;
const int CSPlayerDetailInfo::kDodgeCDFieldNumber;
const int CSPlayerDetailInfo::kAtkSpeedFieldNumber;
const int CSPlayerDetailInfo::kEvolutionSkillIDFieldNumber;
const int CSPlayerDetailInfo::kLevelFieldNumber;
const int CSPlayerDetailInfo::kHitFieldNumber;
const int CSPlayerDetailInfo::kHitWithoutInitValFieldNumber;
const int CSPlayerDetailInfo::kInBattleWeaponsFieldNumber;
const int CSPlayerDetailInfo::kHPAddEffFieldNumber;
const int CSPlayerDetailInfo::kAtkAddEffFieldNumber;
const int CSPlayerDetailInfo::kDefAddEffFieldNumber;
const int CSPlayerDetailInfo::kTotalHpEnforceAddFieldNumber;
const int CSPlayerDetailInfo::kTotalAtkEnforceAddFieldNumber;
const int CSPlayerDetailInfo::kTotalDefEnforceAddFieldNumber;
#endif  // !_MSC_VER

CSPlayerDetailInfo::CSPlayerDetailInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerDetailInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  spareequip_ = const_cast< ::vmsg::CSEquipInfo*>(
      ::vmsg::CSEquipInfo::internal_default_instance());
#else
  spareequip_ = const_cast< ::vmsg::CSEquipInfo*>(&::vmsg::CSEquipInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weapon_ = const_cast< ::vmsg::CSWeapon*>(
      ::vmsg::CSWeapon::internal_default_instance());
#else
  weapon_ = const_cast< ::vmsg::CSWeapon*>(&::vmsg::CSWeapon::default_instance());
#endif
}

CSPlayerDetailInfo::CSPlayerDetailInfo(const CSPlayerDetailInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  mp_ = 0u;
  def_ = 0u;
  atk_ = 0u;
  deftype_ = 0u;
  atktype_ = 0u;
  movespeed_ = 0u;
  runspeed_ = 0u;
  backspeed_ = 0u;
  fightpower_ = GOOGLE_ULONGLONG(0);
  spareequip_ = NULL;
  weapon_ = NULL;
  showid_ = 0u;
  dodgedist_ = 0u;
  dodgecd_ = 0u;
  atkspeed_ = 0u;
  evolutionskillid_ = 0u;
  level_ = 0u;
  hit_ = 0u;
  hitwithoutinitval_ = 0u;
  hpaddeff_ = 0u;
  atkaddeff_ = 0u;
  defaddeff_ = 0u;
  totalhpenforceadd_ = 0u;
  totalatkenforceadd_ = 0u;
  totaldefenforceadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerDetailInfo::~CSPlayerDetailInfo() {
  SharedDtor();
}

void CSPlayerDetailInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete spareequip_;
    delete weapon_;
  }
}

void CSPlayerDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerDetailInfo& CSPlayerDetailInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerDetailInfo* CSPlayerDetailInfo::default_instance_ = NULL;

CSPlayerDetailInfo* CSPlayerDetailInfo::New() const {
  return new CSPlayerDetailInfo;
}

void CSPlayerDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
    mp_ = 0u;
    def_ = 0u;
    atk_ = 0u;
    deftype_ = 0u;
    atktype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    movespeed_ = 0u;
    runspeed_ = 0u;
    backspeed_ = 0u;
    fightpower_ = GOOGLE_ULONGLONG(0);
    if (has_spareequip()) {
      if (spareequip_ != NULL) spareequip_->::vmsg::CSEquipInfo::Clear();
    }
    if (has_weapon()) {
      if (weapon_ != NULL) weapon_->::vmsg::CSWeapon::Clear();
    }
    showid_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    dodgedist_ = 0u;
    dodgecd_ = 0u;
    atkspeed_ = 0u;
    evolutionskillid_ = 0u;
    level_ = 0u;
    hit_ = 0u;
    hitwithoutinitval_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    hpaddeff_ = 0u;
    atkaddeff_ = 0u;
    defaddeff_ = 0u;
    totalhpenforceadd_ = 0u;
    totalatkenforceadd_ = 0u;
    totaldefenforceadd_ = 0u;
  }
  atkattrs_.Clear();
  defattrs_.Clear();
  equiplst_.Clear();
  inbattleweapons_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MP;
        break;
      }

      // required uint32 MP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DEF;
        break;
      }

      // required uint32 DEF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ATK;
        break;
      }

      // required uint32 ATK = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DEFType;
        break;
      }

      // required uint32 DEFType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEFType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ATKType;
        break;
      }

      // required uint32 ATKType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATKType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atktype_)));
          set_has_atktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ATKAttrs;
        break;
      }

      // repeated .vmsg.CSPlayerAttr ATKAttrs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ATKAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_atkattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ATKAttrs;
        if (input->ExpectTag(66)) goto parse_DEFAttrs;
        break;
      }

      // repeated .vmsg.CSPlayerAttr DEFAttrs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DEFAttrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defattrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DEFAttrs;
        if (input->ExpectTag(72)) goto parse_MoveSpeed;
        break;
      }

      // required uint32 MoveSpeed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RunSpeed;
        break;
      }

      // required uint32 RunSpeed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RunSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &runspeed_)));
          set_has_runspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_BackSpeed;
        break;
      }

      // required uint32 BackSpeed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backspeed_)));
          set_has_backspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FightPower;
        break;
      }

      // required uint64 FightPower = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_EquipLst;
        break;
      }

      // repeated .vmsg.CSEquipInfo EquipLst = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiplst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_EquipLst;
        if (input->ExpectTag(114)) goto parse_SpareEquip;
        break;
      }

      // required .vmsg.CSEquipInfo SpareEquip = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpareEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spareequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Weapon;
        break;
      }

      // required .vmsg.CSWeapon Weapon = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Weapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DodgeDist;
        break;
      }

      // required uint32 DodgeDist = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DodgeDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodgedist_)));
          set_has_dodgedist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_DodgeCD;
        break;
      }

      // required uint32 DodgeCD = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DodgeCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodgecd_)));
          set_has_dodgecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_AtkSpeed;
        break;
      }

      // required uint32 AtkSpeed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkspeed_)));
          set_has_atkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_EvolutionSkillID;
        break;
      }

      // required uint32 EvolutionSkillID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionskillid_)));
          set_has_evolutionskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Level;
        break;
      }

      // required uint32 Level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_Hit;
        break;
      }

      // required uint32 Hit = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_HitWithoutInitVal;
        break;
      }

      // required uint32 HitWithoutInitVal = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitWithoutInitVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitwithoutinitval_)));
          set_has_hitwithoutinitval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_InBattleWeapons;
        break;
      }

      // repeated .vmsg.CSInbattleWeaponElmt InBattleWeapons = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InBattleWeapons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inbattleweapons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_InBattleWeapons;
        if (input->ExpectTag(200)) goto parse_HPAddEff;
        break;
      }

      // required uint32 HPAddEff = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HPAddEff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpaddeff_)));
          set_has_hpaddeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_AtkAddEff;
        break;
      }

      // required uint32 AtkAddEff = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAddEff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkaddeff_)));
          set_has_atkaddeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_DefAddEff;
        break;
      }

      // required uint32 DefAddEff = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefAddEff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defaddeff_)));
          set_has_defaddeff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_TotalHpEnforceAdd;
        break;
      }

      // required uint32 TotalHpEnforceAdd = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalHpEnforceAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalhpenforceadd_)));
          set_has_totalhpenforceadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_TotalAtkEnforceAdd;
        break;
      }

      // required uint32 TotalAtkEnforceAdd = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalAtkEnforceAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalatkenforceadd_)));
          set_has_totalatkenforceadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_TotalDefEnforceAdd;
        break;
      }

      // required uint32 TotalDefEnforceAdd = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalDefEnforceAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldefenforceadd_)));
          set_has_totaldefenforceadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HP = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  // required uint32 MP = 2;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mp(), output);
  }

  // required uint32 DEF = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def(), output);
  }

  // required uint32 ATK = 4;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atk(), output);
  }

  // required uint32 DEFType = 5;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deftype(), output);
  }

  // required uint32 ATKType = 6;
  if (has_atktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->atktype(), output);
  }

  // repeated .vmsg.CSPlayerAttr ATKAttrs = 7;
  for (int i = 0; i < this->atkattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->atkattrs(i), output);
  }

  // repeated .vmsg.CSPlayerAttr DEFAttrs = 8;
  for (int i = 0; i < this->defattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->defattrs(i), output);
  }

  // required uint32 MoveSpeed = 9;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->movespeed(), output);
  }

  // required uint32 RunSpeed = 10;
  if (has_runspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->runspeed(), output);
  }

  // required uint32 BackSpeed = 11;
  if (has_backspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->backspeed(), output);
  }

  // required uint64 FightPower = 12;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->fightpower(), output);
  }

  // repeated .vmsg.CSEquipInfo EquipLst = 13;
  for (int i = 0; i < this->equiplst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->equiplst(i), output);
  }

  // required .vmsg.CSEquipInfo SpareEquip = 14;
  if (has_spareequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->spareequip(), output);
  }

  // required .vmsg.CSWeapon Weapon = 15;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->weapon(), output);
  }

  // required uint32 ShowID = 16;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->showid(), output);
  }

  // required uint32 DodgeDist = 17;
  if (has_dodgedist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->dodgedist(), output);
  }

  // required uint32 DodgeCD = 18;
  if (has_dodgecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->dodgecd(), output);
  }

  // required uint32 AtkSpeed = 19;
  if (has_atkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->atkspeed(), output);
  }

  // required uint32 EvolutionSkillID = 20;
  if (has_evolutionskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->evolutionskillid(), output);
  }

  // required uint32 Level = 21;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->level(), output);
  }

  // required uint32 Hit = 22;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->hit(), output);
  }

  // required uint32 HitWithoutInitVal = 23;
  if (has_hitwithoutinitval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->hitwithoutinitval(), output);
  }

  // repeated .vmsg.CSInbattleWeaponElmt InBattleWeapons = 24;
  for (int i = 0; i < this->inbattleweapons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->inbattleweapons(i), output);
  }

  // required uint32 HPAddEff = 25;
  if (has_hpaddeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->hpaddeff(), output);
  }

  // required uint32 AtkAddEff = 26;
  if (has_atkaddeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->atkaddeff(), output);
  }

  // required uint32 DefAddEff = 27;
  if (has_defaddeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->defaddeff(), output);
  }

  // required uint32 TotalHpEnforceAdd = 28;
  if (has_totalhpenforceadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->totalhpenforceadd(), output);
  }

  // required uint32 TotalAtkEnforceAdd = 29;
  if (has_totalatkenforceadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->totalatkenforceadd(), output);
  }

  // required uint32 TotalDefEnforceAdd = 30;
  if (has_totaldefenforceadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->totaldefenforceadd(), output);
  }

}

int CSPlayerDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HP = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 MP = 2;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // required uint32 DEF = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }

    // required uint32 ATK = 4;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 DEFType = 5;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // required uint32 ATKType = 6;
    if (has_atktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atktype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 MoveSpeed = 9;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // required uint32 RunSpeed = 10;
    if (has_runspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->runspeed());
    }

    // required uint32 BackSpeed = 11;
    if (has_backspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backspeed());
    }

    // required uint64 FightPower = 12;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

    // required .vmsg.CSEquipInfo SpareEquip = 14;
    if (has_spareequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spareequip());
    }

    // required .vmsg.CSWeapon Weapon = 15;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon());
    }

    // required uint32 ShowID = 16;
    if (has_showid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 DodgeDist = 17;
    if (has_dodgedist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodgedist());
    }

    // required uint32 DodgeCD = 18;
    if (has_dodgecd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodgecd());
    }

    // required uint32 AtkSpeed = 19;
    if (has_atkspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkspeed());
    }

    // required uint32 EvolutionSkillID = 20;
    if (has_evolutionskillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionskillid());
    }

    // required uint32 Level = 21;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 Hit = 22;
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // required uint32 HitWithoutInitVal = 23;
    if (has_hitwithoutinitval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitwithoutinitval());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 HPAddEff = 25;
    if (has_hpaddeff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpaddeff());
    }

    // required uint32 AtkAddEff = 26;
    if (has_atkaddeff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkaddeff());
    }

    // required uint32 DefAddEff = 27;
    if (has_defaddeff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defaddeff());
    }

    // required uint32 TotalHpEnforceAdd = 28;
    if (has_totalhpenforceadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalhpenforceadd());
    }

    // required uint32 TotalAtkEnforceAdd = 29;
    if (has_totalatkenforceadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalatkenforceadd());
    }

    // required uint32 TotalDefEnforceAdd = 30;
    if (has_totaldefenforceadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldefenforceadd());
    }

  }
  // repeated .vmsg.CSPlayerAttr ATKAttrs = 7;
  total_size += 1 * this->atkattrs_size();
  for (int i = 0; i < this->atkattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->atkattrs(i));
  }

  // repeated .vmsg.CSPlayerAttr DEFAttrs = 8;
  total_size += 1 * this->defattrs_size();
  for (int i = 0; i < this->defattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defattrs(i));
  }

  // repeated .vmsg.CSEquipInfo EquipLst = 13;
  total_size += 1 * this->equiplst_size();
  for (int i = 0; i < this->equiplst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiplst(i));
  }

  // repeated .vmsg.CSInbattleWeaponElmt InBattleWeapons = 24;
  total_size += 2 * this->inbattleweapons_size();
  for (int i = 0; i < this->inbattleweapons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inbattleweapons(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerDetailInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerDetailInfo*>(&from));
}

void CSPlayerDetailInfo::MergeFrom(const CSPlayerDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  atkattrs_.MergeFrom(from.atkattrs_);
  defattrs_.MergeFrom(from.defattrs_);
  equiplst_.MergeFrom(from.equiplst_);
  inbattleweapons_.MergeFrom(from.inbattleweapons_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_atktype()) {
      set_atktype(from.atktype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_runspeed()) {
      set_runspeed(from.runspeed());
    }
    if (from.has_backspeed()) {
      set_backspeed(from.backspeed());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_spareequip()) {
      mutable_spareequip()->::vmsg::CSEquipInfo::MergeFrom(from.spareequip());
    }
    if (from.has_weapon()) {
      mutable_weapon()->::vmsg::CSWeapon::MergeFrom(from.weapon());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dodgedist()) {
      set_dodgedist(from.dodgedist());
    }
    if (from.has_dodgecd()) {
      set_dodgecd(from.dodgecd());
    }
    if (from.has_atkspeed()) {
      set_atkspeed(from.atkspeed());
    }
    if (from.has_evolutionskillid()) {
      set_evolutionskillid(from.evolutionskillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_hitwithoutinitval()) {
      set_hitwithoutinitval(from.hitwithoutinitval());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hpaddeff()) {
      set_hpaddeff(from.hpaddeff());
    }
    if (from.has_atkaddeff()) {
      set_atkaddeff(from.atkaddeff());
    }
    if (from.has_defaddeff()) {
      set_defaddeff(from.defaddeff());
    }
    if (from.has_totalhpenforceadd()) {
      set_totalhpenforceadd(from.totalhpenforceadd());
    }
    if (from.has_totalatkenforceadd()) {
      set_totalatkenforceadd(from.totalatkenforceadd());
    }
    if (from.has_totaldefenforceadd()) {
      set_totaldefenforceadd(from.totaldefenforceadd());
    }
  }
}

void CSPlayerDetailInfo::CopyFrom(const CSPlayerDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x3f7fef3f) != 0x3f7fef3f) return false;

  for (int i = 0; i < atkattrs_size(); i++) {
    if (!this->atkattrs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defattrs_size(); i++) {
    if (!this->defattrs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < equiplst_size(); i++) {
    if (!this->equiplst(i).IsInitialized()) return false;
  }
  if (has_spareequip()) {
    if (!this->spareequip().IsInitialized()) return false;
  }
  if (has_weapon()) {
    if (!this->weapon().IsInitialized()) return false;
  }
  for (int i = 0; i < inbattleweapons_size(); i++) {
    if (!this->inbattleweapons(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerDetailInfo::Swap(CSPlayerDetailInfo* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(def_, other->def_);
    std::swap(atk_, other->atk_);
    std::swap(deftype_, other->deftype_);
    std::swap(atktype_, other->atktype_);
    atkattrs_.Swap(&other->atkattrs_);
    defattrs_.Swap(&other->defattrs_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(runspeed_, other->runspeed_);
    std::swap(backspeed_, other->backspeed_);
    std::swap(fightpower_, other->fightpower_);
    equiplst_.Swap(&other->equiplst_);
    std::swap(spareequip_, other->spareequip_);
    std::swap(weapon_, other->weapon_);
    std::swap(showid_, other->showid_);
    std::swap(dodgedist_, other->dodgedist_);
    std::swap(dodgecd_, other->dodgecd_);
    std::swap(atkspeed_, other->atkspeed_);
    std::swap(evolutionskillid_, other->evolutionskillid_);
    std::swap(level_, other->level_);
    std::swap(hit_, other->hit_);
    std::swap(hitwithoutinitval_, other->hitwithoutinitval_);
    inbattleweapons_.Swap(&other->inbattleweapons_);
    std::swap(hpaddeff_, other->hpaddeff_);
    std::swap(atkaddeff_, other->atkaddeff_);
    std::swap(defaddeff_, other->defaddeff_);
    std::swap(totalhpenforceadd_, other->totalhpenforceadd_);
    std::swap(totalatkenforceadd_, other->totalatkenforceadd_);
    std::swap(totaldefenforceadd_, other->totaldefenforceadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerDetailInfo::GetTypeName() const {
  return "vmsg.CSPlayerDetailInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSNothinglandInfo::kScoreFieldNumber;
const int CSNothinglandInfo::kFloorFieldNumber;
const int CSNothinglandInfo::kMaxFloorScoreFieldNumber;
#endif  // !_MSC_VER

CSNothinglandInfo::CSNothinglandInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSNothinglandInfo::InitAsDefaultInstance() {
}

CSNothinglandInfo::CSNothinglandInfo(const CSNothinglandInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSNothinglandInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  floor_ = 0u;
  maxfloorscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNothinglandInfo::~CSNothinglandInfo() {
  SharedDtor();
}

void CSNothinglandInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSNothinglandInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSNothinglandInfo& CSNothinglandInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSNothinglandInfo* CSNothinglandInfo::default_instance_ = NULL;

CSNothinglandInfo* CSNothinglandInfo::New() const {
  return new CSNothinglandInfo;
}

void CSNothinglandInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0u;
    floor_ = 0u;
    maxfloorscore_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSNothinglandInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Floor;
        break;
      }

      // required uint32 Floor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxFloorScore;
        break;
      }

      // required uint32 MaxFloorScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxFloorScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfloorscore_)));
          set_has_maxfloorscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNothinglandInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // required uint32 Floor = 3;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->floor(), output);
  }

  // required uint32 MaxFloorScore = 4;
  if (has_maxfloorscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxfloorscore(), output);
  }

}

int CSNothinglandInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 Floor = 3;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor());
    }

    // required uint32 MaxFloorScore = 4;
    if (has_maxfloorscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfloorscore());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNothinglandInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSNothinglandInfo*>(&from));
}

void CSNothinglandInfo::MergeFrom(const CSNothinglandInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_maxfloorscore()) {
      set_maxfloorscore(from.maxfloorscore());
    }
  }
}

void CSNothinglandInfo::CopyFrom(const CSNothinglandInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNothinglandInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSNothinglandInfo::Swap(CSNothinglandInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(floor_, other->floor_);
    std::swap(maxfloorscore_, other->maxfloorscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSNothinglandInfo::GetTypeName() const {
  return "vmsg.CSNothinglandInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyRegInfo::kRegCntFieldNumber;
const int CSDailyRegInfo::kCanRegFieldNumber;
#endif  // !_MSC_VER

CSDailyRegInfo::CSDailyRegInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyRegInfo::InitAsDefaultInstance() {
}

CSDailyRegInfo::CSDailyRegInfo(const CSDailyRegInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyRegInfo::SharedCtor() {
  _cached_size_ = 0;
  regcnt_ = 0u;
  canreg_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyRegInfo::~CSDailyRegInfo() {
  SharedDtor();
}

void CSDailyRegInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSDailyRegInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyRegInfo& CSDailyRegInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyRegInfo* CSDailyRegInfo::default_instance_ = NULL;

CSDailyRegInfo* CSDailyRegInfo::New() const {
  return new CSDailyRegInfo;
}

void CSDailyRegInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    regcnt_ = 0u;
    canreg_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyRegInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RegCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regcnt_)));
          set_has_regcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CanReg;
        break;
      }

      // required uint32 CanReg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CanReg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canreg_)));
          set_has_canreg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyRegInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RegCnt = 1;
  if (has_regcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->regcnt(), output);
  }

  // required uint32 CanReg = 2;
  if (has_canreg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->canreg(), output);
  }

}

int CSDailyRegInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RegCnt = 1;
    if (has_regcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regcnt());
    }

    // required uint32 CanReg = 2;
    if (has_canreg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canreg());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyRegInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyRegInfo*>(&from));
}

void CSDailyRegInfo::MergeFrom(const CSDailyRegInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regcnt()) {
      set_regcnt(from.regcnt());
    }
    if (from.has_canreg()) {
      set_canreg(from.canreg());
    }
  }
}

void CSDailyRegInfo::CopyFrom(const CSDailyRegInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyRegInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSDailyRegInfo::Swap(CSDailyRegInfo* other) {
  if (other != this) {
    std::swap(regcnt_, other->regcnt_);
    std::swap(canreg_, other->canreg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyRegInfo::GetTypeName() const {
  return "vmsg.CSDailyRegInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMonthCardInfo::kGoldFieldNumber;
const int CSMonthCardInfo::kEndTimeFieldNumber;
const int CSMonthCardInfo::kTotalDaysFieldNumber;
const int CSMonthCardInfo::kLastAwardTimeFieldNumber;
#endif  // !_MSC_VER

CSMonthCardInfo::CSMonthCardInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMonthCardInfo::InitAsDefaultInstance() {
}

CSMonthCardInfo::CSMonthCardInfo(const CSMonthCardInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMonthCardInfo::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0u;
  endtime_ = 0;
  totaldays_ = 0u;
  lastawardtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMonthCardInfo::~CSMonthCardInfo() {
  SharedDtor();
}

void CSMonthCardInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMonthCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMonthCardInfo& CSMonthCardInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSMonthCardInfo* CSMonthCardInfo::default_instance_ = NULL;

CSMonthCardInfo* CSMonthCardInfo::New() const {
  return new CSMonthCardInfo;
}

void CSMonthCardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0u;
    endtime_ = 0;
    totaldays_ = 0u;
    lastawardtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMonthCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EndTime;
        break;
      }

      // required int32 EndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TotalDays;
        break;
      }

      // required uint32 TotalDays = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldays_)));
          set_has_totaldays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LastAwardTime;
        break;
      }

      // required int32 LastAwardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastAwardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastawardtime_)));
          set_has_lastawardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMonthCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold(), output);
  }

  // required int32 EndTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }

  // required uint32 TotalDays = 3;
  if (has_totaldays()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totaldays(), output);
  }

  // required int32 LastAwardTime = 4;
  if (has_lastawardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastawardtime(), output);
  }

}

int CSMonthCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required int32 EndTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

    // required uint32 TotalDays = 3;
    if (has_totaldays()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldays());
    }

    // required int32 LastAwardTime = 4;
    if (has_lastawardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastawardtime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMonthCardInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMonthCardInfo*>(&from));
}

void CSMonthCardInfo::MergeFrom(const CSMonthCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_totaldays()) {
      set_totaldays(from.totaldays());
    }
    if (from.has_lastawardtime()) {
      set_lastawardtime(from.lastawardtime());
    }
  }
}

void CSMonthCardInfo::CopyFrom(const CSMonthCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMonthCardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSMonthCardInfo::Swap(CSMonthCardInfo* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(endtime_, other->endtime_);
    std::swap(totaldays_, other->totaldays_);
    std::swap(lastawardtime_, other->lastawardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMonthCardInfo::GetTypeName() const {
  return "vmsg.CSMonthCardInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerInfo::kUinFieldNumber;
const int CSPlayerInfo::kNickFieldNumber;
const int CSPlayerInfo::kLevelFieldNumber;
const int CSPlayerInfo::kExpFieldNumber;
const int CSPlayerInfo::kWeaponCfgIDFieldNumber;
const int CSPlayerInfo::kCoinFieldNumber;
const int CSPlayerInfo::kRemainManualFieldNumber;
const int CSPlayerInfo::kUpdateRemainTimeFieldNumber;
const int CSPlayerInfo::kShowIDFieldNumber;
const int CSPlayerInfo::kSceneIDFieldNumber;
const int CSPlayerInfo::kNewestWarMapIDFieldNumber;
const int CSPlayerInfo::kVIPLvFieldNumber;
const int CSPlayerInfo::kFightPowerFieldNumber;
const int CSPlayerInfo::kGuildIDFieldNumber;
const int CSPlayerInfo::kSettingParamFieldNumber;
const int CSPlayerInfo::kNothinglandInfoFieldNumber;
const int CSPlayerInfo::kQuickLoginKeyFieldNumber;
const int CSPlayerInfo::kDailyRegInfoFieldNumber;
const int CSPlayerInfo::kMonthCardInfoFieldNumber;
const int CSPlayerInfo::kVIPDailyClaimedFieldNumber;
#endif  // !_MSC_VER

CSPlayerInfo::CSPlayerInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nothinglandinfo_ = const_cast< ::vmsg::CSNothinglandInfo*>(
      ::vmsg::CSNothinglandInfo::internal_default_instance());
#else
  nothinglandinfo_ = const_cast< ::vmsg::CSNothinglandInfo*>(&::vmsg::CSNothinglandInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailyreginfo_ = const_cast< ::vmsg::CSDailyRegInfo*>(
      ::vmsg::CSDailyRegInfo::internal_default_instance());
#else
  dailyreginfo_ = const_cast< ::vmsg::CSDailyRegInfo*>(&::vmsg::CSDailyRegInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  monthcardinfo_ = const_cast< ::vmsg::CSMonthCardInfo*>(
      ::vmsg::CSMonthCardInfo::internal_default_instance());
#else
  monthcardinfo_ = const_cast< ::vmsg::CSMonthCardInfo*>(&::vmsg::CSMonthCardInfo::default_instance());
#endif
}

CSPlayerInfo::CSPlayerInfo(const CSPlayerInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  weaponcfgid_ = 0u;
  coin_ = GOOGLE_ULONGLONG(0);
  remainmanual_ = 0u;
  updateremaintime_ = 0;
  showid_ = 0u;
  sceneid_ = 0u;
  newestwarmapid_ = 0u;
  viplv_ = 0u;
  fightpower_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  settingparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nothinglandinfo_ = NULL;
  quickloginkey_ = GOOGLE_ULONGLONG(0);
  dailyreginfo_ = NULL;
  monthcardinfo_ = NULL;
  vipdailyclaimed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerInfo::~CSPlayerInfo() {
  SharedDtor();
}

void CSPlayerInfo::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (settingparam_ != &::google::protobuf::internal::kEmptyString) {
    delete settingparam_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete nothinglandinfo_;
    delete dailyreginfo_;
    delete monthcardinfo_;
  }
}

void CSPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerInfo& CSPlayerInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerInfo* CSPlayerInfo::default_instance_ = NULL;

CSPlayerInfo* CSPlayerInfo::New() const {
  return new CSPlayerInfo;
}

void CSPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    weaponcfgid_ = 0u;
    coin_ = GOOGLE_ULONGLONG(0);
    remainmanual_ = 0u;
    updateremaintime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    showid_ = 0u;
    sceneid_ = 0u;
    newestwarmapid_ = 0u;
    viplv_ = 0u;
    fightpower_ = GOOGLE_ULONGLONG(0);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_settingparam()) {
      if (settingparam_ != &::google::protobuf::internal::kEmptyString) {
        settingparam_->clear();
      }
    }
    if (has_nothinglandinfo()) {
      if (nothinglandinfo_ != NULL) nothinglandinfo_->::vmsg::CSNothinglandInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    quickloginkey_ = GOOGLE_ULONGLONG(0);
    if (has_dailyreginfo()) {
      if (dailyreginfo_ != NULL) dailyreginfo_->::vmsg::CSDailyRegInfo::Clear();
    }
    if (has_monthcardinfo()) {
      if (monthcardinfo_ != NULL) monthcardinfo_->::vmsg::CSMonthCardInfo::Clear();
    }
    vipdailyclaimed_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Nick;
        break;
      }

      // required string Nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // required uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // required uint64 Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WeaponCfgID;
        break;
      }

      // required uint32 WeaponCfgID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponcfgid_)));
          set_has_weaponcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Coin;
        break;
      }

      // required uint64 Coin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RemainManual;
        break;
      }

      // required uint32 RemainManual = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainManual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainmanual_)));
          set_has_remainmanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_UpdateRemainTime;
        break;
      }

      // required int32 UpdateRemainTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updateremaintime_)));
          set_has_updateremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_SceneID;
        break;
      }

      // required uint32 SceneID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_NewestWarMapID;
        break;
      }

      // required uint32 NewestWarMapID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewestWarMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newestwarmapid_)));
          set_has_newestwarmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_VIPLv;
        break;
      }

      // required uint32 VIPLv = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_FightPower;
        break;
      }

      // required uint64 FightPower = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_GuildID;
        break;
      }

      // required uint64 GuildID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_SettingParam;
        break;
      }

      // required string SettingParam = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SettingParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settingparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_NothinglandInfo;
        break;
      }

      // required .vmsg.CSNothinglandInfo NothinglandInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NothinglandInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nothinglandinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_QuickLoginKey;
        break;
      }

      // required uint64 QuickLoginKey = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuickLoginKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quickloginkey_)));
          set_has_quickloginkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DailyRegInfo;
        break;
      }

      // required .vmsg.CSDailyRegInfo DailyRegInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyRegInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyreginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_MonthCardInfo;
        break;
      }

      // required .vmsg.CSMonthCardInfo MonthCardInfo = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonthCardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monthcardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_VIPDailyClaimed;
        break;
      }

      // required uint32 VIPDailyClaimed = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPDailyClaimed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipdailyclaimed_)));
          set_has_vipdailyclaimed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick(), output);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint64 Exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // required uint32 WeaponCfgID = 6;
  if (has_weaponcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->weaponcfgid(), output);
  }

  // required uint64 Coin = 7;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->coin(), output);
  }

  // required uint32 RemainManual = 8;
  if (has_remainmanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->remainmanual(), output);
  }

  // required int32 UpdateRemainTime = 9;
  if (has_updateremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->updateremaintime(), output);
  }

  // required uint32 ShowID = 10;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->showid(), output);
  }

  // required uint32 SceneID = 11;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sceneid(), output);
  }

  // required uint32 NewestWarMapID = 12;
  if (has_newestwarmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->newestwarmapid(), output);
  }

  // required uint32 VIPLv = 13;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->viplv(), output);
  }

  // required uint64 FightPower = 14;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->fightpower(), output);
  }

  // required uint64 GuildID = 15;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->guildid(), output);
  }

  // required string SettingParam = 16;
  if (has_settingparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->settingparam(), output);
  }

  // required .vmsg.CSNothinglandInfo NothinglandInfo = 17;
  if (has_nothinglandinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->nothinglandinfo(), output);
  }

  // required uint64 QuickLoginKey = 18;
  if (has_quickloginkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->quickloginkey(), output);
  }

  // required .vmsg.CSDailyRegInfo DailyRegInfo = 19;
  if (has_dailyreginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->dailyreginfo(), output);
  }

  // required .vmsg.CSMonthCardInfo MonthCardInfo = 20;
  if (has_monthcardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->monthcardinfo(), output);
  }

  // required uint32 VIPDailyClaimed = 21;
  if (has_vipdailyclaimed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vipdailyclaimed(), output);
  }

}

int CSPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 WeaponCfgID = 6;
    if (has_weaponcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponcfgid());
    }

    // required uint64 Coin = 7;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->coin());
    }

    // required uint32 RemainManual = 8;
    if (has_remainmanual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainmanual());
    }

    // required int32 UpdateRemainTime = 9;
    if (has_updateremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateremaintime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ShowID = 10;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

    // required uint32 SceneID = 11;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required uint32 NewestWarMapID = 12;
    if (has_newestwarmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newestwarmapid());
    }

    // required uint32 VIPLv = 13;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // required uint64 FightPower = 14;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

    // required uint64 GuildID = 15;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required string SettingParam = 16;
    if (has_settingparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settingparam());
    }

    // required .vmsg.CSNothinglandInfo NothinglandInfo = 17;
    if (has_nothinglandinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nothinglandinfo());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint64 QuickLoginKey = 18;
    if (has_quickloginkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quickloginkey());
    }

    // required .vmsg.CSDailyRegInfo DailyRegInfo = 19;
    if (has_dailyreginfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyreginfo());
    }

    // required .vmsg.CSMonthCardInfo MonthCardInfo = 20;
    if (has_monthcardinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monthcardinfo());
    }

    // required uint32 VIPDailyClaimed = 21;
    if (has_vipdailyclaimed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipdailyclaimed());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerInfo*>(&from));
}

void CSPlayerInfo::MergeFrom(const CSPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_weaponcfgid()) {
      set_weaponcfgid(from.weaponcfgid());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_remainmanual()) {
      set_remainmanual(from.remainmanual());
    }
    if (from.has_updateremaintime()) {
      set_updateremaintime(from.updateremaintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_newestwarmapid()) {
      set_newestwarmapid(from.newestwarmapid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_settingparam()) {
      set_settingparam(from.settingparam());
    }
    if (from.has_nothinglandinfo()) {
      mutable_nothinglandinfo()->::vmsg::CSNothinglandInfo::MergeFrom(from.nothinglandinfo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_quickloginkey()) {
      set_quickloginkey(from.quickloginkey());
    }
    if (from.has_dailyreginfo()) {
      mutable_dailyreginfo()->::vmsg::CSDailyRegInfo::MergeFrom(from.dailyreginfo());
    }
    if (from.has_monthcardinfo()) {
      mutable_monthcardinfo()->::vmsg::CSMonthCardInfo::MergeFrom(from.monthcardinfo());
    }
    if (from.has_vipdailyclaimed()) {
      set_vipdailyclaimed(from.vipdailyclaimed());
    }
  }
}

void CSPlayerInfo::CopyFrom(const CSPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  if (has_nothinglandinfo()) {
    if (!this->nothinglandinfo().IsInitialized()) return false;
  }
  if (has_dailyreginfo()) {
    if (!this->dailyreginfo().IsInitialized()) return false;
  }
  if (has_monthcardinfo()) {
    if (!this->monthcardinfo().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerInfo::Swap(CSPlayerInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nick_, other->nick_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(weaponcfgid_, other->weaponcfgid_);
    std::swap(coin_, other->coin_);
    std::swap(remainmanual_, other->remainmanual_);
    std::swap(updateremaintime_, other->updateremaintime_);
    std::swap(showid_, other->showid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(newestwarmapid_, other->newestwarmapid_);
    std::swap(viplv_, other->viplv_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(guildid_, other->guildid_);
    std::swap(settingparam_, other->settingparam_);
    std::swap(nothinglandinfo_, other->nothinglandinfo_);
    std::swap(quickloginkey_, other->quickloginkey_);
    std::swap(dailyreginfo_, other->dailyreginfo_);
    std::swap(monthcardinfo_, other->monthcardinfo_);
    std::swap(vipdailyclaimed_, other->vipdailyclaimed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerInfo::GetTypeName() const {
  return "vmsg.CSPlayerInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryPlayerInfoRsp::kPlayerInfoFieldNumber;
const int CSQueryPlayerInfoRsp::kServerOpenTimeFieldNumber;
#endif  // !_MSC_VER

CSQueryPlayerInfoRsp::CSQueryPlayerInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryPlayerInfoRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::vmsg::CSPlayerInfo*>(
      ::vmsg::CSPlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::vmsg::CSPlayerInfo*>(&::vmsg::CSPlayerInfo::default_instance());
#endif
}

CSQueryPlayerInfoRsp::CSQueryPlayerInfoRsp(const CSQueryPlayerInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryPlayerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  serveropentime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryPlayerInfoRsp::~CSQueryPlayerInfoRsp() {
  SharedDtor();
}

void CSQueryPlayerInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void CSQueryPlayerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryPlayerInfoRsp& CSQueryPlayerInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryPlayerInfoRsp* CSQueryPlayerInfoRsp::default_instance_ = NULL;

CSQueryPlayerInfoRsp* CSQueryPlayerInfoRsp::New() const {
  return new CSQueryPlayerInfoRsp;
}

void CSQueryPlayerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::vmsg::CSPlayerInfo::Clear();
    }
    serveropentime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryPlayerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerInfo PlayerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ServerOpenTime;
        break;
      }

      // optional uint32 ServerOpenTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ServerOpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serveropentime_)));
          set_has_serveropentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryPlayerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerinfo(), output);
  }

  // optional uint32 ServerOpenTime = 2;
  if (has_serveropentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serveropentime(), output);
  }

}

int CSQueryPlayerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerInfo PlayerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // optional uint32 ServerOpenTime = 2;
    if (has_serveropentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serveropentime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryPlayerInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryPlayerInfoRsp*>(&from));
}

void CSQueryPlayerInfoRsp::MergeFrom(const CSQueryPlayerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::vmsg::CSPlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_serveropentime()) {
      set_serveropentime(from.serveropentime());
    }
  }
}

void CSQueryPlayerInfoRsp::CopyFrom(const CSQueryPlayerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryPlayerInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void CSQueryPlayerInfoRsp::Swap(CSQueryPlayerInfoRsp* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(serveropentime_, other->serveropentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryPlayerInfoRsp::GetTypeName() const {
  return "vmsg.CSQueryPlayerInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSetSettingParamRqst::kSettingParamFieldNumber;
#endif  // !_MSC_VER

CSSetSettingParamRqst::CSSetSettingParamRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSetSettingParamRqst::InitAsDefaultInstance() {
}

CSSetSettingParamRqst::CSSetSettingParamRqst(const CSSetSettingParamRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSetSettingParamRqst::SharedCtor() {
  _cached_size_ = 0;
  settingparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSetSettingParamRqst::~CSSetSettingParamRqst() {
  SharedDtor();
}

void CSSetSettingParamRqst::SharedDtor() {
  if (settingparam_ != &::google::protobuf::internal::kEmptyString) {
    delete settingparam_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSetSettingParamRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSetSettingParamRqst& CSSetSettingParamRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSSetSettingParamRqst* CSSetSettingParamRqst::default_instance_ = NULL;

CSSetSettingParamRqst* CSSetSettingParamRqst::New() const {
  return new CSSetSettingParamRqst;
}

void CSSetSettingParamRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_settingparam()) {
      if (settingparam_ != &::google::protobuf::internal::kEmptyString) {
        settingparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSetSettingParamRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SettingParam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_settingparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSetSettingParamRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SettingParam = 1;
  if (has_settingparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->settingparam(), output);
  }

}

int CSSetSettingParamRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SettingParam = 1;
    if (has_settingparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->settingparam());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSetSettingParamRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSetSettingParamRqst*>(&from));
}

void CSSetSettingParamRqst::MergeFrom(const CSSetSettingParamRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settingparam()) {
      set_settingparam(from.settingparam());
    }
  }
}

void CSSetSettingParamRqst::CopyFrom(const CSSetSettingParamRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSetSettingParamRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSSetSettingParamRqst::Swap(CSSetSettingParamRqst* other) {
  if (other != this) {
    std::swap(settingparam_, other->settingparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSetSettingParamRqst::GetTypeName() const {
  return "vmsg.CSSetSettingParamRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegPlayerInfoRqst::kPlayerIDFieldNumber;
const int CSRegPlayerInfoRqst::kNickFieldNumber;
#endif  // !_MSC_VER

CSRegPlayerInfoRqst::CSRegPlayerInfoRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRegPlayerInfoRqst::InitAsDefaultInstance() {
}

CSRegPlayerInfoRqst::CSRegPlayerInfoRqst(const CSRegPlayerInfoRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegPlayerInfoRqst::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegPlayerInfoRqst::~CSRegPlayerInfoRqst() {
  SharedDtor();
}

void CSRegPlayerInfoRqst::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRegPlayerInfoRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRegPlayerInfoRqst& CSRegPlayerInfoRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSRegPlayerInfoRqst* CSRegPlayerInfoRqst::default_instance_ = NULL;

CSRegPlayerInfoRqst* CSRegPlayerInfoRqst::New() const {
  return new CSRegPlayerInfoRqst;
}

void CSRegPlayerInfoRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRegPlayerInfoRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nick;
        break;
      }

      // required string Nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegPlayerInfoRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlayerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }

  // required string Nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

}

int CSRegPlayerInfoRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlayerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }

    // required string Nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegPlayerInfoRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRegPlayerInfoRqst*>(&from));
}

void CSRegPlayerInfoRqst::MergeFrom(const CSRegPlayerInfoRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
}

void CSRegPlayerInfoRqst::CopyFrom(const CSRegPlayerInfoRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegPlayerInfoRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSRegPlayerInfoRqst::Swap(CSRegPlayerInfoRqst* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRegPlayerInfoRqst::GetTypeName() const {
  return "vmsg.CSRegPlayerInfoRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegPlayerInfoRsp::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

CSRegPlayerInfoRsp::CSRegPlayerInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRegPlayerInfoRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::vmsg::CSPlayerInfo*>(
      ::vmsg::CSPlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::vmsg::CSPlayerInfo*>(&::vmsg::CSPlayerInfo::default_instance());
#endif
}

CSRegPlayerInfoRsp::CSRegPlayerInfoRsp(const CSRegPlayerInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegPlayerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegPlayerInfoRsp::~CSRegPlayerInfoRsp() {
  SharedDtor();
}

void CSRegPlayerInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
  }
}

void CSRegPlayerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRegPlayerInfoRsp& CSRegPlayerInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSRegPlayerInfoRsp* CSRegPlayerInfoRsp::default_instance_ = NULL;

CSRegPlayerInfoRsp* CSRegPlayerInfoRsp::New() const {
  return new CSRegPlayerInfoRsp;
}

void CSRegPlayerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::vmsg::CSPlayerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRegPlayerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerInfo PlayerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegPlayerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerinfo(), output);
  }

}

int CSRegPlayerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerInfo PlayerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegPlayerInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRegPlayerInfoRsp*>(&from));
}

void CSRegPlayerInfoRsp::MergeFrom(const CSRegPlayerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::vmsg::CSPlayerInfo::MergeFrom(from.playerinfo());
    }
  }
}

void CSRegPlayerInfoRsp::CopyFrom(const CSRegPlayerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegPlayerInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  return true;
}

void CSRegPlayerInfoRsp::Swap(CSRegPlayerInfoRsp* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRegPlayerInfoRsp::GetTypeName() const {
  return "vmsg.CSRegPlayerInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChangeArmorRsp::kPlayerDetailInfoFieldNumber;
#endif  // !_MSC_VER

CSChangeArmorRsp::CSChangeArmorRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChangeArmorRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerdetailinfo_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(
      ::vmsg::CSPlayerDetailInfo::internal_default_instance());
#else
  playerdetailinfo_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(&::vmsg::CSPlayerDetailInfo::default_instance());
#endif
}

CSChangeArmorRsp::CSChangeArmorRsp(const CSChangeArmorRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChangeArmorRsp::SharedCtor() {
  _cached_size_ = 0;
  playerdetailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChangeArmorRsp::~CSChangeArmorRsp() {
  SharedDtor();
}

void CSChangeArmorRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerdetailinfo_;
  }
}

void CSChangeArmorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChangeArmorRsp& CSChangeArmorRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSChangeArmorRsp* CSChangeArmorRsp::default_instance_ = NULL;

CSChangeArmorRsp* CSChangeArmorRsp::New() const {
  return new CSChangeArmorRsp;
}

void CSChangeArmorRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerdetailinfo()) {
      if (playerdetailinfo_ != NULL) playerdetailinfo_->::vmsg::CSPlayerDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChangeArmorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerDetailInfo PlayerDetailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerdetailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChangeArmorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerDetailInfo PlayerDetailInfo = 1;
  if (has_playerdetailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerdetailinfo(), output);
  }

}

int CSChangeArmorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerDetailInfo PlayerDetailInfo = 1;
    if (has_playerdetailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerdetailinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChangeArmorRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChangeArmorRsp*>(&from));
}

void CSChangeArmorRsp::MergeFrom(const CSChangeArmorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerdetailinfo()) {
      mutable_playerdetailinfo()->::vmsg::CSPlayerDetailInfo::MergeFrom(from.playerdetailinfo());
    }
  }
}

void CSChangeArmorRsp::CopyFrom(const CSChangeArmorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangeArmorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerdetailinfo()) {
    if (!this->playerdetailinfo().IsInitialized()) return false;
  }
  return true;
}

void CSChangeArmorRsp::Swap(CSChangeArmorRsp* other) {
  if (other != this) {
    std::swap(playerdetailinfo_, other->playerdetailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChangeArmorRsp::GetTypeName() const {
  return "vmsg.CSChangeArmorRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerRoleInfo::kUinFieldNumber;
const int CSPlayerRoleInfo::kShowIDFieldNumber;
const int CSPlayerRoleInfo::kNickFieldNumber;
const int CSPlayerRoleInfo::kLevelFieldNumber;
const int CSPlayerRoleInfo::kExpFieldNumber;
const int CSPlayerRoleInfo::kWeaponCfgIDFieldNumber;
#endif  // !_MSC_VER

CSPlayerRoleInfo::CSPlayerRoleInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerRoleInfo::InitAsDefaultInstance() {
}

CSPlayerRoleInfo::CSPlayerRoleInfo(const CSPlayerRoleInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  showid_ = 0u;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  weaponcfgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerRoleInfo::~CSPlayerRoleInfo() {
  SharedDtor();
}

void CSPlayerRoleInfo::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerRoleInfo& CSPlayerRoleInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerRoleInfo* CSPlayerRoleInfo::default_instance_ = NULL;

CSPlayerRoleInfo* CSPlayerRoleInfo::New() const {
  return new CSPlayerRoleInfo;
}

void CSPlayerRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    showid_ = 0u;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    weaponcfgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Nick;
        break;
      }

      // required string Nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // required uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // required uint64 Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WeaponCfgID;
        break;
      }

      // required uint32 WeaponCfgID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponcfgid_)));
          set_has_weaponcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required uint32 ShowID = 2;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->showid(), output);
  }

  // required string Nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->nick(), output);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint64 Exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // required uint32 WeaponCfgID = 6;
  if (has_weaponcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->weaponcfgid(), output);
  }

}

int CSPlayerRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required uint32 ShowID = 2;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

    // required string Nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 WeaponCfgID = 6;
    if (has_weaponcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponcfgid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerRoleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerRoleInfo*>(&from));
}

void CSPlayerRoleInfo::MergeFrom(const CSPlayerRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_weaponcfgid()) {
      set_weaponcfgid(from.weaponcfgid());
    }
  }
}

void CSPlayerRoleInfo::CopyFrom(const CSPlayerRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerRoleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSPlayerRoleInfo::Swap(CSPlayerRoleInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(showid_, other->showid_);
    std::swap(nick_, other->nick_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(weaponcfgid_, other->weaponcfgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerRoleInfo::GetTypeName() const {
  return "vmsg.CSPlayerRoleInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryRoleLstRsp::kRoleLstFieldNumber;
#endif  // !_MSC_VER

CSQueryRoleLstRsp::CSQueryRoleLstRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryRoleLstRsp::InitAsDefaultInstance() {
}

CSQueryRoleLstRsp::CSQueryRoleLstRsp(const CSQueryRoleLstRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryRoleLstRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryRoleLstRsp::~CSQueryRoleLstRsp() {
  SharedDtor();
}

void CSQueryRoleLstRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryRoleLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryRoleLstRsp& CSQueryRoleLstRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryRoleLstRsp* CSQueryRoleLstRsp::default_instance_ = NULL;

CSQueryRoleLstRsp* CSQueryRoleLstRsp::New() const {
  return new CSQueryRoleLstRsp;
}

void CSQueryRoleLstRsp::Clear() {
  rolelst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryRoleLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSPlayerRoleInfo RoleLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolelst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_RoleLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryRoleLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSPlayerRoleInfo RoleLst = 1;
  for (int i = 0; i < this->rolelst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rolelst(i), output);
  }

}

int CSQueryRoleLstRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSPlayerRoleInfo RoleLst = 1;
  total_size += 1 * this->rolelst_size();
  for (int i = 0; i < this->rolelst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolelst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryRoleLstRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryRoleLstRsp*>(&from));
}

void CSQueryRoleLstRsp::MergeFrom(const CSQueryRoleLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rolelst_.MergeFrom(from.rolelst_);
}

void CSQueryRoleLstRsp::CopyFrom(const CSQueryRoleLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryRoleLstRsp::IsInitialized() const {

  for (int i = 0; i < rolelst_size(); i++) {
    if (!this->rolelst(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryRoleLstRsp::Swap(CSQueryRoleLstRsp* other) {
  if (other != this) {
    rolelst_.Swap(&other->rolelst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryRoleLstRsp::GetTypeName() const {
  return "vmsg.CSQueryRoleLstRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRoleLoginRqst::kUinFieldNumber;
#endif  // !_MSC_VER

CSRoleLoginRqst::CSRoleLoginRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRoleLoginRqst::InitAsDefaultInstance() {
}

CSRoleLoginRqst::CSRoleLoginRqst(const CSRoleLoginRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRoleLoginRqst::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleLoginRqst::~CSRoleLoginRqst() {
  SharedDtor();
}

void CSRoleLoginRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRoleLoginRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRoleLoginRqst& CSRoleLoginRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSRoleLoginRqst* CSRoleLoginRqst::default_instance_ = NULL;

CSRoleLoginRqst* CSRoleLoginRqst::New() const {
  return new CSRoleLoginRqst;
}

void CSRoleLoginRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRoleLoginRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRoleLoginRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

}

int CSRoleLoginRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleLoginRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRoleLoginRqst*>(&from));
}

void CSRoleLoginRqst::MergeFrom(const CSRoleLoginRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
}

void CSRoleLoginRqst::CopyFrom(const CSRoleLoginRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleLoginRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRoleLoginRqst::Swap(CSRoleLoginRqst* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRoleLoginRqst::GetTypeName() const {
  return "vmsg.CSRoleLoginRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRoleLoginRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

CSRoleLoginRsp::CSRoleLoginRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRoleLoginRsp::InitAsDefaultInstance() {
}

CSRoleLoginRsp::CSRoleLoginRsp(const CSRoleLoginRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRoleLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleLoginRsp::~CSRoleLoginRsp() {
  SharedDtor();
}

void CSRoleLoginRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRoleLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRoleLoginRsp& CSRoleLoginRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSRoleLoginRsp* CSRoleLoginRsp::default_instance_ = NULL;

CSRoleLoginRsp* CSRoleLoginRsp::New() const {
  return new CSRoleLoginRsp;
}

void CSRoleLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRoleLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RetCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRoleLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

}

int CSRoleLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleLoginRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRoleLoginRsp*>(&from));
}

void CSRoleLoginRsp::MergeFrom(const CSRoleLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
}

void CSRoleLoginRsp::CopyFrom(const CSRoleLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRoleLoginRsp::Swap(CSRoleLoginRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRoleLoginRsp::GetTypeName() const {
  return "vmsg.CSRoleLoginRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRoleLogoutRqst::kUinFieldNumber;
#endif  // !_MSC_VER

CSRoleLogoutRqst::CSRoleLogoutRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRoleLogoutRqst::InitAsDefaultInstance() {
}

CSRoleLogoutRqst::CSRoleLogoutRqst(const CSRoleLogoutRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRoleLogoutRqst::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleLogoutRqst::~CSRoleLogoutRqst() {
  SharedDtor();
}

void CSRoleLogoutRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRoleLogoutRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRoleLogoutRqst& CSRoleLogoutRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSRoleLogoutRqst* CSRoleLogoutRqst::default_instance_ = NULL;

CSRoleLogoutRqst* CSRoleLogoutRqst::New() const {
  return new CSRoleLogoutRqst;
}

void CSRoleLogoutRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRoleLogoutRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRoleLogoutRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

}

int CSRoleLogoutRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleLogoutRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRoleLogoutRqst*>(&from));
}

void CSRoleLogoutRqst::MergeFrom(const CSRoleLogoutRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
}

void CSRoleLogoutRqst::CopyFrom(const CSRoleLogoutRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleLogoutRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRoleLogoutRqst::Swap(CSRoleLogoutRqst* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRoleLogoutRqst::GetTypeName() const {
  return "vmsg.CSRoleLogoutRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRoleLogoutRsp::kRetCodeFieldNumber;
#endif  // !_MSC_VER

CSRoleLogoutRsp::CSRoleLogoutRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRoleLogoutRsp::InitAsDefaultInstance() {
}

CSRoleLogoutRsp::CSRoleLogoutRsp(const CSRoleLogoutRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRoleLogoutRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRoleLogoutRsp::~CSRoleLogoutRsp() {
  SharedDtor();
}

void CSRoleLogoutRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRoleLogoutRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRoleLogoutRsp& CSRoleLogoutRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSRoleLogoutRsp* CSRoleLogoutRsp::default_instance_ = NULL;

CSRoleLogoutRsp* CSRoleLogoutRsp::New() const {
  return new CSRoleLogoutRsp;
}

void CSRoleLogoutRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRoleLogoutRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RetCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRoleLogoutRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RetCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

}

int CSRoleLogoutRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RetCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRoleLogoutRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRoleLogoutRsp*>(&from));
}

void CSRoleLogoutRsp::MergeFrom(const CSRoleLogoutRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
}

void CSRoleLogoutRsp::CopyFrom(const CSRoleLogoutRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRoleLogoutRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRoleLogoutRsp::Swap(CSRoleLogoutRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRoleLogoutRsp::GetTypeName() const {
  return "vmsg.CSRoleLogoutRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerManualNotify::kRemainManualFieldNumber;
const int CSPlayerManualNotify::kUpdateRemainTimeFieldNumber;
#endif  // !_MSC_VER

CSPlayerManualNotify::CSPlayerManualNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerManualNotify::InitAsDefaultInstance() {
}

CSPlayerManualNotify::CSPlayerManualNotify(const CSPlayerManualNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerManualNotify::SharedCtor() {
  _cached_size_ = 0;
  remainmanual_ = 0u;
  updateremaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerManualNotify::~CSPlayerManualNotify() {
  SharedDtor();
}

void CSPlayerManualNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerManualNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerManualNotify& CSPlayerManualNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerManualNotify* CSPlayerManualNotify::default_instance_ = NULL;

CSPlayerManualNotify* CSPlayerManualNotify::New() const {
  return new CSPlayerManualNotify;
}

void CSPlayerManualNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remainmanual_ = 0u;
    updateremaintime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerManualNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RemainManual = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainmanual_)));
          set_has_remainmanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UpdateRemainTime;
        break;
      }

      // required int32 UpdateRemainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updateremaintime_)));
          set_has_updateremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerManualNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RemainManual = 1;
  if (has_remainmanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remainmanual(), output);
  }

  // required int32 UpdateRemainTime = 2;
  if (has_updateremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->updateremaintime(), output);
  }

}

int CSPlayerManualNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RemainManual = 1;
    if (has_remainmanual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainmanual());
    }

    // required int32 UpdateRemainTime = 2;
    if (has_updateremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateremaintime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerManualNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerManualNotify*>(&from));
}

void CSPlayerManualNotify::MergeFrom(const CSPlayerManualNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remainmanual()) {
      set_remainmanual(from.remainmanual());
    }
    if (from.has_updateremaintime()) {
      set_updateremaintime(from.updateremaintime());
    }
  }
}

void CSPlayerManualNotify::CopyFrom(const CSPlayerManualNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerManualNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPlayerManualNotify::Swap(CSPlayerManualNotify* other) {
  if (other != this) {
    std::swap(remainmanual_, other->remainmanual_);
    std::swap(updateremaintime_, other->updateremaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerManualNotify::GetTypeName() const {
  return "vmsg.CSPlayerManualNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyManualInfo::kBuyCntFieldNumber;
const int CSBuyManualInfo::kMaxCntFieldNumber;
const int CSBuyManualInfo::kGoldCostFieldNumber;
#endif  // !_MSC_VER

CSBuyManualInfo::CSBuyManualInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyManualInfo::InitAsDefaultInstance() {
}

CSBuyManualInfo::CSBuyManualInfo(const CSBuyManualInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyManualInfo::SharedCtor() {
  _cached_size_ = 0;
  buycnt_ = 0u;
  maxcnt_ = 0u;
  goldcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyManualInfo::~CSBuyManualInfo() {
  SharedDtor();
}

void CSBuyManualInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyManualInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyManualInfo& CSBuyManualInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyManualInfo* CSBuyManualInfo::default_instance_ = NULL;

CSBuyManualInfo* CSBuyManualInfo::New() const {
  return new CSBuyManualInfo;
}

void CSBuyManualInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buycnt_ = 0u;
    maxcnt_ = 0u;
    goldcost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyManualInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BuyCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycnt_)));
          set_has_buycnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxCnt;
        break;
      }

      // required uint32 MaxCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcnt_)));
          set_has_maxcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GoldCost;
        break;
      }

      // required uint32 GoldCost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcost_)));
          set_has_goldcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyManualInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BuyCnt = 1;
  if (has_buycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buycnt(), output);
  }

  // required uint32 MaxCnt = 2;
  if (has_maxcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxcnt(), output);
  }

  // required uint32 GoldCost = 3;
  if (has_goldcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goldcost(), output);
  }

}

int CSBuyManualInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BuyCnt = 1;
    if (has_buycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycnt());
    }

    // required uint32 MaxCnt = 2;
    if (has_maxcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcnt());
    }

    // required uint32 GoldCost = 3;
    if (has_goldcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcost());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyManualInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyManualInfo*>(&from));
}

void CSBuyManualInfo::MergeFrom(const CSBuyManualInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buycnt()) {
      set_buycnt(from.buycnt());
    }
    if (from.has_maxcnt()) {
      set_maxcnt(from.maxcnt());
    }
    if (from.has_goldcost()) {
      set_goldcost(from.goldcost());
    }
  }
}

void CSBuyManualInfo::CopyFrom(const CSBuyManualInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyManualInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSBuyManualInfo::Swap(CSBuyManualInfo* other) {
  if (other != this) {
    std::swap(buycnt_, other->buycnt_);
    std::swap(maxcnt_, other->maxcnt_);
    std::swap(goldcost_, other->goldcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyManualInfo::GetTypeName() const {
  return "vmsg.CSBuyManualInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryPlayerManualRsp::kRemainManualFieldNumber;
const int CSQueryPlayerManualRsp::kUpdateRemainTimeFieldNumber;
const int CSQueryPlayerManualRsp::kManualInfoFieldNumber;
#endif  // !_MSC_VER

CSQueryPlayerManualRsp::CSQueryPlayerManualRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryPlayerManualRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  manualinfo_ = const_cast< ::vmsg::CSBuyManualInfo*>(
      ::vmsg::CSBuyManualInfo::internal_default_instance());
#else
  manualinfo_ = const_cast< ::vmsg::CSBuyManualInfo*>(&::vmsg::CSBuyManualInfo::default_instance());
#endif
}

CSQueryPlayerManualRsp::CSQueryPlayerManualRsp(const CSQueryPlayerManualRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryPlayerManualRsp::SharedCtor() {
  _cached_size_ = 0;
  remainmanual_ = 0u;
  updateremaintime_ = 0;
  manualinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryPlayerManualRsp::~CSQueryPlayerManualRsp() {
  SharedDtor();
}

void CSQueryPlayerManualRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete manualinfo_;
  }
}

void CSQueryPlayerManualRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryPlayerManualRsp& CSQueryPlayerManualRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryPlayerManualRsp* CSQueryPlayerManualRsp::default_instance_ = NULL;

CSQueryPlayerManualRsp* CSQueryPlayerManualRsp::New() const {
  return new CSQueryPlayerManualRsp;
}

void CSQueryPlayerManualRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remainmanual_ = 0u;
    updateremaintime_ = 0;
    if (has_manualinfo()) {
      if (manualinfo_ != NULL) manualinfo_->::vmsg::CSBuyManualInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryPlayerManualRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RemainManual = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainmanual_)));
          set_has_remainmanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UpdateRemainTime;
        break;
      }

      // required int32 UpdateRemainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpdateRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &updateremaintime_)));
          set_has_updateremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ManualInfo;
        break;
      }

      // required .vmsg.CSBuyManualInfo ManualInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ManualInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manualinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryPlayerManualRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RemainManual = 1;
  if (has_remainmanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remainmanual(), output);
  }

  // required int32 UpdateRemainTime = 2;
  if (has_updateremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->updateremaintime(), output);
  }

  // required .vmsg.CSBuyManualInfo ManualInfo = 3;
  if (has_manualinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->manualinfo(), output);
  }

}

int CSQueryPlayerManualRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RemainManual = 1;
    if (has_remainmanual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainmanual());
    }

    // required int32 UpdateRemainTime = 2;
    if (has_updateremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->updateremaintime());
    }

    // required .vmsg.CSBuyManualInfo ManualInfo = 3;
    if (has_manualinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manualinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryPlayerManualRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryPlayerManualRsp*>(&from));
}

void CSQueryPlayerManualRsp::MergeFrom(const CSQueryPlayerManualRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remainmanual()) {
      set_remainmanual(from.remainmanual());
    }
    if (from.has_updateremaintime()) {
      set_updateremaintime(from.updateremaintime());
    }
    if (from.has_manualinfo()) {
      mutable_manualinfo()->::vmsg::CSBuyManualInfo::MergeFrom(from.manualinfo());
    }
  }
}

void CSQueryPlayerManualRsp::CopyFrom(const CSQueryPlayerManualRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryPlayerManualRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_manualinfo()) {
    if (!this->manualinfo().IsInitialized()) return false;
  }
  return true;
}

void CSQueryPlayerManualRsp::Swap(CSQueryPlayerManualRsp* other) {
  if (other != this) {
    std::swap(remainmanual_, other->remainmanual_);
    std::swap(updateremaintime_, other->updateremaintime_);
    std::swap(manualinfo_, other->manualinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryPlayerManualRsp::GetTypeName() const {
  return "vmsg.CSQueryPlayerManualRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEvolutionInfo::kEvolutionIDFieldNumber;
#endif  // !_MSC_VER

CSPlayerEvolutionInfo::CSPlayerEvolutionInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEvolutionInfo::InitAsDefaultInstance() {
}

CSPlayerEvolutionInfo::CSPlayerEvolutionInfo(const CSPlayerEvolutionInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEvolutionInfo::SharedCtor() {
  _cached_size_ = 0;
  evolutionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEvolutionInfo::~CSPlayerEvolutionInfo() {
  SharedDtor();
}

void CSPlayerEvolutionInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEvolutionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEvolutionInfo& CSPlayerEvolutionInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEvolutionInfo* CSPlayerEvolutionInfo::default_instance_ = NULL;

CSPlayerEvolutionInfo* CSPlayerEvolutionInfo::New() const {
  return new CSPlayerEvolutionInfo;
}

void CSPlayerEvolutionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    evolutionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEvolutionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EvolutionID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionid_)));
          set_has_evolutionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEvolutionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EvolutionID = 1;
  if (has_evolutionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->evolutionid(), output);
  }

}

int CSPlayerEvolutionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EvolutionID = 1;
    if (has_evolutionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEvolutionInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEvolutionInfo*>(&from));
}

void CSPlayerEvolutionInfo::MergeFrom(const CSPlayerEvolutionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_evolutionid()) {
      set_evolutionid(from.evolutionid());
    }
  }
}

void CSPlayerEvolutionInfo::CopyFrom(const CSPlayerEvolutionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEvolutionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPlayerEvolutionInfo::Swap(CSPlayerEvolutionInfo* other) {
  if (other != this) {
    std::swap(evolutionid_, other->evolutionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEvolutionInfo::GetTypeName() const {
  return "vmsg.CSPlayerEvolutionInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEvolutionSkill::kStartSkillIDFieldNumber;
const int CSEvolutionSkill::kExpFieldNumber;
const int CSEvolutionSkill::kLevelFieldNumber;
#endif  // !_MSC_VER

CSEvolutionSkill::CSEvolutionSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEvolutionSkill::InitAsDefaultInstance() {
}

CSEvolutionSkill::CSEvolutionSkill(const CSEvolutionSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEvolutionSkill::SharedCtor() {
  _cached_size_ = 0;
  startskillid_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEvolutionSkill::~CSEvolutionSkill() {
  SharedDtor();
}

void CSEvolutionSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEvolutionSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEvolutionSkill& CSEvolutionSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSEvolutionSkill* CSEvolutionSkill::default_instance_ = NULL;

CSEvolutionSkill* CSEvolutionSkill::New() const {
  return new CSEvolutionSkill;
}

void CSEvolutionSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startskillid_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEvolutionSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartSkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startskillid_)));
          set_has_startskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // required uint64 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // required uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEvolutionSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartSkillID = 1;
  if (has_startskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startskillid(), output);
  }

  // required uint64 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

}

int CSEvolutionSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartSkillID = 1;
    if (has_startskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startskillid());
    }

    // required uint64 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEvolutionSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEvolutionSkill*>(&from));
}

void CSEvolutionSkill::MergeFrom(const CSEvolutionSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startskillid()) {
      set_startskillid(from.startskillid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void CSEvolutionSkill::CopyFrom(const CSEvolutionSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEvolutionSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSEvolutionSkill::Swap(CSEvolutionSkill* other) {
  if (other != this) {
    std::swap(startskillid_, other->startskillid_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEvolutionSkill::GetTypeName() const {
  return "vmsg.CSEvolutionSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEvolutionSkillInfo::kSkillsFieldNumber;
const int CSPlayerEvolutionSkillInfo::kUseSkillIdxFieldNumber;
#endif  // !_MSC_VER

CSPlayerEvolutionSkillInfo::CSPlayerEvolutionSkillInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEvolutionSkillInfo::InitAsDefaultInstance() {
}

CSPlayerEvolutionSkillInfo::CSPlayerEvolutionSkillInfo(const CSPlayerEvolutionSkillInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEvolutionSkillInfo::SharedCtor() {
  _cached_size_ = 0;
  useskillidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEvolutionSkillInfo::~CSPlayerEvolutionSkillInfo() {
  SharedDtor();
}

void CSPlayerEvolutionSkillInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEvolutionSkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEvolutionSkillInfo& CSPlayerEvolutionSkillInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEvolutionSkillInfo* CSPlayerEvolutionSkillInfo::default_instance_ = NULL;

CSPlayerEvolutionSkillInfo* CSPlayerEvolutionSkillInfo::New() const {
  return new CSPlayerEvolutionSkillInfo;
}

void CSPlayerEvolutionSkillInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    useskillidx_ = 0;
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEvolutionSkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSEvolutionSkill Skills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Skills;
        if (input->ExpectTag(16)) goto parse_UseSkillIdx;
        break;
      }

      // required int32 UseSkillIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UseSkillIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useskillidx_)));
          set_has_useskillidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEvolutionSkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSEvolutionSkill Skills = 1;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->skills(i), output);
  }

  // required int32 UseSkillIdx = 2;
  if (has_useskillidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->useskillidx(), output);
  }

}

int CSPlayerEvolutionSkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 UseSkillIdx = 2;
    if (has_useskillidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useskillidx());
    }

  }
  // repeated .vmsg.CSEvolutionSkill Skills = 1;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEvolutionSkillInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEvolutionSkillInfo*>(&from));
}

void CSPlayerEvolutionSkillInfo::MergeFrom(const CSPlayerEvolutionSkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_useskillidx()) {
      set_useskillidx(from.useskillidx());
    }
  }
}

void CSPlayerEvolutionSkillInfo::CopyFrom(const CSPlayerEvolutionSkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEvolutionSkillInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < skills_size(); i++) {
    if (!this->skills(i).IsInitialized()) return false;
  }
  return true;
}

void CSPlayerEvolutionSkillInfo::Swap(CSPlayerEvolutionSkillInfo* other) {
  if (other != this) {
    skills_.Swap(&other->skills_);
    std::swap(useskillidx_, other->useskillidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEvolutionSkillInfo::GetTypeName() const {
  return "vmsg.CSPlayerEvolutionSkillInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChangePlayerEvolutionSkillRqst::kUseSkillIdxFieldNumber;
#endif  // !_MSC_VER

CSChangePlayerEvolutionSkillRqst::CSChangePlayerEvolutionSkillRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChangePlayerEvolutionSkillRqst::InitAsDefaultInstance() {
}

CSChangePlayerEvolutionSkillRqst::CSChangePlayerEvolutionSkillRqst(const CSChangePlayerEvolutionSkillRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChangePlayerEvolutionSkillRqst::SharedCtor() {
  _cached_size_ = 0;
  useskillidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChangePlayerEvolutionSkillRqst::~CSChangePlayerEvolutionSkillRqst() {
  SharedDtor();
}

void CSChangePlayerEvolutionSkillRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSChangePlayerEvolutionSkillRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChangePlayerEvolutionSkillRqst& CSChangePlayerEvolutionSkillRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSChangePlayerEvolutionSkillRqst* CSChangePlayerEvolutionSkillRqst::default_instance_ = NULL;

CSChangePlayerEvolutionSkillRqst* CSChangePlayerEvolutionSkillRqst::New() const {
  return new CSChangePlayerEvolutionSkillRqst;
}

void CSChangePlayerEvolutionSkillRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    useskillidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChangePlayerEvolutionSkillRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 UseSkillIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useskillidx_)));
          set_has_useskillidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChangePlayerEvolutionSkillRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 UseSkillIdx = 1;
  if (has_useskillidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->useskillidx(), output);
  }

}

int CSChangePlayerEvolutionSkillRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 UseSkillIdx = 1;
    if (has_useskillidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useskillidx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChangePlayerEvolutionSkillRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChangePlayerEvolutionSkillRqst*>(&from));
}

void CSChangePlayerEvolutionSkillRqst::MergeFrom(const CSChangePlayerEvolutionSkillRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useskillidx()) {
      set_useskillidx(from.useskillidx());
    }
  }
}

void CSChangePlayerEvolutionSkillRqst::CopyFrom(const CSChangePlayerEvolutionSkillRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangePlayerEvolutionSkillRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSChangePlayerEvolutionSkillRqst::Swap(CSChangePlayerEvolutionSkillRqst* other) {
  if (other != this) {
    std::swap(useskillidx_, other->useskillidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChangePlayerEvolutionSkillRqst::GetTypeName() const {
  return "vmsg.CSChangePlayerEvolutionSkillRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChangePlayerEvolutionSkillRsp::kUseSkillIdxFieldNumber;
#endif  // !_MSC_VER

CSChangePlayerEvolutionSkillRsp::CSChangePlayerEvolutionSkillRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChangePlayerEvolutionSkillRsp::InitAsDefaultInstance() {
}

CSChangePlayerEvolutionSkillRsp::CSChangePlayerEvolutionSkillRsp(const CSChangePlayerEvolutionSkillRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChangePlayerEvolutionSkillRsp::SharedCtor() {
  _cached_size_ = 0;
  useskillidx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChangePlayerEvolutionSkillRsp::~CSChangePlayerEvolutionSkillRsp() {
  SharedDtor();
}

void CSChangePlayerEvolutionSkillRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSChangePlayerEvolutionSkillRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChangePlayerEvolutionSkillRsp& CSChangePlayerEvolutionSkillRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSChangePlayerEvolutionSkillRsp* CSChangePlayerEvolutionSkillRsp::default_instance_ = NULL;

CSChangePlayerEvolutionSkillRsp* CSChangePlayerEvolutionSkillRsp::New() const {
  return new CSChangePlayerEvolutionSkillRsp;
}

void CSChangePlayerEvolutionSkillRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    useskillidx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChangePlayerEvolutionSkillRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 UseSkillIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &useskillidx_)));
          set_has_useskillidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChangePlayerEvolutionSkillRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 UseSkillIdx = 1;
  if (has_useskillidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->useskillidx(), output);
  }

}

int CSChangePlayerEvolutionSkillRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 UseSkillIdx = 1;
    if (has_useskillidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->useskillidx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChangePlayerEvolutionSkillRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChangePlayerEvolutionSkillRsp*>(&from));
}

void CSChangePlayerEvolutionSkillRsp::MergeFrom(const CSChangePlayerEvolutionSkillRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_useskillidx()) {
      set_useskillidx(from.useskillidx());
    }
  }
}

void CSChangePlayerEvolutionSkillRsp::CopyFrom(const CSChangePlayerEvolutionSkillRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangePlayerEvolutionSkillRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSChangePlayerEvolutionSkillRsp::Swap(CSChangePlayerEvolutionSkillRsp* other) {
  if (other != this) {
    std::swap(useskillidx_, other->useskillidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChangePlayerEvolutionSkillRsp::GetTypeName() const {
  return "vmsg.CSChangePlayerEvolutionSkillRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttrStrengthenRqst::kTypeFieldNumber;
const int CSAttrStrengthenRqst::kMagicTypeFieldNumber;
#endif  // !_MSC_VER

CSAttrStrengthenRqst::CSAttrStrengthenRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAttrStrengthenRqst::InitAsDefaultInstance() {
}

CSAttrStrengthenRqst::CSAttrStrengthenRqst(const CSAttrStrengthenRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttrStrengthenRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  magictype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttrStrengthenRqst::~CSAttrStrengthenRqst() {
  SharedDtor();
}

void CSAttrStrengthenRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAttrStrengthenRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAttrStrengthenRqst& CSAttrStrengthenRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSAttrStrengthenRqst* CSAttrStrengthenRqst::default_instance_ = NULL;

CSAttrStrengthenRqst* CSAttrStrengthenRqst::New() const {
  return new CSAttrStrengthenRqst;
}

void CSAttrStrengthenRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    magictype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAttrStrengthenRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MagicType;
        break;
      }

      // required uint32 MagicType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MagicType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magictype_)));
          set_has_magictype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttrStrengthenRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 MagicType = 2;
  if (has_magictype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magictype(), output);
  }

}

int CSAttrStrengthenRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 MagicType = 2;
    if (has_magictype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magictype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttrStrengthenRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAttrStrengthenRqst*>(&from));
}

void CSAttrStrengthenRqst::MergeFrom(const CSAttrStrengthenRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_magictype()) {
      set_magictype(from.magictype());
    }
  }
}

void CSAttrStrengthenRqst::CopyFrom(const CSAttrStrengthenRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttrStrengthenRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAttrStrengthenRqst::Swap(CSAttrStrengthenRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(magictype_, other->magictype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAttrStrengthenRqst::GetTypeName() const {
  return "vmsg.CSAttrStrengthenRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAttrStrengthenInfo::kAtkMagicsFieldNumber;
const int CSAttrStrengthenInfo::kDefMagicsFieldNumber;
#endif  // !_MSC_VER

CSAttrStrengthenInfo::CSAttrStrengthenInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAttrStrengthenInfo::InitAsDefaultInstance() {
}

CSAttrStrengthenInfo::CSAttrStrengthenInfo(const CSAttrStrengthenInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttrStrengthenInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttrStrengthenInfo::~CSAttrStrengthenInfo() {
  SharedDtor();
}

void CSAttrStrengthenInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAttrStrengthenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAttrStrengthenInfo& CSAttrStrengthenInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSAttrStrengthenInfo* CSAttrStrengthenInfo::default_instance_ = NULL;

CSAttrStrengthenInfo* CSAttrStrengthenInfo::New() const {
  return new CSAttrStrengthenInfo;
}

void CSAttrStrengthenInfo::Clear() {
  atkmagics_.Clear();
  defmagics_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAttrStrengthenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 AtkMagics = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkMagics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_atkmagics())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_atkmagics())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_AtkMagics;
        if (input->ExpectTag(16)) goto parse_DefMagics;
        break;
      }

      // repeated uint32 DefMagics = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefMagics:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_defmagics())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_defmagics())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DefMagics;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttrStrengthenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 AtkMagics = 1;
  for (int i = 0; i < this->atkmagics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->atkmagics(i), output);
  }

  // repeated uint32 DefMagics = 2;
  for (int i = 0; i < this->defmagics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->defmagics(i), output);
  }

}

int CSAttrStrengthenInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 AtkMagics = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->atkmagics_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->atkmagics(i));
    }
    total_size += 1 * this->atkmagics_size() + data_size;
  }

  // repeated uint32 DefMagics = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->defmagics_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->defmagics(i));
    }
    total_size += 1 * this->defmagics_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttrStrengthenInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAttrStrengthenInfo*>(&from));
}

void CSAttrStrengthenInfo::MergeFrom(const CSAttrStrengthenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  atkmagics_.MergeFrom(from.atkmagics_);
  defmagics_.MergeFrom(from.defmagics_);
}

void CSAttrStrengthenInfo::CopyFrom(const CSAttrStrengthenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttrStrengthenInfo::IsInitialized() const {

  return true;
}

void CSAttrStrengthenInfo::Swap(CSAttrStrengthenInfo* other) {
  if (other != this) {
    atkmagics_.Swap(&other->atkmagics_);
    defmagics_.Swap(&other->defmagics_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAttrStrengthenInfo::GetTypeName() const {
  return "vmsg.CSAttrStrengthenInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWeaponLotQueryRsp::kNormalLotRemainTimeFieldNumber;
const int CSWeaponLotQueryRsp::kAdvanceLotRemainTimeFieldNumber;
const int CSWeaponLotQueryRsp::kRemainGoldCardCntFieldNumber;
const int CSWeaponLotQueryRsp::kRemainVipAwardCntTodayFieldNumber;
const int CSWeaponLotQueryRsp::kRemainVipAwardCntTotalFieldNumber;
#endif  // !_MSC_VER

CSWeaponLotQueryRsp::CSWeaponLotQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWeaponLotQueryRsp::InitAsDefaultInstance() {
}

CSWeaponLotQueryRsp::CSWeaponLotQueryRsp(const CSWeaponLotQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWeaponLotQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  normallotremaintime_ = 0u;
  advancelotremaintime_ = 0u;
  remaingoldcardcnt_ = 0u;
  remainvipawardcnttoday_ = 0u;
  remainvipawardcnttotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWeaponLotQueryRsp::~CSWeaponLotQueryRsp() {
  SharedDtor();
}

void CSWeaponLotQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWeaponLotQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWeaponLotQueryRsp& CSWeaponLotQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSWeaponLotQueryRsp* CSWeaponLotQueryRsp::default_instance_ = NULL;

CSWeaponLotQueryRsp* CSWeaponLotQueryRsp::New() const {
  return new CSWeaponLotQueryRsp;
}

void CSWeaponLotQueryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    normallotremaintime_ = 0u;
    advancelotremaintime_ = 0u;
    remaingoldcardcnt_ = 0u;
    remainvipawardcnttoday_ = 0u;
    remainvipawardcnttotal_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWeaponLotQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NormalLotRemainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normallotremaintime_)));
          set_has_normallotremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AdvanceLotRemainTime;
        break;
      }

      // required uint32 AdvanceLotRemainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdvanceLotRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancelotremaintime_)));
          set_has_advancelotremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RemainGoldCardCnt;
        break;
      }

      // required uint32 RemainGoldCardCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainGoldCardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaingoldcardcnt_)));
          set_has_remaingoldcardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RemainVipAwardCntToday;
        break;
      }

      // required uint32 RemainVipAwardCntToday = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainVipAwardCntToday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainvipawardcnttoday_)));
          set_has_remainvipawardcnttoday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RemainVipAwardCntTotal;
        break;
      }

      // required uint32 RemainVipAwardCntTotal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainVipAwardCntTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainvipawardcnttotal_)));
          set_has_remainvipawardcnttotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWeaponLotQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 NormalLotRemainTime = 1;
  if (has_normallotremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->normallotremaintime(), output);
  }

  // required uint32 AdvanceLotRemainTime = 2;
  if (has_advancelotremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advancelotremaintime(), output);
  }

  // required uint32 RemainGoldCardCnt = 3;
  if (has_remaingoldcardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remaingoldcardcnt(), output);
  }

  // required uint32 RemainVipAwardCntToday = 4;
  if (has_remainvipawardcnttoday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->remainvipawardcnttoday(), output);
  }

  // required uint32 RemainVipAwardCntTotal = 5;
  if (has_remainvipawardcnttotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remainvipawardcnttotal(), output);
  }

}

int CSWeaponLotQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 NormalLotRemainTime = 1;
    if (has_normallotremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normallotremaintime());
    }

    // required uint32 AdvanceLotRemainTime = 2;
    if (has_advancelotremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancelotremaintime());
    }

    // required uint32 RemainGoldCardCnt = 3;
    if (has_remaingoldcardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaingoldcardcnt());
    }

    // required uint32 RemainVipAwardCntToday = 4;
    if (has_remainvipawardcnttoday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainvipawardcnttoday());
    }

    // required uint32 RemainVipAwardCntTotal = 5;
    if (has_remainvipawardcnttotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainvipawardcnttotal());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWeaponLotQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWeaponLotQueryRsp*>(&from));
}

void CSWeaponLotQueryRsp::MergeFrom(const CSWeaponLotQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normallotremaintime()) {
      set_normallotremaintime(from.normallotremaintime());
    }
    if (from.has_advancelotremaintime()) {
      set_advancelotremaintime(from.advancelotremaintime());
    }
    if (from.has_remaingoldcardcnt()) {
      set_remaingoldcardcnt(from.remaingoldcardcnt());
    }
    if (from.has_remainvipawardcnttoday()) {
      set_remainvipawardcnttoday(from.remainvipawardcnttoday());
    }
    if (from.has_remainvipawardcnttotal()) {
      set_remainvipawardcnttotal(from.remainvipawardcnttotal());
    }
  }
}

void CSWeaponLotQueryRsp::CopyFrom(const CSWeaponLotQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWeaponLotQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSWeaponLotQueryRsp::Swap(CSWeaponLotQueryRsp* other) {
  if (other != this) {
    std::swap(normallotremaintime_, other->normallotremaintime_);
    std::swap(advancelotremaintime_, other->advancelotremaintime_);
    std::swap(remaingoldcardcnt_, other->remaingoldcardcnt_);
    std::swap(remainvipawardcnttoday_, other->remainvipawardcnttoday_);
    std::swap(remainvipawardcnttotal_, other->remainvipawardcnttotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWeaponLotQueryRsp::GetTypeName() const {
  return "vmsg.CSWeaponLotQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWeaponLotRqst::kTypeFieldNumber;
#endif  // !_MSC_VER

CSWeaponLotRqst::CSWeaponLotRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWeaponLotRqst::InitAsDefaultInstance() {
}

CSWeaponLotRqst::CSWeaponLotRqst(const CSWeaponLotRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWeaponLotRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWeaponLotRqst::~CSWeaponLotRqst() {
  SharedDtor();
}

void CSWeaponLotRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWeaponLotRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWeaponLotRqst& CSWeaponLotRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSWeaponLotRqst* CSWeaponLotRqst::default_instance_ = NULL;

CSWeaponLotRqst* CSWeaponLotRqst::New() const {
  return new CSWeaponLotRqst;
}

void CSWeaponLotRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWeaponLotRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWeaponLotRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

}

int CSWeaponLotRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWeaponLotRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWeaponLotRqst*>(&from));
}

void CSWeaponLotRqst::MergeFrom(const CSWeaponLotRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
}

void CSWeaponLotRqst::CopyFrom(const CSWeaponLotRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWeaponLotRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSWeaponLotRqst::Swap(CSWeaponLotRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWeaponLotRqst::GetTypeName() const {
  return "vmsg.CSWeaponLotRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWeaponLotRsp::kTypeFieldNumber;
const int CSWeaponLotRsp::kFixedElmtFieldNumber;
const int CSWeaponLotRsp::kElmtLstFieldNumber;
#endif  // !_MSC_VER

CSWeaponLotRsp::CSWeaponLotRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWeaponLotRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fixedelmt_ = const_cast< ::vmsg::CSAwardElement*>(
      ::vmsg::CSAwardElement::internal_default_instance());
#else
  fixedelmt_ = const_cast< ::vmsg::CSAwardElement*>(&::vmsg::CSAwardElement::default_instance());
#endif
}

CSWeaponLotRsp::CSWeaponLotRsp(const CSWeaponLotRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWeaponLotRsp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  fixedelmt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWeaponLotRsp::~CSWeaponLotRsp() {
  SharedDtor();
}

void CSWeaponLotRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fixedelmt_;
  }
}

void CSWeaponLotRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWeaponLotRsp& CSWeaponLotRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSWeaponLotRsp* CSWeaponLotRsp::default_instance_ = NULL;

CSWeaponLotRsp* CSWeaponLotRsp::New() const {
  return new CSWeaponLotRsp;
}

void CSWeaponLotRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_fixedelmt()) {
      if (fixedelmt_ != NULL) fixedelmt_->::vmsg::CSAwardElement::Clear();
    }
  }
  elmtlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWeaponLotRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FixedElmt;
        break;
      }

      // required .vmsg.CSAwardElement FixedElmt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FixedElmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedelmt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ElmtLst;
        break;
      }

      // repeated .vmsg.CSAwardElement ElmtLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElmtLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elmtlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ElmtLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWeaponLotRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required .vmsg.CSAwardElement FixedElmt = 2;
  if (has_fixedelmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->fixedelmt(), output);
  }

  // repeated .vmsg.CSAwardElement ElmtLst = 3;
  for (int i = 0; i < this->elmtlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->elmtlst(i), output);
  }

}

int CSWeaponLotRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .vmsg.CSAwardElement FixedElmt = 2;
    if (has_fixedelmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedelmt());
    }

  }
  // repeated .vmsg.CSAwardElement ElmtLst = 3;
  total_size += 1 * this->elmtlst_size();
  for (int i = 0; i < this->elmtlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elmtlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWeaponLotRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWeaponLotRsp*>(&from));
}

void CSWeaponLotRsp::MergeFrom(const CSWeaponLotRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  elmtlst_.MergeFrom(from.elmtlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fixedelmt()) {
      mutable_fixedelmt()->::vmsg::CSAwardElement::MergeFrom(from.fixedelmt());
    }
  }
}

void CSWeaponLotRsp::CopyFrom(const CSWeaponLotRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWeaponLotRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fixedelmt()) {
    if (!this->fixedelmt().IsInitialized()) return false;
  }
  for (int i = 0; i < elmtlst_size(); i++) {
    if (!this->elmtlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSWeaponLotRsp::Swap(CSWeaponLotRsp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(fixedelmt_, other->fixedelmt_);
    elmtlst_.Swap(&other->elmtlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWeaponLotRsp::GetTypeName() const {
  return "vmsg.CSWeaponLotRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAwardRankInfo::kRankTypeFieldNumber;
const int CSAwardRankInfo::kHasLastAwardFieldNumber;
const int CSAwardRankInfo::kCoinFieldNumber;
const int CSAwardRankInfo::kArenaMoneyFieldNumber;
#endif  // !_MSC_VER

CSAwardRankInfo::CSAwardRankInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAwardRankInfo::InitAsDefaultInstance() {
}

CSAwardRankInfo::CSAwardRankInfo(const CSAwardRankInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAwardRankInfo::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  haslastaward_ = 0u;
  coin_ = 0u;
  arenamoney_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAwardRankInfo::~CSAwardRankInfo() {
  SharedDtor();
}

void CSAwardRankInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAwardRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAwardRankInfo& CSAwardRankInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSAwardRankInfo* CSAwardRankInfo::default_instance_ = NULL;

CSAwardRankInfo* CSAwardRankInfo::New() const {
  return new CSAwardRankInfo;
}

void CSAwardRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    haslastaward_ = 0u;
    coin_ = 0u;
    arenamoney_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAwardRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HasLastAward;
        break;
      }

      // required uint32 HasLastAward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasLastAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haslastaward_)));
          set_has_haslastaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Coin;
        break;
      }

      // required uint32 Coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ArenaMoney;
        break;
      }

      // required uint32 ArenaMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenamoney_)));
          set_has_arenamoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAwardRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // required uint32 HasLastAward = 2;
  if (has_haslastaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->haslastaward(), output);
  }

  // required uint32 Coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // required uint32 ArenaMoney = 4;
  if (has_arenamoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->arenamoney(), output);
  }

}

int CSAwardRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // required uint32 HasLastAward = 2;
    if (has_haslastaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haslastaward());
    }

    // required uint32 Coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 ArenaMoney = 4;
    if (has_arenamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenamoney());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAwardRankInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAwardRankInfo*>(&from));
}

void CSAwardRankInfo::MergeFrom(const CSAwardRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_haslastaward()) {
      set_haslastaward(from.haslastaward());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_arenamoney()) {
      set_arenamoney(from.arenamoney());
    }
  }
}

void CSAwardRankInfo::CopyFrom(const CSAwardRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSAwardRankInfo::Swap(CSAwardRankInfo* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(haslastaward_, other->haslastaward_);
    std::swap(coin_, other->coin_);
    std::swap(arenamoney_, other->arenamoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAwardRankInfo::GetTypeName() const {
  return "vmsg.CSAwardRankInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAwardRankRsp::kInfosFieldNumber;
const int CSAwardRankRsp::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

CSAwardRankRsp::CSAwardRankRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAwardRankRsp::InitAsDefaultInstance() {
}

CSAwardRankRsp::CSAwardRankRsp(const CSAwardRankRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAwardRankRsp::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAwardRankRsp::~CSAwardRankRsp() {
  SharedDtor();
}

void CSAwardRankRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAwardRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAwardRankRsp& CSAwardRankRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSAwardRankRsp* CSAwardRankRsp::default_instance_ = NULL;

CSAwardRankRsp* CSAwardRankRsp::New() const {
  return new CSAwardRankRsp;
}

void CSAwardRankRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    remaintime_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAwardRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSAwardRankInfo Infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Infos;
        if (input->ExpectTag(16)) goto parse_RemainTime;
        break;
      }

      // required int32 RemainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAwardRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSAwardRankInfo Infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->infos(i), output);
  }

  // required int32 RemainTime = 2;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->remaintime(), output);
  }

}

int CSAwardRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 RemainTime = 2;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remaintime());
    }

  }
  // repeated .vmsg.CSAwardRankInfo Infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAwardRankRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAwardRankRsp*>(&from));
}

void CSAwardRankRsp::MergeFrom(const CSAwardRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
}

void CSAwardRankRsp::CopyFrom(const CSAwardRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardRankRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void CSAwardRankRsp::Swap(CSAwardRankRsp* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAwardRankRsp::GetTypeName() const {
  return "vmsg.CSAwardRankRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFetchRankAwardRqst::kRankTypeFieldNumber;
#endif  // !_MSC_VER

CSFetchRankAwardRqst::CSFetchRankAwardRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSFetchRankAwardRqst::InitAsDefaultInstance() {
}

CSFetchRankAwardRqst::CSFetchRankAwardRqst(const CSFetchRankAwardRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSFetchRankAwardRqst::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFetchRankAwardRqst::~CSFetchRankAwardRqst() {
  SharedDtor();
}

void CSFetchRankAwardRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFetchRankAwardRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFetchRankAwardRqst& CSFetchRankAwardRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSFetchRankAwardRqst* CSFetchRankAwardRqst::default_instance_ = NULL;

CSFetchRankAwardRqst* CSFetchRankAwardRqst::New() const {
  return new CSFetchRankAwardRqst;
}

void CSFetchRankAwardRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSFetchRankAwardRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFetchRankAwardRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

}

int CSFetchRankAwardRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFetchRankAwardRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFetchRankAwardRqst*>(&from));
}

void CSFetchRankAwardRqst::MergeFrom(const CSFetchRankAwardRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
}

void CSFetchRankAwardRqst::CopyFrom(const CSFetchRankAwardRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFetchRankAwardRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFetchRankAwardRqst::Swap(CSFetchRankAwardRqst* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFetchRankAwardRqst::GetTypeName() const {
  return "vmsg.CSFetchRankAwardRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerLvUpRsp::kLvFieldNumber;
const int CSPlayerLvUpRsp::kExpFieldNumber;
#endif  // !_MSC_VER

CSPlayerLvUpRsp::CSPlayerLvUpRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerLvUpRsp::InitAsDefaultInstance() {
}

CSPlayerLvUpRsp::CSPlayerLvUpRsp(const CSPlayerLvUpRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerLvUpRsp::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerLvUpRsp::~CSPlayerLvUpRsp() {
  SharedDtor();
}

void CSPlayerLvUpRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerLvUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerLvUpRsp& CSPlayerLvUpRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerLvUpRsp* CSPlayerLvUpRsp::default_instance_ = NULL;

CSPlayerLvUpRsp* CSPlayerLvUpRsp::New() const {
  return new CSPlayerLvUpRsp;
}

void CSPlayerLvUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerLvUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // required uint64 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerLvUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  // required uint64 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->exp(), output);
  }

}

int CSPlayerLvUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint64 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerLvUpRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerLvUpRsp*>(&from));
}

void CSPlayerLvUpRsp::MergeFrom(const CSPlayerLvUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
}

void CSPlayerLvUpRsp::CopyFrom(const CSPlayerLvUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerLvUpRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPlayerLvUpRsp::Swap(CSPlayerLvUpRsp* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerLvUpRsp::GetTypeName() const {
  return "vmsg.CSPlayerLvUpRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSVIPNotify::kVIPLvFieldNumber;
#endif  // !_MSC_VER

CSVIPNotify::CSVIPNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSVIPNotify::InitAsDefaultInstance() {
}

CSVIPNotify::CSVIPNotify(const CSVIPNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSVIPNotify::SharedCtor() {
  _cached_size_ = 0;
  viplv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVIPNotify::~CSVIPNotify() {
  SharedDtor();
}

void CSVIPNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSVIPNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSVIPNotify& CSVIPNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSVIPNotify* CSVIPNotify::default_instance_ = NULL;

CSVIPNotify* CSVIPNotify::New() const {
  return new CSVIPNotify;
}

void CSVIPNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viplv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSVIPNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 VIPLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVIPNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 VIPLv = 1;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viplv(), output);
  }

}

int CSVIPNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 VIPLv = 1;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVIPNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSVIPNotify*>(&from));
}

void CSVIPNotify::MergeFrom(const CSVIPNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
}

void CSVIPNotify::CopyFrom(const CSVIPNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVIPNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSVIPNotify::Swap(CSVIPNotify* other) {
  if (other != this) {
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSVIPNotify::GetTypeName() const {
  return "vmsg.CSVIPNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSVIPInfos::kVIPAwardFieldNumber;
#endif  // !_MSC_VER

CSVIPInfos::CSVIPInfos()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSVIPInfos::InitAsDefaultInstance() {
}

CSVIPInfos::CSVIPInfos(const CSVIPInfos& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSVIPInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVIPInfos::~CSVIPInfos() {
  SharedDtor();
}

void CSVIPInfos::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSVIPInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSVIPInfos& CSVIPInfos::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSVIPInfos* CSVIPInfos::default_instance_ = NULL;

CSVIPInfos* CSVIPInfos::New() const {
  return new CSVIPInfos;
}

void CSVIPInfos::Clear() {
  vipaward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSVIPInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 VIPAward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_vipaward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vipaward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_VIPAward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVIPInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 VIPAward = 1;
  for (int i = 0; i < this->vipaward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->vipaward(i), output);
  }

}

int CSVIPInfos::ByteSize() const {
  int total_size = 0;

  // repeated uint32 VIPAward = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->vipaward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vipaward(i));
    }
    total_size += 1 * this->vipaward_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVIPInfos::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSVIPInfos*>(&from));
}

void CSVIPInfos::MergeFrom(const CSVIPInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipaward_.MergeFrom(from.vipaward_);
}

void CSVIPInfos::CopyFrom(const CSVIPInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVIPInfos::IsInitialized() const {

  return true;
}

void CSVIPInfos::Swap(CSVIPInfos* other) {
  if (other != this) {
    vipaward_.Swap(&other->vipaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSVIPInfos::GetTypeName() const {
  return "vmsg.CSVIPInfos";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFightPowerNotify::kFightPowerFieldNumber;
#endif  // !_MSC_VER

CSFightPowerNotify::CSFightPowerNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSFightPowerNotify::InitAsDefaultInstance() {
}

CSFightPowerNotify::CSFightPowerNotify(const CSFightPowerNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSFightPowerNotify::SharedCtor() {
  _cached_size_ = 0;
  fightpower_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFightPowerNotify::~CSFightPowerNotify() {
  SharedDtor();
}

void CSFightPowerNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFightPowerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFightPowerNotify& CSFightPowerNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSFightPowerNotify* CSFightPowerNotify::default_instance_ = NULL;

CSFightPowerNotify* CSFightPowerNotify::New() const {
  return new CSFightPowerNotify;
}

void CSFightPowerNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fightpower_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSFightPowerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 FightPower = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFightPowerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 FightPower = 1;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fightpower(), output);
  }

}

int CSFightPowerNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 FightPower = 1;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFightPowerNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFightPowerNotify*>(&from));
}

void CSFightPowerNotify::MergeFrom(const CSFightPowerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
  }
}

void CSFightPowerNotify::CopyFrom(const CSFightPowerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFightPowerNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSFightPowerNotify::Swap(CSFightPowerNotify* other) {
  if (other != this) {
    std::swap(fightpower_, other->fightpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFightPowerNotify::GetTypeName() const {
  return "vmsg.CSFightPowerNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSOtherPlayerInfoRsp::kPlayerInfoFieldNumber;
const int CSOtherPlayerInfoRsp::kDetailInfoFieldNumber;
#endif  // !_MSC_VER

CSOtherPlayerInfoRsp::CSOtherPlayerInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSOtherPlayerInfoRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerinfo_ = const_cast< ::vmsg::CSPlayerInfo*>(
      ::vmsg::CSPlayerInfo::internal_default_instance());
#else
  playerinfo_ = const_cast< ::vmsg::CSPlayerInfo*>(&::vmsg::CSPlayerInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  detailinfo_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(
      ::vmsg::CSPlayerDetailInfo::internal_default_instance());
#else
  detailinfo_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(&::vmsg::CSPlayerDetailInfo::default_instance());
#endif
}

CSOtherPlayerInfoRsp::CSOtherPlayerInfoRsp(const CSOtherPlayerInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSOtherPlayerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  detailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOtherPlayerInfoRsp::~CSOtherPlayerInfoRsp() {
  SharedDtor();
}

void CSOtherPlayerInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerinfo_;
    delete detailinfo_;
  }
}

void CSOtherPlayerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSOtherPlayerInfoRsp& CSOtherPlayerInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSOtherPlayerInfoRsp* CSOtherPlayerInfoRsp::default_instance_ = NULL;

CSOtherPlayerInfoRsp* CSOtherPlayerInfoRsp::New() const {
  return new CSOtherPlayerInfoRsp;
}

void CSOtherPlayerInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::vmsg::CSPlayerInfo::Clear();
    }
    if (has_detailinfo()) {
      if (detailinfo_ != NULL) detailinfo_->::vmsg::CSPlayerDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSOtherPlayerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerInfo PlayerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DetailInfo;
        break;
      }

      // required .vmsg.CSPlayerDetailInfo DetailInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DetailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOtherPlayerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerInfo PlayerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerinfo(), output);
  }

  // required .vmsg.CSPlayerDetailInfo DetailInfo = 2;
  if (has_detailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->detailinfo(), output);
  }

}

int CSOtherPlayerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerInfo PlayerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // required .vmsg.CSPlayerDetailInfo DetailInfo = 2;
    if (has_detailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detailinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOtherPlayerInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSOtherPlayerInfoRsp*>(&from));
}

void CSOtherPlayerInfoRsp::MergeFrom(const CSOtherPlayerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::vmsg::CSPlayerInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_detailinfo()) {
      mutable_detailinfo()->::vmsg::CSPlayerDetailInfo::MergeFrom(from.detailinfo());
    }
  }
}

void CSOtherPlayerInfoRsp::CopyFrom(const CSOtherPlayerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOtherPlayerInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  if (has_detailinfo()) {
    if (!this->detailinfo().IsInitialized()) return false;
  }
  return true;
}

void CSOtherPlayerInfoRsp::Swap(CSOtherPlayerInfoRsp* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(detailinfo_, other->detailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSOtherPlayerInfoRsp::GetTypeName() const {
  return "vmsg.CSOtherPlayerInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBlackProductInfo::kProductTypeFieldNumber;
const int CSBlackProductInfo::kProductCfgIDFieldNumber;
const int CSBlackProductInfo::kProductCntFieldNumber;
const int CSBlackProductInfo::kCurrTypeFieldNumber;
const int CSBlackProductInfo::kCurrCntFieldNumber;
const int CSBlackProductInfo::kHasBoughtFieldNumber;
#endif  // !_MSC_VER

CSBlackProductInfo::CSBlackProductInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBlackProductInfo::InitAsDefaultInstance() {
}

CSBlackProductInfo::CSBlackProductInfo(const CSBlackProductInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBlackProductInfo::SharedCtor() {
  _cached_size_ = 0;
  producttype_ = 0u;
  productcfgid_ = 0u;
  productcnt_ = 0u;
  currtype_ = 0u;
  currcnt_ = 0u;
  hasbought_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBlackProductInfo::~CSBlackProductInfo() {
  SharedDtor();
}

void CSBlackProductInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBlackProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBlackProductInfo& CSBlackProductInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSBlackProductInfo* CSBlackProductInfo::default_instance_ = NULL;

CSBlackProductInfo* CSBlackProductInfo::New() const {
  return new CSBlackProductInfo;
}

void CSBlackProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    producttype_ = 0u;
    productcfgid_ = 0u;
    productcnt_ = 0u;
    currtype_ = 0u;
    currcnt_ = 0u;
    hasbought_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBlackProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ProductType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &producttype_)));
          set_has_producttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ProductCfgID;
        break;
      }

      // required uint32 ProductCfgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProductCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productcfgid_)));
          set_has_productcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ProductCnt;
        break;
      }

      // required uint32 ProductCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ProductCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productcnt_)));
          set_has_productcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CurrType;
        break;
      }

      // required uint32 CurrType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currtype_)));
          set_has_currtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CurrCnt;
        break;
      }

      // required uint32 CurrCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurrCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currcnt_)));
          set_has_currcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HasBought;
        break;
      }

      // required uint32 HasBought = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HasBought:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasbought_)));
          set_has_hasbought();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBlackProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ProductType = 1;
  if (has_producttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->producttype(), output);
  }

  // required uint32 ProductCfgID = 2;
  if (has_productcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->productcfgid(), output);
  }

  // required uint32 ProductCnt = 3;
  if (has_productcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->productcnt(), output);
  }

  // required uint32 CurrType = 4;
  if (has_currtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->currtype(), output);
  }

  // required uint32 CurrCnt = 5;
  if (has_currcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currcnt(), output);
  }

  // required uint32 HasBought = 6;
  if (has_hasbought()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hasbought(), output);
  }

}

int CSBlackProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ProductType = 1;
    if (has_producttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->producttype());
    }

    // required uint32 ProductCfgID = 2;
    if (has_productcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productcfgid());
    }

    // required uint32 ProductCnt = 3;
    if (has_productcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productcnt());
    }

    // required uint32 CurrType = 4;
    if (has_currtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currtype());
    }

    // required uint32 CurrCnt = 5;
    if (has_currcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currcnt());
    }

    // required uint32 HasBought = 6;
    if (has_hasbought()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasbought());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBlackProductInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBlackProductInfo*>(&from));
}

void CSBlackProductInfo::MergeFrom(const CSBlackProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_producttype()) {
      set_producttype(from.producttype());
    }
    if (from.has_productcfgid()) {
      set_productcfgid(from.productcfgid());
    }
    if (from.has_productcnt()) {
      set_productcnt(from.productcnt());
    }
    if (from.has_currtype()) {
      set_currtype(from.currtype());
    }
    if (from.has_currcnt()) {
      set_currcnt(from.currcnt());
    }
    if (from.has_hasbought()) {
      set_hasbought(from.hasbought());
    }
  }
}

void CSBlackProductInfo::CopyFrom(const CSBlackProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBlackProductInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSBlackProductInfo::Swap(CSBlackProductInfo* other) {
  if (other != this) {
    std::swap(producttype_, other->producttype_);
    std::swap(productcfgid_, other->productcfgid_);
    std::swap(productcnt_, other->productcnt_);
    std::swap(currtype_, other->currtype_);
    std::swap(currcnt_, other->currcnt_);
    std::swap(hasbought_, other->hasbought_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBlackProductInfo::GetTypeName() const {
  return "vmsg.CSBlackProductInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBlackMarketInfo::kRemainTimeFieldNumber;
const int CSBlackMarketInfo::kResetCostFieldNumber;
const int CSBlackMarketInfo::kRemainResetCntFieldNumber;
const int CSBlackMarketInfo::kProductsFieldNumber;
#endif  // !_MSC_VER

CSBlackMarketInfo::CSBlackMarketInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBlackMarketInfo::InitAsDefaultInstance() {
}

CSBlackMarketInfo::CSBlackMarketInfo(const CSBlackMarketInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBlackMarketInfo::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  resetcost_ = 0u;
  remainresetcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBlackMarketInfo::~CSBlackMarketInfo() {
  SharedDtor();
}

void CSBlackMarketInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBlackMarketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBlackMarketInfo& CSBlackMarketInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSBlackMarketInfo* CSBlackMarketInfo::default_instance_ = NULL;

CSBlackMarketInfo* CSBlackMarketInfo::New() const {
  return new CSBlackMarketInfo;
}

void CSBlackMarketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0u;
    resetcost_ = 0u;
    remainresetcnt_ = 0u;
  }
  products_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBlackMarketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RemainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ResetCost;
        break;
      }

      // required uint32 ResetCost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ResetCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetcost_)));
          set_has_resetcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RemainResetCnt;
        break;
      }

      // required uint32 RemainResetCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainResetCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainresetcnt_)));
          set_has_remainresetcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Products;
        break;
      }

      // repeated .vmsg.CSBlackProductInfo Products = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Products:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_products()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Products;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBlackMarketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RemainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaintime(), output);
  }

  // required uint32 ResetCost = 2;
  if (has_resetcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resetcost(), output);
  }

  // required uint32 RemainResetCnt = 3;
  if (has_remainresetcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remainresetcnt(), output);
  }

  // repeated .vmsg.CSBlackProductInfo Products = 4;
  for (int i = 0; i < this->products_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->products(i), output);
  }

}

int CSBlackMarketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RemainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // required uint32 ResetCost = 2;
    if (has_resetcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetcost());
    }

    // required uint32 RemainResetCnt = 3;
    if (has_remainresetcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainresetcnt());
    }

  }
  // repeated .vmsg.CSBlackProductInfo Products = 4;
  total_size += 1 * this->products_size();
  for (int i = 0; i < this->products_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->products(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBlackMarketInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBlackMarketInfo*>(&from));
}

void CSBlackMarketInfo::MergeFrom(const CSBlackMarketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  products_.MergeFrom(from.products_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_resetcost()) {
      set_resetcost(from.resetcost());
    }
    if (from.has_remainresetcnt()) {
      set_remainresetcnt(from.remainresetcnt());
    }
  }
}

void CSBlackMarketInfo::CopyFrom(const CSBlackMarketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBlackMarketInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < products_size(); i++) {
    if (!this->products(i).IsInitialized()) return false;
  }
  return true;
}

void CSBlackMarketInfo::Swap(CSBlackMarketInfo* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(resetcost_, other->resetcost_);
    std::swap(remainresetcnt_, other->remainresetcnt_);
    products_.Swap(&other->products_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBlackMarketInfo::GetTypeName() const {
  return "vmsg.CSBlackMarketInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQuickLoginRqst::kNeedOSDCastFieldNumber;
#endif  // !_MSC_VER

CSQuickLoginRqst::CSQuickLoginRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQuickLoginRqst::InitAsDefaultInstance() {
}

CSQuickLoginRqst::CSQuickLoginRqst(const CSQuickLoginRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQuickLoginRqst::SharedCtor() {
  _cached_size_ = 0;
  needosdcast_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQuickLoginRqst::~CSQuickLoginRqst() {
  SharedDtor();
}

void CSQuickLoginRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQuickLoginRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQuickLoginRqst& CSQuickLoginRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSQuickLoginRqst* CSQuickLoginRqst::default_instance_ = NULL;

CSQuickLoginRqst* CSQuickLoginRqst::New() const {
  return new CSQuickLoginRqst;
}

void CSQuickLoginRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    needosdcast_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQuickLoginRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NeedOSDCast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needosdcast_)));
          set_has_needosdcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQuickLoginRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 NeedOSDCast = 1;
  if (has_needosdcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->needosdcast(), output);
  }

}

int CSQuickLoginRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 NeedOSDCast = 1;
    if (has_needosdcast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needosdcast());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQuickLoginRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQuickLoginRqst*>(&from));
}

void CSQuickLoginRqst::MergeFrom(const CSQuickLoginRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needosdcast()) {
      set_needosdcast(from.needosdcast());
    }
  }
}

void CSQuickLoginRqst::CopyFrom(const CSQuickLoginRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQuickLoginRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSQuickLoginRqst::Swap(CSQuickLoginRqst* other) {
  if (other != this) {
    std::swap(needosdcast_, other->needosdcast_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQuickLoginRqst::GetTypeName() const {
  return "vmsg.CSQuickLoginRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQuickLoginRsp::kQuickKeyFieldNumber;
#endif  // !_MSC_VER

CSQuickLoginRsp::CSQuickLoginRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQuickLoginRsp::InitAsDefaultInstance() {
}

CSQuickLoginRsp::CSQuickLoginRsp(const CSQuickLoginRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQuickLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  quickkey_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQuickLoginRsp::~CSQuickLoginRsp() {
  SharedDtor();
}

void CSQuickLoginRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQuickLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQuickLoginRsp& CSQuickLoginRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSQuickLoginRsp* CSQuickLoginRsp::default_instance_ = NULL;

CSQuickLoginRsp* CSQuickLoginRsp::New() const {
  return new CSQuickLoginRsp;
}

void CSQuickLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quickkey_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQuickLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 QuickKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quickkey_)));
          set_has_quickkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQuickLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 QuickKey = 1;
  if (has_quickkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->quickkey(), output);
  }

}

int CSQuickLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 QuickKey = 1;
    if (has_quickkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quickkey());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQuickLoginRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQuickLoginRsp*>(&from));
}

void CSQuickLoginRsp::MergeFrom(const CSQuickLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quickkey()) {
      set_quickkey(from.quickkey());
    }
  }
}

void CSQuickLoginRsp::CopyFrom(const CSQuickLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQuickLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSQuickLoginRsp::Swap(CSQuickLoginRsp* other) {
  if (other != this) {
    std::swap(quickkey_, other->quickkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQuickLoginRsp::GetTypeName() const {
  return "vmsg.CSQuickLoginRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyCoinInfo::kRemainCntFieldNumber;
const int CSBuyCoinInfo::kNextCostGoldFieldNumber;
const int CSBuyCoinInfo::kNextCoinFieldNumber;
const int CSBuyCoinInfo::kMaxCntFieldNumber;
#endif  // !_MSC_VER

CSBuyCoinInfo::CSBuyCoinInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyCoinInfo::InitAsDefaultInstance() {
}

CSBuyCoinInfo::CSBuyCoinInfo(const CSBuyCoinInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyCoinInfo::SharedCtor() {
  _cached_size_ = 0;
  remaincnt_ = 0u;
  nextcostgold_ = 0u;
  nextcoin_ = 0u;
  maxcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyCoinInfo::~CSBuyCoinInfo() {
  SharedDtor();
}

void CSBuyCoinInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyCoinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyCoinInfo& CSBuyCoinInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyCoinInfo* CSBuyCoinInfo::default_instance_ = NULL;

CSBuyCoinInfo* CSBuyCoinInfo::New() const {
  return new CSBuyCoinInfo;
}

void CSBuyCoinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaincnt_ = 0u;
    nextcostgold_ = 0u;
    nextcoin_ = 0u;
    maxcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyCoinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RemainCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaincnt_)));
          set_has_remaincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NextCostGold;
        break;
      }

      // required uint32 NextCostGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextCostGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextcostgold_)));
          set_has_nextcostgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_NextCoin;
        break;
      }

      // required uint32 NextCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextcoin_)));
          set_has_nextcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxCnt;
        break;
      }

      // required uint32 MaxCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxcnt_)));
          set_has_maxcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyCoinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RemainCnt = 1;
  if (has_remaincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaincnt(), output);
  }

  // required uint32 NextCostGold = 2;
  if (has_nextcostgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextcostgold(), output);
  }

  // required uint32 NextCoin = 3;
  if (has_nextcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->nextcoin(), output);
  }

  // required uint32 MaxCnt = 4;
  if (has_maxcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxcnt(), output);
  }

}

int CSBuyCoinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RemainCnt = 1;
    if (has_remaincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaincnt());
    }

    // required uint32 NextCostGold = 2;
    if (has_nextcostgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextcostgold());
    }

    // required uint32 NextCoin = 3;
    if (has_nextcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextcoin());
    }

    // required uint32 MaxCnt = 4;
    if (has_maxcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyCoinInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyCoinInfo*>(&from));
}

void CSBuyCoinInfo::MergeFrom(const CSBuyCoinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaincnt()) {
      set_remaincnt(from.remaincnt());
    }
    if (from.has_nextcostgold()) {
      set_nextcostgold(from.nextcostgold());
    }
    if (from.has_nextcoin()) {
      set_nextcoin(from.nextcoin());
    }
    if (from.has_maxcnt()) {
      set_maxcnt(from.maxcnt());
    }
  }
}

void CSBuyCoinInfo::CopyFrom(const CSBuyCoinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyCoinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSBuyCoinInfo::Swap(CSBuyCoinInfo* other) {
  if (other != this) {
    std::swap(remaincnt_, other->remaincnt_);
    std::swap(nextcostgold_, other->nextcostgold_);
    std::swap(nextcoin_, other->nextcoin_);
    std::swap(maxcnt_, other->maxcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyCoinInfo::GetTypeName() const {
  return "vmsg.CSBuyCoinInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyCoinRsp::kInfoFieldNumber;
const int CSBuyCoinRsp::kCritMultiFieldNumber;
const int CSBuyCoinRsp::kCoinFieldNumber;
#endif  // !_MSC_VER

CSBuyCoinRsp::CSBuyCoinRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyCoinRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  info_ = const_cast< ::vmsg::CSBuyCoinInfo*>(
      ::vmsg::CSBuyCoinInfo::internal_default_instance());
#else
  info_ = const_cast< ::vmsg::CSBuyCoinInfo*>(&::vmsg::CSBuyCoinInfo::default_instance());
#endif
}

CSBuyCoinRsp::CSBuyCoinRsp(const CSBuyCoinRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyCoinRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  critmulti_ = 0u;
  coin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyCoinRsp::~CSBuyCoinRsp() {
  SharedDtor();
}

void CSBuyCoinRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete info_;
  }
}

void CSBuyCoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyCoinRsp& CSBuyCoinRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyCoinRsp* CSBuyCoinRsp::default_instance_ = NULL;

CSBuyCoinRsp* CSBuyCoinRsp::New() const {
  return new CSBuyCoinRsp;
}

void CSBuyCoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::vmsg::CSBuyCoinInfo::Clear();
    }
    critmulti_ = 0u;
    coin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyCoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBuyCoinInfo Info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CritMulti;
        break;
      }

      // required uint32 CritMulti = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CritMulti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &critmulti_)));
          set_has_critmulti();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Coin;
        break;
      }

      // required uint32 Coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyCoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBuyCoinInfo Info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->info(), output);
  }

  // required uint32 CritMulti = 2;
  if (has_critmulti()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->critmulti(), output);
  }

  // required uint32 Coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

}

int CSBuyCoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBuyCoinInfo Info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint32 CritMulti = 2;
    if (has_critmulti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->critmulti());
    }

    // required uint32 Coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyCoinRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyCoinRsp*>(&from));
}

void CSBuyCoinRsp::MergeFrom(const CSBuyCoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::vmsg::CSBuyCoinInfo::MergeFrom(from.info());
    }
    if (from.has_critmulti()) {
      set_critmulti(from.critmulti());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
}

void CSBuyCoinRsp::CopyFrom(const CSBuyCoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyCoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void CSBuyCoinRsp::Swap(CSBuyCoinRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(critmulti_, other->critmulti_);
    std::swap(coin_, other->coin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyCoinRsp::GetTypeName() const {
  return "vmsg.CSBuyCoinRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuestRegisterRsp::kGuestOpenIDFieldNumber;
const int CSGuestRegisterRsp::kUinFieldNumber;
#endif  // !_MSC_VER

CSGuestRegisterRsp::CSGuestRegisterRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuestRegisterRsp::InitAsDefaultInstance() {
}

CSGuestRegisterRsp::CSGuestRegisterRsp(const CSGuestRegisterRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuestRegisterRsp::SharedCtor() {
  _cached_size_ = 0;
  guestopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuestRegisterRsp::~CSGuestRegisterRsp() {
  SharedDtor();
}

void CSGuestRegisterRsp::SharedDtor() {
  if (guestopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete guestopenid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuestRegisterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuestRegisterRsp& CSGuestRegisterRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuestRegisterRsp* CSGuestRegisterRsp::default_instance_ = NULL;

CSGuestRegisterRsp* CSGuestRegisterRsp::New() const {
  return new CSGuestRegisterRsp;
}

void CSGuestRegisterRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guestopenid()) {
      if (guestopenid_ != &::google::protobuf::internal::kEmptyString) {
        guestopenid_->clear();
      }
    }
    uin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuestRegisterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string GuestOpenID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guestopenid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Uin;
        break;
      }

      // required uint64 Uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuestRegisterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string GuestOpenID = 1;
  if (has_guestopenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guestopenid(), output);
  }

  // required uint64 Uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->uin(), output);
  }

}

int CSGuestRegisterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string GuestOpenID = 1;
    if (has_guestopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guestopenid());
    }

    // required uint64 Uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuestRegisterRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuestRegisterRsp*>(&from));
}

void CSGuestRegisterRsp::MergeFrom(const CSGuestRegisterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guestopenid()) {
      set_guestopenid(from.guestopenid());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
}

void CSGuestRegisterRsp::CopyFrom(const CSGuestRegisterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuestRegisterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuestRegisterRsp::Swap(CSGuestRegisterRsp* other) {
  if (other != this) {
    std::swap(guestopenid_, other->guestopenid_);
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuestRegisterRsp::GetTypeName() const {
  return "vmsg.CSGuestRegisterRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuestBindRqst::kGuestOpenIDFieldNumber;
const int CSGuestBindRqst::kFormalOpenIDFieldNumber;
#endif  // !_MSC_VER

CSGuestBindRqst::CSGuestBindRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuestBindRqst::InitAsDefaultInstance() {
}

CSGuestBindRqst::CSGuestBindRqst(const CSGuestBindRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuestBindRqst::SharedCtor() {
  _cached_size_ = 0;
  guestopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  formalopenid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuestBindRqst::~CSGuestBindRqst() {
  SharedDtor();
}

void CSGuestBindRqst::SharedDtor() {
  if (guestopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete guestopenid_;
  }
  if (formalopenid_ != &::google::protobuf::internal::kEmptyString) {
    delete formalopenid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuestBindRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuestBindRqst& CSGuestBindRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuestBindRqst* CSGuestBindRqst::default_instance_ = NULL;

CSGuestBindRqst* CSGuestBindRqst::New() const {
  return new CSGuestBindRqst;
}

void CSGuestBindRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guestopenid()) {
      if (guestopenid_ != &::google::protobuf::internal::kEmptyString) {
        guestopenid_->clear();
      }
    }
    if (has_formalopenid()) {
      if (formalopenid_ != &::google::protobuf::internal::kEmptyString) {
        formalopenid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuestBindRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string GuestOpenID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guestopenid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_FormalOpenID;
        break;
      }

      // required string FormalOpenID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FormalOpenID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formalopenid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuestBindRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string GuestOpenID = 1;
  if (has_guestopenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guestopenid(), output);
  }

  // required string FormalOpenID = 2;
  if (has_formalopenid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->formalopenid(), output);
  }

}

int CSGuestBindRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string GuestOpenID = 1;
    if (has_guestopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guestopenid());
    }

    // required string FormalOpenID = 2;
    if (has_formalopenid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formalopenid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuestBindRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuestBindRqst*>(&from));
}

void CSGuestBindRqst::MergeFrom(const CSGuestBindRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guestopenid()) {
      set_guestopenid(from.guestopenid());
    }
    if (from.has_formalopenid()) {
      set_formalopenid(from.formalopenid());
    }
  }
}

void CSGuestBindRqst::CopyFrom(const CSGuestBindRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuestBindRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuestBindRqst::Swap(CSGuestBindRqst* other) {
  if (other != this) {
    std::swap(guestopenid_, other->guestopenid_);
    std::swap(formalopenid_, other->formalopenid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuestBindRqst::GetTypeName() const {
  return "vmsg.CSGuestBindRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEnforceMyselfRqst::kEnforceTypeFieldNumber;
#endif  // !_MSC_VER

CSPlayerEnforceMyselfRqst::CSPlayerEnforceMyselfRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEnforceMyselfRqst::InitAsDefaultInstance() {
}

CSPlayerEnforceMyselfRqst::CSPlayerEnforceMyselfRqst(const CSPlayerEnforceMyselfRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEnforceMyselfRqst::SharedCtor() {
  _cached_size_ = 0;
  enforcetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEnforceMyselfRqst::~CSPlayerEnforceMyselfRqst() {
  SharedDtor();
}

void CSPlayerEnforceMyselfRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEnforceMyselfRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEnforceMyselfRqst& CSPlayerEnforceMyselfRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEnforceMyselfRqst* CSPlayerEnforceMyselfRqst::default_instance_ = NULL;

CSPlayerEnforceMyselfRqst* CSPlayerEnforceMyselfRqst::New() const {
  return new CSPlayerEnforceMyselfRqst;
}

void CSPlayerEnforceMyselfRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    enforcetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEnforceMyselfRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EnforceType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enforcetype_)));
          set_has_enforcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEnforceMyselfRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EnforceType = 1;
  if (has_enforcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enforcetype(), output);
  }

}

int CSPlayerEnforceMyselfRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EnforceType = 1;
    if (has_enforcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enforcetype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEnforceMyselfRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEnforceMyselfRqst*>(&from));
}

void CSPlayerEnforceMyselfRqst::MergeFrom(const CSPlayerEnforceMyselfRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enforcetype()) {
      set_enforcetype(from.enforcetype());
    }
  }
}

void CSPlayerEnforceMyselfRqst::CopyFrom(const CSPlayerEnforceMyselfRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEnforceMyselfRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPlayerEnforceMyselfRqst::Swap(CSPlayerEnforceMyselfRqst* other) {
  if (other != this) {
    std::swap(enforcetype_, other->enforcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEnforceMyselfRqst::GetTypeName() const {
  return "vmsg.CSPlayerEnforceMyselfRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEnforceMyselfRsp::kHPAddFieldNumber;
const int CSPlayerEnforceMyselfRsp::kAtkAddFieldNumber;
const int CSPlayerEnforceMyselfRsp::kDefAddFieldNumber;
const int CSPlayerEnforceMyselfRsp::kTotalHPAddFieldNumber;
const int CSPlayerEnforceMyselfRsp::kTotalAtkAddFieldNumber;
const int CSPlayerEnforceMyselfRsp::kTotalDefAddFieldNumber;
#endif  // !_MSC_VER

CSPlayerEnforceMyselfRsp::CSPlayerEnforceMyselfRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEnforceMyselfRsp::InitAsDefaultInstance() {
}

CSPlayerEnforceMyselfRsp::CSPlayerEnforceMyselfRsp(const CSPlayerEnforceMyselfRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEnforceMyselfRsp::SharedCtor() {
  _cached_size_ = 0;
  hpadd_ = 0;
  atkadd_ = 0;
  defadd_ = 0;
  totalhpadd_ = 0u;
  totalatkadd_ = 0u;
  totaldefadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEnforceMyselfRsp::~CSPlayerEnforceMyselfRsp() {
  SharedDtor();
}

void CSPlayerEnforceMyselfRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEnforceMyselfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEnforceMyselfRsp& CSPlayerEnforceMyselfRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEnforceMyselfRsp* CSPlayerEnforceMyselfRsp::default_instance_ = NULL;

CSPlayerEnforceMyselfRsp* CSPlayerEnforceMyselfRsp::New() const {
  return new CSPlayerEnforceMyselfRsp;
}

void CSPlayerEnforceMyselfRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hpadd_ = 0;
    atkadd_ = 0;
    defadd_ = 0;
    totalhpadd_ = 0u;
    totalatkadd_ = 0u;
    totaldefadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEnforceMyselfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 HPAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpadd_)));
          set_has_hpadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AtkAdd;
        break;
      }

      // required int32 AtkAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atkadd_)));
          set_has_atkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DefAdd;
        break;
      }

      // required int32 DefAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defadd_)));
          set_has_defadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalHPAdd;
        break;
      }

      // required uint32 TotalHPAdd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalHPAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalhpadd_)));
          set_has_totalhpadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalAtkAdd;
        break;
      }

      // required uint32 TotalAtkAdd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalAtkAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalatkadd_)));
          set_has_totalatkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TotalDefAdd;
        break;
      }

      // required uint32 TotalDefAdd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalDefAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldefadd_)));
          set_has_totaldefadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEnforceMyselfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 HPAdd = 1;
  if (has_hpadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hpadd(), output);
  }

  // required int32 AtkAdd = 2;
  if (has_atkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->atkadd(), output);
  }

  // required int32 DefAdd = 3;
  if (has_defadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->defadd(), output);
  }

  // required uint32 TotalHPAdd = 4;
  if (has_totalhpadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalhpadd(), output);
  }

  // required uint32 TotalAtkAdd = 5;
  if (has_totalatkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalatkadd(), output);
  }

  // required uint32 TotalDefAdd = 6;
  if (has_totaldefadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totaldefadd(), output);
  }

}

int CSPlayerEnforceMyselfRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 HPAdd = 1;
    if (has_hpadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpadd());
    }

    // required int32 AtkAdd = 2;
    if (has_atkadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atkadd());
    }

    // required int32 DefAdd = 3;
    if (has_defadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defadd());
    }

    // required uint32 TotalHPAdd = 4;
    if (has_totalhpadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalhpadd());
    }

    // required uint32 TotalAtkAdd = 5;
    if (has_totalatkadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalatkadd());
    }

    // required uint32 TotalDefAdd = 6;
    if (has_totaldefadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldefadd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEnforceMyselfRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEnforceMyselfRsp*>(&from));
}

void CSPlayerEnforceMyselfRsp::MergeFrom(const CSPlayerEnforceMyselfRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hpadd()) {
      set_hpadd(from.hpadd());
    }
    if (from.has_atkadd()) {
      set_atkadd(from.atkadd());
    }
    if (from.has_defadd()) {
      set_defadd(from.defadd());
    }
    if (from.has_totalhpadd()) {
      set_totalhpadd(from.totalhpadd());
    }
    if (from.has_totalatkadd()) {
      set_totalatkadd(from.totalatkadd());
    }
    if (from.has_totaldefadd()) {
      set_totaldefadd(from.totaldefadd());
    }
  }
}

void CSPlayerEnforceMyselfRsp::CopyFrom(const CSPlayerEnforceMyselfRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEnforceMyselfRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSPlayerEnforceMyselfRsp::Swap(CSPlayerEnforceMyselfRsp* other) {
  if (other != this) {
    std::swap(hpadd_, other->hpadd_);
    std::swap(atkadd_, other->atkadd_);
    std::swap(defadd_, other->defadd_);
    std::swap(totalhpadd_, other->totalhpadd_);
    std::swap(totalatkadd_, other->totalatkadd_);
    std::swap(totaldefadd_, other->totaldefadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEnforceMyselfRsp::GetTypeName() const {
  return "vmsg.CSPlayerEnforceMyselfRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEnforceMyselfConfirmRqst::kIsAcceptFieldNumber;
#endif  // !_MSC_VER

CSPlayerEnforceMyselfConfirmRqst::CSPlayerEnforceMyselfConfirmRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEnforceMyselfConfirmRqst::InitAsDefaultInstance() {
}

CSPlayerEnforceMyselfConfirmRqst::CSPlayerEnforceMyselfConfirmRqst(const CSPlayerEnforceMyselfConfirmRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEnforceMyselfConfirmRqst::SharedCtor() {
  _cached_size_ = 0;
  isaccept_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEnforceMyselfConfirmRqst::~CSPlayerEnforceMyselfConfirmRqst() {
  SharedDtor();
}

void CSPlayerEnforceMyselfConfirmRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEnforceMyselfConfirmRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEnforceMyselfConfirmRqst& CSPlayerEnforceMyselfConfirmRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEnforceMyselfConfirmRqst* CSPlayerEnforceMyselfConfirmRqst::default_instance_ = NULL;

CSPlayerEnforceMyselfConfirmRqst* CSPlayerEnforceMyselfConfirmRqst::New() const {
  return new CSPlayerEnforceMyselfConfirmRqst;
}

void CSPlayerEnforceMyselfConfirmRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isaccept_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEnforceMyselfConfirmRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IsAccept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isaccept_)));
          set_has_isaccept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEnforceMyselfConfirmRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IsAccept = 1;
  if (has_isaccept()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isaccept(), output);
  }

}

int CSPlayerEnforceMyselfConfirmRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IsAccept = 1;
    if (has_isaccept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isaccept());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEnforceMyselfConfirmRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEnforceMyselfConfirmRqst*>(&from));
}

void CSPlayerEnforceMyselfConfirmRqst::MergeFrom(const CSPlayerEnforceMyselfConfirmRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isaccept()) {
      set_isaccept(from.isaccept());
    }
  }
}

void CSPlayerEnforceMyselfConfirmRqst::CopyFrom(const CSPlayerEnforceMyselfConfirmRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEnforceMyselfConfirmRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPlayerEnforceMyselfConfirmRqst::Swap(CSPlayerEnforceMyselfConfirmRqst* other) {
  if (other != this) {
    std::swap(isaccept_, other->isaccept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEnforceMyselfConfirmRqst::GetTypeName() const {
  return "vmsg.CSPlayerEnforceMyselfConfirmRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEnforceMyselfConfirmRsp::kTotalHPAddFieldNumber;
const int CSPlayerEnforceMyselfConfirmRsp::kTotalAtkAddFieldNumber;
const int CSPlayerEnforceMyselfConfirmRsp::kTotalDefAddFieldNumber;
#endif  // !_MSC_VER

CSPlayerEnforceMyselfConfirmRsp::CSPlayerEnforceMyselfConfirmRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEnforceMyselfConfirmRsp::InitAsDefaultInstance() {
}

CSPlayerEnforceMyselfConfirmRsp::CSPlayerEnforceMyselfConfirmRsp(const CSPlayerEnforceMyselfConfirmRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEnforceMyselfConfirmRsp::SharedCtor() {
  _cached_size_ = 0;
  totalhpadd_ = 0u;
  totalatkadd_ = 0u;
  totaldefadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEnforceMyselfConfirmRsp::~CSPlayerEnforceMyselfConfirmRsp() {
  SharedDtor();
}

void CSPlayerEnforceMyselfConfirmRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEnforceMyselfConfirmRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEnforceMyselfConfirmRsp& CSPlayerEnforceMyselfConfirmRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEnforceMyselfConfirmRsp* CSPlayerEnforceMyselfConfirmRsp::default_instance_ = NULL;

CSPlayerEnforceMyselfConfirmRsp* CSPlayerEnforceMyselfConfirmRsp::New() const {
  return new CSPlayerEnforceMyselfConfirmRsp;
}

void CSPlayerEnforceMyselfConfirmRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalhpadd_ = 0u;
    totalatkadd_ = 0u;
    totaldefadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEnforceMyselfConfirmRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TotalHPAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalhpadd_)));
          set_has_totalhpadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TotalAtkAdd;
        break;
      }

      // required uint32 TotalAtkAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalAtkAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalatkadd_)));
          set_has_totalatkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TotalDefAdd;
        break;
      }

      // required uint32 TotalDefAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalDefAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldefadd_)));
          set_has_totaldefadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEnforceMyselfConfirmRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TotalHPAdd = 1;
  if (has_totalhpadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalhpadd(), output);
  }

  // required uint32 TotalAtkAdd = 2;
  if (has_totalatkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalatkadd(), output);
  }

  // required uint32 TotalDefAdd = 3;
  if (has_totaldefadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totaldefadd(), output);
  }

}

int CSPlayerEnforceMyselfConfirmRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TotalHPAdd = 1;
    if (has_totalhpadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalhpadd());
    }

    // required uint32 TotalAtkAdd = 2;
    if (has_totalatkadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalatkadd());
    }

    // required uint32 TotalDefAdd = 3;
    if (has_totaldefadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldefadd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEnforceMyselfConfirmRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEnforceMyselfConfirmRsp*>(&from));
}

void CSPlayerEnforceMyselfConfirmRsp::MergeFrom(const CSPlayerEnforceMyselfConfirmRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalhpadd()) {
      set_totalhpadd(from.totalhpadd());
    }
    if (from.has_totalatkadd()) {
      set_totalatkadd(from.totalatkadd());
    }
    if (from.has_totaldefadd()) {
      set_totaldefadd(from.totaldefadd());
    }
  }
}

void CSPlayerEnforceMyselfConfirmRsp::CopyFrom(const CSPlayerEnforceMyselfConfirmRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEnforceMyselfConfirmRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSPlayerEnforceMyselfConfirmRsp::Swap(CSPlayerEnforceMyselfConfirmRsp* other) {
  if (other != this) {
    std::swap(totalhpadd_, other->totalhpadd_);
    std::swap(totalatkadd_, other->totalatkadd_);
    std::swap(totaldefadd_, other->totaldefadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEnforceMyselfConfirmRsp::GetTypeName() const {
  return "vmsg.CSPlayerEnforceMyselfConfirmRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEnforceMyselfQueryRsp::kTotalHPAddFieldNumber;
const int CSPlayerEnforceMyselfQueryRsp::kTotalAtkAddFieldNumber;
const int CSPlayerEnforceMyselfQueryRsp::kTotalDefAddFieldNumber;
#endif  // !_MSC_VER

CSPlayerEnforceMyselfQueryRsp::CSPlayerEnforceMyselfQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEnforceMyselfQueryRsp::InitAsDefaultInstance() {
}

CSPlayerEnforceMyselfQueryRsp::CSPlayerEnforceMyselfQueryRsp(const CSPlayerEnforceMyselfQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEnforceMyselfQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  totalhpadd_ = 0u;
  totalatkadd_ = 0u;
  totaldefadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEnforceMyselfQueryRsp::~CSPlayerEnforceMyselfQueryRsp() {
  SharedDtor();
}

void CSPlayerEnforceMyselfQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerEnforceMyselfQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEnforceMyselfQueryRsp& CSPlayerEnforceMyselfQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEnforceMyselfQueryRsp* CSPlayerEnforceMyselfQueryRsp::default_instance_ = NULL;

CSPlayerEnforceMyselfQueryRsp* CSPlayerEnforceMyselfQueryRsp::New() const {
  return new CSPlayerEnforceMyselfQueryRsp;
}

void CSPlayerEnforceMyselfQueryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalhpadd_ = 0u;
    totalatkadd_ = 0u;
    totaldefadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEnforceMyselfQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TotalHPAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalhpadd_)));
          set_has_totalhpadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TotalAtkAdd;
        break;
      }

      // required uint32 TotalAtkAdd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalAtkAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalatkadd_)));
          set_has_totalatkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TotalDefAdd;
        break;
      }

      // required uint32 TotalDefAdd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalDefAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaldefadd_)));
          set_has_totaldefadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEnforceMyselfQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TotalHPAdd = 1;
  if (has_totalhpadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalhpadd(), output);
  }

  // required uint32 TotalAtkAdd = 2;
  if (has_totalatkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalatkadd(), output);
  }

  // required uint32 TotalDefAdd = 3;
  if (has_totaldefadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totaldefadd(), output);
  }

}

int CSPlayerEnforceMyselfQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TotalHPAdd = 1;
    if (has_totalhpadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalhpadd());
    }

    // required uint32 TotalAtkAdd = 2;
    if (has_totalatkadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalatkadd());
    }

    // required uint32 TotalDefAdd = 3;
    if (has_totaldefadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaldefadd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEnforceMyselfQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEnforceMyselfQueryRsp*>(&from));
}

void CSPlayerEnforceMyselfQueryRsp::MergeFrom(const CSPlayerEnforceMyselfQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalhpadd()) {
      set_totalhpadd(from.totalhpadd());
    }
    if (from.has_totalatkadd()) {
      set_totalatkadd(from.totalatkadd());
    }
    if (from.has_totaldefadd()) {
      set_totaldefadd(from.totaldefadd());
    }
  }
}

void CSPlayerEnforceMyselfQueryRsp::CopyFrom(const CSPlayerEnforceMyselfQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEnforceMyselfQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSPlayerEnforceMyselfQueryRsp::Swap(CSPlayerEnforceMyselfQueryRsp* other) {
  if (other != this) {
    std::swap(totalhpadd_, other->totalhpadd_);
    std::swap(totalatkadd_, other->totalatkadd_);
    std::swap(totaldefadd_, other->totaldefadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEnforceMyselfQueryRsp::GetTypeName() const {
  return "vmsg.CSPlayerEnforceMyselfQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerRequest::kRegPlayerInfoRqstFieldNumber;
const int CSPlayerRequest::kRoleLoginRqstFieldNumber;
const int CSPlayerRequest::kRoleLogoutRqstFieldNumber;
const int CSPlayerRequest::kChangeEvolutionSkillRqstFieldNumber;
const int CSPlayerRequest::kAttrStrengthenRqstFieldNumber;
const int CSPlayerRequest::kWeaponLotRqstFieldNumber;
const int CSPlayerRequest::kFetchRankAwardRqstFieldNumber;
const int CSPlayerRequest::kTalkWithNPCRqstFieldNumber;
const int CSPlayerRequest::kGetVIPAwardRqstFieldNumber;
const int CSPlayerRequest::kQueryOtherPlayerRqstFieldNumber;
const int CSPlayerRequest::kSetSettingParamRqstFieldNumber;
const int CSPlayerRequest::kBuyBlackMarketRqstFieldNumber;
const int CSPlayerRequest::kQuickLoginRqstFieldNumber;
const int CSPlayerRequest::kGuestBindRqstFieldNumber;
const int CSPlayerRequest::kPlayerEnforceRqstFieldNumber;
const int CSPlayerRequest::kPlayerEnforceConfirmRqstFieldNumber;
#endif  // !_MSC_VER

CSPlayerRequest::CSPlayerRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  regplayerinfo_rqst_ = const_cast< ::vmsg::CSRegPlayerInfoRqst*>(
      ::vmsg::CSRegPlayerInfoRqst::internal_default_instance());
#else
  regplayerinfo_rqst_ = const_cast< ::vmsg::CSRegPlayerInfoRqst*>(&::vmsg::CSRegPlayerInfoRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolelogin_rqst_ = const_cast< ::vmsg::CSRoleLoginRqst*>(
      ::vmsg::CSRoleLoginRqst::internal_default_instance());
#else
  rolelogin_rqst_ = const_cast< ::vmsg::CSRoleLoginRqst*>(&::vmsg::CSRoleLoginRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolelogout_rqst_ = const_cast< ::vmsg::CSRoleLogoutRqst*>(
      ::vmsg::CSRoleLogoutRqst::internal_default_instance());
#else
  rolelogout_rqst_ = const_cast< ::vmsg::CSRoleLogoutRqst*>(&::vmsg::CSRoleLogoutRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changeevolutionskill_rqst_ = const_cast< ::vmsg::CSChangePlayerEvolutionSkillRqst*>(
      ::vmsg::CSChangePlayerEvolutionSkillRqst::internal_default_instance());
#else
  changeevolutionskill_rqst_ = const_cast< ::vmsg::CSChangePlayerEvolutionSkillRqst*>(&::vmsg::CSChangePlayerEvolutionSkillRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attrstrengthen_rqst_ = const_cast< ::vmsg::CSAttrStrengthenRqst*>(
      ::vmsg::CSAttrStrengthenRqst::internal_default_instance());
#else
  attrstrengthen_rqst_ = const_cast< ::vmsg::CSAttrStrengthenRqst*>(&::vmsg::CSAttrStrengthenRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weaponlot_rqst_ = const_cast< ::vmsg::CSWeaponLotRqst*>(
      ::vmsg::CSWeaponLotRqst::internal_default_instance());
#else
  weaponlot_rqst_ = const_cast< ::vmsg::CSWeaponLotRqst*>(&::vmsg::CSWeaponLotRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fetchrankaward_rqst_ = const_cast< ::vmsg::CSFetchRankAwardRqst*>(
      ::vmsg::CSFetchRankAwardRqst::internal_default_instance());
#else
  fetchrankaward_rqst_ = const_cast< ::vmsg::CSFetchRankAwardRqst*>(&::vmsg::CSFetchRankAwardRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  setsettingparam_rqst_ = const_cast< ::vmsg::CSSetSettingParamRqst*>(
      ::vmsg::CSSetSettingParamRqst::internal_default_instance());
#else
  setsettingparam_rqst_ = const_cast< ::vmsg::CSSetSettingParamRqst*>(&::vmsg::CSSetSettingParamRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  quicklogin_rqst_ = const_cast< ::vmsg::CSQuickLoginRqst*>(
      ::vmsg::CSQuickLoginRqst::internal_default_instance());
#else
  quicklogin_rqst_ = const_cast< ::vmsg::CSQuickLoginRqst*>(&::vmsg::CSQuickLoginRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guestbind_rqst_ = const_cast< ::vmsg::CSGuestBindRqst*>(
      ::vmsg::CSGuestBindRqst::internal_default_instance());
#else
  guestbind_rqst_ = const_cast< ::vmsg::CSGuestBindRqst*>(&::vmsg::CSGuestBindRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerenforce_rqst_ = const_cast< ::vmsg::CSPlayerEnforceMyselfRqst*>(
      ::vmsg::CSPlayerEnforceMyselfRqst::internal_default_instance());
#else
  playerenforce_rqst_ = const_cast< ::vmsg::CSPlayerEnforceMyselfRqst*>(&::vmsg::CSPlayerEnforceMyselfRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerenforceconfirm_rqst_ = const_cast< ::vmsg::CSPlayerEnforceMyselfConfirmRqst*>(
      ::vmsg::CSPlayerEnforceMyselfConfirmRqst::internal_default_instance());
#else
  playerenforceconfirm_rqst_ = const_cast< ::vmsg::CSPlayerEnforceMyselfConfirmRqst*>(&::vmsg::CSPlayerEnforceMyselfConfirmRqst::default_instance());
#endif
}

CSPlayerRequest::CSPlayerRequest(const CSPlayerRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerRequest::SharedCtor() {
  _cached_size_ = 0;
  regplayerinfo_rqst_ = NULL;
  rolelogin_rqst_ = NULL;
  rolelogout_rqst_ = NULL;
  changeevolutionskill_rqst_ = NULL;
  attrstrengthen_rqst_ = NULL;
  weaponlot_rqst_ = NULL;
  fetchrankaward_rqst_ = NULL;
  talkwithnpc_rqst_ = 0u;
  getvipaward_rqst_ = 0u;
  queryotherplayer_rqst_ = GOOGLE_ULONGLONG(0);
  setsettingparam_rqst_ = NULL;
  buyblackmarket_rqst_ = 0u;
  quicklogin_rqst_ = NULL;
  guestbind_rqst_ = NULL;
  playerenforce_rqst_ = NULL;
  playerenforceconfirm_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerRequest::~CSPlayerRequest() {
  SharedDtor();
}

void CSPlayerRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete regplayerinfo_rqst_;
    delete rolelogin_rqst_;
    delete rolelogout_rqst_;
    delete changeevolutionskill_rqst_;
    delete attrstrengthen_rqst_;
    delete weaponlot_rqst_;
    delete fetchrankaward_rqst_;
    delete setsettingparam_rqst_;
    delete quicklogin_rqst_;
    delete guestbind_rqst_;
    delete playerenforce_rqst_;
    delete playerenforceconfirm_rqst_;
  }
}

void CSPlayerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerRequest& CSPlayerRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerRequest* CSPlayerRequest::default_instance_ = NULL;

CSPlayerRequest* CSPlayerRequest::New() const {
  return new CSPlayerRequest;
}

void CSPlayerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regplayerinfo_rqst()) {
      if (regplayerinfo_rqst_ != NULL) regplayerinfo_rqst_->::vmsg::CSRegPlayerInfoRqst::Clear();
    }
    if (has_rolelogin_rqst()) {
      if (rolelogin_rqst_ != NULL) rolelogin_rqst_->::vmsg::CSRoleLoginRqst::Clear();
    }
    if (has_rolelogout_rqst()) {
      if (rolelogout_rqst_ != NULL) rolelogout_rqst_->::vmsg::CSRoleLogoutRqst::Clear();
    }
    if (has_changeevolutionskill_rqst()) {
      if (changeevolutionskill_rqst_ != NULL) changeevolutionskill_rqst_->::vmsg::CSChangePlayerEvolutionSkillRqst::Clear();
    }
    if (has_attrstrengthen_rqst()) {
      if (attrstrengthen_rqst_ != NULL) attrstrengthen_rqst_->::vmsg::CSAttrStrengthenRqst::Clear();
    }
    if (has_weaponlot_rqst()) {
      if (weaponlot_rqst_ != NULL) weaponlot_rqst_->::vmsg::CSWeaponLotRqst::Clear();
    }
    if (has_fetchrankaward_rqst()) {
      if (fetchrankaward_rqst_ != NULL) fetchrankaward_rqst_->::vmsg::CSFetchRankAwardRqst::Clear();
    }
    talkwithnpc_rqst_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    getvipaward_rqst_ = 0u;
    queryotherplayer_rqst_ = GOOGLE_ULONGLONG(0);
    if (has_setsettingparam_rqst()) {
      if (setsettingparam_rqst_ != NULL) setsettingparam_rqst_->::vmsg::CSSetSettingParamRqst::Clear();
    }
    buyblackmarket_rqst_ = 0u;
    if (has_quicklogin_rqst()) {
      if (quicklogin_rqst_ != NULL) quicklogin_rqst_->::vmsg::CSQuickLoginRqst::Clear();
    }
    if (has_guestbind_rqst()) {
      if (guestbind_rqst_ != NULL) guestbind_rqst_->::vmsg::CSGuestBindRqst::Clear();
    }
    if (has_playerenforce_rqst()) {
      if (playerenforce_rqst_ != NULL) playerenforce_rqst_->::vmsg::CSPlayerEnforceMyselfRqst::Clear();
    }
    if (has_playerenforceconfirm_rqst()) {
      if (playerenforceconfirm_rqst_ != NULL) playerenforceconfirm_rqst_->::vmsg::CSPlayerEnforceMyselfConfirmRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSRegPlayerInfoRqst RegPlayerInfo_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regplayerinfo_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RoleLogin_Rqst;
        break;
      }

      // optional .vmsg.CSRoleLoginRqst RoleLogin_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleLogin_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolelogin_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RoleLogout_Rqst;
        break;
      }

      // optional .vmsg.CSRoleLogoutRqst RoleLogout_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleLogout_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolelogout_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ChangeEvolutionSkill_Rqst;
        break;
      }

      // optional .vmsg.CSChangePlayerEvolutionSkillRqst ChangeEvolutionSkill_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeEvolutionSkill_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeevolutionskill_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AttrStrengthen_Rqst;
        break;
      }

      // optional .vmsg.CSAttrStrengthenRqst AttrStrengthen_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttrStrengthen_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrstrengthen_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_WeaponLot_Rqst;
        break;
      }

      // optional .vmsg.CSWeaponLotRqst WeaponLot_Rqst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponLot_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weaponlot_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_FetchRankAward_Rqst;
        break;
      }

      // optional .vmsg.CSFetchRankAwardRqst FetchRankAward_Rqst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FetchRankAward_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchrankaward_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_TalkWithNPC_Rqst;
        break;
      }

      // optional uint32 TalkWithNPC_Rqst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TalkWithNPC_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkwithnpc_rqst_)));
          set_has_talkwithnpc_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GetVIPAward_Rqst;
        break;
      }

      // optional uint32 GetVIPAward_Rqst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GetVIPAward_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getvipaward_rqst_)));
          set_has_getvipaward_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_QueryOtherPlayer_Rqst;
        break;
      }

      // optional uint64 QueryOtherPlayer_Rqst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QueryOtherPlayer_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &queryotherplayer_rqst_)));
          set_has_queryotherplayer_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_SetSettingParam_Rqst;
        break;
      }

      // optional .vmsg.CSSetSettingParamRqst SetSettingParam_Rqst = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SetSettingParam_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_setsettingparam_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_BuyBlackMarket_Rqst;
        break;
      }

      // optional uint32 BuyBlackMarket_Rqst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyBlackMarket_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyblackmarket_rqst_)));
          set_has_buyblackmarket_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_QuickLogin_Rqst;
        break;
      }

      // optional .vmsg.CSQuickLoginRqst QuickLogin_Rqst = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuickLogin_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quicklogin_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_GuestBind_Rqst;
        break;
      }

      // optional .vmsg.CSGuestBindRqst GuestBind_Rqst = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuestBind_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guestbind_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_PlayerEnforce_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerEnforceMyselfRqst PlayerEnforce_Rqst = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEnforce_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerenforce_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_PlayerEnforceConfirm_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerEnforceMyselfConfirmRqst PlayerEnforceConfirm_Rqst = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEnforceConfirm_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerenforceconfirm_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSRegPlayerInfoRqst RegPlayerInfo_Rqst = 1;
  if (has_regplayerinfo_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->regplayerinfo_rqst(), output);
  }

  // optional .vmsg.CSRoleLoginRqst RoleLogin_Rqst = 2;
  if (has_rolelogin_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rolelogin_rqst(), output);
  }

  // optional .vmsg.CSRoleLogoutRqst RoleLogout_Rqst = 3;
  if (has_rolelogout_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rolelogout_rqst(), output);
  }

  // optional .vmsg.CSChangePlayerEvolutionSkillRqst ChangeEvolutionSkill_Rqst = 4;
  if (has_changeevolutionskill_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->changeevolutionskill_rqst(), output);
  }

  // optional .vmsg.CSAttrStrengthenRqst AttrStrengthen_Rqst = 5;
  if (has_attrstrengthen_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attrstrengthen_rqst(), output);
  }

  // optional .vmsg.CSWeaponLotRqst WeaponLot_Rqst = 6;
  if (has_weaponlot_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->weaponlot_rqst(), output);
  }

  // optional .vmsg.CSFetchRankAwardRqst FetchRankAward_Rqst = 7;
  if (has_fetchrankaward_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->fetchrankaward_rqst(), output);
  }

  // optional uint32 TalkWithNPC_Rqst = 8;
  if (has_talkwithnpc_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->talkwithnpc_rqst(), output);
  }

  // optional uint32 GetVIPAward_Rqst = 9;
  if (has_getvipaward_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->getvipaward_rqst(), output);
  }

  // optional uint64 QueryOtherPlayer_Rqst = 10;
  if (has_queryotherplayer_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->queryotherplayer_rqst(), output);
  }

  // optional .vmsg.CSSetSettingParamRqst SetSettingParam_Rqst = 11;
  if (has_setsettingparam_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->setsettingparam_rqst(), output);
  }

  // optional uint32 BuyBlackMarket_Rqst = 12;
  if (has_buyblackmarket_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->buyblackmarket_rqst(), output);
  }

  // optional .vmsg.CSQuickLoginRqst QuickLogin_Rqst = 13;
  if (has_quicklogin_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->quicklogin_rqst(), output);
  }

  // optional .vmsg.CSGuestBindRqst GuestBind_Rqst = 14;
  if (has_guestbind_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->guestbind_rqst(), output);
  }

  // optional .vmsg.CSPlayerEnforceMyselfRqst PlayerEnforce_Rqst = 15;
  if (has_playerenforce_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->playerenforce_rqst(), output);
  }

  // optional .vmsg.CSPlayerEnforceMyselfConfirmRqst PlayerEnforceConfirm_Rqst = 16;
  if (has_playerenforceconfirm_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->playerenforceconfirm_rqst(), output);
  }

}

int CSPlayerRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSRegPlayerInfoRqst RegPlayerInfo_Rqst = 1;
    if (has_regplayerinfo_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regplayerinfo_rqst());
    }

    // optional .vmsg.CSRoleLoginRqst RoleLogin_Rqst = 2;
    if (has_rolelogin_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolelogin_rqst());
    }

    // optional .vmsg.CSRoleLogoutRqst RoleLogout_Rqst = 3;
    if (has_rolelogout_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolelogout_rqst());
    }

    // optional .vmsg.CSChangePlayerEvolutionSkillRqst ChangeEvolutionSkill_Rqst = 4;
    if (has_changeevolutionskill_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeevolutionskill_rqst());
    }

    // optional .vmsg.CSAttrStrengthenRqst AttrStrengthen_Rqst = 5;
    if (has_attrstrengthen_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrstrengthen_rqst());
    }

    // optional .vmsg.CSWeaponLotRqst WeaponLot_Rqst = 6;
    if (has_weaponlot_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weaponlot_rqst());
    }

    // optional .vmsg.CSFetchRankAwardRqst FetchRankAward_Rqst = 7;
    if (has_fetchrankaward_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchrankaward_rqst());
    }

    // optional uint32 TalkWithNPC_Rqst = 8;
    if (has_talkwithnpc_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkwithnpc_rqst());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 GetVIPAward_Rqst = 9;
    if (has_getvipaward_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getvipaward_rqst());
    }

    // optional uint64 QueryOtherPlayer_Rqst = 10;
    if (has_queryotherplayer_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->queryotherplayer_rqst());
    }

    // optional .vmsg.CSSetSettingParamRqst SetSettingParam_Rqst = 11;
    if (has_setsettingparam_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->setsettingparam_rqst());
    }

    // optional uint32 BuyBlackMarket_Rqst = 12;
    if (has_buyblackmarket_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyblackmarket_rqst());
    }

    // optional .vmsg.CSQuickLoginRqst QuickLogin_Rqst = 13;
    if (has_quicklogin_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quicklogin_rqst());
    }

    // optional .vmsg.CSGuestBindRqst GuestBind_Rqst = 14;
    if (has_guestbind_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guestbind_rqst());
    }

    // optional .vmsg.CSPlayerEnforceMyselfRqst PlayerEnforce_Rqst = 15;
    if (has_playerenforce_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerenforce_rqst());
    }

    // optional .vmsg.CSPlayerEnforceMyselfConfirmRqst PlayerEnforceConfirm_Rqst = 16;
    if (has_playerenforceconfirm_rqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerenforceconfirm_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerRequest*>(&from));
}

void CSPlayerRequest::MergeFrom(const CSPlayerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regplayerinfo_rqst()) {
      mutable_regplayerinfo_rqst()->::vmsg::CSRegPlayerInfoRqst::MergeFrom(from.regplayerinfo_rqst());
    }
    if (from.has_rolelogin_rqst()) {
      mutable_rolelogin_rqst()->::vmsg::CSRoleLoginRqst::MergeFrom(from.rolelogin_rqst());
    }
    if (from.has_rolelogout_rqst()) {
      mutable_rolelogout_rqst()->::vmsg::CSRoleLogoutRqst::MergeFrom(from.rolelogout_rqst());
    }
    if (from.has_changeevolutionskill_rqst()) {
      mutable_changeevolutionskill_rqst()->::vmsg::CSChangePlayerEvolutionSkillRqst::MergeFrom(from.changeevolutionskill_rqst());
    }
    if (from.has_attrstrengthen_rqst()) {
      mutable_attrstrengthen_rqst()->::vmsg::CSAttrStrengthenRqst::MergeFrom(from.attrstrengthen_rqst());
    }
    if (from.has_weaponlot_rqst()) {
      mutable_weaponlot_rqst()->::vmsg::CSWeaponLotRqst::MergeFrom(from.weaponlot_rqst());
    }
    if (from.has_fetchrankaward_rqst()) {
      mutable_fetchrankaward_rqst()->::vmsg::CSFetchRankAwardRqst::MergeFrom(from.fetchrankaward_rqst());
    }
    if (from.has_talkwithnpc_rqst()) {
      set_talkwithnpc_rqst(from.talkwithnpc_rqst());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_getvipaward_rqst()) {
      set_getvipaward_rqst(from.getvipaward_rqst());
    }
    if (from.has_queryotherplayer_rqst()) {
      set_queryotherplayer_rqst(from.queryotherplayer_rqst());
    }
    if (from.has_setsettingparam_rqst()) {
      mutable_setsettingparam_rqst()->::vmsg::CSSetSettingParamRqst::MergeFrom(from.setsettingparam_rqst());
    }
    if (from.has_buyblackmarket_rqst()) {
      set_buyblackmarket_rqst(from.buyblackmarket_rqst());
    }
    if (from.has_quicklogin_rqst()) {
      mutable_quicklogin_rqst()->::vmsg::CSQuickLoginRqst::MergeFrom(from.quicklogin_rqst());
    }
    if (from.has_guestbind_rqst()) {
      mutable_guestbind_rqst()->::vmsg::CSGuestBindRqst::MergeFrom(from.guestbind_rqst());
    }
    if (from.has_playerenforce_rqst()) {
      mutable_playerenforce_rqst()->::vmsg::CSPlayerEnforceMyselfRqst::MergeFrom(from.playerenforce_rqst());
    }
    if (from.has_playerenforceconfirm_rqst()) {
      mutable_playerenforceconfirm_rqst()->::vmsg::CSPlayerEnforceMyselfConfirmRqst::MergeFrom(from.playerenforceconfirm_rqst());
    }
  }
}

void CSPlayerRequest::CopyFrom(const CSPlayerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerRequest::IsInitialized() const {

  if (has_regplayerinfo_rqst()) {
    if (!this->regplayerinfo_rqst().IsInitialized()) return false;
  }
  if (has_rolelogin_rqst()) {
    if (!this->rolelogin_rqst().IsInitialized()) return false;
  }
  if (has_rolelogout_rqst()) {
    if (!this->rolelogout_rqst().IsInitialized()) return false;
  }
  if (has_changeevolutionskill_rqst()) {
    if (!this->changeevolutionskill_rqst().IsInitialized()) return false;
  }
  if (has_attrstrengthen_rqst()) {
    if (!this->attrstrengthen_rqst().IsInitialized()) return false;
  }
  if (has_weaponlot_rqst()) {
    if (!this->weaponlot_rqst().IsInitialized()) return false;
  }
  if (has_fetchrankaward_rqst()) {
    if (!this->fetchrankaward_rqst().IsInitialized()) return false;
  }
  if (has_setsettingparam_rqst()) {
    if (!this->setsettingparam_rqst().IsInitialized()) return false;
  }
  if (has_quicklogin_rqst()) {
    if (!this->quicklogin_rqst().IsInitialized()) return false;
  }
  if (has_guestbind_rqst()) {
    if (!this->guestbind_rqst().IsInitialized()) return false;
  }
  if (has_playerenforce_rqst()) {
    if (!this->playerenforce_rqst().IsInitialized()) return false;
  }
  if (has_playerenforceconfirm_rqst()) {
    if (!this->playerenforceconfirm_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerRequest::Swap(CSPlayerRequest* other) {
  if (other != this) {
    std::swap(regplayerinfo_rqst_, other->regplayerinfo_rqst_);
    std::swap(rolelogin_rqst_, other->rolelogin_rqst_);
    std::swap(rolelogout_rqst_, other->rolelogout_rqst_);
    std::swap(changeevolutionskill_rqst_, other->changeevolutionskill_rqst_);
    std::swap(attrstrengthen_rqst_, other->attrstrengthen_rqst_);
    std::swap(weaponlot_rqst_, other->weaponlot_rqst_);
    std::swap(fetchrankaward_rqst_, other->fetchrankaward_rqst_);
    std::swap(talkwithnpc_rqst_, other->talkwithnpc_rqst_);
    std::swap(getvipaward_rqst_, other->getvipaward_rqst_);
    std::swap(queryotherplayer_rqst_, other->queryotherplayer_rqst_);
    std::swap(setsettingparam_rqst_, other->setsettingparam_rqst_);
    std::swap(buyblackmarket_rqst_, other->buyblackmarket_rqst_);
    std::swap(quicklogin_rqst_, other->quicklogin_rqst_);
    std::swap(guestbind_rqst_, other->guestbind_rqst_);
    std::swap(playerenforce_rqst_, other->playerenforce_rqst_);
    std::swap(playerenforceconfirm_rqst_, other->playerenforceconfirm_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerRequest::GetTypeName() const {
  return "vmsg.CSPlayerRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerRespond::kRegPlayerInfoRspFieldNumber;
const int CSPlayerRespond::kQueryPlayerInfoRspFieldNumber;
const int CSPlayerRespond::kChangeArmorRspFieldNumber;
const int CSPlayerRespond::kRoleLstRspFieldNumber;
const int CSPlayerRespond::kRoleLoginRspFieldNumber;
const int CSPlayerRespond::kRoleLogoutRspFieldNumber;
const int CSPlayerRespond::kManualNotifyFieldNumber;
const int CSPlayerRespond::kQueryBuyManualRspFieldNumber;
const int CSPlayerRespond::kBuyManualRspFieldNumber;
const int CSPlayerRespond::kQueryManualRspFieldNumber;
const int CSPlayerRespond::kQueryDetailInfoRspFieldNumber;
const int CSPlayerRespond::kQueryEvolutionRspFieldNumber;
const int CSPlayerRespond::kQueryEvolutionSkillRspFieldNumber;
const int CSPlayerRespond::kChangeEvolutionSkillRspFieldNumber;
const int CSPlayerRespond::kEvolutionRspFieldNumber;
const int CSPlayerRespond::kQueryAttrStengthenRspFieldNumber;
const int CSPlayerRespond::kAttrStengthenRspFieldNumber;
const int CSPlayerRespond::kQueryWeaponLotRspFieldNumber;
const int CSPlayerRespond::kWeaponLotRspFieldNumber;
const int CSPlayerRespond::kQueryAwardRankRspFieldNumber;
const int CSPlayerRespond::kFetchRankAwardRspFieldNumber;
const int CSPlayerRespond::kPlayerLvUpRspFieldNumber;
const int CSPlayerRespond::kPlayerCoinNotifyFieldNumber;
const int CSPlayerRespond::kVIPNotifyFieldNumber;
const int CSPlayerRespond::kQueryVIPInfoRspFieldNumber;
const int CSPlayerRespond::kFightPowerNotifyFieldNumber;
const int CSPlayerRespond::kQueryOtherPlayerRspFieldNumber;
const int CSPlayerRespond::kQueryBlackMarketRspFieldNumber;
const int CSPlayerRespond::kBuyBlackMarketRspFieldNumber;
const int CSPlayerRespond::kResetBlackMarketRspFieldNumber;
const int CSPlayerRespond::kQuickLoginRspFieldNumber;
const int CSPlayerRespond::kQueryBuyCoinRspFieldNumber;
const int CSPlayerRespond::kBuyCoinRspFieldNumber;
const int CSPlayerRespond::kDailyRegRspFieldNumber;
const int CSPlayerRespond::kGetMonthCardAwardRspFieldNumber;
const int CSPlayerRespond::kPushMonthCardNotifyFieldNumber;
const int CSPlayerRespond::kClaimedManualFieldNumber;
const int CSPlayerRespond::kGuestRegisterRspFieldNumber;
const int CSPlayerRespond::kPlayerEnforceRspFieldNumber;
const int CSPlayerRespond::kPlayerEnforceConfirmRspFieldNumber;
const int CSPlayerRespond::kPlayerEnforceQueryRspFieldNumber;
#endif  // !_MSC_VER

CSPlayerRespond::CSPlayerRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  regplayerinfo_rsp_ = const_cast< ::vmsg::CSRegPlayerInfoRsp*>(
      ::vmsg::CSRegPlayerInfoRsp::internal_default_instance());
#else
  regplayerinfo_rsp_ = const_cast< ::vmsg::CSRegPlayerInfoRsp*>(&::vmsg::CSRegPlayerInfoRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryplayerinfo_rsp_ = const_cast< ::vmsg::CSQueryPlayerInfoRsp*>(
      ::vmsg::CSQueryPlayerInfoRsp::internal_default_instance());
#else
  queryplayerinfo_rsp_ = const_cast< ::vmsg::CSQueryPlayerInfoRsp*>(&::vmsg::CSQueryPlayerInfoRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changearmor_rsp_ = const_cast< ::vmsg::CSChangeArmorRsp*>(
      ::vmsg::CSChangeArmorRsp::internal_default_instance());
#else
  changearmor_rsp_ = const_cast< ::vmsg::CSChangeArmorRsp*>(&::vmsg::CSChangeArmorRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolelst_rsp_ = const_cast< ::vmsg::CSQueryRoleLstRsp*>(
      ::vmsg::CSQueryRoleLstRsp::internal_default_instance());
#else
  rolelst_rsp_ = const_cast< ::vmsg::CSQueryRoleLstRsp*>(&::vmsg::CSQueryRoleLstRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolelogin_rsp_ = const_cast< ::vmsg::CSRoleLoginRsp*>(
      ::vmsg::CSRoleLoginRsp::internal_default_instance());
#else
  rolelogin_rsp_ = const_cast< ::vmsg::CSRoleLoginRsp*>(&::vmsg::CSRoleLoginRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rolelogout_rsp_ = const_cast< ::vmsg::CSRoleLogoutRsp*>(
      ::vmsg::CSRoleLogoutRsp::internal_default_instance());
#else
  rolelogout_rsp_ = const_cast< ::vmsg::CSRoleLogoutRsp*>(&::vmsg::CSRoleLogoutRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  manual_notify_ = const_cast< ::vmsg::CSPlayerManualNotify*>(
      ::vmsg::CSPlayerManualNotify::internal_default_instance());
#else
  manual_notify_ = const_cast< ::vmsg::CSPlayerManualNotify*>(&::vmsg::CSPlayerManualNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querybuymanual_rsp_ = const_cast< ::vmsg::CSBuyManualInfo*>(
      ::vmsg::CSBuyManualInfo::internal_default_instance());
#else
  querybuymanual_rsp_ = const_cast< ::vmsg::CSBuyManualInfo*>(&::vmsg::CSBuyManualInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buymanual_rsp_ = const_cast< ::vmsg::CSBuyManualInfo*>(
      ::vmsg::CSBuyManualInfo::internal_default_instance());
#else
  buymanual_rsp_ = const_cast< ::vmsg::CSBuyManualInfo*>(&::vmsg::CSBuyManualInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querymanual_rsp_ = const_cast< ::vmsg::CSQueryPlayerManualRsp*>(
      ::vmsg::CSQueryPlayerManualRsp::internal_default_instance());
#else
  querymanual_rsp_ = const_cast< ::vmsg::CSQueryPlayerManualRsp*>(&::vmsg::CSQueryPlayerManualRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querydetailinfo_rsp_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(
      ::vmsg::CSPlayerDetailInfo::internal_default_instance());
#else
  querydetailinfo_rsp_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(&::vmsg::CSPlayerDetailInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryevolution_rsp_ = const_cast< ::vmsg::CSPlayerEvolutionInfo*>(
      ::vmsg::CSPlayerEvolutionInfo::internal_default_instance());
#else
  queryevolution_rsp_ = const_cast< ::vmsg::CSPlayerEvolutionInfo*>(&::vmsg::CSPlayerEvolutionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryevolutionskill_rsp_ = const_cast< ::vmsg::CSPlayerEvolutionSkillInfo*>(
      ::vmsg::CSPlayerEvolutionSkillInfo::internal_default_instance());
#else
  queryevolutionskill_rsp_ = const_cast< ::vmsg::CSPlayerEvolutionSkillInfo*>(&::vmsg::CSPlayerEvolutionSkillInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changeevolutionskill_rsp_ = const_cast< ::vmsg::CSChangePlayerEvolutionSkillRsp*>(
      ::vmsg::CSChangePlayerEvolutionSkillRsp::internal_default_instance());
#else
  changeevolutionskill_rsp_ = const_cast< ::vmsg::CSChangePlayerEvolutionSkillRsp*>(&::vmsg::CSChangePlayerEvolutionSkillRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  evolution_rsp_ = const_cast< ::vmsg::CSPlayerEvolutionInfo*>(
      ::vmsg::CSPlayerEvolutionInfo::internal_default_instance());
#else
  evolution_rsp_ = const_cast< ::vmsg::CSPlayerEvolutionInfo*>(&::vmsg::CSPlayerEvolutionInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryattrstengthen_rsp_ = const_cast< ::vmsg::CSAttrStrengthenInfo*>(
      ::vmsg::CSAttrStrengthenInfo::internal_default_instance());
#else
  queryattrstengthen_rsp_ = const_cast< ::vmsg::CSAttrStrengthenInfo*>(&::vmsg::CSAttrStrengthenInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attrstengthen_rsp_ = const_cast< ::vmsg::CSAttrStrengthenInfo*>(
      ::vmsg::CSAttrStrengthenInfo::internal_default_instance());
#else
  attrstengthen_rsp_ = const_cast< ::vmsg::CSAttrStrengthenInfo*>(&::vmsg::CSAttrStrengthenInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryweaponlot_rsp_ = const_cast< ::vmsg::CSWeaponLotQueryRsp*>(
      ::vmsg::CSWeaponLotQueryRsp::internal_default_instance());
#else
  queryweaponlot_rsp_ = const_cast< ::vmsg::CSWeaponLotQueryRsp*>(&::vmsg::CSWeaponLotQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weaponlot_rsp_ = const_cast< ::vmsg::CSWeaponLotRsp*>(
      ::vmsg::CSWeaponLotRsp::internal_default_instance());
#else
  weaponlot_rsp_ = const_cast< ::vmsg::CSWeaponLotRsp*>(&::vmsg::CSWeaponLotRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryawardrank_rsp_ = const_cast< ::vmsg::CSAwardRankRsp*>(
      ::vmsg::CSAwardRankRsp::internal_default_instance());
#else
  queryawardrank_rsp_ = const_cast< ::vmsg::CSAwardRankRsp*>(&::vmsg::CSAwardRankRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fetchrankaward_rsp_ = const_cast< ::vmsg::CSAwardRankRsp*>(
      ::vmsg::CSAwardRankRsp::internal_default_instance());
#else
  fetchrankaward_rsp_ = const_cast< ::vmsg::CSAwardRankRsp*>(&::vmsg::CSAwardRankRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerlvup_rsp_ = const_cast< ::vmsg::CSPlayerLvUpRsp*>(
      ::vmsg::CSPlayerLvUpRsp::internal_default_instance());
#else
  playerlvup_rsp_ = const_cast< ::vmsg::CSPlayerLvUpRsp*>(&::vmsg::CSPlayerLvUpRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vip_notify_ = const_cast< ::vmsg::CSVIPNotify*>(
      ::vmsg::CSVIPNotify::internal_default_instance());
#else
  vip_notify_ = const_cast< ::vmsg::CSVIPNotify*>(&::vmsg::CSVIPNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryvipinfo_rsp_ = const_cast< ::vmsg::CSVIPInfos*>(
      ::vmsg::CSVIPInfos::internal_default_instance());
#else
  queryvipinfo_rsp_ = const_cast< ::vmsg::CSVIPInfos*>(&::vmsg::CSVIPInfos::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fightpower_notify_ = const_cast< ::vmsg::CSFightPowerNotify*>(
      ::vmsg::CSFightPowerNotify::internal_default_instance());
#else
  fightpower_notify_ = const_cast< ::vmsg::CSFightPowerNotify*>(&::vmsg::CSFightPowerNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryotherplayer_rsp_ = const_cast< ::vmsg::CSOtherPlayerInfoRsp*>(
      ::vmsg::CSOtherPlayerInfoRsp::internal_default_instance());
#else
  queryotherplayer_rsp_ = const_cast< ::vmsg::CSOtherPlayerInfoRsp*>(&::vmsg::CSOtherPlayerInfoRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryblackmarket_rsp_ = const_cast< ::vmsg::CSBlackMarketInfo*>(
      ::vmsg::CSBlackMarketInfo::internal_default_instance());
#else
  queryblackmarket_rsp_ = const_cast< ::vmsg::CSBlackMarketInfo*>(&::vmsg::CSBlackMarketInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyblackmarket_rsp_ = const_cast< ::vmsg::CSBlackMarketInfo*>(
      ::vmsg::CSBlackMarketInfo::internal_default_instance());
#else
  buyblackmarket_rsp_ = const_cast< ::vmsg::CSBlackMarketInfo*>(&::vmsg::CSBlackMarketInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  resetblackmarket_rsp_ = const_cast< ::vmsg::CSBlackMarketInfo*>(
      ::vmsg::CSBlackMarketInfo::internal_default_instance());
#else
  resetblackmarket_rsp_ = const_cast< ::vmsg::CSBlackMarketInfo*>(&::vmsg::CSBlackMarketInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  quicklogin_rsp_ = const_cast< ::vmsg::CSQuickLoginRsp*>(
      ::vmsg::CSQuickLoginRsp::internal_default_instance());
#else
  quicklogin_rsp_ = const_cast< ::vmsg::CSQuickLoginRsp*>(&::vmsg::CSQuickLoginRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querybuycoin_rsp_ = const_cast< ::vmsg::CSBuyCoinInfo*>(
      ::vmsg::CSBuyCoinInfo::internal_default_instance());
#else
  querybuycoin_rsp_ = const_cast< ::vmsg::CSBuyCoinInfo*>(&::vmsg::CSBuyCoinInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buycoin_rsp_ = const_cast< ::vmsg::CSBuyCoinRsp*>(
      ::vmsg::CSBuyCoinRsp::internal_default_instance());
#else
  buycoin_rsp_ = const_cast< ::vmsg::CSBuyCoinRsp*>(&::vmsg::CSBuyCoinRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailyreg_rsp_ = const_cast< ::vmsg::CSDailyRegInfo*>(
      ::vmsg::CSDailyRegInfo::internal_default_instance());
#else
  dailyreg_rsp_ = const_cast< ::vmsg::CSDailyRegInfo*>(&::vmsg::CSDailyRegInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getmonthcardaward_rsp_ = const_cast< ::vmsg::CSMonthCardInfo*>(
      ::vmsg::CSMonthCardInfo::internal_default_instance());
#else
  getmonthcardaward_rsp_ = const_cast< ::vmsg::CSMonthCardInfo*>(&::vmsg::CSMonthCardInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pushmonthcard_notify_ = const_cast< ::vmsg::CSMonthCardInfo*>(
      ::vmsg::CSMonthCardInfo::internal_default_instance());
#else
  pushmonthcard_notify_ = const_cast< ::vmsg::CSMonthCardInfo*>(&::vmsg::CSMonthCardInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guestregister_rsp_ = const_cast< ::vmsg::CSGuestRegisterRsp*>(
      ::vmsg::CSGuestRegisterRsp::internal_default_instance());
#else
  guestregister_rsp_ = const_cast< ::vmsg::CSGuestRegisterRsp*>(&::vmsg::CSGuestRegisterRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerenforce_rsp_ = const_cast< ::vmsg::CSPlayerEnforceMyselfRsp*>(
      ::vmsg::CSPlayerEnforceMyselfRsp::internal_default_instance());
#else
  playerenforce_rsp_ = const_cast< ::vmsg::CSPlayerEnforceMyselfRsp*>(&::vmsg::CSPlayerEnforceMyselfRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerenforceconfirm_rsp_ = const_cast< ::vmsg::CSPlayerEnforceMyselfConfirmRsp*>(
      ::vmsg::CSPlayerEnforceMyselfConfirmRsp::internal_default_instance());
#else
  playerenforceconfirm_rsp_ = const_cast< ::vmsg::CSPlayerEnforceMyselfConfirmRsp*>(&::vmsg::CSPlayerEnforceMyselfConfirmRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerenforcequery_rsp_ = const_cast< ::vmsg::CSPlayerEnforceMyselfQueryRsp*>(
      ::vmsg::CSPlayerEnforceMyselfQueryRsp::internal_default_instance());
#else
  playerenforcequery_rsp_ = const_cast< ::vmsg::CSPlayerEnforceMyselfQueryRsp*>(&::vmsg::CSPlayerEnforceMyselfQueryRsp::default_instance());
#endif
}

CSPlayerRespond::CSPlayerRespond(const CSPlayerRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerRespond::SharedCtor() {
  _cached_size_ = 0;
  regplayerinfo_rsp_ = NULL;
  queryplayerinfo_rsp_ = NULL;
  changearmor_rsp_ = NULL;
  rolelst_rsp_ = NULL;
  rolelogin_rsp_ = NULL;
  rolelogout_rsp_ = NULL;
  manual_notify_ = NULL;
  querybuymanual_rsp_ = NULL;
  buymanual_rsp_ = NULL;
  querymanual_rsp_ = NULL;
  querydetailinfo_rsp_ = NULL;
  queryevolution_rsp_ = NULL;
  queryevolutionskill_rsp_ = NULL;
  changeevolutionskill_rsp_ = NULL;
  evolution_rsp_ = NULL;
  queryattrstengthen_rsp_ = NULL;
  attrstengthen_rsp_ = NULL;
  queryweaponlot_rsp_ = NULL;
  weaponlot_rsp_ = NULL;
  queryawardrank_rsp_ = NULL;
  fetchrankaward_rsp_ = NULL;
  playerlvup_rsp_ = NULL;
  playercoin_notify_ = GOOGLE_ULONGLONG(0);
  vip_notify_ = NULL;
  queryvipinfo_rsp_ = NULL;
  fightpower_notify_ = NULL;
  queryotherplayer_rsp_ = NULL;
  queryblackmarket_rsp_ = NULL;
  buyblackmarket_rsp_ = NULL;
  resetblackmarket_rsp_ = NULL;
  quicklogin_rsp_ = NULL;
  querybuycoin_rsp_ = NULL;
  buycoin_rsp_ = NULL;
  dailyreg_rsp_ = NULL;
  getmonthcardaward_rsp_ = NULL;
  pushmonthcard_notify_ = NULL;
  claimedmanual_ = 0u;
  guestregister_rsp_ = NULL;
  playerenforce_rsp_ = NULL;
  playerenforceconfirm_rsp_ = NULL;
  playerenforcequery_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerRespond::~CSPlayerRespond() {
  SharedDtor();
}

void CSPlayerRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete regplayerinfo_rsp_;
    delete queryplayerinfo_rsp_;
    delete changearmor_rsp_;
    delete rolelst_rsp_;
    delete rolelogin_rsp_;
    delete rolelogout_rsp_;
    delete manual_notify_;
    delete querybuymanual_rsp_;
    delete buymanual_rsp_;
    delete querymanual_rsp_;
    delete querydetailinfo_rsp_;
    delete queryevolution_rsp_;
    delete queryevolutionskill_rsp_;
    delete changeevolutionskill_rsp_;
    delete evolution_rsp_;
    delete queryattrstengthen_rsp_;
    delete attrstengthen_rsp_;
    delete queryweaponlot_rsp_;
    delete weaponlot_rsp_;
    delete queryawardrank_rsp_;
    delete fetchrankaward_rsp_;
    delete playerlvup_rsp_;
    delete vip_notify_;
    delete queryvipinfo_rsp_;
    delete fightpower_notify_;
    delete queryotherplayer_rsp_;
    delete queryblackmarket_rsp_;
    delete buyblackmarket_rsp_;
    delete resetblackmarket_rsp_;
    delete quicklogin_rsp_;
    delete querybuycoin_rsp_;
    delete buycoin_rsp_;
    delete dailyreg_rsp_;
    delete getmonthcardaward_rsp_;
    delete pushmonthcard_notify_;
    delete guestregister_rsp_;
    delete playerenforce_rsp_;
    delete playerenforceconfirm_rsp_;
    delete playerenforcequery_rsp_;
  }
}

void CSPlayerRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerRespond& CSPlayerRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSPlayerMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSPlayerMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerRespond* CSPlayerRespond::default_instance_ = NULL;

CSPlayerRespond* CSPlayerRespond::New() const {
  return new CSPlayerRespond;
}

void CSPlayerRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regplayerinfo_rsp()) {
      if (regplayerinfo_rsp_ != NULL) regplayerinfo_rsp_->::vmsg::CSRegPlayerInfoRsp::Clear();
    }
    if (has_queryplayerinfo_rsp()) {
      if (queryplayerinfo_rsp_ != NULL) queryplayerinfo_rsp_->::vmsg::CSQueryPlayerInfoRsp::Clear();
    }
    if (has_changearmor_rsp()) {
      if (changearmor_rsp_ != NULL) changearmor_rsp_->::vmsg::CSChangeArmorRsp::Clear();
    }
    if (has_rolelst_rsp()) {
      if (rolelst_rsp_ != NULL) rolelst_rsp_->::vmsg::CSQueryRoleLstRsp::Clear();
    }
    if (has_rolelogin_rsp()) {
      if (rolelogin_rsp_ != NULL) rolelogin_rsp_->::vmsg::CSRoleLoginRsp::Clear();
    }
    if (has_rolelogout_rsp()) {
      if (rolelogout_rsp_ != NULL) rolelogout_rsp_->::vmsg::CSRoleLogoutRsp::Clear();
    }
    if (has_manual_notify()) {
      if (manual_notify_ != NULL) manual_notify_->::vmsg::CSPlayerManualNotify::Clear();
    }
    if (has_querybuymanual_rsp()) {
      if (querybuymanual_rsp_ != NULL) querybuymanual_rsp_->::vmsg::CSBuyManualInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_buymanual_rsp()) {
      if (buymanual_rsp_ != NULL) buymanual_rsp_->::vmsg::CSBuyManualInfo::Clear();
    }
    if (has_querymanual_rsp()) {
      if (querymanual_rsp_ != NULL) querymanual_rsp_->::vmsg::CSQueryPlayerManualRsp::Clear();
    }
    if (has_querydetailinfo_rsp()) {
      if (querydetailinfo_rsp_ != NULL) querydetailinfo_rsp_->::vmsg::CSPlayerDetailInfo::Clear();
    }
    if (has_queryevolution_rsp()) {
      if (queryevolution_rsp_ != NULL) queryevolution_rsp_->::vmsg::CSPlayerEvolutionInfo::Clear();
    }
    if (has_queryevolutionskill_rsp()) {
      if (queryevolutionskill_rsp_ != NULL) queryevolutionskill_rsp_->::vmsg::CSPlayerEvolutionSkillInfo::Clear();
    }
    if (has_changeevolutionskill_rsp()) {
      if (changeevolutionskill_rsp_ != NULL) changeevolutionskill_rsp_->::vmsg::CSChangePlayerEvolutionSkillRsp::Clear();
    }
    if (has_evolution_rsp()) {
      if (evolution_rsp_ != NULL) evolution_rsp_->::vmsg::CSPlayerEvolutionInfo::Clear();
    }
    if (has_queryattrstengthen_rsp()) {
      if (queryattrstengthen_rsp_ != NULL) queryattrstengthen_rsp_->::vmsg::CSAttrStrengthenInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_attrstengthen_rsp()) {
      if (attrstengthen_rsp_ != NULL) attrstengthen_rsp_->::vmsg::CSAttrStrengthenInfo::Clear();
    }
    if (has_queryweaponlot_rsp()) {
      if (queryweaponlot_rsp_ != NULL) queryweaponlot_rsp_->::vmsg::CSWeaponLotQueryRsp::Clear();
    }
    if (has_weaponlot_rsp()) {
      if (weaponlot_rsp_ != NULL) weaponlot_rsp_->::vmsg::CSWeaponLotRsp::Clear();
    }
    if (has_queryawardrank_rsp()) {
      if (queryawardrank_rsp_ != NULL) queryawardrank_rsp_->::vmsg::CSAwardRankRsp::Clear();
    }
    if (has_fetchrankaward_rsp()) {
      if (fetchrankaward_rsp_ != NULL) fetchrankaward_rsp_->::vmsg::CSAwardRankRsp::Clear();
    }
    if (has_playerlvup_rsp()) {
      if (playerlvup_rsp_ != NULL) playerlvup_rsp_->::vmsg::CSPlayerLvUpRsp::Clear();
    }
    playercoin_notify_ = GOOGLE_ULONGLONG(0);
    if (has_vip_notify()) {
      if (vip_notify_ != NULL) vip_notify_->::vmsg::CSVIPNotify::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_queryvipinfo_rsp()) {
      if (queryvipinfo_rsp_ != NULL) queryvipinfo_rsp_->::vmsg::CSVIPInfos::Clear();
    }
    if (has_fightpower_notify()) {
      if (fightpower_notify_ != NULL) fightpower_notify_->::vmsg::CSFightPowerNotify::Clear();
    }
    if (has_queryotherplayer_rsp()) {
      if (queryotherplayer_rsp_ != NULL) queryotherplayer_rsp_->::vmsg::CSOtherPlayerInfoRsp::Clear();
    }
    if (has_queryblackmarket_rsp()) {
      if (queryblackmarket_rsp_ != NULL) queryblackmarket_rsp_->::vmsg::CSBlackMarketInfo::Clear();
    }
    if (has_buyblackmarket_rsp()) {
      if (buyblackmarket_rsp_ != NULL) buyblackmarket_rsp_->::vmsg::CSBlackMarketInfo::Clear();
    }
    if (has_resetblackmarket_rsp()) {
      if (resetblackmarket_rsp_ != NULL) resetblackmarket_rsp_->::vmsg::CSBlackMarketInfo::Clear();
    }
    if (has_quicklogin_rsp()) {
      if (quicklogin_rsp_ != NULL) quicklogin_rsp_->::vmsg::CSQuickLoginRsp::Clear();
    }
    if (has_querybuycoin_rsp()) {
      if (querybuycoin_rsp_ != NULL) querybuycoin_rsp_->::vmsg::CSBuyCoinInfo::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_buycoin_rsp()) {
      if (buycoin_rsp_ != NULL) buycoin_rsp_->::vmsg::CSBuyCoinRsp::Clear();
    }
    if (has_dailyreg_rsp()) {
      if (dailyreg_rsp_ != NULL) dailyreg_rsp_->::vmsg::CSDailyRegInfo::Clear();
    }
    if (has_getmonthcardaward_rsp()) {
      if (getmonthcardaward_rsp_ != NULL) getmonthcardaward_rsp_->::vmsg::CSMonthCardInfo::Clear();
    }
    if (has_pushmonthcard_notify()) {
      if (pushmonthcard_notify_ != NULL) pushmonthcard_notify_->::vmsg::CSMonthCardInfo::Clear();
    }
    claimedmanual_ = 0u;
    if (has_guestregister_rsp()) {
      if (guestregister_rsp_ != NULL) guestregister_rsp_->::vmsg::CSGuestRegisterRsp::Clear();
    }
    if (has_playerenforce_rsp()) {
      if (playerenforce_rsp_ != NULL) playerenforce_rsp_->::vmsg::CSPlayerEnforceMyselfRsp::Clear();
    }
    if (has_playerenforceconfirm_rsp()) {
      if (playerenforceconfirm_rsp_ != NULL) playerenforceconfirm_rsp_->::vmsg::CSPlayerEnforceMyselfConfirmRsp::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_playerenforcequery_rsp()) {
      if (playerenforcequery_rsp_ != NULL) playerenforcequery_rsp_->::vmsg::CSPlayerEnforceMyselfQueryRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSRegPlayerInfoRsp RegPlayerInfo_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regplayerinfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QueryPlayerInfo_Rsp;
        break;
      }

      // optional .vmsg.CSQueryPlayerInfoRsp QueryPlayerInfo_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryPlayerInfo_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryplayerinfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ChangeArmor_Rsp;
        break;
      }

      // optional .vmsg.CSChangeArmorRsp ChangeArmor_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeArmor_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changearmor_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoleLst_Rsp;
        break;
      }

      // optional .vmsg.CSQueryRoleLstRsp RoleLst_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleLst_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolelst_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_RoleLogin_Rsp;
        break;
      }

      // optional .vmsg.CSRoleLoginRsp RoleLogin_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleLogin_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolelogin_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RoleLogout_Rsp;
        break;
      }

      // optional .vmsg.CSRoleLogoutRsp RoleLogout_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleLogout_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolelogout_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Manual_Notify;
        break;
      }

      // optional .vmsg.CSPlayerManualNotify Manual_Notify = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Manual_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_QueryBuyManual_Rsp;
        break;
      }

      // optional .vmsg.CSBuyManualInfo QueryBuyManual_Rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryBuyManual_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querybuymanual_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_BuyManual_Rsp;
        break;
      }

      // optional .vmsg.CSBuyManualInfo BuyManual_Rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyManual_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buymanual_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_QueryManual_Rsp;
        break;
      }

      // optional .vmsg.CSQueryPlayerManualRsp QueryManual_Rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryManual_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymanual_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_QueryDetailInfo_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerDetailInfo QueryDetailInfo_Rsp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryDetailInfo_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querydetailinfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_QueryEvolution_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerEvolutionInfo QueryEvolution_Rsp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryEvolution_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryevolution_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_QueryEvolutionSkill_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerEvolutionSkillInfo QueryEvolutionSkill_Rsp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryEvolutionSkill_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryevolutionskill_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ChangeEvolutionSkill_Rsp;
        break;
      }

      // optional .vmsg.CSChangePlayerEvolutionSkillRsp ChangeEvolutionSkill_Rsp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangeEvolutionSkill_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changeevolutionskill_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Evolution_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerEvolutionInfo Evolution_Rsp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Evolution_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_evolution_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_QueryAttrStengthen_Rsp;
        break;
      }

      // optional .vmsg.CSAttrStrengthenInfo QueryAttrStengthen_Rsp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryAttrStengthen_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryattrstengthen_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_AttrStengthen_Rsp;
        break;
      }

      // optional .vmsg.CSAttrStrengthenInfo AttrStengthen_Rsp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttrStengthen_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrstengthen_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_QueryWeaponLot_Rsp;
        break;
      }

      // optional .vmsg.CSWeaponLotQueryRsp QueryWeaponLot_Rsp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryWeaponLot_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryweaponlot_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_WeaponLot_Rsp;
        break;
      }

      // optional .vmsg.CSWeaponLotRsp WeaponLot_Rsp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponLot_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weaponlot_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_QueryAwardRank_Rsp;
        break;
      }

      // optional .vmsg.CSAwardRankRsp QueryAwardRank_Rsp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryAwardRank_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryawardrank_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_FetchRankAward_Rsp;
        break;
      }

      // optional .vmsg.CSAwardRankRsp FetchRankAward_Rsp = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FetchRankAward_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetchrankaward_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_PlayerLvUp_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerLvUpRsp PlayerLvUp_Rsp = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerLvUp_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerlvup_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_PlayerCoin_Notify;
        break;
      }

      // optional uint64 PlayerCoin_Notify = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerCoin_Notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playercoin_notify_)));
          set_has_playercoin_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_VIP_Notify;
        break;
      }

      // optional .vmsg.CSVIPNotify VIP_Notify = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIP_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_QueryVIPInfo_Rsp;
        break;
      }

      // optional .vmsg.CSVIPInfos QueryVIPInfo_Rsp = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryVIPInfo_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryvipinfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_FightPower_Notify;
        break;
      }

      // optional .vmsg.CSFightPowerNotify FightPower_Notify = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FightPower_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightpower_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_QueryOtherPlayer_Rsp;
        break;
      }

      // optional .vmsg.CSOtherPlayerInfoRsp QueryOtherPlayer_Rsp = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryOtherPlayer_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryotherplayer_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_QueryBlackMarket_Rsp;
        break;
      }

      // optional .vmsg.CSBlackMarketInfo QueryBlackMarket_Rsp = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryBlackMarket_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryblackmarket_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_BuyBlackMarket_Rsp;
        break;
      }

      // optional .vmsg.CSBlackMarketInfo BuyBlackMarket_Rsp = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyBlackMarket_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyblackmarket_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_ResetBlackMarket_Rsp;
        break;
      }

      // optional .vmsg.CSBlackMarketInfo ResetBlackMarket_Rsp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ResetBlackMarket_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resetblackmarket_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_QuickLogin_Rsp;
        break;
      }

      // optional .vmsg.CSQuickLoginRsp QuickLogin_Rsp = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuickLogin_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quicklogin_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_QueryBuyCoin_Rsp;
        break;
      }

      // optional .vmsg.CSBuyCoinInfo QueryBuyCoin_Rsp = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryBuyCoin_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querybuycoin_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_BuyCoin_Rsp;
        break;
      }

      // optional .vmsg.CSBuyCoinRsp BuyCoin_Rsp = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyCoin_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buycoin_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_DailyReg_Rsp;
        break;
      }

      // optional .vmsg.CSDailyRegInfo DailyReg_Rsp = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyReg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyreg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_GetMonthCardAward_Rsp;
        break;
      }

      // optional .vmsg.CSMonthCardInfo GetMonthCardAward_Rsp = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GetMonthCardAward_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getmonthcardaward_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_PushMonthCard_Notify;
        break;
      }

      // optional .vmsg.CSMonthCardInfo PushMonthCard_Notify = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PushMonthCard_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushmonthcard_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_ClaimedManual;
        break;
      }

      // optional uint32 ClaimedManual = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClaimedManual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimedmanual_)));
          set_has_claimedmanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_GuestRegister_Rsp;
        break;
      }

      // optional .vmsg.CSGuestRegisterRsp GuestRegister_Rsp = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuestRegister_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guestregister_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_PlayerEnforce_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerEnforceMyselfRsp PlayerEnforce_Rsp = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEnforce_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerenforce_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_PlayerEnforceConfirm_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerEnforceMyselfConfirmRsp PlayerEnforceConfirm_Rsp = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEnforceConfirm_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerenforceconfirm_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_PlayerEnforceQuery_Rsp;
        break;
      }

      // optional .vmsg.CSPlayerEnforceMyselfQueryRsp PlayerEnforceQuery_Rsp = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEnforceQuery_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerenforcequery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSRegPlayerInfoRsp RegPlayerInfo_Rsp = 1;
  if (has_regplayerinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->regplayerinfo_rsp(), output);
  }

  // optional .vmsg.CSQueryPlayerInfoRsp QueryPlayerInfo_Rsp = 2;
  if (has_queryplayerinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->queryplayerinfo_rsp(), output);
  }

  // optional .vmsg.CSChangeArmorRsp ChangeArmor_Rsp = 3;
  if (has_changearmor_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->changearmor_rsp(), output);
  }

  // optional .vmsg.CSQueryRoleLstRsp RoleLst_Rsp = 4;
  if (has_rolelst_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->rolelst_rsp(), output);
  }

  // optional .vmsg.CSRoleLoginRsp RoleLogin_Rsp = 5;
  if (has_rolelogin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->rolelogin_rsp(), output);
  }

  // optional .vmsg.CSRoleLogoutRsp RoleLogout_Rsp = 6;
  if (has_rolelogout_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->rolelogout_rsp(), output);
  }

  // optional .vmsg.CSPlayerManualNotify Manual_Notify = 7;
  if (has_manual_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->manual_notify(), output);
  }

  // optional .vmsg.CSBuyManualInfo QueryBuyManual_Rsp = 8;
  if (has_querybuymanual_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->querybuymanual_rsp(), output);
  }

  // optional .vmsg.CSBuyManualInfo BuyManual_Rsp = 9;
  if (has_buymanual_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->buymanual_rsp(), output);
  }

  // optional .vmsg.CSQueryPlayerManualRsp QueryManual_Rsp = 10;
  if (has_querymanual_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->querymanual_rsp(), output);
  }

  // optional .vmsg.CSPlayerDetailInfo QueryDetailInfo_Rsp = 11;
  if (has_querydetailinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->querydetailinfo_rsp(), output);
  }

  // optional .vmsg.CSPlayerEvolutionInfo QueryEvolution_Rsp = 12;
  if (has_queryevolution_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->queryevolution_rsp(), output);
  }

  // optional .vmsg.CSPlayerEvolutionSkillInfo QueryEvolutionSkill_Rsp = 13;
  if (has_queryevolutionskill_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->queryevolutionskill_rsp(), output);
  }

  // optional .vmsg.CSChangePlayerEvolutionSkillRsp ChangeEvolutionSkill_Rsp = 14;
  if (has_changeevolutionskill_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->changeevolutionskill_rsp(), output);
  }

  // optional .vmsg.CSPlayerEvolutionInfo Evolution_Rsp = 15;
  if (has_evolution_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->evolution_rsp(), output);
  }

  // optional .vmsg.CSAttrStrengthenInfo QueryAttrStengthen_Rsp = 16;
  if (has_queryattrstengthen_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->queryattrstengthen_rsp(), output);
  }

  // optional .vmsg.CSAttrStrengthenInfo AttrStengthen_Rsp = 17;
  if (has_attrstengthen_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->attrstengthen_rsp(), output);
  }

  // optional .vmsg.CSWeaponLotQueryRsp QueryWeaponLot_Rsp = 18;
  if (has_queryweaponlot_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->queryweaponlot_rsp(), output);
  }

  // optional .vmsg.CSWeaponLotRsp WeaponLot_Rsp = 19;
  if (has_weaponlot_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->weaponlot_rsp(), output);
  }

  // optional .vmsg.CSAwardRankRsp QueryAwardRank_Rsp = 20;
  if (has_queryawardrank_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->queryawardrank_rsp(), output);
  }

  // optional .vmsg.CSAwardRankRsp FetchRankAward_Rsp = 21;
  if (has_fetchrankaward_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->fetchrankaward_rsp(), output);
  }

  // optional .vmsg.CSPlayerLvUpRsp PlayerLvUp_Rsp = 22;
  if (has_playerlvup_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->playerlvup_rsp(), output);
  }

  // optional uint64 PlayerCoin_Notify = 23;
  if (has_playercoin_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->playercoin_notify(), output);
  }

  // optional .vmsg.CSVIPNotify VIP_Notify = 24;
  if (has_vip_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->vip_notify(), output);
  }

  // optional .vmsg.CSVIPInfos QueryVIPInfo_Rsp = 25;
  if (has_queryvipinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->queryvipinfo_rsp(), output);
  }

  // optional .vmsg.CSFightPowerNotify FightPower_Notify = 26;
  if (has_fightpower_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->fightpower_notify(), output);
  }

  // optional .vmsg.CSOtherPlayerInfoRsp QueryOtherPlayer_Rsp = 27;
  if (has_queryotherplayer_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->queryotherplayer_rsp(), output);
  }

  // optional .vmsg.CSBlackMarketInfo QueryBlackMarket_Rsp = 28;
  if (has_queryblackmarket_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->queryblackmarket_rsp(), output);
  }

  // optional .vmsg.CSBlackMarketInfo BuyBlackMarket_Rsp = 29;
  if (has_buyblackmarket_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->buyblackmarket_rsp(), output);
  }

  // optional .vmsg.CSBlackMarketInfo ResetBlackMarket_Rsp = 30;
  if (has_resetblackmarket_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->resetblackmarket_rsp(), output);
  }

  // optional .vmsg.CSQuickLoginRsp QuickLogin_Rsp = 31;
  if (has_quicklogin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->quicklogin_rsp(), output);
  }

  // optional .vmsg.CSBuyCoinInfo QueryBuyCoin_Rsp = 32;
  if (has_querybuycoin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->querybuycoin_rsp(), output);
  }

  // optional .vmsg.CSBuyCoinRsp BuyCoin_Rsp = 33;
  if (has_buycoin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      33, this->buycoin_rsp(), output);
  }

  // optional .vmsg.CSDailyRegInfo DailyReg_Rsp = 34;
  if (has_dailyreg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      34, this->dailyreg_rsp(), output);
  }

  // optional .vmsg.CSMonthCardInfo GetMonthCardAward_Rsp = 35;
  if (has_getmonthcardaward_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      35, this->getmonthcardaward_rsp(), output);
  }

  // optional .vmsg.CSMonthCardInfo PushMonthCard_Notify = 36;
  if (has_pushmonthcard_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->pushmonthcard_notify(), output);
  }

  // optional uint32 ClaimedManual = 37;
  if (has_claimedmanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->claimedmanual(), output);
  }

  // optional .vmsg.CSGuestRegisterRsp GuestRegister_Rsp = 38;
  if (has_guestregister_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->guestregister_rsp(), output);
  }

  // optional .vmsg.CSPlayerEnforceMyselfRsp PlayerEnforce_Rsp = 39;
  if (has_playerenforce_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      39, this->playerenforce_rsp(), output);
  }

  // optional .vmsg.CSPlayerEnforceMyselfConfirmRsp PlayerEnforceConfirm_Rsp = 40;
  if (has_playerenforceconfirm_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      40, this->playerenforceconfirm_rsp(), output);
  }

  // optional .vmsg.CSPlayerEnforceMyselfQueryRsp PlayerEnforceQuery_Rsp = 41;
  if (has_playerenforcequery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      41, this->playerenforcequery_rsp(), output);
  }

}

int CSPlayerRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSRegPlayerInfoRsp RegPlayerInfo_Rsp = 1;
    if (has_regplayerinfo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regplayerinfo_rsp());
    }

    // optional .vmsg.CSQueryPlayerInfoRsp QueryPlayerInfo_Rsp = 2;
    if (has_queryplayerinfo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryplayerinfo_rsp());
    }

    // optional .vmsg.CSChangeArmorRsp ChangeArmor_Rsp = 3;
    if (has_changearmor_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changearmor_rsp());
    }

    // optional .vmsg.CSQueryRoleLstRsp RoleLst_Rsp = 4;
    if (has_rolelst_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolelst_rsp());
    }

    // optional .vmsg.CSRoleLoginRsp RoleLogin_Rsp = 5;
    if (has_rolelogin_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolelogin_rsp());
    }

    // optional .vmsg.CSRoleLogoutRsp RoleLogout_Rsp = 6;
    if (has_rolelogout_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolelogout_rsp());
    }

    // optional .vmsg.CSPlayerManualNotify Manual_Notify = 7;
    if (has_manual_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual_notify());
    }

    // optional .vmsg.CSBuyManualInfo QueryBuyManual_Rsp = 8;
    if (has_querybuymanual_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querybuymanual_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSBuyManualInfo BuyManual_Rsp = 9;
    if (has_buymanual_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buymanual_rsp());
    }

    // optional .vmsg.CSQueryPlayerManualRsp QueryManual_Rsp = 10;
    if (has_querymanual_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querymanual_rsp());
    }

    // optional .vmsg.CSPlayerDetailInfo QueryDetailInfo_Rsp = 11;
    if (has_querydetailinfo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querydetailinfo_rsp());
    }

    // optional .vmsg.CSPlayerEvolutionInfo QueryEvolution_Rsp = 12;
    if (has_queryevolution_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryevolution_rsp());
    }

    // optional .vmsg.CSPlayerEvolutionSkillInfo QueryEvolutionSkill_Rsp = 13;
    if (has_queryevolutionskill_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryevolutionskill_rsp());
    }

    // optional .vmsg.CSChangePlayerEvolutionSkillRsp ChangeEvolutionSkill_Rsp = 14;
    if (has_changeevolutionskill_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changeevolutionskill_rsp());
    }

    // optional .vmsg.CSPlayerEvolutionInfo Evolution_Rsp = 15;
    if (has_evolution_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->evolution_rsp());
    }

    // optional .vmsg.CSAttrStrengthenInfo QueryAttrStengthen_Rsp = 16;
    if (has_queryattrstengthen_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryattrstengthen_rsp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .vmsg.CSAttrStrengthenInfo AttrStengthen_Rsp = 17;
    if (has_attrstengthen_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrstengthen_rsp());
    }

    // optional .vmsg.CSWeaponLotQueryRsp QueryWeaponLot_Rsp = 18;
    if (has_queryweaponlot_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryweaponlot_rsp());
    }

    // optional .vmsg.CSWeaponLotRsp WeaponLot_Rsp = 19;
    if (has_weaponlot_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weaponlot_rsp());
    }

    // optional .vmsg.CSAwardRankRsp QueryAwardRank_Rsp = 20;
    if (has_queryawardrank_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryawardrank_rsp());
    }

    // optional .vmsg.CSAwardRankRsp FetchRankAward_Rsp = 21;
    if (has_fetchrankaward_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetchrankaward_rsp());
    }

    // optional .vmsg.CSPlayerLvUpRsp PlayerLvUp_Rsp = 22;
    if (has_playerlvup_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerlvup_rsp());
    }

    // optional uint64 PlayerCoin_Notify = 23;
    if (has_playercoin_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playercoin_notify());
    }

    // optional .vmsg.CSVIPNotify VIP_Notify = 24;
    if (has_vip_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip_notify());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .vmsg.CSVIPInfos QueryVIPInfo_Rsp = 25;
    if (has_queryvipinfo_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryvipinfo_rsp());
    }

    // optional .vmsg.CSFightPowerNotify FightPower_Notify = 26;
    if (has_fightpower_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightpower_notify());
    }

    // optional .vmsg.CSOtherPlayerInfoRsp QueryOtherPlayer_Rsp = 27;
    if (has_queryotherplayer_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryotherplayer_rsp());
    }

    // optional .vmsg.CSBlackMarketInfo QueryBlackMarket_Rsp = 28;
    if (has_queryblackmarket_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryblackmarket_rsp());
    }

    // optional .vmsg.CSBlackMarketInfo BuyBlackMarket_Rsp = 29;
    if (has_buyblackmarket_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyblackmarket_rsp());
    }

    // optional .vmsg.CSBlackMarketInfo ResetBlackMarket_Rsp = 30;
    if (has_resetblackmarket_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resetblackmarket_rsp());
    }

    // optional .vmsg.CSQuickLoginRsp QuickLogin_Rsp = 31;
    if (has_quicklogin_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quicklogin_rsp());
    }

    // optional .vmsg.CSBuyCoinInfo QueryBuyCoin_Rsp = 32;
    if (has_querybuycoin_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querybuycoin_rsp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .vmsg.CSBuyCoinRsp BuyCoin_Rsp = 33;
    if (has_buycoin_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buycoin_rsp());
    }

    // optional .vmsg.CSDailyRegInfo DailyReg_Rsp = 34;
    if (has_dailyreg_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyreg_rsp());
    }

    // optional .vmsg.CSMonthCardInfo GetMonthCardAward_Rsp = 35;
    if (has_getmonthcardaward_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getmonthcardaward_rsp());
    }

    // optional .vmsg.CSMonthCardInfo PushMonthCard_Notify = 36;
    if (has_pushmonthcard_notify()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pushmonthcard_notify());
    }

    // optional uint32 ClaimedManual = 37;
    if (has_claimedmanual()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimedmanual());
    }

    // optional .vmsg.CSGuestRegisterRsp GuestRegister_Rsp = 38;
    if (has_guestregister_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guestregister_rsp());
    }

    // optional .vmsg.CSPlayerEnforceMyselfRsp PlayerEnforce_Rsp = 39;
    if (has_playerenforce_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerenforce_rsp());
    }

    // optional .vmsg.CSPlayerEnforceMyselfConfirmRsp PlayerEnforceConfirm_Rsp = 40;
    if (has_playerenforceconfirm_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerenforceconfirm_rsp());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .vmsg.CSPlayerEnforceMyselfQueryRsp PlayerEnforceQuery_Rsp = 41;
    if (has_playerenforcequery_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerenforcequery_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerRespond*>(&from));
}

void CSPlayerRespond::MergeFrom(const CSPlayerRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regplayerinfo_rsp()) {
      mutable_regplayerinfo_rsp()->::vmsg::CSRegPlayerInfoRsp::MergeFrom(from.regplayerinfo_rsp());
    }
    if (from.has_queryplayerinfo_rsp()) {
      mutable_queryplayerinfo_rsp()->::vmsg::CSQueryPlayerInfoRsp::MergeFrom(from.queryplayerinfo_rsp());
    }
    if (from.has_changearmor_rsp()) {
      mutable_changearmor_rsp()->::vmsg::CSChangeArmorRsp::MergeFrom(from.changearmor_rsp());
    }
    if (from.has_rolelst_rsp()) {
      mutable_rolelst_rsp()->::vmsg::CSQueryRoleLstRsp::MergeFrom(from.rolelst_rsp());
    }
    if (from.has_rolelogin_rsp()) {
      mutable_rolelogin_rsp()->::vmsg::CSRoleLoginRsp::MergeFrom(from.rolelogin_rsp());
    }
    if (from.has_rolelogout_rsp()) {
      mutable_rolelogout_rsp()->::vmsg::CSRoleLogoutRsp::MergeFrom(from.rolelogout_rsp());
    }
    if (from.has_manual_notify()) {
      mutable_manual_notify()->::vmsg::CSPlayerManualNotify::MergeFrom(from.manual_notify());
    }
    if (from.has_querybuymanual_rsp()) {
      mutable_querybuymanual_rsp()->::vmsg::CSBuyManualInfo::MergeFrom(from.querybuymanual_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buymanual_rsp()) {
      mutable_buymanual_rsp()->::vmsg::CSBuyManualInfo::MergeFrom(from.buymanual_rsp());
    }
    if (from.has_querymanual_rsp()) {
      mutable_querymanual_rsp()->::vmsg::CSQueryPlayerManualRsp::MergeFrom(from.querymanual_rsp());
    }
    if (from.has_querydetailinfo_rsp()) {
      mutable_querydetailinfo_rsp()->::vmsg::CSPlayerDetailInfo::MergeFrom(from.querydetailinfo_rsp());
    }
    if (from.has_queryevolution_rsp()) {
      mutable_queryevolution_rsp()->::vmsg::CSPlayerEvolutionInfo::MergeFrom(from.queryevolution_rsp());
    }
    if (from.has_queryevolutionskill_rsp()) {
      mutable_queryevolutionskill_rsp()->::vmsg::CSPlayerEvolutionSkillInfo::MergeFrom(from.queryevolutionskill_rsp());
    }
    if (from.has_changeevolutionskill_rsp()) {
      mutable_changeevolutionskill_rsp()->::vmsg::CSChangePlayerEvolutionSkillRsp::MergeFrom(from.changeevolutionskill_rsp());
    }
    if (from.has_evolution_rsp()) {
      mutable_evolution_rsp()->::vmsg::CSPlayerEvolutionInfo::MergeFrom(from.evolution_rsp());
    }
    if (from.has_queryattrstengthen_rsp()) {
      mutable_queryattrstengthen_rsp()->::vmsg::CSAttrStrengthenInfo::MergeFrom(from.queryattrstengthen_rsp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attrstengthen_rsp()) {
      mutable_attrstengthen_rsp()->::vmsg::CSAttrStrengthenInfo::MergeFrom(from.attrstengthen_rsp());
    }
    if (from.has_queryweaponlot_rsp()) {
      mutable_queryweaponlot_rsp()->::vmsg::CSWeaponLotQueryRsp::MergeFrom(from.queryweaponlot_rsp());
    }
    if (from.has_weaponlot_rsp()) {
      mutable_weaponlot_rsp()->::vmsg::CSWeaponLotRsp::MergeFrom(from.weaponlot_rsp());
    }
    if (from.has_queryawardrank_rsp()) {
      mutable_queryawardrank_rsp()->::vmsg::CSAwardRankRsp::MergeFrom(from.queryawardrank_rsp());
    }
    if (from.has_fetchrankaward_rsp()) {
      mutable_fetchrankaward_rsp()->::vmsg::CSAwardRankRsp::MergeFrom(from.fetchrankaward_rsp());
    }
    if (from.has_playerlvup_rsp()) {
      mutable_playerlvup_rsp()->::vmsg::CSPlayerLvUpRsp::MergeFrom(from.playerlvup_rsp());
    }
    if (from.has_playercoin_notify()) {
      set_playercoin_notify(from.playercoin_notify());
    }
    if (from.has_vip_notify()) {
      mutable_vip_notify()->::vmsg::CSVIPNotify::MergeFrom(from.vip_notify());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_queryvipinfo_rsp()) {
      mutable_queryvipinfo_rsp()->::vmsg::CSVIPInfos::MergeFrom(from.queryvipinfo_rsp());
    }
    if (from.has_fightpower_notify()) {
      mutable_fightpower_notify()->::vmsg::CSFightPowerNotify::MergeFrom(from.fightpower_notify());
    }
    if (from.has_queryotherplayer_rsp()) {
      mutable_queryotherplayer_rsp()->::vmsg::CSOtherPlayerInfoRsp::MergeFrom(from.queryotherplayer_rsp());
    }
    if (from.has_queryblackmarket_rsp()) {
      mutable_queryblackmarket_rsp()->::vmsg::CSBlackMarketInfo::MergeFrom(from.queryblackmarket_rsp());
    }
    if (from.has_buyblackmarket_rsp()) {
      mutable_buyblackmarket_rsp()->::vmsg::CSBlackMarketInfo::MergeFrom(from.buyblackmarket_rsp());
    }
    if (from.has_resetblackmarket_rsp()) {
      mutable_resetblackmarket_rsp()->::vmsg::CSBlackMarketInfo::MergeFrom(from.resetblackmarket_rsp());
    }
    if (from.has_quicklogin_rsp()) {
      mutable_quicklogin_rsp()->::vmsg::CSQuickLoginRsp::MergeFrom(from.quicklogin_rsp());
    }
    if (from.has_querybuycoin_rsp()) {
      mutable_querybuycoin_rsp()->::vmsg::CSBuyCoinInfo::MergeFrom(from.querybuycoin_rsp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_buycoin_rsp()) {
      mutable_buycoin_rsp()->::vmsg::CSBuyCoinRsp::MergeFrom(from.buycoin_rsp());
    }
    if (from.has_dailyreg_rsp()) {
      mutable_dailyreg_rsp()->::vmsg::CSDailyRegInfo::MergeFrom(from.dailyreg_rsp());
    }
    if (from.has_getmonthcardaward_rsp()) {
      mutable_getmonthcardaward_rsp()->::vmsg::CSMonthCardInfo::MergeFrom(from.getmonthcardaward_rsp());
    }
    if (from.has_pushmonthcard_notify()) {
      mutable_pushmonthcard_notify()->::vmsg::CSMonthCardInfo::MergeFrom(from.pushmonthcard_notify());
    }
    if (from.has_claimedmanual()) {
      set_claimedmanual(from.claimedmanual());
    }
    if (from.has_guestregister_rsp()) {
      mutable_guestregister_rsp()->::vmsg::CSGuestRegisterRsp::MergeFrom(from.guestregister_rsp());
    }
    if (from.has_playerenforce_rsp()) {
      mutable_playerenforce_rsp()->::vmsg::CSPlayerEnforceMyselfRsp::MergeFrom(from.playerenforce_rsp());
    }
    if (from.has_playerenforceconfirm_rsp()) {
      mutable_playerenforceconfirm_rsp()->::vmsg::CSPlayerEnforceMyselfConfirmRsp::MergeFrom(from.playerenforceconfirm_rsp());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_playerenforcequery_rsp()) {
      mutable_playerenforcequery_rsp()->::vmsg::CSPlayerEnforceMyselfQueryRsp::MergeFrom(from.playerenforcequery_rsp());
    }
  }
}

void CSPlayerRespond::CopyFrom(const CSPlayerRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerRespond::IsInitialized() const {

  if (has_regplayerinfo_rsp()) {
    if (!this->regplayerinfo_rsp().IsInitialized()) return false;
  }
  if (has_queryplayerinfo_rsp()) {
    if (!this->queryplayerinfo_rsp().IsInitialized()) return false;
  }
  if (has_changearmor_rsp()) {
    if (!this->changearmor_rsp().IsInitialized()) return false;
  }
  if (has_rolelst_rsp()) {
    if (!this->rolelst_rsp().IsInitialized()) return false;
  }
  if (has_rolelogin_rsp()) {
    if (!this->rolelogin_rsp().IsInitialized()) return false;
  }
  if (has_rolelogout_rsp()) {
    if (!this->rolelogout_rsp().IsInitialized()) return false;
  }
  if (has_manual_notify()) {
    if (!this->manual_notify().IsInitialized()) return false;
  }
  if (has_querybuymanual_rsp()) {
    if (!this->querybuymanual_rsp().IsInitialized()) return false;
  }
  if (has_buymanual_rsp()) {
    if (!this->buymanual_rsp().IsInitialized()) return false;
  }
  if (has_querymanual_rsp()) {
    if (!this->querymanual_rsp().IsInitialized()) return false;
  }
  if (has_querydetailinfo_rsp()) {
    if (!this->querydetailinfo_rsp().IsInitialized()) return false;
  }
  if (has_queryevolution_rsp()) {
    if (!this->queryevolution_rsp().IsInitialized()) return false;
  }
  if (has_queryevolutionskill_rsp()) {
    if (!this->queryevolutionskill_rsp().IsInitialized()) return false;
  }
  if (has_changeevolutionskill_rsp()) {
    if (!this->changeevolutionskill_rsp().IsInitialized()) return false;
  }
  if (has_evolution_rsp()) {
    if (!this->evolution_rsp().IsInitialized()) return false;
  }
  if (has_queryweaponlot_rsp()) {
    if (!this->queryweaponlot_rsp().IsInitialized()) return false;
  }
  if (has_weaponlot_rsp()) {
    if (!this->weaponlot_rsp().IsInitialized()) return false;
  }
  if (has_queryawardrank_rsp()) {
    if (!this->queryawardrank_rsp().IsInitialized()) return false;
  }
  if (has_fetchrankaward_rsp()) {
    if (!this->fetchrankaward_rsp().IsInitialized()) return false;
  }
  if (has_playerlvup_rsp()) {
    if (!this->playerlvup_rsp().IsInitialized()) return false;
  }
  if (has_vip_notify()) {
    if (!this->vip_notify().IsInitialized()) return false;
  }
  if (has_fightpower_notify()) {
    if (!this->fightpower_notify().IsInitialized()) return false;
  }
  if (has_queryotherplayer_rsp()) {
    if (!this->queryotherplayer_rsp().IsInitialized()) return false;
  }
  if (has_queryblackmarket_rsp()) {
    if (!this->queryblackmarket_rsp().IsInitialized()) return false;
  }
  if (has_buyblackmarket_rsp()) {
    if (!this->buyblackmarket_rsp().IsInitialized()) return false;
  }
  if (has_resetblackmarket_rsp()) {
    if (!this->resetblackmarket_rsp().IsInitialized()) return false;
  }
  if (has_quicklogin_rsp()) {
    if (!this->quicklogin_rsp().IsInitialized()) return false;
  }
  if (has_querybuycoin_rsp()) {
    if (!this->querybuycoin_rsp().IsInitialized()) return false;
  }
  if (has_buycoin_rsp()) {
    if (!this->buycoin_rsp().IsInitialized()) return false;
  }
  if (has_dailyreg_rsp()) {
    if (!this->dailyreg_rsp().IsInitialized()) return false;
  }
  if (has_getmonthcardaward_rsp()) {
    if (!this->getmonthcardaward_rsp().IsInitialized()) return false;
  }
  if (has_pushmonthcard_notify()) {
    if (!this->pushmonthcard_notify().IsInitialized()) return false;
  }
  if (has_guestregister_rsp()) {
    if (!this->guestregister_rsp().IsInitialized()) return false;
  }
  if (has_playerenforce_rsp()) {
    if (!this->playerenforce_rsp().IsInitialized()) return false;
  }
  if (has_playerenforceconfirm_rsp()) {
    if (!this->playerenforceconfirm_rsp().IsInitialized()) return false;
  }
  if (has_playerenforcequery_rsp()) {
    if (!this->playerenforcequery_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerRespond::Swap(CSPlayerRespond* other) {
  if (other != this) {
    std::swap(regplayerinfo_rsp_, other->regplayerinfo_rsp_);
    std::swap(queryplayerinfo_rsp_, other->queryplayerinfo_rsp_);
    std::swap(changearmor_rsp_, other->changearmor_rsp_);
    std::swap(rolelst_rsp_, other->rolelst_rsp_);
    std::swap(rolelogin_rsp_, other->rolelogin_rsp_);
    std::swap(rolelogout_rsp_, other->rolelogout_rsp_);
    std::swap(manual_notify_, other->manual_notify_);
    std::swap(querybuymanual_rsp_, other->querybuymanual_rsp_);
    std::swap(buymanual_rsp_, other->buymanual_rsp_);
    std::swap(querymanual_rsp_, other->querymanual_rsp_);
    std::swap(querydetailinfo_rsp_, other->querydetailinfo_rsp_);
    std::swap(queryevolution_rsp_, other->queryevolution_rsp_);
    std::swap(queryevolutionskill_rsp_, other->queryevolutionskill_rsp_);
    std::swap(changeevolutionskill_rsp_, other->changeevolutionskill_rsp_);
    std::swap(evolution_rsp_, other->evolution_rsp_);
    std::swap(queryattrstengthen_rsp_, other->queryattrstengthen_rsp_);
    std::swap(attrstengthen_rsp_, other->attrstengthen_rsp_);
    std::swap(queryweaponlot_rsp_, other->queryweaponlot_rsp_);
    std::swap(weaponlot_rsp_, other->weaponlot_rsp_);
    std::swap(queryawardrank_rsp_, other->queryawardrank_rsp_);
    std::swap(fetchrankaward_rsp_, other->fetchrankaward_rsp_);
    std::swap(playerlvup_rsp_, other->playerlvup_rsp_);
    std::swap(playercoin_notify_, other->playercoin_notify_);
    std::swap(vip_notify_, other->vip_notify_);
    std::swap(queryvipinfo_rsp_, other->queryvipinfo_rsp_);
    std::swap(fightpower_notify_, other->fightpower_notify_);
    std::swap(queryotherplayer_rsp_, other->queryotherplayer_rsp_);
    std::swap(queryblackmarket_rsp_, other->queryblackmarket_rsp_);
    std::swap(buyblackmarket_rsp_, other->buyblackmarket_rsp_);
    std::swap(resetblackmarket_rsp_, other->resetblackmarket_rsp_);
    std::swap(quicklogin_rsp_, other->quicklogin_rsp_);
    std::swap(querybuycoin_rsp_, other->querybuycoin_rsp_);
    std::swap(buycoin_rsp_, other->buycoin_rsp_);
    std::swap(dailyreg_rsp_, other->dailyreg_rsp_);
    std::swap(getmonthcardaward_rsp_, other->getmonthcardaward_rsp_);
    std::swap(pushmonthcard_notify_, other->pushmonthcard_notify_);
    std::swap(claimedmanual_, other->claimedmanual_);
    std::swap(guestregister_rsp_, other->guestregister_rsp_);
    std::swap(playerenforce_rsp_, other->playerenforce_rsp_);
    std::swap(playerenforceconfirm_rsp_, other->playerenforceconfirm_rsp_);
    std::swap(playerenforcequery_rsp_, other->playerenforcequery_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerRespond::GetTypeName() const {
  return "vmsg.CSPlayerRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
