// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSTaskMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSTaskMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSTaskMsg_2eproto() {
  delete CSTask::default_instance_;
  delete CSDailyTaskInfo::default_instance_;
  delete CSMilestoneInfo::default_instance_;
  delete CSTaskRequest::default_instance_;
  delete CSTaskRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSTaskMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSTaskMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  CSTask::default_instance_ = new CSTask();
  CSDailyTaskInfo::default_instance_ = new CSDailyTaskInfo();
  CSMilestoneInfo::default_instance_ = new CSMilestoneInfo();
  CSTaskRequest::default_instance_ = new CSTaskRequest();
  CSTaskRespond::default_instance_ = new CSTaskRespond();
  CSTask::default_instance_->InitAsDefaultInstance();
  CSDailyTaskInfo::default_instance_->InitAsDefaultInstance();
  CSMilestoneInfo::default_instance_->InitAsDefaultInstance();
  CSTaskRequest::default_instance_->InitAsDefaultInstance();
  CSTaskRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSTaskMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSTaskMsg_2eproto_once_);
void protobuf_AddDesc_CSTaskMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSTaskMsg_2eproto_once_,
                 &protobuf_AddDesc_CSTaskMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSTaskMsg_2eproto {
  StaticDescriptorInitializer_CSTaskMsg_2eproto() {
    protobuf_AddDesc_CSTaskMsg_2eproto();
  }
} static_descriptor_initializer_CSTaskMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSTask::kTaskIDFieldNumber;
const int CSTask::kTaskStatFieldNumber;
const int CSTask::kR1FieldNumber;
const int CSTask::kR2FieldNumber;
const int CSTask::kR3FieldNumber;
const int CSTask::kR4FieldNumber;
#endif  // !_MSC_VER

CSTask::CSTask()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSTask::InitAsDefaultInstance() {
}

CSTask::CSTask(const CSTask& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskstat_ = 0u;
  r1_ = 0u;
  r2_ = 0u;
  r3_ = 0u;
  r4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTask::~CSTask() {
  SharedDtor();
}

void CSTask::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSTask& CSTask::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSTaskMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSTaskMsg_2eproto();
#endif
  return *default_instance_;
}

CSTask* CSTask::default_instance_ = NULL;

CSTask* CSTask::New() const {
  return new CSTask;
}

void CSTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    taskstat_ = 0u;
    r1_ = 0u;
    r2_ = 0u;
    r3_ = 0u;
    r4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TaskStat;
        break;
      }

      // required uint32 TaskStat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TaskStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskstat_)));
          set_has_taskstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_R1;
        break;
      }

      // required uint32 R1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_R2;
        break;
      }

      // required uint32 R2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_R3;
        break;
      }

      // required uint32 R3 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r3_)));
          set_has_r3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_R4;
        break;
      }

      // required uint32 R4 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r4_)));
          set_has_r4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required uint32 TaskStat = 2;
  if (has_taskstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskstat(), output);
  }

  // required uint32 R1 = 3;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r1(), output);
  }

  // required uint32 R2 = 4;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r2(), output);
  }

  // required uint32 R3 = 5;
  if (has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r3(), output);
  }

  // required uint32 R4 = 6;
  if (has_r4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->r4(), output);
  }

}

int CSTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 TaskStat = 2;
    if (has_taskstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskstat());
    }

    // required uint32 R1 = 3;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r1());
    }

    // required uint32 R2 = 4;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r2());
    }

    // required uint32 R3 = 5;
    if (has_r3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r3());
    }

    // required uint32 R4 = 6;
    if (has_r4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r4());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTask::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSTask*>(&from));
}

void CSTask::MergeFrom(const CSTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_taskstat()) {
      set_taskstat(from.taskstat());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_r3()) {
      set_r3(from.r3());
    }
    if (from.has_r4()) {
      set_r4(from.r4());
    }
  }
}

void CSTask::CopyFrom(const CSTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSTask::Swap(CSTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskstat_, other->taskstat_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(r3_, other->r3_);
    std::swap(r4_, other->r4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSTask::GetTypeName() const {
  return "vmsg.CSTask";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyTaskInfo::kDailyTasksFieldNumber;
const int CSDailyTaskInfo::kRemainReflashCntFieldNumber;
const int CSDailyTaskInfo::kReflashGoldCostFieldNumber;
const int CSDailyTaskInfo::kCoinFieldNumber;
const int CSDailyTaskInfo::kExpFieldNumber;
const int CSDailyTaskInfo::kGoldFieldNumber;
const int CSDailyTaskInfo::kAwardFieldNumber;
#endif  // !_MSC_VER

CSDailyTaskInfo::CSDailyTaskInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyTaskInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  award_ = const_cast< ::vmsg::CSAwardElement*>(
      ::vmsg::CSAwardElement::internal_default_instance());
#else
  award_ = const_cast< ::vmsg::CSAwardElement*>(&::vmsg::CSAwardElement::default_instance());
#endif
}

CSDailyTaskInfo::CSDailyTaskInfo(const CSDailyTaskInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  remainreflashcnt_ = 0u;
  reflashgoldcost_ = 0u;
  coin_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  award_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyTaskInfo::~CSDailyTaskInfo() {
  SharedDtor();
}

void CSDailyTaskInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete award_;
  }
}

void CSDailyTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyTaskInfo& CSDailyTaskInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSTaskMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSTaskMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyTaskInfo* CSDailyTaskInfo::default_instance_ = NULL;

CSDailyTaskInfo* CSDailyTaskInfo::New() const {
  return new CSDailyTaskInfo;
}

void CSDailyTaskInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    remainreflashcnt_ = 0u;
    reflashgoldcost_ = 0u;
    coin_ = 0u;
    exp_ = 0u;
    gold_ = 0u;
    if (has_award()) {
      if (award_ != NULL) award_->::vmsg::CSAwardElement::Clear();
    }
  }
  dailytasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSTask DailyTasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyTasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailytasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DailyTasks;
        if (input->ExpectTag(16)) goto parse_RemainReflashCnt;
        break;
      }

      // required uint32 RemainReflashCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemainReflashCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainreflashcnt_)));
          set_has_remainreflashcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReflashGoldCost;
        break;
      }

      // required uint32 ReflashGoldCost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReflashGoldCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reflashgoldcost_)));
          set_has_reflashgoldcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Coin;
        break;
      }

      // optional uint32 Coin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // optional uint32 Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Gold;
        break;
      }

      // optional uint32 Gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Award;
        break;
      }

      // optional .vmsg.CSAwardElement Award = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSTask DailyTasks = 1;
  for (int i = 0; i < this->dailytasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dailytasks(i), output);
  }

  // required uint32 RemainReflashCnt = 2;
  if (has_remainreflashcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remainreflashcnt(), output);
  }

  // required uint32 ReflashGoldCost = 3;
  if (has_reflashgoldcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reflashgoldcost(), output);
  }

  // optional uint32 Coin = 4;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->coin(), output);
  }

  // optional uint32 Exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exp(), output);
  }

  // optional uint32 Gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->gold(), output);
  }

  // optional .vmsg.CSAwardElement Award = 7;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->award(), output);
  }

}

int CSDailyTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 RemainReflashCnt = 2;
    if (has_remainreflashcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainreflashcnt());
    }

    // required uint32 ReflashGoldCost = 3;
    if (has_reflashgoldcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reflashgoldcost());
    }

    // optional uint32 Coin = 4;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // optional uint32 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 Gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // optional .vmsg.CSAwardElement Award = 7;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }

  }
  // repeated .vmsg.CSTask DailyTasks = 1;
  total_size += 1 * this->dailytasks_size();
  for (int i = 0; i < this->dailytasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailytasks(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyTaskInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyTaskInfo*>(&from));
}

void CSDailyTaskInfo::MergeFrom(const CSDailyTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailytasks_.MergeFrom(from.dailytasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_remainreflashcnt()) {
      set_remainreflashcnt(from.remainreflashcnt());
    }
    if (from.has_reflashgoldcost()) {
      set_reflashgoldcost(from.reflashgoldcost());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_award()) {
      mutable_award()->::vmsg::CSAwardElement::MergeFrom(from.award());
    }
  }
}

void CSDailyTaskInfo::CopyFrom(const CSDailyTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyTaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  for (int i = 0; i < dailytasks_size(); i++) {
    if (!this->dailytasks(i).IsInitialized()) return false;
  }
  if (has_award()) {
    if (!this->award().IsInitialized()) return false;
  }
  return true;
}

void CSDailyTaskInfo::Swap(CSDailyTaskInfo* other) {
  if (other != this) {
    dailytasks_.Swap(&other->dailytasks_);
    std::swap(remainreflashcnt_, other->remainreflashcnt_);
    std::swap(reflashgoldcost_, other->reflashgoldcost_);
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyTaskInfo::GetTypeName() const {
  return "vmsg.CSDailyTaskInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMilestoneInfo::kMilestonesFieldNumber;
#endif  // !_MSC_VER

CSMilestoneInfo::CSMilestoneInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMilestoneInfo::InitAsDefaultInstance() {
}

CSMilestoneInfo::CSMilestoneInfo(const CSMilestoneInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMilestoneInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMilestoneInfo::~CSMilestoneInfo() {
  SharedDtor();
}

void CSMilestoneInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMilestoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMilestoneInfo& CSMilestoneInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSTaskMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSTaskMsg_2eproto();
#endif
  return *default_instance_;
}

CSMilestoneInfo* CSMilestoneInfo::default_instance_ = NULL;

CSMilestoneInfo* CSMilestoneInfo::New() const {
  return new CSMilestoneInfo;
}

void CSMilestoneInfo::Clear() {
  milestones_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMilestoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSTask Milestones = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Milestones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_milestones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Milestones;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMilestoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSTask Milestones = 1;
  for (int i = 0; i < this->milestones_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->milestones(i), output);
  }

}

int CSMilestoneInfo::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSTask Milestones = 1;
  total_size += 1 * this->milestones_size();
  for (int i = 0; i < this->milestones_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->milestones(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMilestoneInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMilestoneInfo*>(&from));
}

void CSMilestoneInfo::MergeFrom(const CSMilestoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  milestones_.MergeFrom(from.milestones_);
}

void CSMilestoneInfo::CopyFrom(const CSMilestoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMilestoneInfo::IsInitialized() const {

  for (int i = 0; i < milestones_size(); i++) {
    if (!this->milestones(i).IsInitialized()) return false;
  }
  return true;
}

void CSMilestoneInfo::Swap(CSMilestoneInfo* other) {
  if (other != this) {
    milestones_.Swap(&other->milestones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMilestoneInfo::GetTypeName() const {
  return "vmsg.CSMilestoneInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSTaskRequest::kCommitDailyTaskRqstFieldNumber;
const int CSTaskRequest::kCommitMilestoneRqstFieldNumber;
#endif  // !_MSC_VER

CSTaskRequest::CSTaskRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSTaskRequest::InitAsDefaultInstance() {
}

CSTaskRequest::CSTaskRequest(const CSTaskRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskRequest::SharedCtor() {
  _cached_size_ = 0;
  commitdailytask_rqst_ = 0u;
  commitmilestone_rqst_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskRequest::~CSTaskRequest() {
  SharedDtor();
}

void CSTaskRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSTaskRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSTaskRequest& CSTaskRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSTaskMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSTaskMsg_2eproto();
#endif
  return *default_instance_;
}

CSTaskRequest* CSTaskRequest::default_instance_ = NULL;

CSTaskRequest* CSTaskRequest::New() const {
  return new CSTaskRequest;
}

void CSTaskRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    commitdailytask_rqst_ = 0u;
    commitmilestone_rqst_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CommitDailyTask_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commitdailytask_rqst_)));
          set_has_commitdailytask_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CommitMilestone_Rqst;
        break;
      }

      // optional uint32 CommitMilestone_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CommitMilestone_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commitmilestone_rqst_)));
          set_has_commitmilestone_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 CommitDailyTask_Rqst = 1;
  if (has_commitdailytask_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->commitdailytask_rqst(), output);
  }

  // optional uint32 CommitMilestone_Rqst = 2;
  if (has_commitmilestone_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->commitmilestone_rqst(), output);
  }

}

int CSTaskRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CommitDailyTask_Rqst = 1;
    if (has_commitdailytask_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commitdailytask_rqst());
    }

    // optional uint32 CommitMilestone_Rqst = 2;
    if (has_commitmilestone_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commitmilestone_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSTaskRequest*>(&from));
}

void CSTaskRequest::MergeFrom(const CSTaskRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commitdailytask_rqst()) {
      set_commitdailytask_rqst(from.commitdailytask_rqst());
    }
    if (from.has_commitmilestone_rqst()) {
      set_commitmilestone_rqst(from.commitmilestone_rqst());
    }
  }
}

void CSTaskRequest::CopyFrom(const CSTaskRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskRequest::IsInitialized() const {

  return true;
}

void CSTaskRequest::Swap(CSTaskRequest* other) {
  if (other != this) {
    std::swap(commitdailytask_rqst_, other->commitdailytask_rqst_);
    std::swap(commitmilestone_rqst_, other->commitmilestone_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSTaskRequest::GetTypeName() const {
  return "vmsg.CSTaskRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSTaskRespond::kReceiveTaskRspFieldNumber;
const int CSTaskRespond::kCommitTaskRspFieldNumber;
const int CSTaskRespond::kQueryTaskRspFieldNumber;
const int CSTaskRespond::kTaskStatNotifyFieldNumber;
const int CSTaskRespond::kQueryDailyTaskRspFieldNumber;
const int CSTaskRespond::kReflashDailyTaskRspFieldNumber;
const int CSTaskRespond::kCommitDailyTaskRspFieldNumber;
const int CSTaskRespond::kDailyTaskStatNotifyFieldNumber;
const int CSTaskRespond::kQueryMilestoneRspFieldNumber;
const int CSTaskRespond::kCommitMilestoneRspFieldNumber;
const int CSTaskRespond::kMilestoneStatNotifyFieldNumber;
#endif  // !_MSC_VER

CSTaskRespond::CSTaskRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSTaskRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  receivetask_rsp_ = const_cast< ::vmsg::CSTask*>(
      ::vmsg::CSTask::internal_default_instance());
#else
  receivetask_rsp_ = const_cast< ::vmsg::CSTask*>(&::vmsg::CSTask::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  committask_rsp_ = const_cast< ::vmsg::CSTask*>(
      ::vmsg::CSTask::internal_default_instance());
#else
  committask_rsp_ = const_cast< ::vmsg::CSTask*>(&::vmsg::CSTask::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querytask_rsp_ = const_cast< ::vmsg::CSTask*>(
      ::vmsg::CSTask::internal_default_instance());
#else
  querytask_rsp_ = const_cast< ::vmsg::CSTask*>(&::vmsg::CSTask::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  taskstat_notify_ = const_cast< ::vmsg::CSTask*>(
      ::vmsg::CSTask::internal_default_instance());
#else
  taskstat_notify_ = const_cast< ::vmsg::CSTask*>(&::vmsg::CSTask::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querydailytask_rsp_ = const_cast< ::vmsg::CSDailyTaskInfo*>(
      ::vmsg::CSDailyTaskInfo::internal_default_instance());
#else
  querydailytask_rsp_ = const_cast< ::vmsg::CSDailyTaskInfo*>(&::vmsg::CSDailyTaskInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  reflashdailytask_rsp_ = const_cast< ::vmsg::CSDailyTaskInfo*>(
      ::vmsg::CSDailyTaskInfo::internal_default_instance());
#else
  reflashdailytask_rsp_ = const_cast< ::vmsg::CSDailyTaskInfo*>(&::vmsg::CSDailyTaskInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  commitdailytask_rsp_ = const_cast< ::vmsg::CSDailyTaskInfo*>(
      ::vmsg::CSDailyTaskInfo::internal_default_instance());
#else
  commitdailytask_rsp_ = const_cast< ::vmsg::CSDailyTaskInfo*>(&::vmsg::CSDailyTaskInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailytaskstat_notify_ = const_cast< ::vmsg::CSDailyTaskInfo*>(
      ::vmsg::CSDailyTaskInfo::internal_default_instance());
#else
  dailytaskstat_notify_ = const_cast< ::vmsg::CSDailyTaskInfo*>(&::vmsg::CSDailyTaskInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querymilestone_rsp_ = const_cast< ::vmsg::CSMilestoneInfo*>(
      ::vmsg::CSMilestoneInfo::internal_default_instance());
#else
  querymilestone_rsp_ = const_cast< ::vmsg::CSMilestoneInfo*>(&::vmsg::CSMilestoneInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  commitmilestone_rsp_ = const_cast< ::vmsg::CSMilestoneInfo*>(
      ::vmsg::CSMilestoneInfo::internal_default_instance());
#else
  commitmilestone_rsp_ = const_cast< ::vmsg::CSMilestoneInfo*>(&::vmsg::CSMilestoneInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  milestonestat_notify_ = const_cast< ::vmsg::CSMilestoneInfo*>(
      ::vmsg::CSMilestoneInfo::internal_default_instance());
#else
  milestonestat_notify_ = const_cast< ::vmsg::CSMilestoneInfo*>(&::vmsg::CSMilestoneInfo::default_instance());
#endif
}

CSTaskRespond::CSTaskRespond(const CSTaskRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSTaskRespond::SharedCtor() {
  _cached_size_ = 0;
  receivetask_rsp_ = NULL;
  committask_rsp_ = NULL;
  querytask_rsp_ = NULL;
  taskstat_notify_ = NULL;
  querydailytask_rsp_ = NULL;
  reflashdailytask_rsp_ = NULL;
  commitdailytask_rsp_ = NULL;
  dailytaskstat_notify_ = NULL;
  querymilestone_rsp_ = NULL;
  commitmilestone_rsp_ = NULL;
  milestonestat_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSTaskRespond::~CSTaskRespond() {
  SharedDtor();
}

void CSTaskRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete receivetask_rsp_;
    delete committask_rsp_;
    delete querytask_rsp_;
    delete taskstat_notify_;
    delete querydailytask_rsp_;
    delete reflashdailytask_rsp_;
    delete commitdailytask_rsp_;
    delete dailytaskstat_notify_;
    delete querymilestone_rsp_;
    delete commitmilestone_rsp_;
    delete milestonestat_notify_;
  }
}

void CSTaskRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSTaskRespond& CSTaskRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSTaskMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSTaskMsg_2eproto();
#endif
  return *default_instance_;
}

CSTaskRespond* CSTaskRespond::default_instance_ = NULL;

CSTaskRespond* CSTaskRespond::New() const {
  return new CSTaskRespond;
}

void CSTaskRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_receivetask_rsp()) {
      if (receivetask_rsp_ != NULL) receivetask_rsp_->::vmsg::CSTask::Clear();
    }
    if (has_committask_rsp()) {
      if (committask_rsp_ != NULL) committask_rsp_->::vmsg::CSTask::Clear();
    }
    if (has_querytask_rsp()) {
      if (querytask_rsp_ != NULL) querytask_rsp_->::vmsg::CSTask::Clear();
    }
    if (has_taskstat_notify()) {
      if (taskstat_notify_ != NULL) taskstat_notify_->::vmsg::CSTask::Clear();
    }
    if (has_querydailytask_rsp()) {
      if (querydailytask_rsp_ != NULL) querydailytask_rsp_->::vmsg::CSDailyTaskInfo::Clear();
    }
    if (has_reflashdailytask_rsp()) {
      if (reflashdailytask_rsp_ != NULL) reflashdailytask_rsp_->::vmsg::CSDailyTaskInfo::Clear();
    }
    if (has_commitdailytask_rsp()) {
      if (commitdailytask_rsp_ != NULL) commitdailytask_rsp_->::vmsg::CSDailyTaskInfo::Clear();
    }
    if (has_dailytaskstat_notify()) {
      if (dailytaskstat_notify_ != NULL) dailytaskstat_notify_->::vmsg::CSDailyTaskInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_querymilestone_rsp()) {
      if (querymilestone_rsp_ != NULL) querymilestone_rsp_->::vmsg::CSMilestoneInfo::Clear();
    }
    if (has_commitmilestone_rsp()) {
      if (commitmilestone_rsp_ != NULL) commitmilestone_rsp_->::vmsg::CSMilestoneInfo::Clear();
    }
    if (has_milestonestat_notify()) {
      if (milestonestat_notify_ != NULL) milestonestat_notify_->::vmsg::CSMilestoneInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSTaskRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSTask ReceiveTask_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_receivetask_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CommitTask_Rsp;
        break;
      }

      // optional .vmsg.CSTask CommitTask_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommitTask_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_committask_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QueryTask_Rsp;
        break;
      }

      // optional .vmsg.CSTask QueryTask_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryTask_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querytask_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TaskStat_Notify;
        break;
      }

      // optional .vmsg.CSTask TaskStat_Notify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskStat_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskstat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_QueryDailyTask_Rsp;
        break;
      }

      // optional .vmsg.CSDailyTaskInfo QueryDailyTask_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryDailyTask_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querydailytask_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ReflashDailyTask_Rsp;
        break;
      }

      // optional .vmsg.CSDailyTaskInfo ReflashDailyTask_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReflashDailyTask_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reflashdailytask_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_CommitDailyTask_Rsp;
        break;
      }

      // optional .vmsg.CSDailyTaskInfo CommitDailyTask_Rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommitDailyTask_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commitdailytask_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DailyTaskStat_Notify;
        break;
      }

      // optional .vmsg.CSDailyTaskInfo DailyTaskStat_Notify = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyTaskStat_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailytaskstat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_QueryMilestone_Rsp;
        break;
      }

      // optional .vmsg.CSMilestoneInfo QueryMilestone_Rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryMilestone_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymilestone_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_CommitMilestone_Rsp;
        break;
      }

      // optional .vmsg.CSMilestoneInfo CommitMilestone_Rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CommitMilestone_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commitmilestone_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_MilestoneStat_Notify;
        break;
      }

      // optional .vmsg.CSMilestoneInfo MilestoneStat_Notify = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MilestoneStat_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_milestonestat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSTaskRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSTask ReceiveTask_Rsp = 1;
  if (has_receivetask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->receivetask_rsp(), output);
  }

  // optional .vmsg.CSTask CommitTask_Rsp = 2;
  if (has_committask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->committask_rsp(), output);
  }

  // optional .vmsg.CSTask QueryTask_Rsp = 3;
  if (has_querytask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->querytask_rsp(), output);
  }

  // optional .vmsg.CSTask TaskStat_Notify = 4;
  if (has_taskstat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->taskstat_notify(), output);
  }

  // optional .vmsg.CSDailyTaskInfo QueryDailyTask_Rsp = 5;
  if (has_querydailytask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->querydailytask_rsp(), output);
  }

  // optional .vmsg.CSDailyTaskInfo ReflashDailyTask_Rsp = 6;
  if (has_reflashdailytask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->reflashdailytask_rsp(), output);
  }

  // optional .vmsg.CSDailyTaskInfo CommitDailyTask_Rsp = 7;
  if (has_commitdailytask_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->commitdailytask_rsp(), output);
  }

  // optional .vmsg.CSDailyTaskInfo DailyTaskStat_Notify = 8;
  if (has_dailytaskstat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->dailytaskstat_notify(), output);
  }

  // optional .vmsg.CSMilestoneInfo QueryMilestone_Rsp = 9;
  if (has_querymilestone_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->querymilestone_rsp(), output);
  }

  // optional .vmsg.CSMilestoneInfo CommitMilestone_Rsp = 10;
  if (has_commitmilestone_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->commitmilestone_rsp(), output);
  }

  // optional .vmsg.CSMilestoneInfo MilestoneStat_Notify = 11;
  if (has_milestonestat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->milestonestat_notify(), output);
  }

}

int CSTaskRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSTask ReceiveTask_Rsp = 1;
    if (has_receivetask_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->receivetask_rsp());
    }

    // optional .vmsg.CSTask CommitTask_Rsp = 2;
    if (has_committask_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->committask_rsp());
    }

    // optional .vmsg.CSTask QueryTask_Rsp = 3;
    if (has_querytask_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querytask_rsp());
    }

    // optional .vmsg.CSTask TaskStat_Notify = 4;
    if (has_taskstat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskstat_notify());
    }

    // optional .vmsg.CSDailyTaskInfo QueryDailyTask_Rsp = 5;
    if (has_querydailytask_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querydailytask_rsp());
    }

    // optional .vmsg.CSDailyTaskInfo ReflashDailyTask_Rsp = 6;
    if (has_reflashdailytask_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reflashdailytask_rsp());
    }

    // optional .vmsg.CSDailyTaskInfo CommitDailyTask_Rsp = 7;
    if (has_commitdailytask_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commitdailytask_rsp());
    }

    // optional .vmsg.CSDailyTaskInfo DailyTaskStat_Notify = 8;
    if (has_dailytaskstat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailytaskstat_notify());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSMilestoneInfo QueryMilestone_Rsp = 9;
    if (has_querymilestone_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querymilestone_rsp());
    }

    // optional .vmsg.CSMilestoneInfo CommitMilestone_Rsp = 10;
    if (has_commitmilestone_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commitmilestone_rsp());
    }

    // optional .vmsg.CSMilestoneInfo MilestoneStat_Notify = 11;
    if (has_milestonestat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->milestonestat_notify());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTaskRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSTaskRespond*>(&from));
}

void CSTaskRespond::MergeFrom(const CSTaskRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receivetask_rsp()) {
      mutable_receivetask_rsp()->::vmsg::CSTask::MergeFrom(from.receivetask_rsp());
    }
    if (from.has_committask_rsp()) {
      mutable_committask_rsp()->::vmsg::CSTask::MergeFrom(from.committask_rsp());
    }
    if (from.has_querytask_rsp()) {
      mutable_querytask_rsp()->::vmsg::CSTask::MergeFrom(from.querytask_rsp());
    }
    if (from.has_taskstat_notify()) {
      mutable_taskstat_notify()->::vmsg::CSTask::MergeFrom(from.taskstat_notify());
    }
    if (from.has_querydailytask_rsp()) {
      mutable_querydailytask_rsp()->::vmsg::CSDailyTaskInfo::MergeFrom(from.querydailytask_rsp());
    }
    if (from.has_reflashdailytask_rsp()) {
      mutable_reflashdailytask_rsp()->::vmsg::CSDailyTaskInfo::MergeFrom(from.reflashdailytask_rsp());
    }
    if (from.has_commitdailytask_rsp()) {
      mutable_commitdailytask_rsp()->::vmsg::CSDailyTaskInfo::MergeFrom(from.commitdailytask_rsp());
    }
    if (from.has_dailytaskstat_notify()) {
      mutable_dailytaskstat_notify()->::vmsg::CSDailyTaskInfo::MergeFrom(from.dailytaskstat_notify());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_querymilestone_rsp()) {
      mutable_querymilestone_rsp()->::vmsg::CSMilestoneInfo::MergeFrom(from.querymilestone_rsp());
    }
    if (from.has_commitmilestone_rsp()) {
      mutable_commitmilestone_rsp()->::vmsg::CSMilestoneInfo::MergeFrom(from.commitmilestone_rsp());
    }
    if (from.has_milestonestat_notify()) {
      mutable_milestonestat_notify()->::vmsg::CSMilestoneInfo::MergeFrom(from.milestonestat_notify());
    }
  }
}

void CSTaskRespond::CopyFrom(const CSTaskRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTaskRespond::IsInitialized() const {

  if (has_receivetask_rsp()) {
    if (!this->receivetask_rsp().IsInitialized()) return false;
  }
  if (has_committask_rsp()) {
    if (!this->committask_rsp().IsInitialized()) return false;
  }
  if (has_querytask_rsp()) {
    if (!this->querytask_rsp().IsInitialized()) return false;
  }
  if (has_taskstat_notify()) {
    if (!this->taskstat_notify().IsInitialized()) return false;
  }
  if (has_querydailytask_rsp()) {
    if (!this->querydailytask_rsp().IsInitialized()) return false;
  }
  if (has_reflashdailytask_rsp()) {
    if (!this->reflashdailytask_rsp().IsInitialized()) return false;
  }
  if (has_commitdailytask_rsp()) {
    if (!this->commitdailytask_rsp().IsInitialized()) return false;
  }
  if (has_dailytaskstat_notify()) {
    if (!this->dailytaskstat_notify().IsInitialized()) return false;
  }
  if (has_querymilestone_rsp()) {
    if (!this->querymilestone_rsp().IsInitialized()) return false;
  }
  if (has_commitmilestone_rsp()) {
    if (!this->commitmilestone_rsp().IsInitialized()) return false;
  }
  if (has_milestonestat_notify()) {
    if (!this->milestonestat_notify().IsInitialized()) return false;
  }
  return true;
}

void CSTaskRespond::Swap(CSTaskRespond* other) {
  if (other != this) {
    std::swap(receivetask_rsp_, other->receivetask_rsp_);
    std::swap(committask_rsp_, other->committask_rsp_);
    std::swap(querytask_rsp_, other->querytask_rsp_);
    std::swap(taskstat_notify_, other->taskstat_notify_);
    std::swap(querydailytask_rsp_, other->querydailytask_rsp_);
    std::swap(reflashdailytask_rsp_, other->reflashdailytask_rsp_);
    std::swap(commitdailytask_rsp_, other->commitdailytask_rsp_);
    std::swap(dailytaskstat_notify_, other->dailytaskstat_notify_);
    std::swap(querymilestone_rsp_, other->querymilestone_rsp_);
    std::swap(commitmilestone_rsp_, other->commitmilestone_rsp_);
    std::swap(milestonestat_notify_, other->milestonestat_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSTaskRespond::GetTypeName() const {
  return "vmsg.CSTaskRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
