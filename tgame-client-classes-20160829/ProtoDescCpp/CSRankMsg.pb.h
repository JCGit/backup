// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSRankMsg.proto

#ifndef PROTOBUF_CSRankMsg_2eproto__INCLUDED
#define PROTOBUF_CSRankMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "MsgBase.pb.h"
// @@protoc_insertion_point(includes)

namespace vmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSRankMsg_2eproto();
void protobuf_AssignDesc_CSRankMsg_2eproto();
void protobuf_ShutdownFile_CSRankMsg_2eproto();

class CSRankQueryRqst;
class CSRankInfo;
class CSRankQueryRsp;
class CSRankQueryMyRankRqst;
class CSRankQueryMyRankRsp;
class CSRankQueryArenaArmyRankRqst;
class CSRankQueryArenaArmyRankRsp;
class CSRankRequest;
class CSRankRespond;

// ===================================================================

class CSRankQueryRqst : public ::google::protobuf::MessageLite {
 public:
  CSRankQueryRqst();
  virtual ~CSRankQueryRqst();

  CSRankQueryRqst(const CSRankQueryRqst& from);

  inline CSRankQueryRqst& operator=(const CSRankQueryRqst& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankQueryRqst& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankQueryRqst* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankQueryRqst* other);

  // implements Message ----------------------------------------------

  CSRankQueryRqst* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankQueryRqst& from);
  void MergeFrom(const CSRankQueryRqst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RankType = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ranktype() const;
  inline void set_ranktype(::google::protobuf::uint32 value);

  // required int32 StartPos = 2;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  inline ::google::protobuf::int32 startpos() const;
  inline void set_startpos(::google::protobuf::int32 value);

  // required int32 StopPos = 3;
  inline bool has_stoppos() const;
  inline void clear_stoppos();
  static const int kStopPosFieldNumber = 3;
  inline ::google::protobuf::int32 stoppos() const;
  inline void set_stoppos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankQueryRqst)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_stoppos();
  inline void clear_has_stoppos();

  ::google::protobuf::uint32 ranktype_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::int32 stoppos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankQueryRqst* default_instance_;
};
// -------------------------------------------------------------------

class CSRankInfo : public ::google::protobuf::MessageLite {
 public:
  CSRankInfo();
  virtual ~CSRankInfo();

  CSRankInfo(const CSRankInfo& from);

  inline CSRankInfo& operator=(const CSRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankInfo* other);

  // implements Message ----------------------------------------------

  CSRankInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankInfo& from);
  void MergeFrom(const CSRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string Nick = 2;
  inline bool has_nick() const;
  inline void clear_nick();
  static const int kNickFieldNumber = 2;
  inline const ::std::string& nick() const;
  inline void set_nick(const ::std::string& value);
  inline void set_nick(const char* value);
  inline void set_nick(const char* value, size_t size);
  inline ::std::string* mutable_nick();
  inline ::std::string* release_nick();
  inline void set_allocated_nick(::std::string* nick);

  // required uint64 Value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint64 value() const;
  inline void set_value(::google::protobuf::uint64 value);

  // required uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 ShowID = 5;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 5;
  inline ::google::protobuf::uint32 showid() const;
  inline void set_showid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankInfo)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_nick();
  inline void clear_has_nick();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_showid();
  inline void clear_has_showid();

  ::google::protobuf::uint64 uin_;
  ::std::string* nick_;
  ::google::protobuf::uint64 value_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 showid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSRankQueryRsp : public ::google::protobuf::MessageLite {
 public:
  CSRankQueryRsp();
  virtual ~CSRankQueryRsp();

  CSRankQueryRsp(const CSRankQueryRsp& from);

  inline CSRankQueryRsp& operator=(const CSRankQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankQueryRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankQueryRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankQueryRsp* other);

  // implements Message ----------------------------------------------

  CSRankQueryRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankQueryRsp& from);
  void MergeFrom(const CSRankQueryRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RankType = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ranktype() const;
  inline void set_ranktype(::google::protobuf::uint32 value);

  // required int32 StartPos = 2;
  inline bool has_startpos() const;
  inline void clear_startpos();
  static const int kStartPosFieldNumber = 2;
  inline ::google::protobuf::int32 startpos() const;
  inline void set_startpos(::google::protobuf::int32 value);

  // required int32 StopPos = 3;
  inline bool has_stoppos() const;
  inline void clear_stoppos();
  static const int kStopPosFieldNumber = 3;
  inline ::google::protobuf::int32 stoppos() const;
  inline void set_stoppos(::google::protobuf::int32 value);

  // repeated .vmsg.CSRankInfo Infos = 4;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 4;
  inline const ::vmsg::CSRankInfo& infos(int index) const;
  inline ::vmsg::CSRankInfo* mutable_infos(int index);
  inline ::vmsg::CSRankInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >*
      mutable_infos();

  // @@protoc_insertion_point(class_scope:vmsg.CSRankQueryRsp)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_startpos();
  inline void clear_has_startpos();
  inline void set_has_stoppos();
  inline void clear_has_stoppos();

  ::google::protobuf::uint32 ranktype_;
  ::google::protobuf::int32 startpos_;
  ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo > infos_;
  ::google::protobuf::int32 stoppos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankQueryRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSRankQueryMyRankRqst : public ::google::protobuf::MessageLite {
 public:
  CSRankQueryMyRankRqst();
  virtual ~CSRankQueryMyRankRqst();

  CSRankQueryMyRankRqst(const CSRankQueryMyRankRqst& from);

  inline CSRankQueryMyRankRqst& operator=(const CSRankQueryMyRankRqst& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankQueryMyRankRqst& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankQueryMyRankRqst* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankQueryMyRankRqst* other);

  // implements Message ----------------------------------------------

  CSRankQueryMyRankRqst* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankQueryMyRankRqst& from);
  void MergeFrom(const CSRankQueryMyRankRqst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RankType = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ranktype() const;
  inline void set_ranktype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankQueryMyRankRqst)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();

  ::google::protobuf::uint32 ranktype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankQueryMyRankRqst* default_instance_;
};
// -------------------------------------------------------------------

class CSRankQueryMyRankRsp : public ::google::protobuf::MessageLite {
 public:
  CSRankQueryMyRankRsp();
  virtual ~CSRankQueryMyRankRsp();

  CSRankQueryMyRankRsp(const CSRankQueryMyRankRsp& from);

  inline CSRankQueryMyRankRsp& operator=(const CSRankQueryMyRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankQueryMyRankRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankQueryMyRankRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankQueryMyRankRsp* other);

  // implements Message ----------------------------------------------

  CSRankQueryMyRankRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankQueryMyRankRsp& from);
  void MergeFrom(const CSRankQueryMyRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RankType = 1;
  inline bool has_ranktype() const;
  inline void clear_ranktype();
  static const int kRankTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 ranktype() const;
  inline void set_ranktype(::google::protobuf::uint32 value);

  // required int32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // required int32 Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankQueryMyRankRsp)
 private:
  inline void set_has_ranktype();
  inline void clear_has_ranktype();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::uint32 ranktype_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankQueryMyRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSRankQueryArenaArmyRankRqst : public ::google::protobuf::MessageLite {
 public:
  CSRankQueryArenaArmyRankRqst();
  virtual ~CSRankQueryArenaArmyRankRqst();

  CSRankQueryArenaArmyRankRqst(const CSRankQueryArenaArmyRankRqst& from);

  inline CSRankQueryArenaArmyRankRqst& operator=(const CSRankQueryArenaArmyRankRqst& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankQueryArenaArmyRankRqst& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankQueryArenaArmyRankRqst* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankQueryArenaArmyRankRqst* other);

  // implements Message ----------------------------------------------

  CSRankQueryArenaArmyRankRqst* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankQueryArenaArmyRankRqst& from);
  void MergeFrom(const CSRankQueryArenaArmyRankRqst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline ::google::protobuf::uint64 start() const;
  inline void set_start(::google::protobuf::uint64 value);

  // required uint64 Stop = 2;
  inline bool has_stop() const;
  inline void clear_stop();
  static const int kStopFieldNumber = 2;
  inline ::google::protobuf::uint64 stop() const;
  inline void set_stop(::google::protobuf::uint64 value);

  // required int32 Cnt = 3;
  inline bool has_cnt() const;
  inline void clear_cnt();
  static const int kCntFieldNumber = 3;
  inline ::google::protobuf::int32 cnt() const;
  inline void set_cnt(::google::protobuf::int32 value);

  // optional uint64 Uin = 4;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 4;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankQueryArenaArmyRankRqst)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_stop();
  inline void clear_has_stop();
  inline void set_has_cnt();
  inline void clear_has_cnt();
  inline void set_has_uin();
  inline void clear_has_uin();

  ::google::protobuf::uint64 start_;
  ::google::protobuf::uint64 stop_;
  ::google::protobuf::uint64 uin_;
  ::google::protobuf::int32 cnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankQueryArenaArmyRankRqst* default_instance_;
};
// -------------------------------------------------------------------

class CSRankQueryArenaArmyRankRsp : public ::google::protobuf::MessageLite {
 public:
  CSRankQueryArenaArmyRankRsp();
  virtual ~CSRankQueryArenaArmyRankRsp();

  CSRankQueryArenaArmyRankRsp(const CSRankQueryArenaArmyRankRsp& from);

  inline CSRankQueryArenaArmyRankRsp& operator=(const CSRankQueryArenaArmyRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankQueryArenaArmyRankRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankQueryArenaArmyRankRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankQueryArenaArmyRankRsp* other);

  // implements Message ----------------------------------------------

  CSRankQueryArenaArmyRankRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankQueryArenaArmyRankRsp& from);
  void MergeFrom(const CSRankQueryArenaArmyRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vmsg.CSRankInfo Infos = 1;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 1;
  inline const ::vmsg::CSRankInfo& infos(int index) const;
  inline ::vmsg::CSRankInfo* mutable_infos(int index);
  inline ::vmsg::CSRankInfo* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >*
      mutable_infos();

  // optional int32 MyArmyRank = 2;
  inline bool has_myarmyrank() const;
  inline void clear_myarmyrank();
  static const int kMyArmyRankFieldNumber = 2;
  inline ::google::protobuf::int32 myarmyrank() const;
  inline void set_myarmyrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankQueryArenaArmyRankRsp)
 private:
  inline void set_has_myarmyrank();
  inline void clear_has_myarmyrank();

  ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo > infos_;
  ::google::protobuf::int32 myarmyrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankQueryArenaArmyRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSRankRequest : public ::google::protobuf::MessageLite {
 public:
  CSRankRequest();
  virtual ~CSRankRequest();

  CSRankRequest(const CSRankRequest& from);

  inline CSRankRequest& operator=(const CSRankRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankRequest* other);

  // implements Message ----------------------------------------------

  CSRankRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankRequest& from);
  void MergeFrom(const CSRankRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vmsg.CSRankQueryRqst RankQuery_Rqst = 1;
  inline bool has_rankquery_rqst() const;
  inline void clear_rankquery_rqst();
  static const int kRankQueryRqstFieldNumber = 1;
  inline const ::vmsg::CSRankQueryRqst& rankquery_rqst() const;
  inline ::vmsg::CSRankQueryRqst* mutable_rankquery_rqst();
  inline ::vmsg::CSRankQueryRqst* release_rankquery_rqst();
  inline void set_allocated_rankquery_rqst(::vmsg::CSRankQueryRqst* rankquery_rqst);

  // optional .vmsg.CSRankQueryMyRankRqst RankQueryMyRank_Rqst = 2;
  inline bool has_rankquerymyrank_rqst() const;
  inline void clear_rankquerymyrank_rqst();
  static const int kRankQueryMyRankRqstFieldNumber = 2;
  inline const ::vmsg::CSRankQueryMyRankRqst& rankquerymyrank_rqst() const;
  inline ::vmsg::CSRankQueryMyRankRqst* mutable_rankquerymyrank_rqst();
  inline ::vmsg::CSRankQueryMyRankRqst* release_rankquerymyrank_rqst();
  inline void set_allocated_rankquerymyrank_rqst(::vmsg::CSRankQueryMyRankRqst* rankquerymyrank_rqst);

  // optional .vmsg.CSRankQueryArenaArmyRankRqst RankQueryArenaArmyRank_Rqst = 3;
  inline bool has_rankqueryarenaarmyrank_rqst() const;
  inline void clear_rankqueryarenaarmyrank_rqst();
  static const int kRankQueryArenaArmyRankRqstFieldNumber = 3;
  inline const ::vmsg::CSRankQueryArenaArmyRankRqst& rankqueryarenaarmyrank_rqst() const;
  inline ::vmsg::CSRankQueryArenaArmyRankRqst* mutable_rankqueryarenaarmyrank_rqst();
  inline ::vmsg::CSRankQueryArenaArmyRankRqst* release_rankqueryarenaarmyrank_rqst();
  inline void set_allocated_rankqueryarenaarmyrank_rqst(::vmsg::CSRankQueryArenaArmyRankRqst* rankqueryarenaarmyrank_rqst);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankRequest)
 private:
  inline void set_has_rankquery_rqst();
  inline void clear_has_rankquery_rqst();
  inline void set_has_rankquerymyrank_rqst();
  inline void clear_has_rankquerymyrank_rqst();
  inline void set_has_rankqueryarenaarmyrank_rqst();
  inline void clear_has_rankqueryarenaarmyrank_rqst();

  ::vmsg::CSRankQueryRqst* rankquery_rqst_;
  ::vmsg::CSRankQueryMyRankRqst* rankquerymyrank_rqst_;
  ::vmsg::CSRankQueryArenaArmyRankRqst* rankqueryarenaarmyrank_rqst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankRequest* default_instance_;
};
// -------------------------------------------------------------------

class CSRankRespond : public ::google::protobuf::MessageLite {
 public:
  CSRankRespond();
  virtual ~CSRankRespond();

  CSRankRespond(const CSRankRespond& from);

  inline CSRankRespond& operator=(const CSRankRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRankRespond& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRankRespond* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRankRespond* other);

  // implements Message ----------------------------------------------

  CSRankRespond* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRankRespond& from);
  void MergeFrom(const CSRankRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vmsg.CSRankQueryRsp RankQuery_Rsp = 1;
  inline bool has_rankquery_rsp() const;
  inline void clear_rankquery_rsp();
  static const int kRankQueryRspFieldNumber = 1;
  inline const ::vmsg::CSRankQueryRsp& rankquery_rsp() const;
  inline ::vmsg::CSRankQueryRsp* mutable_rankquery_rsp();
  inline ::vmsg::CSRankQueryRsp* release_rankquery_rsp();
  inline void set_allocated_rankquery_rsp(::vmsg::CSRankQueryRsp* rankquery_rsp);

  // optional .vmsg.CSRankQueryMyRankRsp RankQueryMyRank_Rsp = 2;
  inline bool has_rankquerymyrank_rsp() const;
  inline void clear_rankquerymyrank_rsp();
  static const int kRankQueryMyRankRspFieldNumber = 2;
  inline const ::vmsg::CSRankQueryMyRankRsp& rankquerymyrank_rsp() const;
  inline ::vmsg::CSRankQueryMyRankRsp* mutable_rankquerymyrank_rsp();
  inline ::vmsg::CSRankQueryMyRankRsp* release_rankquerymyrank_rsp();
  inline void set_allocated_rankquerymyrank_rsp(::vmsg::CSRankQueryMyRankRsp* rankquerymyrank_rsp);

  // optional .vmsg.CSRankQueryArenaArmyRankRsp RankQueryArenaArmyRank_Rsp = 3;
  inline bool has_rankqueryarenaarmyrank_rsp() const;
  inline void clear_rankqueryarenaarmyrank_rsp();
  static const int kRankQueryArenaArmyRankRspFieldNumber = 3;
  inline const ::vmsg::CSRankQueryArenaArmyRankRsp& rankqueryarenaarmyrank_rsp() const;
  inline ::vmsg::CSRankQueryArenaArmyRankRsp* mutable_rankqueryarenaarmyrank_rsp();
  inline ::vmsg::CSRankQueryArenaArmyRankRsp* release_rankqueryarenaarmyrank_rsp();
  inline void set_allocated_rankqueryarenaarmyrank_rsp(::vmsg::CSRankQueryArenaArmyRankRsp* rankqueryarenaarmyrank_rsp);

  // @@protoc_insertion_point(class_scope:vmsg.CSRankRespond)
 private:
  inline void set_has_rankquery_rsp();
  inline void clear_has_rankquery_rsp();
  inline void set_has_rankquerymyrank_rsp();
  inline void clear_has_rankquerymyrank_rsp();
  inline void set_has_rankqueryarenaarmyrank_rsp();
  inline void clear_has_rankqueryarenaarmyrank_rsp();

  ::vmsg::CSRankQueryRsp* rankquery_rsp_;
  ::vmsg::CSRankQueryMyRankRsp* rankquerymyrank_rsp_;
  ::vmsg::CSRankQueryArenaArmyRankRsp* rankqueryarenaarmyrank_rsp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSRankMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSRankMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSRankMsg_2eproto();
  friend void protobuf_ShutdownFile_CSRankMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRankRespond* default_instance_;
};
// ===================================================================


// ===================================================================

// CSRankQueryRqst

// required uint32 RankType = 1;
inline bool CSRankQueryRqst::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankQueryRqst::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankQueryRqst::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankQueryRqst::clear_ranktype() {
  ranktype_ = 0u;
  clear_has_ranktype();
}
inline ::google::protobuf::uint32 CSRankQueryRqst::ranktype() const {
  return ranktype_;
}
inline void CSRankQueryRqst::set_ranktype(::google::protobuf::uint32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// required int32 StartPos = 2;
inline bool CSRankQueryRqst::has_startpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankQueryRqst::set_has_startpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankQueryRqst::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankQueryRqst::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 CSRankQueryRqst::startpos() const {
  return startpos_;
}
inline void CSRankQueryRqst::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
}

// required int32 StopPos = 3;
inline bool CSRankQueryRqst::has_stoppos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankQueryRqst::set_has_stoppos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankQueryRqst::clear_has_stoppos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankQueryRqst::clear_stoppos() {
  stoppos_ = 0;
  clear_has_stoppos();
}
inline ::google::protobuf::int32 CSRankQueryRqst::stoppos() const {
  return stoppos_;
}
inline void CSRankQueryRqst::set_stoppos(::google::protobuf::int32 value) {
  set_has_stoppos();
  stoppos_ = value;
}

// -------------------------------------------------------------------

// CSRankInfo

// required uint64 Uin = 1;
inline bool CSRankInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankInfo::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSRankInfo::uin() const {
  return uin_;
}
inline void CSRankInfo::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
}

// required string Nick = 2;
inline bool CSRankInfo::has_nick() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankInfo::set_has_nick() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankInfo::clear_has_nick() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankInfo::clear_nick() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    nick_->clear();
  }
  clear_has_nick();
}
inline const ::std::string& CSRankInfo::nick() const {
  return *nick_;
}
inline void CSRankInfo::set_nick(const ::std::string& value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void CSRankInfo::set_nick(const char* value) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(value);
}
inline void CSRankInfo::set_nick(const char* value, size_t size) {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  nick_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSRankInfo::mutable_nick() {
  set_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    nick_ = new ::std::string;
  }
  return nick_;
}
inline ::std::string* CSRankInfo::release_nick() {
  clear_has_nick();
  if (nick_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nick_;
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSRankInfo::set_allocated_nick(::std::string* nick) {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (nick) {
    set_has_nick();
    nick_ = nick;
  } else {
    clear_has_nick();
    nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 Value = 3;
inline bool CSRankInfo::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankInfo::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankInfo::clear_value() {
  value_ = GOOGLE_ULONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::uint64 CSRankInfo::value() const {
  return value_;
}
inline void CSRankInfo::set_value(::google::protobuf::uint64 value) {
  set_has_value();
  value_ = value;
}

// required uint32 Level = 4;
inline bool CSRankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSRankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSRankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSRankInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSRankInfo::level() const {
  return level_;
}
inline void CSRankInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 ShowID = 5;
inline bool CSRankInfo::has_showid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSRankInfo::set_has_showid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSRankInfo::clear_has_showid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSRankInfo::clear_showid() {
  showid_ = 0u;
  clear_has_showid();
}
inline ::google::protobuf::uint32 CSRankInfo::showid() const {
  return showid_;
}
inline void CSRankInfo::set_showid(::google::protobuf::uint32 value) {
  set_has_showid();
  showid_ = value;
}

// -------------------------------------------------------------------

// CSRankQueryRsp

// required uint32 RankType = 1;
inline bool CSRankQueryRsp::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankQueryRsp::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankQueryRsp::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankQueryRsp::clear_ranktype() {
  ranktype_ = 0u;
  clear_has_ranktype();
}
inline ::google::protobuf::uint32 CSRankQueryRsp::ranktype() const {
  return ranktype_;
}
inline void CSRankQueryRsp::set_ranktype(::google::protobuf::uint32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// required int32 StartPos = 2;
inline bool CSRankQueryRsp::has_startpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankQueryRsp::set_has_startpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankQueryRsp::clear_has_startpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankQueryRsp::clear_startpos() {
  startpos_ = 0;
  clear_has_startpos();
}
inline ::google::protobuf::int32 CSRankQueryRsp::startpos() const {
  return startpos_;
}
inline void CSRankQueryRsp::set_startpos(::google::protobuf::int32 value) {
  set_has_startpos();
  startpos_ = value;
}

// required int32 StopPos = 3;
inline bool CSRankQueryRsp::has_stoppos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankQueryRsp::set_has_stoppos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankQueryRsp::clear_has_stoppos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankQueryRsp::clear_stoppos() {
  stoppos_ = 0;
  clear_has_stoppos();
}
inline ::google::protobuf::int32 CSRankQueryRsp::stoppos() const {
  return stoppos_;
}
inline void CSRankQueryRsp::set_stoppos(::google::protobuf::int32 value) {
  set_has_stoppos();
  stoppos_ = value;
}

// repeated .vmsg.CSRankInfo Infos = 4;
inline int CSRankQueryRsp::infos_size() const {
  return infos_.size();
}
inline void CSRankQueryRsp::clear_infos() {
  infos_.Clear();
}
inline const ::vmsg::CSRankInfo& CSRankQueryRsp::infos(int index) const {
  return infos_.Get(index);
}
inline ::vmsg::CSRankInfo* CSRankQueryRsp::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::vmsg::CSRankInfo* CSRankQueryRsp::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >&
CSRankQueryRsp::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >*
CSRankQueryRsp::mutable_infos() {
  return &infos_;
}

// -------------------------------------------------------------------

// CSRankQueryMyRankRqst

// required uint32 RankType = 1;
inline bool CSRankQueryMyRankRqst::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankQueryMyRankRqst::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankQueryMyRankRqst::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankQueryMyRankRqst::clear_ranktype() {
  ranktype_ = 0u;
  clear_has_ranktype();
}
inline ::google::protobuf::uint32 CSRankQueryMyRankRqst::ranktype() const {
  return ranktype_;
}
inline void CSRankQueryMyRankRqst::set_ranktype(::google::protobuf::uint32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// -------------------------------------------------------------------

// CSRankQueryMyRankRsp

// required uint32 RankType = 1;
inline bool CSRankQueryMyRankRsp::has_ranktype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankQueryMyRankRsp::set_has_ranktype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankQueryMyRankRsp::clear_has_ranktype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankQueryMyRankRsp::clear_ranktype() {
  ranktype_ = 0u;
  clear_has_ranktype();
}
inline ::google::protobuf::uint32 CSRankQueryMyRankRsp::ranktype() const {
  return ranktype_;
}
inline void CSRankQueryMyRankRsp::set_ranktype(::google::protobuf::uint32 value) {
  set_has_ranktype();
  ranktype_ = value;
}

// required int32 Rank = 2;
inline bool CSRankQueryMyRankRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankQueryMyRankRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankQueryMyRankRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankQueryMyRankRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 CSRankQueryMyRankRsp::rank() const {
  return rank_;
}
inline void CSRankQueryMyRankRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// required int32 Score = 3;
inline bool CSRankQueryMyRankRsp::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankQueryMyRankRsp::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankQueryMyRankRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankQueryMyRankRsp::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 CSRankQueryMyRankRsp::score() const {
  return score_;
}
inline void CSRankQueryMyRankRsp::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// CSRankQueryArenaArmyRankRqst

// required uint64 Start = 1;
inline bool CSRankQueryArenaArmyRankRqst::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankQueryArenaArmyRankRqst::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_start() {
  start_ = GOOGLE_ULONGLONG(0);
  clear_has_start();
}
inline ::google::protobuf::uint64 CSRankQueryArenaArmyRankRqst::start() const {
  return start_;
}
inline void CSRankQueryArenaArmyRankRqst::set_start(::google::protobuf::uint64 value) {
  set_has_start();
  start_ = value;
}

// required uint64 Stop = 2;
inline bool CSRankQueryArenaArmyRankRqst::has_stop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankQueryArenaArmyRankRqst::set_has_stop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_has_stop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_stop() {
  stop_ = GOOGLE_ULONGLONG(0);
  clear_has_stop();
}
inline ::google::protobuf::uint64 CSRankQueryArenaArmyRankRqst::stop() const {
  return stop_;
}
inline void CSRankQueryArenaArmyRankRqst::set_stop(::google::protobuf::uint64 value) {
  set_has_stop();
  stop_ = value;
}

// required int32 Cnt = 3;
inline bool CSRankQueryArenaArmyRankRqst::has_cnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankQueryArenaArmyRankRqst::set_has_cnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_has_cnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_cnt() {
  cnt_ = 0;
  clear_has_cnt();
}
inline ::google::protobuf::int32 CSRankQueryArenaArmyRankRqst::cnt() const {
  return cnt_;
}
inline void CSRankQueryArenaArmyRankRqst::set_cnt(::google::protobuf::int32 value) {
  set_has_cnt();
  cnt_ = value;
}

// optional uint64 Uin = 4;
inline bool CSRankQueryArenaArmyRankRqst::has_uin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSRankQueryArenaArmyRankRqst::set_has_uin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_has_uin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSRankQueryArenaArmyRankRqst::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSRankQueryArenaArmyRankRqst::uin() const {
  return uin_;
}
inline void CSRankQueryArenaArmyRankRqst::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
}

// -------------------------------------------------------------------

// CSRankQueryArenaArmyRankRsp

// repeated .vmsg.CSRankInfo Infos = 1;
inline int CSRankQueryArenaArmyRankRsp::infos_size() const {
  return infos_.size();
}
inline void CSRankQueryArenaArmyRankRsp::clear_infos() {
  infos_.Clear();
}
inline const ::vmsg::CSRankInfo& CSRankQueryArenaArmyRankRsp::infos(int index) const {
  return infos_.Get(index);
}
inline ::vmsg::CSRankInfo* CSRankQueryArenaArmyRankRsp::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::vmsg::CSRankInfo* CSRankQueryArenaArmyRankRsp::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >&
CSRankQueryArenaArmyRankRsp::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSRankInfo >*
CSRankQueryArenaArmyRankRsp::mutable_infos() {
  return &infos_;
}

// optional int32 MyArmyRank = 2;
inline bool CSRankQueryArenaArmyRankRsp::has_myarmyrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankQueryArenaArmyRankRsp::set_has_myarmyrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankQueryArenaArmyRankRsp::clear_has_myarmyrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankQueryArenaArmyRankRsp::clear_myarmyrank() {
  myarmyrank_ = 0;
  clear_has_myarmyrank();
}
inline ::google::protobuf::int32 CSRankQueryArenaArmyRankRsp::myarmyrank() const {
  return myarmyrank_;
}
inline void CSRankQueryArenaArmyRankRsp::set_myarmyrank(::google::protobuf::int32 value) {
  set_has_myarmyrank();
  myarmyrank_ = value;
}

// -------------------------------------------------------------------

// CSRankRequest

// optional .vmsg.CSRankQueryRqst RankQuery_Rqst = 1;
inline bool CSRankRequest::has_rankquery_rqst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankRequest::set_has_rankquery_rqst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankRequest::clear_has_rankquery_rqst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankRequest::clear_rankquery_rqst() {
  if (rankquery_rqst_ != NULL) rankquery_rqst_->::vmsg::CSRankQueryRqst::Clear();
  clear_has_rankquery_rqst();
}
inline const ::vmsg::CSRankQueryRqst& CSRankRequest::rankquery_rqst() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankquery_rqst_ != NULL ? *rankquery_rqst_ : *default_instance().rankquery_rqst_;
#else
  return rankquery_rqst_ != NULL ? *rankquery_rqst_ : *default_instance_->rankquery_rqst_;
#endif
}
inline ::vmsg::CSRankQueryRqst* CSRankRequest::mutable_rankquery_rqst() {
  set_has_rankquery_rqst();
  if (rankquery_rqst_ == NULL) rankquery_rqst_ = new ::vmsg::CSRankQueryRqst;
  return rankquery_rqst_;
}
inline ::vmsg::CSRankQueryRqst* CSRankRequest::release_rankquery_rqst() {
  clear_has_rankquery_rqst();
  ::vmsg::CSRankQueryRqst* temp = rankquery_rqst_;
  rankquery_rqst_ = NULL;
  return temp;
}
inline void CSRankRequest::set_allocated_rankquery_rqst(::vmsg::CSRankQueryRqst* rankquery_rqst) {
  delete rankquery_rqst_;
  rankquery_rqst_ = rankquery_rqst;
  if (rankquery_rqst) {
    set_has_rankquery_rqst();
  } else {
    clear_has_rankquery_rqst();
  }
}

// optional .vmsg.CSRankQueryMyRankRqst RankQueryMyRank_Rqst = 2;
inline bool CSRankRequest::has_rankquerymyrank_rqst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankRequest::set_has_rankquerymyrank_rqst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankRequest::clear_has_rankquerymyrank_rqst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankRequest::clear_rankquerymyrank_rqst() {
  if (rankquerymyrank_rqst_ != NULL) rankquerymyrank_rqst_->::vmsg::CSRankQueryMyRankRqst::Clear();
  clear_has_rankquerymyrank_rqst();
}
inline const ::vmsg::CSRankQueryMyRankRqst& CSRankRequest::rankquerymyrank_rqst() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankquerymyrank_rqst_ != NULL ? *rankquerymyrank_rqst_ : *default_instance().rankquerymyrank_rqst_;
#else
  return rankquerymyrank_rqst_ != NULL ? *rankquerymyrank_rqst_ : *default_instance_->rankquerymyrank_rqst_;
#endif
}
inline ::vmsg::CSRankQueryMyRankRqst* CSRankRequest::mutable_rankquerymyrank_rqst() {
  set_has_rankquerymyrank_rqst();
  if (rankquerymyrank_rqst_ == NULL) rankquerymyrank_rqst_ = new ::vmsg::CSRankQueryMyRankRqst;
  return rankquerymyrank_rqst_;
}
inline ::vmsg::CSRankQueryMyRankRqst* CSRankRequest::release_rankquerymyrank_rqst() {
  clear_has_rankquerymyrank_rqst();
  ::vmsg::CSRankQueryMyRankRqst* temp = rankquerymyrank_rqst_;
  rankquerymyrank_rqst_ = NULL;
  return temp;
}
inline void CSRankRequest::set_allocated_rankquerymyrank_rqst(::vmsg::CSRankQueryMyRankRqst* rankquerymyrank_rqst) {
  delete rankquerymyrank_rqst_;
  rankquerymyrank_rqst_ = rankquerymyrank_rqst;
  if (rankquerymyrank_rqst) {
    set_has_rankquerymyrank_rqst();
  } else {
    clear_has_rankquerymyrank_rqst();
  }
}

// optional .vmsg.CSRankQueryArenaArmyRankRqst RankQueryArenaArmyRank_Rqst = 3;
inline bool CSRankRequest::has_rankqueryarenaarmyrank_rqst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankRequest::set_has_rankqueryarenaarmyrank_rqst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankRequest::clear_has_rankqueryarenaarmyrank_rqst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankRequest::clear_rankqueryarenaarmyrank_rqst() {
  if (rankqueryarenaarmyrank_rqst_ != NULL) rankqueryarenaarmyrank_rqst_->::vmsg::CSRankQueryArenaArmyRankRqst::Clear();
  clear_has_rankqueryarenaarmyrank_rqst();
}
inline const ::vmsg::CSRankQueryArenaArmyRankRqst& CSRankRequest::rankqueryarenaarmyrank_rqst() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankqueryarenaarmyrank_rqst_ != NULL ? *rankqueryarenaarmyrank_rqst_ : *default_instance().rankqueryarenaarmyrank_rqst_;
#else
  return rankqueryarenaarmyrank_rqst_ != NULL ? *rankqueryarenaarmyrank_rqst_ : *default_instance_->rankqueryarenaarmyrank_rqst_;
#endif
}
inline ::vmsg::CSRankQueryArenaArmyRankRqst* CSRankRequest::mutable_rankqueryarenaarmyrank_rqst() {
  set_has_rankqueryarenaarmyrank_rqst();
  if (rankqueryarenaarmyrank_rqst_ == NULL) rankqueryarenaarmyrank_rqst_ = new ::vmsg::CSRankQueryArenaArmyRankRqst;
  return rankqueryarenaarmyrank_rqst_;
}
inline ::vmsg::CSRankQueryArenaArmyRankRqst* CSRankRequest::release_rankqueryarenaarmyrank_rqst() {
  clear_has_rankqueryarenaarmyrank_rqst();
  ::vmsg::CSRankQueryArenaArmyRankRqst* temp = rankqueryarenaarmyrank_rqst_;
  rankqueryarenaarmyrank_rqst_ = NULL;
  return temp;
}
inline void CSRankRequest::set_allocated_rankqueryarenaarmyrank_rqst(::vmsg::CSRankQueryArenaArmyRankRqst* rankqueryarenaarmyrank_rqst) {
  delete rankqueryarenaarmyrank_rqst_;
  rankqueryarenaarmyrank_rqst_ = rankqueryarenaarmyrank_rqst;
  if (rankqueryarenaarmyrank_rqst) {
    set_has_rankqueryarenaarmyrank_rqst();
  } else {
    clear_has_rankqueryarenaarmyrank_rqst();
  }
}

// -------------------------------------------------------------------

// CSRankRespond

// optional .vmsg.CSRankQueryRsp RankQuery_Rsp = 1;
inline bool CSRankRespond::has_rankquery_rsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRankRespond::set_has_rankquery_rsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRankRespond::clear_has_rankquery_rsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRankRespond::clear_rankquery_rsp() {
  if (rankquery_rsp_ != NULL) rankquery_rsp_->::vmsg::CSRankQueryRsp::Clear();
  clear_has_rankquery_rsp();
}
inline const ::vmsg::CSRankQueryRsp& CSRankRespond::rankquery_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankquery_rsp_ != NULL ? *rankquery_rsp_ : *default_instance().rankquery_rsp_;
#else
  return rankquery_rsp_ != NULL ? *rankquery_rsp_ : *default_instance_->rankquery_rsp_;
#endif
}
inline ::vmsg::CSRankQueryRsp* CSRankRespond::mutable_rankquery_rsp() {
  set_has_rankquery_rsp();
  if (rankquery_rsp_ == NULL) rankquery_rsp_ = new ::vmsg::CSRankQueryRsp;
  return rankquery_rsp_;
}
inline ::vmsg::CSRankQueryRsp* CSRankRespond::release_rankquery_rsp() {
  clear_has_rankquery_rsp();
  ::vmsg::CSRankQueryRsp* temp = rankquery_rsp_;
  rankquery_rsp_ = NULL;
  return temp;
}
inline void CSRankRespond::set_allocated_rankquery_rsp(::vmsg::CSRankQueryRsp* rankquery_rsp) {
  delete rankquery_rsp_;
  rankquery_rsp_ = rankquery_rsp;
  if (rankquery_rsp) {
    set_has_rankquery_rsp();
  } else {
    clear_has_rankquery_rsp();
  }
}

// optional .vmsg.CSRankQueryMyRankRsp RankQueryMyRank_Rsp = 2;
inline bool CSRankRespond::has_rankquerymyrank_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSRankRespond::set_has_rankquerymyrank_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSRankRespond::clear_has_rankquerymyrank_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSRankRespond::clear_rankquerymyrank_rsp() {
  if (rankquerymyrank_rsp_ != NULL) rankquerymyrank_rsp_->::vmsg::CSRankQueryMyRankRsp::Clear();
  clear_has_rankquerymyrank_rsp();
}
inline const ::vmsg::CSRankQueryMyRankRsp& CSRankRespond::rankquerymyrank_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankquerymyrank_rsp_ != NULL ? *rankquerymyrank_rsp_ : *default_instance().rankquerymyrank_rsp_;
#else
  return rankquerymyrank_rsp_ != NULL ? *rankquerymyrank_rsp_ : *default_instance_->rankquerymyrank_rsp_;
#endif
}
inline ::vmsg::CSRankQueryMyRankRsp* CSRankRespond::mutable_rankquerymyrank_rsp() {
  set_has_rankquerymyrank_rsp();
  if (rankquerymyrank_rsp_ == NULL) rankquerymyrank_rsp_ = new ::vmsg::CSRankQueryMyRankRsp;
  return rankquerymyrank_rsp_;
}
inline ::vmsg::CSRankQueryMyRankRsp* CSRankRespond::release_rankquerymyrank_rsp() {
  clear_has_rankquerymyrank_rsp();
  ::vmsg::CSRankQueryMyRankRsp* temp = rankquerymyrank_rsp_;
  rankquerymyrank_rsp_ = NULL;
  return temp;
}
inline void CSRankRespond::set_allocated_rankquerymyrank_rsp(::vmsg::CSRankQueryMyRankRsp* rankquerymyrank_rsp) {
  delete rankquerymyrank_rsp_;
  rankquerymyrank_rsp_ = rankquerymyrank_rsp;
  if (rankquerymyrank_rsp) {
    set_has_rankquerymyrank_rsp();
  } else {
    clear_has_rankquerymyrank_rsp();
  }
}

// optional .vmsg.CSRankQueryArenaArmyRankRsp RankQueryArenaArmyRank_Rsp = 3;
inline bool CSRankRespond::has_rankqueryarenaarmyrank_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSRankRespond::set_has_rankqueryarenaarmyrank_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSRankRespond::clear_has_rankqueryarenaarmyrank_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSRankRespond::clear_rankqueryarenaarmyrank_rsp() {
  if (rankqueryarenaarmyrank_rsp_ != NULL) rankqueryarenaarmyrank_rsp_->::vmsg::CSRankQueryArenaArmyRankRsp::Clear();
  clear_has_rankqueryarenaarmyrank_rsp();
}
inline const ::vmsg::CSRankQueryArenaArmyRankRsp& CSRankRespond::rankqueryarenaarmyrank_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return rankqueryarenaarmyrank_rsp_ != NULL ? *rankqueryarenaarmyrank_rsp_ : *default_instance().rankqueryarenaarmyrank_rsp_;
#else
  return rankqueryarenaarmyrank_rsp_ != NULL ? *rankqueryarenaarmyrank_rsp_ : *default_instance_->rankqueryarenaarmyrank_rsp_;
#endif
}
inline ::vmsg::CSRankQueryArenaArmyRankRsp* CSRankRespond::mutable_rankqueryarenaarmyrank_rsp() {
  set_has_rankqueryarenaarmyrank_rsp();
  if (rankqueryarenaarmyrank_rsp_ == NULL) rankqueryarenaarmyrank_rsp_ = new ::vmsg::CSRankQueryArenaArmyRankRsp;
  return rankqueryarenaarmyrank_rsp_;
}
inline ::vmsg::CSRankQueryArenaArmyRankRsp* CSRankRespond::release_rankqueryarenaarmyrank_rsp() {
  clear_has_rankqueryarenaarmyrank_rsp();
  ::vmsg::CSRankQueryArenaArmyRankRsp* temp = rankqueryarenaarmyrank_rsp_;
  rankqueryarenaarmyrank_rsp_ = NULL;
  return temp;
}
inline void CSRankRespond::set_allocated_rankqueryarenaarmyrank_rsp(::vmsg::CSRankQueryArenaArmyRankRsp* rankqueryarenaarmyrank_rsp) {
  delete rankqueryarenaarmyrank_rsp_;
  rankqueryarenaarmyrank_rsp_ = rankqueryarenaarmyrank_rsp;
  if (rankqueryarenaarmyrank_rsp) {
    set_has_rankqueryarenaarmyrank_rsp();
  } else {
    clear_has_rankqueryarenaarmyrank_rsp();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSRankMsg_2eproto__INCLUDED
