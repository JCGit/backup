// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSCVZMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSCVZMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSCVZMsg_2eproto() {
  delete CSCVZMonsterHurt::default_instance_;
  delete CSCVZMonsterHP::default_instance_;
  delete CSCVZHitMonsterRqst::default_instance_;
  delete CSCVZHitedRqst::default_instance_;
  delete CSVZControlMonsterInfo::default_instance_;
  delete CSCVZControlNotify::default_instance_;
  delete CSCVZDestroyBaseNotify::default_instance_;
  delete CSCVZHitMonsterNotify::default_instance_;
  delete CSCVZHitedNotify::default_instance_;
  delete CSCVZMonsterInfo::default_instance_;
  delete CSCVZMonsters::default_instance_;
  delete CSCVZRankData::default_instance_;
  delete CSCVZRankInfo::default_instance_;
  delete CSCVZRequest::default_instance_;
  delete CSCVZRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSCVZMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSCVZMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_CSSenceOSD_2eproto();
  CSCVZMonsterHurt::default_instance_ = new CSCVZMonsterHurt();
  CSCVZMonsterHP::default_instance_ = new CSCVZMonsterHP();
  CSCVZHitMonsterRqst::default_instance_ = new CSCVZHitMonsterRqst();
  CSCVZHitedRqst::default_instance_ = new CSCVZHitedRqst();
  CSVZControlMonsterInfo::default_instance_ = new CSVZControlMonsterInfo();
  CSCVZControlNotify::default_instance_ = new CSCVZControlNotify();
  CSCVZDestroyBaseNotify::default_instance_ = new CSCVZDestroyBaseNotify();
  CSCVZHitMonsterNotify::default_instance_ = new CSCVZHitMonsterNotify();
  CSCVZHitedNotify::default_instance_ = new CSCVZHitedNotify();
  CSCVZMonsterInfo::default_instance_ = new CSCVZMonsterInfo();
  CSCVZMonsters::default_instance_ = new CSCVZMonsters();
  CSCVZRankData::default_instance_ = new CSCVZRankData();
  CSCVZRankInfo::default_instance_ = new CSCVZRankInfo();
  CSCVZRequest::default_instance_ = new CSCVZRequest();
  CSCVZRespond::default_instance_ = new CSCVZRespond();
  CSCVZMonsterHurt::default_instance_->InitAsDefaultInstance();
  CSCVZMonsterHP::default_instance_->InitAsDefaultInstance();
  CSCVZHitMonsterRqst::default_instance_->InitAsDefaultInstance();
  CSCVZHitedRqst::default_instance_->InitAsDefaultInstance();
  CSVZControlMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSCVZControlNotify::default_instance_->InitAsDefaultInstance();
  CSCVZDestroyBaseNotify::default_instance_->InitAsDefaultInstance();
  CSCVZHitMonsterNotify::default_instance_->InitAsDefaultInstance();
  CSCVZHitedNotify::default_instance_->InitAsDefaultInstance();
  CSCVZMonsterInfo::default_instance_->InitAsDefaultInstance();
  CSCVZMonsters::default_instance_->InitAsDefaultInstance();
  CSCVZRankData::default_instance_->InitAsDefaultInstance();
  CSCVZRankInfo::default_instance_->InitAsDefaultInstance();
  CSCVZRequest::default_instance_->InitAsDefaultInstance();
  CSCVZRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSCVZMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSCVZMsg_2eproto_once_);
void protobuf_AddDesc_CSCVZMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSCVZMsg_2eproto_once_,
                 &protobuf_AddDesc_CSCVZMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSCVZMsg_2eproto {
  StaticDescriptorInitializer_CSCVZMsg_2eproto() {
    protobuf_AddDesc_CSCVZMsg_2eproto();
  }
} static_descriptor_initializer_CSCVZMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSCVZMonsterHurt::kMonsterIDFieldNumber;
const int CSCVZMonsterHurt::kHurtFieldNumber;
#endif  // !_MSC_VER

CSCVZMonsterHurt::CSCVZMonsterHurt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZMonsterHurt::InitAsDefaultInstance() {
}

CSCVZMonsterHurt::CSCVZMonsterHurt(const CSCVZMonsterHurt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZMonsterHurt::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  hurt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZMonsterHurt::~CSCVZMonsterHurt() {
  SharedDtor();
}

void CSCVZMonsterHurt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZMonsterHurt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZMonsterHurt& CSCVZMonsterHurt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZMonsterHurt* CSCVZMonsterHurt::default_instance_ = NULL;

CSCVZMonsterHurt* CSCVZMonsterHurt::New() const {
  return new CSCVZMonsterHurt;
}

void CSCVZMonsterHurt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    hurt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZMonsterHurt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Hurt;
        break;
      }

      // required uint32 Hurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hurt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurt_)));
          set_has_hurt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZMonsterHurt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint32 Hurt = 2;
  if (has_hurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hurt(), output);
  }

}

int CSCVZMonsterHurt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint32 Hurt = 2;
    if (has_hurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZMonsterHurt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZMonsterHurt*>(&from));
}

void CSCVZMonsterHurt::MergeFrom(const CSCVZMonsterHurt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_hurt()) {
      set_hurt(from.hurt());
    }
  }
}

void CSCVZMonsterHurt::CopyFrom(const CSCVZMonsterHurt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZMonsterHurt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSCVZMonsterHurt::Swap(CSCVZMonsterHurt* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(hurt_, other->hurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZMonsterHurt::GetTypeName() const {
  return "vmsg.CSCVZMonsterHurt";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZMonsterHP::kMonsterIDFieldNumber;
const int CSCVZMonsterHP::kHPFieldNumber;
#endif  // !_MSC_VER

CSCVZMonsterHP::CSCVZMonsterHP()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZMonsterHP::InitAsDefaultInstance() {
}

CSCVZMonsterHP::CSCVZMonsterHP(const CSCVZMonsterHP& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZMonsterHP::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZMonsterHP::~CSCVZMonsterHP() {
  SharedDtor();
}

void CSCVZMonsterHP::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZMonsterHP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZMonsterHP& CSCVZMonsterHP::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZMonsterHP* CSCVZMonsterHP::default_instance_ = NULL;

CSCVZMonsterHP* CSCVZMonsterHP::New() const {
  return new CSCVZMonsterHP;
}

void CSCVZMonsterHP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZMonsterHP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HP;
        break;
      }

      // required uint32 HP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZMonsterHP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint32 HP = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

}

int CSCVZMonsterHP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint32 HP = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZMonsterHP::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZMonsterHP*>(&from));
}

void CSCVZMonsterHP::MergeFrom(const CSCVZMonsterHP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
}

void CSCVZMonsterHP::CopyFrom(const CSCVZMonsterHP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZMonsterHP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSCVZMonsterHP::Swap(CSCVZMonsterHP* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZMonsterHP::GetTypeName() const {
  return "vmsg.CSCVZMonsterHP";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZHitMonsterRqst::kMPFieldNumber;
const int CSCVZHitMonsterRqst::kMonsterHurtFieldNumber;
#endif  // !_MSC_VER

CSCVZHitMonsterRqst::CSCVZHitMonsterRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZHitMonsterRqst::InitAsDefaultInstance() {
}

CSCVZHitMonsterRqst::CSCVZHitMonsterRqst(const CSCVZHitMonsterRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZHitMonsterRqst::SharedCtor() {
  _cached_size_ = 0;
  mp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZHitMonsterRqst::~CSCVZHitMonsterRqst() {
  SharedDtor();
}

void CSCVZHitMonsterRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZHitMonsterRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZHitMonsterRqst& CSCVZHitMonsterRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZHitMonsterRqst* CSCVZHitMonsterRqst::default_instance_ = NULL;

CSCVZHitMonsterRqst* CSCVZHitMonsterRqst::New() const {
  return new CSCVZHitMonsterRqst;
}

void CSCVZHitMonsterRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mp_ = 0u;
  }
  monsterhurt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZHitMonsterRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MonsterHurt;
        break;
      }

      // repeated .vmsg.CSCVZMonsterHurt MonsterHurt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterHurt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterhurt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MonsterHurt;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZHitMonsterRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MP = 1;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mp(), output);
  }

  // repeated .vmsg.CSCVZMonsterHurt MonsterHurt = 2;
  for (int i = 0; i < this->monsterhurt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->monsterhurt(i), output);
  }

}

int CSCVZHitMonsterRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MP = 1;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

  }
  // repeated .vmsg.CSCVZMonsterHurt MonsterHurt = 2;
  total_size += 1 * this->monsterhurt_size();
  for (int i = 0; i < this->monsterhurt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterhurt(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZHitMonsterRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZHitMonsterRqst*>(&from));
}

void CSCVZHitMonsterRqst::MergeFrom(const CSCVZHitMonsterRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterhurt_.MergeFrom(from.monsterhurt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mp()) {
      set_mp(from.mp());
    }
  }
}

void CSCVZHitMonsterRqst::CopyFrom(const CSCVZHitMonsterRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZHitMonsterRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < monsterhurt_size(); i++) {
    if (!this->monsterhurt(i).IsInitialized()) return false;
  }
  return true;
}

void CSCVZHitMonsterRqst::Swap(CSCVZHitMonsterRqst* other) {
  if (other != this) {
    std::swap(mp_, other->mp_);
    monsterhurt_.Swap(&other->monsterhurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZHitMonsterRqst::GetTypeName() const {
  return "vmsg.CSCVZHitMonsterRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZHitedRqst::kHPFieldNumber;
#endif  // !_MSC_VER

CSCVZHitedRqst::CSCVZHitedRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZHitedRqst::InitAsDefaultInstance() {
}

CSCVZHitedRqst::CSCVZHitedRqst(const CSCVZHitedRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZHitedRqst::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZHitedRqst::~CSCVZHitedRqst() {
  SharedDtor();
}

void CSCVZHitedRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZHitedRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZHitedRqst& CSCVZHitedRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZHitedRqst* CSCVZHitedRqst::default_instance_ = NULL;

CSCVZHitedRqst* CSCVZHitedRqst::New() const {
  return new CSCVZHitedRqst;
}

void CSCVZHitedRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZHitedRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZHitedRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HP = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

}

int CSCVZHitedRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HP = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZHitedRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZHitedRqst*>(&from));
}

void CSCVZHitedRqst::MergeFrom(const CSCVZHitedRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
}

void CSCVZHitedRqst::CopyFrom(const CSCVZHitedRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZHitedRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSCVZHitedRqst::Swap(CSCVZHitedRqst* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZHitedRqst::GetTypeName() const {
  return "vmsg.CSCVZHitedRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSVZControlMonsterInfo::kMonsterIDFieldNumber;
const int CSVZControlMonsterInfo::kChannelFieldNumber;
const int CSVZControlMonsterInfo::kWaveFieldNumber;
const int CSVZControlMonsterInfo::kLvFieldNumber;
#endif  // !_MSC_VER

CSVZControlMonsterInfo::CSVZControlMonsterInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSVZControlMonsterInfo::InitAsDefaultInstance() {
}

CSVZControlMonsterInfo::CSVZControlMonsterInfo(const CSVZControlMonsterInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSVZControlMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  channel_ = 0u;
  wave_ = 0u;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSVZControlMonsterInfo::~CSVZControlMonsterInfo() {
  SharedDtor();
}

void CSVZControlMonsterInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSVZControlMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSVZControlMonsterInfo& CSVZControlMonsterInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSVZControlMonsterInfo* CSVZControlMonsterInfo::default_instance_ = NULL;

CSVZControlMonsterInfo* CSVZControlMonsterInfo::New() const {
  return new CSVZControlMonsterInfo;
}

void CSVZControlMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    channel_ = 0u;
    wave_ = 0u;
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSVZControlMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Channel;
        break;
      }

      // required uint32 Channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Wave;
        break;
      }

      // required uint32 Wave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Lv;
        break;
      }

      // required uint32 Lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSVZControlMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint32 Channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel(), output);
  }

  // required uint32 Wave = 3;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wave(), output);
  }

  // required uint32 Lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lv(), output);
  }

}

int CSVZControlMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint32 Channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // required uint32 Wave = 3;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

    // required uint32 Lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSVZControlMonsterInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSVZControlMonsterInfo*>(&from));
}

void CSVZControlMonsterInfo::MergeFrom(const CSVZControlMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
}

void CSVZControlMonsterInfo::CopyFrom(const CSVZControlMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSVZControlMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSVZControlMonsterInfo::Swap(CSVZControlMonsterInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(channel_, other->channel_);
    std::swap(wave_, other->wave_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSVZControlMonsterInfo::GetTypeName() const {
  return "vmsg.CSVZControlMonsterInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZControlNotify::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSCVZControlNotify::CSCVZControlNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZControlNotify::InitAsDefaultInstance() {
}

CSCVZControlNotify::CSCVZControlNotify(const CSCVZControlNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZControlNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZControlNotify::~CSCVZControlNotify() {
  SharedDtor();
}

void CSCVZControlNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZControlNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZControlNotify& CSCVZControlNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZControlNotify* CSCVZControlNotify::default_instance_ = NULL;

CSCVZControlNotify* CSCVZControlNotify::New() const {
  return new CSCVZControlNotify;
}

void CSCVZControlNotify::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZControlNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSVZControlMonsterInfo Monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZControlNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSVZControlMonsterInfo Monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->monsters(i), output);
  }

}

int CSCVZControlNotify::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSVZControlMonsterInfo Monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZControlNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZControlNotify*>(&from));
}

void CSCVZControlNotify::MergeFrom(const CSCVZControlNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
}

void CSCVZControlNotify::CopyFrom(const CSCVZControlNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZControlNotify::IsInitialized() const {

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSCVZControlNotify::Swap(CSCVZControlNotify* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZControlNotify::GetTypeName() const {
  return "vmsg.CSCVZControlNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZDestroyBaseNotify::kBaseHPFieldNumber;
const int CSCVZDestroyBaseNotify::kMonsrerIDsFieldNumber;
#endif  // !_MSC_VER

CSCVZDestroyBaseNotify::CSCVZDestroyBaseNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZDestroyBaseNotify::InitAsDefaultInstance() {
}

CSCVZDestroyBaseNotify::CSCVZDestroyBaseNotify(const CSCVZDestroyBaseNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZDestroyBaseNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZDestroyBaseNotify::~CSCVZDestroyBaseNotify() {
  SharedDtor();
}

void CSCVZDestroyBaseNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZDestroyBaseNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZDestroyBaseNotify& CSCVZDestroyBaseNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZDestroyBaseNotify* CSCVZDestroyBaseNotify::default_instance_ = NULL;

CSCVZDestroyBaseNotify* CSCVZDestroyBaseNotify::New() const {
  return new CSCVZDestroyBaseNotify;
}

void CSCVZDestroyBaseNotify::Clear() {
  basehp_.Clear();
  monsrerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZDestroyBaseNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 BaseHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaseHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_basehp())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_basehp())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_BaseHP;
        if (input->ExpectTag(16)) goto parse_MonsrerIDs;
        break;
      }

      // repeated uint32 MonsrerIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsrerIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_monsrerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monsrerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsrerIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZDestroyBaseNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 BaseHP = 1;
  for (int i = 0; i < this->basehp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->basehp(i), output);
  }

  // repeated uint32 MonsrerIDs = 2;
  for (int i = 0; i < this->monsrerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->monsrerids(i), output);
  }

}

int CSCVZDestroyBaseNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 BaseHP = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->basehp_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->basehp(i));
    }
    total_size += 1 * this->basehp_size() + data_size;
  }

  // repeated uint32 MonsrerIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->monsrerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monsrerids(i));
    }
    total_size += 1 * this->monsrerids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZDestroyBaseNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZDestroyBaseNotify*>(&from));
}

void CSCVZDestroyBaseNotify::MergeFrom(const CSCVZDestroyBaseNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  basehp_.MergeFrom(from.basehp_);
  monsrerids_.MergeFrom(from.monsrerids_);
}

void CSCVZDestroyBaseNotify::CopyFrom(const CSCVZDestroyBaseNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZDestroyBaseNotify::IsInitialized() const {

  return true;
}

void CSCVZDestroyBaseNotify::Swap(CSCVZDestroyBaseNotify* other) {
  if (other != this) {
    basehp_.Swap(&other->basehp_);
    monsrerids_.Swap(&other->monsrerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZDestroyBaseNotify::GetTypeName() const {
  return "vmsg.CSCVZDestroyBaseNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZHitMonsterNotify::kMonsterHPFieldNumber;
#endif  // !_MSC_VER

CSCVZHitMonsterNotify::CSCVZHitMonsterNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZHitMonsterNotify::InitAsDefaultInstance() {
}

CSCVZHitMonsterNotify::CSCVZHitMonsterNotify(const CSCVZHitMonsterNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZHitMonsterNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZHitMonsterNotify::~CSCVZHitMonsterNotify() {
  SharedDtor();
}

void CSCVZHitMonsterNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZHitMonsterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZHitMonsterNotify& CSCVZHitMonsterNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZHitMonsterNotify* CSCVZHitMonsterNotify::default_instance_ = NULL;

CSCVZHitMonsterNotify* CSCVZHitMonsterNotify::New() const {
  return new CSCVZHitMonsterNotify;
}

void CSCVZHitMonsterNotify::Clear() {
  monsterhp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZHitMonsterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSCVZMonsterHP MonsterHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterHP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterhp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_MonsterHP;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZHitMonsterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSCVZMonsterHP MonsterHP = 1;
  for (int i = 0; i < this->monsterhp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->monsterhp(i), output);
  }

}

int CSCVZHitMonsterNotify::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSCVZMonsterHP MonsterHP = 1;
  total_size += 1 * this->monsterhp_size();
  for (int i = 0; i < this->monsterhp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterhp(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZHitMonsterNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZHitMonsterNotify*>(&from));
}

void CSCVZHitMonsterNotify::MergeFrom(const CSCVZHitMonsterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterhp_.MergeFrom(from.monsterhp_);
}

void CSCVZHitMonsterNotify::CopyFrom(const CSCVZHitMonsterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZHitMonsterNotify::IsInitialized() const {

  for (int i = 0; i < monsterhp_size(); i++) {
    if (!this->monsterhp(i).IsInitialized()) return false;
  }
  return true;
}

void CSCVZHitMonsterNotify::Swap(CSCVZHitMonsterNotify* other) {
  if (other != this) {
    monsterhp_.Swap(&other->monsterhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZHitMonsterNotify::GetTypeName() const {
  return "vmsg.CSCVZHitMonsterNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZHitedNotify::kUinFieldNumber;
const int CSCVZHitedNotify::kHPFieldNumber;
#endif  // !_MSC_VER

CSCVZHitedNotify::CSCVZHitedNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZHitedNotify::InitAsDefaultInstance() {
}

CSCVZHitedNotify::CSCVZHitedNotify(const CSCVZHitedNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZHitedNotify::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZHitedNotify::~CSCVZHitedNotify() {
  SharedDtor();
}

void CSCVZHitedNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZHitedNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZHitedNotify& CSCVZHitedNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZHitedNotify* CSCVZHitedNotify::default_instance_ = NULL;

CSCVZHitedNotify* CSCVZHitedNotify::New() const {
  return new CSCVZHitedNotify;
}

void CSCVZHitedNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZHitedNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HP;
        break;
      }

      // required uint32 HP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZHitedNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required uint32 HP = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

}

int CSCVZHitedNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required uint32 HP = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZHitedNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZHitedNotify*>(&from));
}

void CSCVZHitedNotify::MergeFrom(const CSCVZHitedNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
}

void CSCVZHitedNotify::CopyFrom(const CSCVZHitedNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZHitedNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSCVZHitedNotify::Swap(CSCVZHitedNotify* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZHitedNotify::GetTypeName() const {
  return "vmsg.CSCVZHitedNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZMonsterInfo::kMonsterIDFieldNumber;
const int CSCVZMonsterInfo::kPosFieldNumber;
const int CSCVZMonsterInfo::kActionFieldNumber;
const int CSCVZMonsterInfo::kWaveFieldNumber;
const int CSCVZMonsterInfo::kLvFieldNumber;
const int CSCVZMonsterInfo::kSkillIDFieldNumber;
#endif  // !_MSC_VER

CSCVZMonsterInfo::CSCVZMonsterInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZMonsterInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pos_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  pos_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSCVZMonsterInfo::CSCVZMonsterInfo(const CSCVZMonsterInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  pos_ = NULL;
  action_ = 0u;
  wave_ = 0u;
  lv_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZMonsterInfo::~CSCVZMonsterInfo() {
  SharedDtor();
}

void CSCVZMonsterInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete pos_;
  }
}

void CSCVZMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZMonsterInfo& CSCVZMonsterInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZMonsterInfo* CSCVZMonsterInfo::default_instance_ = NULL;

CSCVZMonsterInfo* CSCVZMonsterInfo::New() const {
  return new CSCVZMonsterInfo;
}

void CSCVZMonsterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::vmsg::CSScenePoint::Clear();
    }
    action_ = 0u;
    wave_ = 0u;
    lv_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // required .vmsg.CSScenePoint Pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Action;
        break;
      }

      // required uint32 Action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Wave;
        break;
      }

      // required uint32 Wave = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Lv;
        break;
      }

      // required uint32 Lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_SkillID;
        break;
      }

      // required uint32 SkillID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required .vmsg.CSScenePoint Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->pos(), output);
  }

  // required uint32 Action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->action(), output);
  }

  // required uint32 Wave = 4;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wave(), output);
  }

  // required uint32 Lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // required uint32 SkillID = 6;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->skillid(), output);
  }

}

int CSCVZMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required .vmsg.CSScenePoint Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required uint32 Action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // required uint32 Wave = 4;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

    // required uint32 Lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 SkillID = 6;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZMonsterInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZMonsterInfo*>(&from));
}

void CSCVZMonsterInfo::MergeFrom(const CSCVZMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_pos()) {
      mutable_pos()->::vmsg::CSScenePoint::MergeFrom(from.pos());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
}

void CSCVZMonsterInfo::CopyFrom(const CSCVZMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZMonsterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CSCVZMonsterInfo::Swap(CSCVZMonsterInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(pos_, other->pos_);
    std::swap(action_, other->action_);
    std::swap(wave_, other->wave_);
    std::swap(lv_, other->lv_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZMonsterInfo::GetTypeName() const {
  return "vmsg.CSCVZMonsterInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZMonsters::kMonstersFieldNumber;
#endif  // !_MSC_VER

CSCVZMonsters::CSCVZMonsters()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZMonsters::InitAsDefaultInstance() {
}

CSCVZMonsters::CSCVZMonsters(const CSCVZMonsters& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZMonsters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZMonsters::~CSCVZMonsters() {
  SharedDtor();
}

void CSCVZMonsters::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZMonsters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZMonsters& CSCVZMonsters::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZMonsters* CSCVZMonsters::default_instance_ = NULL;

CSCVZMonsters* CSCVZMonsters::New() const {
  return new CSCVZMonsters;
}

void CSCVZMonsters::Clear() {
  monsters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZMonsters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSCVZMonsterInfo Monsters = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Monsters;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZMonsters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSCVZMonsterInfo Monsters = 1;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->monsters(i), output);
  }

}

int CSCVZMonsters::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSCVZMonsterInfo Monsters = 1;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZMonsters::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZMonsters*>(&from));
}

void CSCVZMonsters::MergeFrom(const CSCVZMonsters& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsters_.MergeFrom(from.monsters_);
}

void CSCVZMonsters::CopyFrom(const CSCVZMonsters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZMonsters::IsInitialized() const {

  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  return true;
}

void CSCVZMonsters::Swap(CSCVZMonsters* other) {
  if (other != this) {
    monsters_.Swap(&other->monsters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZMonsters::GetTypeName() const {
  return "vmsg.CSCVZMonsters";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZRankData::kUinFieldNumber;
const int CSCVZRankData::kNameFieldNumber;
const int CSCVZRankData::kHitFieldNumber;
#endif  // !_MSC_VER

CSCVZRankData::CSCVZRankData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZRankData::InitAsDefaultInstance() {
}

CSCVZRankData::CSCVZRankData(const CSCVZRankData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZRankData::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hit_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZRankData::~CSCVZRankData() {
  SharedDtor();
}

void CSCVZRankData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZRankData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZRankData& CSCVZRankData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZRankData* CSCVZRankData::default_instance_ = NULL;

CSCVZRankData* CSCVZRankData::New() const {
  return new CSCVZRankData;
}

void CSCVZRankData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hit_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZRankData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Hit;
        break;
      }

      // required uint64 Hit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZRankData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint64 Hit = 3;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->hit(), output);
  }

}

int CSCVZRankData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 Hit = 3;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hit());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZRankData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZRankData*>(&from));
}

void CSCVZRankData::MergeFrom(const CSCVZRankData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
  }
}

void CSCVZRankData::CopyFrom(const CSCVZRankData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZRankData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSCVZRankData::Swap(CSCVZRankData* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(name_, other->name_);
    std::swap(hit_, other->hit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZRankData::GetTypeName() const {
  return "vmsg.CSCVZRankData";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZRankInfo::kRankDatasFieldNumber;
#endif  // !_MSC_VER

CSCVZRankInfo::CSCVZRankInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZRankInfo::InitAsDefaultInstance() {
}

CSCVZRankInfo::CSCVZRankInfo(const CSCVZRankInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZRankInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZRankInfo::~CSCVZRankInfo() {
  SharedDtor();
}

void CSCVZRankInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCVZRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZRankInfo& CSCVZRankInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZRankInfo* CSCVZRankInfo::default_instance_ = NULL;

CSCVZRankInfo* CSCVZRankInfo::New() const {
  return new CSCVZRankInfo;
}

void CSCVZRankInfo::Clear() {
  rankdatas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSCVZRankData RankDatas = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankDatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_RankDatas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSCVZRankData RankDatas = 1;
  for (int i = 0; i < this->rankdatas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rankdatas(i), output);
  }

}

int CSCVZRankInfo::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSCVZRankData RankDatas = 1;
  total_size += 1 * this->rankdatas_size();
  for (int i = 0; i < this->rankdatas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankdatas(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZRankInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZRankInfo*>(&from));
}

void CSCVZRankInfo::MergeFrom(const CSCVZRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankdatas_.MergeFrom(from.rankdatas_);
}

void CSCVZRankInfo::CopyFrom(const CSCVZRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZRankInfo::IsInitialized() const {

  for (int i = 0; i < rankdatas_size(); i++) {
    if (!this->rankdatas(i).IsInitialized()) return false;
  }
  return true;
}

void CSCVZRankInfo::Swap(CSCVZRankInfo* other) {
  if (other != this) {
    rankdatas_.Swap(&other->rankdatas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZRankInfo::GetTypeName() const {
  return "vmsg.CSCVZRankInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZRequest::kHitMonsterRqstFieldNumber;
const int CSCVZRequest::kHitedRqstFieldNumber;
const int CSCVZRequest::kDestroyBaseRqstFieldNumber;
const int CSCVZRequest::kSubmitMonsterRqstFieldNumber;
#endif  // !_MSC_VER

CSCVZRequest::CSCVZRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hitmonster_rqst_ = const_cast< ::vmsg::CSCVZHitMonsterRqst*>(
      ::vmsg::CSCVZHitMonsterRqst::internal_default_instance());
#else
  hitmonster_rqst_ = const_cast< ::vmsg::CSCVZHitMonsterRqst*>(&::vmsg::CSCVZHitMonsterRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hited_rqst_ = const_cast< ::vmsg::CSCVZHitedRqst*>(
      ::vmsg::CSCVZHitedRqst::internal_default_instance());
#else
  hited_rqst_ = const_cast< ::vmsg::CSCVZHitedRqst*>(&::vmsg::CSCVZHitedRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  submitmonster_rqst_ = const_cast< ::vmsg::CSCVZMonsters*>(
      ::vmsg::CSCVZMonsters::internal_default_instance());
#else
  submitmonster_rqst_ = const_cast< ::vmsg::CSCVZMonsters*>(&::vmsg::CSCVZMonsters::default_instance());
#endif
}

CSCVZRequest::CSCVZRequest(const CSCVZRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZRequest::SharedCtor() {
  _cached_size_ = 0;
  hitmonster_rqst_ = NULL;
  hited_rqst_ = NULL;
  destroybase_rqst_ = 0;
  submitmonster_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZRequest::~CSCVZRequest() {
  SharedDtor();
}

void CSCVZRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete hitmonster_rqst_;
    delete hited_rqst_;
    delete submitmonster_rqst_;
  }
}

void CSCVZRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZRequest& CSCVZRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZRequest* CSCVZRequest::default_instance_ = NULL;

CSCVZRequest* CSCVZRequest::New() const {
  return new CSCVZRequest;
}

void CSCVZRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hitmonster_rqst()) {
      if (hitmonster_rqst_ != NULL) hitmonster_rqst_->::vmsg::CSCVZHitMonsterRqst::Clear();
    }
    if (has_hited_rqst()) {
      if (hited_rqst_ != NULL) hited_rqst_->::vmsg::CSCVZHitedRqst::Clear();
    }
    destroybase_rqst_ = 0;
    if (has_submitmonster_rqst()) {
      if (submitmonster_rqst_ != NULL) submitmonster_rqst_->::vmsg::CSCVZMonsters::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSCVZHitMonsterRqst HitMonster_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitmonster_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Hited_Rqst;
        break;
      }

      // optional .vmsg.CSCVZHitedRqst Hited_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Hited_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hited_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DestroyBase_Rqst;
        break;
      }

      // optional int32 DestroyBase_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DestroyBase_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destroybase_rqst_)));
          set_has_destroybase_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_SubmitMonster_Rqst;
        break;
      }

      // optional .vmsg.CSCVZMonsters SubmitMonster_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SubmitMonster_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_submitmonster_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSCVZHitMonsterRqst HitMonster_Rqst = 1;
  if (has_hitmonster_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->hitmonster_rqst(), output);
  }

  // optional .vmsg.CSCVZHitedRqst Hited_Rqst = 2;
  if (has_hited_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->hited_rqst(), output);
  }

  // optional int32 DestroyBase_Rqst = 3;
  if (has_destroybase_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->destroybase_rqst(), output);
  }

  // optional .vmsg.CSCVZMonsters SubmitMonster_Rqst = 4;
  if (has_submitmonster_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->submitmonster_rqst(), output);
  }

}

int CSCVZRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSCVZHitMonsterRqst HitMonster_Rqst = 1;
    if (has_hitmonster_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hitmonster_rqst());
    }

    // optional .vmsg.CSCVZHitedRqst Hited_Rqst = 2;
    if (has_hited_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hited_rqst());
    }

    // optional int32 DestroyBase_Rqst = 3;
    if (has_destroybase_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destroybase_rqst());
    }

    // optional .vmsg.CSCVZMonsters SubmitMonster_Rqst = 4;
    if (has_submitmonster_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->submitmonster_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZRequest*>(&from));
}

void CSCVZRequest::MergeFrom(const CSCVZRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hitmonster_rqst()) {
      mutable_hitmonster_rqst()->::vmsg::CSCVZHitMonsterRqst::MergeFrom(from.hitmonster_rqst());
    }
    if (from.has_hited_rqst()) {
      mutable_hited_rqst()->::vmsg::CSCVZHitedRqst::MergeFrom(from.hited_rqst());
    }
    if (from.has_destroybase_rqst()) {
      set_destroybase_rqst(from.destroybase_rqst());
    }
    if (from.has_submitmonster_rqst()) {
      mutable_submitmonster_rqst()->::vmsg::CSCVZMonsters::MergeFrom(from.submitmonster_rqst());
    }
  }
}

void CSCVZRequest::CopyFrom(const CSCVZRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZRequest::IsInitialized() const {

  if (has_hitmonster_rqst()) {
    if (!this->hitmonster_rqst().IsInitialized()) return false;
  }
  if (has_hited_rqst()) {
    if (!this->hited_rqst().IsInitialized()) return false;
  }
  if (has_submitmonster_rqst()) {
    if (!this->submitmonster_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSCVZRequest::Swap(CSCVZRequest* other) {
  if (other != this) {
    std::swap(hitmonster_rqst_, other->hitmonster_rqst_);
    std::swap(hited_rqst_, other->hited_rqst_);
    std::swap(destroybase_rqst_, other->destroybase_rqst_);
    std::swap(submitmonster_rqst_, other->submitmonster_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZRequest::GetTypeName() const {
  return "vmsg.CSCVZRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCVZRespond::kControlNotifyFieldNumber;
const int CSCVZRespond::kDestroyBaseNotifyFieldNumber;
const int CSCVZRespond::kHitMonsterNotifyFieldNumber;
const int CSCVZRespond::kHitedNotifyFieldNumber;
const int CSCVZRespond::kMonstersNotifyFieldNumber;
const int CSCVZRespond::kRankInfoNotifyFieldNumber;
const int CSCVZRespond::kNextWaveRemainTimeFieldNumber;
const int CSCVZRespond::kMyContAwardCoinNotifyFieldNumber;
const int CSCVZRespond::kTotalContNotifyFieldNumber;
#endif  // !_MSC_VER

CSCVZRespond::CSCVZRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCVZRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  control_notify_ = const_cast< ::vmsg::CSCVZControlNotify*>(
      ::vmsg::CSCVZControlNotify::internal_default_instance());
#else
  control_notify_ = const_cast< ::vmsg::CSCVZControlNotify*>(&::vmsg::CSCVZControlNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  destroybase_notify_ = const_cast< ::vmsg::CSCVZDestroyBaseNotify*>(
      ::vmsg::CSCVZDestroyBaseNotify::internal_default_instance());
#else
  destroybase_notify_ = const_cast< ::vmsg::CSCVZDestroyBaseNotify*>(&::vmsg::CSCVZDestroyBaseNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hitmonster_notify_ = const_cast< ::vmsg::CSCVZHitMonsterNotify*>(
      ::vmsg::CSCVZHitMonsterNotify::internal_default_instance());
#else
  hitmonster_notify_ = const_cast< ::vmsg::CSCVZHitMonsterNotify*>(&::vmsg::CSCVZHitMonsterNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  hited_notify_ = const_cast< ::vmsg::CSCVZHitedNotify*>(
      ::vmsg::CSCVZHitedNotify::internal_default_instance());
#else
  hited_notify_ = const_cast< ::vmsg::CSCVZHitedNotify*>(&::vmsg::CSCVZHitedNotify::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  monsters_notify_ = const_cast< ::vmsg::CSCVZMonsters*>(
      ::vmsg::CSCVZMonsters::internal_default_instance());
#else
  monsters_notify_ = const_cast< ::vmsg::CSCVZMonsters*>(&::vmsg::CSCVZMonsters::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankinfo_notify_ = const_cast< ::vmsg::CSCVZRankInfo*>(
      ::vmsg::CSCVZRankInfo::internal_default_instance());
#else
  rankinfo_notify_ = const_cast< ::vmsg::CSCVZRankInfo*>(&::vmsg::CSCVZRankInfo::default_instance());
#endif
}

CSCVZRespond::CSCVZRespond(const CSCVZRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCVZRespond::SharedCtor() {
  _cached_size_ = 0;
  control_notify_ = NULL;
  destroybase_notify_ = NULL;
  hitmonster_notify_ = NULL;
  hited_notify_ = NULL;
  monsters_notify_ = NULL;
  rankinfo_notify_ = NULL;
  nextwaveremaintime_ = 0u;
  mycontawardcoin_notify_ = 0u;
  totalcont_notify_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCVZRespond::~CSCVZRespond() {
  SharedDtor();
}

void CSCVZRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete control_notify_;
    delete destroybase_notify_;
    delete hitmonster_notify_;
    delete hited_notify_;
    delete monsters_notify_;
    delete rankinfo_notify_;
  }
}

void CSCVZRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCVZRespond& CSCVZRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCVZMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCVZMsg_2eproto();
#endif
  return *default_instance_;
}

CSCVZRespond* CSCVZRespond::default_instance_ = NULL;

CSCVZRespond* CSCVZRespond::New() const {
  return new CSCVZRespond;
}

void CSCVZRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_control_notify()) {
      if (control_notify_ != NULL) control_notify_->::vmsg::CSCVZControlNotify::Clear();
    }
    if (has_destroybase_notify()) {
      if (destroybase_notify_ != NULL) destroybase_notify_->::vmsg::CSCVZDestroyBaseNotify::Clear();
    }
    if (has_hitmonster_notify()) {
      if (hitmonster_notify_ != NULL) hitmonster_notify_->::vmsg::CSCVZHitMonsterNotify::Clear();
    }
    if (has_hited_notify()) {
      if (hited_notify_ != NULL) hited_notify_->::vmsg::CSCVZHitedNotify::Clear();
    }
    if (has_monsters_notify()) {
      if (monsters_notify_ != NULL) monsters_notify_->::vmsg::CSCVZMonsters::Clear();
    }
    if (has_rankinfo_notify()) {
      if (rankinfo_notify_ != NULL) rankinfo_notify_->::vmsg::CSCVZRankInfo::Clear();
    }
    nextwaveremaintime_ = 0u;
    mycontawardcoin_notify_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    totalcont_notify_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCVZRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSCVZControlNotify Control_Notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DestroyBase_Notify;
        break;
      }

      // optional .vmsg.CSCVZDestroyBaseNotify DestroyBase_Notify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DestroyBase_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroybase_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_HitMonster_Notify;
        break;
      }

      // optional .vmsg.CSCVZHitMonsterNotify HitMonster_Notify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HitMonster_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitmonster_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Hited_Notify;
        break;
      }

      // optional .vmsg.CSCVZHitedNotify Hited_Notify = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Hited_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hited_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Monsters_Notify;
        break;
      }

      // optional .vmsg.CSCVZMonsters Monsters_Notify = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Monsters_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monsters_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RankInfo_Notify;
        break;
      }

      // optional .vmsg.CSCVZRankInfo RankInfo_Notify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankInfo_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankinfo_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_NextWaveRemainTime;
        break;
      }

      // optional uint32 NextWaveRemainTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextWaveRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextwaveremaintime_)));
          set_has_nextwaveremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MyContAwardCoin_Notify;
        break;
      }

      // optional uint32 MyContAwardCoin_Notify = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyContAwardCoin_Notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mycontawardcoin_notify_)));
          set_has_mycontawardcoin_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_TotalCont_Notify;
        break;
      }

      // optional uint32 TotalCont_Notify = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalCont_Notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcont_notify_)));
          set_has_totalcont_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCVZRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSCVZControlNotify Control_Notify = 1;
  if (has_control_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->control_notify(), output);
  }

  // optional .vmsg.CSCVZDestroyBaseNotify DestroyBase_Notify = 2;
  if (has_destroybase_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->destroybase_notify(), output);
  }

  // optional .vmsg.CSCVZHitMonsterNotify HitMonster_Notify = 3;
  if (has_hitmonster_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->hitmonster_notify(), output);
  }

  // optional .vmsg.CSCVZHitedNotify Hited_Notify = 4;
  if (has_hited_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->hited_notify(), output);
  }

  // optional .vmsg.CSCVZMonsters Monsters_Notify = 5;
  if (has_monsters_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->monsters_notify(), output);
  }

  // optional .vmsg.CSCVZRankInfo RankInfo_Notify = 6;
  if (has_rankinfo_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->rankinfo_notify(), output);
  }

  // optional uint32 NextWaveRemainTime = 7;
  if (has_nextwaveremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->nextwaveremaintime(), output);
  }

  // optional uint32 MyContAwardCoin_Notify = 8;
  if (has_mycontawardcoin_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mycontawardcoin_notify(), output);
  }

  // optional uint32 TotalCont_Notify = 9;
  if (has_totalcont_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->totalcont_notify(), output);
  }

}

int CSCVZRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSCVZControlNotify Control_Notify = 1;
    if (has_control_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_notify());
    }

    // optional .vmsg.CSCVZDestroyBaseNotify DestroyBase_Notify = 2;
    if (has_destroybase_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroybase_notify());
    }

    // optional .vmsg.CSCVZHitMonsterNotify HitMonster_Notify = 3;
    if (has_hitmonster_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hitmonster_notify());
    }

    // optional .vmsg.CSCVZHitedNotify Hited_Notify = 4;
    if (has_hited_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hited_notify());
    }

    // optional .vmsg.CSCVZMonsters Monsters_Notify = 5;
    if (has_monsters_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monsters_notify());
    }

    // optional .vmsg.CSCVZRankInfo RankInfo_Notify = 6;
    if (has_rankinfo_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankinfo_notify());
    }

    // optional uint32 NextWaveRemainTime = 7;
    if (has_nextwaveremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextwaveremaintime());
    }

    // optional uint32 MyContAwardCoin_Notify = 8;
    if (has_mycontawardcoin_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mycontawardcoin_notify());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 TotalCont_Notify = 9;
    if (has_totalcont_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcont_notify());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCVZRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCVZRespond*>(&from));
}

void CSCVZRespond::MergeFrom(const CSCVZRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_notify()) {
      mutable_control_notify()->::vmsg::CSCVZControlNotify::MergeFrom(from.control_notify());
    }
    if (from.has_destroybase_notify()) {
      mutable_destroybase_notify()->::vmsg::CSCVZDestroyBaseNotify::MergeFrom(from.destroybase_notify());
    }
    if (from.has_hitmonster_notify()) {
      mutable_hitmonster_notify()->::vmsg::CSCVZHitMonsterNotify::MergeFrom(from.hitmonster_notify());
    }
    if (from.has_hited_notify()) {
      mutable_hited_notify()->::vmsg::CSCVZHitedNotify::MergeFrom(from.hited_notify());
    }
    if (from.has_monsters_notify()) {
      mutable_monsters_notify()->::vmsg::CSCVZMonsters::MergeFrom(from.monsters_notify());
    }
    if (from.has_rankinfo_notify()) {
      mutable_rankinfo_notify()->::vmsg::CSCVZRankInfo::MergeFrom(from.rankinfo_notify());
    }
    if (from.has_nextwaveremaintime()) {
      set_nextwaveremaintime(from.nextwaveremaintime());
    }
    if (from.has_mycontawardcoin_notify()) {
      set_mycontawardcoin_notify(from.mycontawardcoin_notify());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_totalcont_notify()) {
      set_totalcont_notify(from.totalcont_notify());
    }
  }
}

void CSCVZRespond::CopyFrom(const CSCVZRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCVZRespond::IsInitialized() const {

  if (has_control_notify()) {
    if (!this->control_notify().IsInitialized()) return false;
  }
  if (has_hitmonster_notify()) {
    if (!this->hitmonster_notify().IsInitialized()) return false;
  }
  if (has_hited_notify()) {
    if (!this->hited_notify().IsInitialized()) return false;
  }
  if (has_monsters_notify()) {
    if (!this->monsters_notify().IsInitialized()) return false;
  }
  if (has_rankinfo_notify()) {
    if (!this->rankinfo_notify().IsInitialized()) return false;
  }
  return true;
}

void CSCVZRespond::Swap(CSCVZRespond* other) {
  if (other != this) {
    std::swap(control_notify_, other->control_notify_);
    std::swap(destroybase_notify_, other->destroybase_notify_);
    std::swap(hitmonster_notify_, other->hitmonster_notify_);
    std::swap(hited_notify_, other->hited_notify_);
    std::swap(monsters_notify_, other->monsters_notify_);
    std::swap(rankinfo_notify_, other->rankinfo_notify_);
    std::swap(nextwaveremaintime_, other->nextwaveremaintime_);
    std::swap(mycontawardcoin_notify_, other->mycontawardcoin_notify_);
    std::swap(totalcont_notify_, other->totalcont_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCVZRespond::GetTypeName() const {
  return "vmsg.CSCVZRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
