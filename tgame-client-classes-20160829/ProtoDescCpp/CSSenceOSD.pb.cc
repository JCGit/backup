// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSSenceOSD.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSSenceOSD.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSSenceOSD_2eproto() {
  delete CSPlayerCommInScene::default_instance_;
  delete CSScenePoint::default_instance_;
  delete CSPlayerPosInScene::default_instance_;
  delete CSPlayerMoveInScene::default_instance_;
  delete CSPlayerSetPosInScene::default_instance_;
  delete CSPlayerStartAtk::default_instance_;
  delete CSPlayerStopAtk::default_instance_;
  delete CSPlayerSkillInScene::default_instance_;
  delete CSPlayerStatChangeInScene::default_instance_;
  delete CSPlayerOSDInfo::default_instance_;
  delete CSOSDMonstersInfo::default_instance_;
  delete CSQueryPlayerSceneOSDInfoRsp::default_instance_;
  delete CSSyncPlayerOSDInfo::default_instance_;
  delete CSPlayerChangeSceneRqst::default_instance_;
  delete CSSceneOSDRequest::default_instance_;
  delete CSSceneOSDRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSSenceOSD_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSSenceOSD_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSPlayerCommInScene::default_instance_ = new CSPlayerCommInScene();
  CSScenePoint::default_instance_ = new CSScenePoint();
  CSPlayerPosInScene::default_instance_ = new CSPlayerPosInScene();
  CSPlayerMoveInScene::default_instance_ = new CSPlayerMoveInScene();
  CSPlayerSetPosInScene::default_instance_ = new CSPlayerSetPosInScene();
  CSPlayerStartAtk::default_instance_ = new CSPlayerStartAtk();
  CSPlayerStopAtk::default_instance_ = new CSPlayerStopAtk();
  CSPlayerSkillInScene::default_instance_ = new CSPlayerSkillInScene();
  CSPlayerStatChangeInScene::default_instance_ = new CSPlayerStatChangeInScene();
  CSPlayerOSDInfo::default_instance_ = new CSPlayerOSDInfo();
  CSOSDMonstersInfo::default_instance_ = new CSOSDMonstersInfo();
  CSQueryPlayerSceneOSDInfoRsp::default_instance_ = new CSQueryPlayerSceneOSDInfoRsp();
  CSSyncPlayerOSDInfo::default_instance_ = new CSSyncPlayerOSDInfo();
  CSPlayerChangeSceneRqst::default_instance_ = new CSPlayerChangeSceneRqst();
  CSSceneOSDRequest::default_instance_ = new CSSceneOSDRequest();
  CSSceneOSDRespond::default_instance_ = new CSSceneOSDRespond();
  CSPlayerCommInScene::default_instance_->InitAsDefaultInstance();
  CSScenePoint::default_instance_->InitAsDefaultInstance();
  CSPlayerPosInScene::default_instance_->InitAsDefaultInstance();
  CSPlayerMoveInScene::default_instance_->InitAsDefaultInstance();
  CSPlayerSetPosInScene::default_instance_->InitAsDefaultInstance();
  CSPlayerStartAtk::default_instance_->InitAsDefaultInstance();
  CSPlayerStopAtk::default_instance_->InitAsDefaultInstance();
  CSPlayerSkillInScene::default_instance_->InitAsDefaultInstance();
  CSPlayerStatChangeInScene::default_instance_->InitAsDefaultInstance();
  CSPlayerOSDInfo::default_instance_->InitAsDefaultInstance();
  CSOSDMonstersInfo::default_instance_->InitAsDefaultInstance();
  CSQueryPlayerSceneOSDInfoRsp::default_instance_->InitAsDefaultInstance();
  CSSyncPlayerOSDInfo::default_instance_->InitAsDefaultInstance();
  CSPlayerChangeSceneRqst::default_instance_->InitAsDefaultInstance();
  CSSceneOSDRequest::default_instance_->InitAsDefaultInstance();
  CSSceneOSDRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSSenceOSD_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSSenceOSD_2eproto_once_);
void protobuf_AddDesc_CSSenceOSD_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSSenceOSD_2eproto_once_,
                 &protobuf_AddDesc_CSSenceOSD_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSSenceOSD_2eproto {
  StaticDescriptorInitializer_CSSenceOSD_2eproto() {
    protobuf_AddDesc_CSSenceOSD_2eproto();
  }
} static_descriptor_initializer_CSSenceOSD_2eproto_;
#endif
bool PLAYER_STAT_IN_SCENE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool PLAYER_ACTION_IN_SCENE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool MONSTER_ACTION_SCENE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerCommInScene::kUinFieldNumber;
const int CSPlayerCommInScene::kNickFieldNumber;
const int CSPlayerCommInScene::kWeaponCfgIDFieldNumber;
const int CSPlayerCommInScene::kShowIDFieldNumber;
const int CSPlayerCommInScene::kVipLvlFieldNumber;
#endif  // !_MSC_VER

CSPlayerCommInScene::CSPlayerCommInScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerCommInScene::InitAsDefaultInstance() {
}

CSPlayerCommInScene::CSPlayerCommInScene(const CSPlayerCommInScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerCommInScene::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weaponcfgid_ = 0u;
  showid_ = 0u;
  viplvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerCommInScene::~CSPlayerCommInScene() {
  SharedDtor();
}

void CSPlayerCommInScene::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerCommInScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerCommInScene& CSPlayerCommInScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerCommInScene* CSPlayerCommInScene::default_instance_ = NULL;

CSPlayerCommInScene* CSPlayerCommInScene::New() const {
  return new CSPlayerCommInScene;
}

void CSPlayerCommInScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    weaponcfgid_ = 0u;
    showid_ = 0u;
    viplvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerCommInScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nick;
        break;
      }

      // required string Nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WeaponCfgID;
        break;
      }

      // required uint32 WeaponCfgID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponcfgid_)));
          set_has_weaponcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VipLvl;
        break;
      }

      // required uint32 VipLvl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplvl_)));
          set_has_viplvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerCommInScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // required uint32 WeaponCfgID = 3;
  if (has_weaponcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weaponcfgid(), output);
  }

  // required uint32 ShowID = 4;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->showid(), output);
  }

  // required uint32 VipLvl = 5;
  if (has_viplvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplvl(), output);
  }

}

int CSPlayerCommInScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required uint32 WeaponCfgID = 3;
    if (has_weaponcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponcfgid());
    }

    // required uint32 ShowID = 4;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

    // required uint32 VipLvl = 5;
    if (has_viplvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplvl());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerCommInScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerCommInScene*>(&from));
}

void CSPlayerCommInScene::MergeFrom(const CSPlayerCommInScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_weaponcfgid()) {
      set_weaponcfgid(from.weaponcfgid());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_viplvl()) {
      set_viplvl(from.viplvl());
    }
  }
}

void CSPlayerCommInScene::CopyFrom(const CSPlayerCommInScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerCommInScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSPlayerCommInScene::Swap(CSPlayerCommInScene* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nick_, other->nick_);
    std::swap(weaponcfgid_, other->weaponcfgid_);
    std::swap(showid_, other->showid_);
    std::swap(viplvl_, other->viplvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerCommInScene::GetTypeName() const {
  return "vmsg.CSPlayerCommInScene";
}


// ===================================================================

#ifndef _MSC_VER
const int CSScenePoint::kXPosFieldNumber;
const int CSScenePoint::kYPosFieldNumber;
#endif  // !_MSC_VER

CSScenePoint::CSScenePoint()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSScenePoint::InitAsDefaultInstance() {
}

CSScenePoint::CSScenePoint(const CSScenePoint& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSScenePoint::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSScenePoint::~CSScenePoint() {
  SharedDtor();
}

void CSScenePoint::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSScenePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSScenePoint& CSScenePoint::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSScenePoint* CSScenePoint::default_instance_ = NULL;

CSScenePoint* CSScenePoint::New() const {
  return new CSScenePoint;
}

void CSScenePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSScenePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 XPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_YPos;
        break;
      }

      // required int32 YPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_YPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSScenePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 XPos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpos(), output);
  }

  // required int32 YPos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ypos(), output);
  }

}

int CSScenePoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 XPos = 1;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 YPos = 2;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSScenePoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSScenePoint*>(&from));
}

void CSScenePoint::MergeFrom(const CSScenePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
}

void CSScenePoint::CopyFrom(const CSScenePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSScenePoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSScenePoint::Swap(CSScenePoint* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSScenePoint::GetTypeName() const {
  return "vmsg.CSScenePoint";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerPosInScene::kCommFieldNumber;
const int CSPlayerPosInScene::kScenePointFieldNumber;
const int CSPlayerPosInScene::kDirectFieldNumber;
#endif  // !_MSC_VER

CSPlayerPosInScene::CSPlayerPosInScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerPosInScene::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comm_ = const_cast< ::vmsg::CSPlayerCommInScene*>(
      ::vmsg::CSPlayerCommInScene::internal_default_instance());
#else
  comm_ = const_cast< ::vmsg::CSPlayerCommInScene*>(&::vmsg::CSPlayerCommInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direct_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  direct_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSPlayerPosInScene::CSPlayerPosInScene(const CSPlayerPosInScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerPosInScene::SharedCtor() {
  _cached_size_ = 0;
  comm_ = NULL;
  scenepoint_ = NULL;
  direct_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerPosInScene::~CSPlayerPosInScene() {
  SharedDtor();
}

void CSPlayerPosInScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comm_;
    delete scenepoint_;
    delete direct_;
  }
}

void CSPlayerPosInScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerPosInScene& CSPlayerPosInScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerPosInScene* CSPlayerPosInScene::default_instance_ = NULL;

CSPlayerPosInScene* CSPlayerPosInScene::New() const {
  return new CSPlayerPosInScene;
}

void CSPlayerPosInScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_comm()) {
      if (comm_ != NULL) comm_->::vmsg::CSPlayerCommInScene::Clear();
    }
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
    if (has_direct()) {
      if (direct_ != NULL) direct_->::vmsg::CSScenePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerPosInScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerCommInScene Comm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ScenePoint;
        break;
      }

      // optional .vmsg.CSScenePoint ScenePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Direct;
        break;
      }

      // required .vmsg.CSScenePoint Direct = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerPosInScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerCommInScene Comm = 1;
  if (has_comm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->comm(), output);
  }

  // optional .vmsg.CSScenePoint ScenePoint = 2;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->scenepoint(), output);
  }

  // required .vmsg.CSScenePoint Direct = 3;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->direct(), output);
  }

}

int CSPlayerPosInScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerCommInScene Comm = 1;
    if (has_comm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comm());
    }

    // optional .vmsg.CSScenePoint ScenePoint = 2;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

    // required .vmsg.CSScenePoint Direct = 3;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerPosInScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerPosInScene*>(&from));
}

void CSPlayerPosInScene::MergeFrom(const CSPlayerPosInScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comm()) {
      mutable_comm()->::vmsg::CSPlayerCommInScene::MergeFrom(from.comm());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
    if (from.has_direct()) {
      mutable_direct()->::vmsg::CSScenePoint::MergeFrom(from.direct());
    }
  }
}

void CSPlayerPosInScene::CopyFrom(const CSPlayerPosInScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerPosInScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_comm()) {
    if (!this->comm().IsInitialized()) return false;
  }
  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerPosInScene::Swap(CSPlayerPosInScene* other) {
  if (other != this) {
    std::swap(comm_, other->comm_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(direct_, other->direct_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerPosInScene::GetTypeName() const {
  return "vmsg.CSPlayerPosInScene";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerMoveInScene::kUinFieldNumber;
const int CSPlayerMoveInScene::kDirectFieldNumber;
const int CSPlayerMoveInScene::kScenePointFieldNumber;
#endif  // !_MSC_VER

CSPlayerMoveInScene::CSPlayerMoveInScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerMoveInScene::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direct_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  direct_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSPlayerMoveInScene::CSPlayerMoveInScene(const CSPlayerMoveInScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerMoveInScene::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  direct_ = NULL;
  scenepoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerMoveInScene::~CSPlayerMoveInScene() {
  SharedDtor();
}

void CSPlayerMoveInScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete direct_;
    delete scenepoint_;
  }
}

void CSPlayerMoveInScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerMoveInScene& CSPlayerMoveInScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerMoveInScene* CSPlayerMoveInScene::default_instance_ = NULL;

CSPlayerMoveInScene* CSPlayerMoveInScene::New() const {
  return new CSPlayerMoveInScene;
}

void CSPlayerMoveInScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_direct()) {
      if (direct_ != NULL) direct_->::vmsg::CSScenePoint::Clear();
    }
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerMoveInScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Direct;
        break;
      }

      // required .vmsg.CSScenePoint Direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ScenePoint;
        break;
      }

      // required .vmsg.CSScenePoint ScenePoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerMoveInScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required .vmsg.CSScenePoint Direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->direct(), output);
  }

  // required .vmsg.CSScenePoint ScenePoint = 3;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenepoint(), output);
  }

}

int CSPlayerMoveInScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required .vmsg.CSScenePoint Direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .vmsg.CSScenePoint ScenePoint = 3;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerMoveInScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerMoveInScene*>(&from));
}

void CSPlayerMoveInScene::MergeFrom(const CSPlayerMoveInScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_direct()) {
      mutable_direct()->::vmsg::CSScenePoint::MergeFrom(from.direct());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
  }
}

void CSPlayerMoveInScene::CopyFrom(const CSPlayerMoveInScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerMoveInScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerMoveInScene::Swap(CSPlayerMoveInScene* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(direct_, other->direct_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerMoveInScene::GetTypeName() const {
  return "vmsg.CSPlayerMoveInScene";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerSetPosInScene::kUinFieldNumber;
const int CSPlayerSetPosInScene::kDirectFieldNumber;
const int CSPlayerSetPosInScene::kScenePointFieldNumber;
#endif  // !_MSC_VER

CSPlayerSetPosInScene::CSPlayerSetPosInScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerSetPosInScene::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direct_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  direct_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSPlayerSetPosInScene::CSPlayerSetPosInScene(const CSPlayerSetPosInScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerSetPosInScene::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  direct_ = NULL;
  scenepoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerSetPosInScene::~CSPlayerSetPosInScene() {
  SharedDtor();
}

void CSPlayerSetPosInScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete direct_;
    delete scenepoint_;
  }
}

void CSPlayerSetPosInScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerSetPosInScene& CSPlayerSetPosInScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerSetPosInScene* CSPlayerSetPosInScene::default_instance_ = NULL;

CSPlayerSetPosInScene* CSPlayerSetPosInScene::New() const {
  return new CSPlayerSetPosInScene;
}

void CSPlayerSetPosInScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_direct()) {
      if (direct_ != NULL) direct_->::vmsg::CSScenePoint::Clear();
    }
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerSetPosInScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Direct;
        break;
      }

      // required .vmsg.CSScenePoint Direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ScenePoint;
        break;
      }

      // required .vmsg.CSScenePoint ScenePoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerSetPosInScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required .vmsg.CSScenePoint Direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->direct(), output);
  }

  // required .vmsg.CSScenePoint ScenePoint = 3;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenepoint(), output);
  }

}

int CSPlayerSetPosInScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required .vmsg.CSScenePoint Direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .vmsg.CSScenePoint ScenePoint = 3;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerSetPosInScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerSetPosInScene*>(&from));
}

void CSPlayerSetPosInScene::MergeFrom(const CSPlayerSetPosInScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_direct()) {
      mutable_direct()->::vmsg::CSScenePoint::MergeFrom(from.direct());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
  }
}

void CSPlayerSetPosInScene::CopyFrom(const CSPlayerSetPosInScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerSetPosInScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerSetPosInScene::Swap(CSPlayerSetPosInScene* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(direct_, other->direct_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerSetPosInScene::GetTypeName() const {
  return "vmsg.CSPlayerSetPosInScene";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerStartAtk::kUinFieldNumber;
const int CSPlayerStartAtk::kDirectFieldNumber;
const int CSPlayerStartAtk::kScenePointFieldNumber;
#endif  // !_MSC_VER

CSPlayerStartAtk::CSPlayerStartAtk()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerStartAtk::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direct_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  direct_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSPlayerStartAtk::CSPlayerStartAtk(const CSPlayerStartAtk& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerStartAtk::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  direct_ = NULL;
  scenepoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerStartAtk::~CSPlayerStartAtk() {
  SharedDtor();
}

void CSPlayerStartAtk::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete direct_;
    delete scenepoint_;
  }
}

void CSPlayerStartAtk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerStartAtk& CSPlayerStartAtk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerStartAtk* CSPlayerStartAtk::default_instance_ = NULL;

CSPlayerStartAtk* CSPlayerStartAtk::New() const {
  return new CSPlayerStartAtk;
}

void CSPlayerStartAtk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_direct()) {
      if (direct_ != NULL) direct_->::vmsg::CSScenePoint::Clear();
    }
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerStartAtk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Direct;
        break;
      }

      // required .vmsg.CSScenePoint Direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ScenePoint;
        break;
      }

      // required .vmsg.CSScenePoint ScenePoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerStartAtk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required .vmsg.CSScenePoint Direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->direct(), output);
  }

  // required .vmsg.CSScenePoint ScenePoint = 3;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenepoint(), output);
  }

}

int CSPlayerStartAtk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required .vmsg.CSScenePoint Direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .vmsg.CSScenePoint ScenePoint = 3;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerStartAtk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerStartAtk*>(&from));
}

void CSPlayerStartAtk::MergeFrom(const CSPlayerStartAtk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_direct()) {
      mutable_direct()->::vmsg::CSScenePoint::MergeFrom(from.direct());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
  }
}

void CSPlayerStartAtk::CopyFrom(const CSPlayerStartAtk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerStartAtk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerStartAtk::Swap(CSPlayerStartAtk* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(direct_, other->direct_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerStartAtk::GetTypeName() const {
  return "vmsg.CSPlayerStartAtk";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerStopAtk::kUinFieldNumber;
const int CSPlayerStopAtk::kDirectFieldNumber;
const int CSPlayerStopAtk::kScenePointFieldNumber;
#endif  // !_MSC_VER

CSPlayerStopAtk::CSPlayerStopAtk()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerStopAtk::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direct_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  direct_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSPlayerStopAtk::CSPlayerStopAtk(const CSPlayerStopAtk& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerStopAtk::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  direct_ = NULL;
  scenepoint_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerStopAtk::~CSPlayerStopAtk() {
  SharedDtor();
}

void CSPlayerStopAtk::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete direct_;
    delete scenepoint_;
  }
}

void CSPlayerStopAtk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerStopAtk& CSPlayerStopAtk::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerStopAtk* CSPlayerStopAtk::default_instance_ = NULL;

CSPlayerStopAtk* CSPlayerStopAtk::New() const {
  return new CSPlayerStopAtk;
}

void CSPlayerStopAtk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_direct()) {
      if (direct_ != NULL) direct_->::vmsg::CSScenePoint::Clear();
    }
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerStopAtk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Direct;
        break;
      }

      // required .vmsg.CSScenePoint Direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ScenePoint;
        break;
      }

      // required .vmsg.CSScenePoint ScenePoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerStopAtk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required .vmsg.CSScenePoint Direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->direct(), output);
  }

  // required .vmsg.CSScenePoint ScenePoint = 3;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenepoint(), output);
  }

}

int CSPlayerStopAtk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required .vmsg.CSScenePoint Direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .vmsg.CSScenePoint ScenePoint = 3;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerStopAtk::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerStopAtk*>(&from));
}

void CSPlayerStopAtk::MergeFrom(const CSPlayerStopAtk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_direct()) {
      mutable_direct()->::vmsg::CSScenePoint::MergeFrom(from.direct());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
  }
}

void CSPlayerStopAtk::CopyFrom(const CSPlayerStopAtk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerStopAtk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerStopAtk::Swap(CSPlayerStopAtk* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(direct_, other->direct_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerStopAtk::GetTypeName() const {
  return "vmsg.CSPlayerStopAtk";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerSkillInScene::kUinFieldNumber;
const int CSPlayerSkillInScene::kDirectFieldNumber;
const int CSPlayerSkillInScene::kScenePointFieldNumber;
const int CSPlayerSkillInScene::kSkillIDFieldNumber;
#endif  // !_MSC_VER

CSPlayerSkillInScene::CSPlayerSkillInScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerSkillInScene::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  direct_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  direct_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSPlayerSkillInScene::CSPlayerSkillInScene(const CSPlayerSkillInScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerSkillInScene::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  direct_ = NULL;
  scenepoint_ = NULL;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerSkillInScene::~CSPlayerSkillInScene() {
  SharedDtor();
}

void CSPlayerSkillInScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete direct_;
    delete scenepoint_;
  }
}

void CSPlayerSkillInScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerSkillInScene& CSPlayerSkillInScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerSkillInScene* CSPlayerSkillInScene::default_instance_ = NULL;

CSPlayerSkillInScene* CSPlayerSkillInScene::New() const {
  return new CSPlayerSkillInScene;
}

void CSPlayerSkillInScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_direct()) {
      if (direct_ != NULL) direct_->::vmsg::CSScenePoint::Clear();
    }
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerSkillInScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Direct;
        break;
      }

      // required .vmsg.CSScenePoint Direct = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Direct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direct()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ScenePoint;
        break;
      }

      // required .vmsg.CSScenePoint ScenePoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SkillID;
        break;
      }

      // required uint32 SkillID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerSkillInScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required .vmsg.CSScenePoint Direct = 2;
  if (has_direct()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->direct(), output);
  }

  // required .vmsg.CSScenePoint ScenePoint = 3;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->scenepoint(), output);
  }

  // required uint32 SkillID = 4;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillid(), output);
  }

}

int CSPlayerSkillInScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required .vmsg.CSScenePoint Direct = 2;
    if (has_direct()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direct());
    }

    // required .vmsg.CSScenePoint ScenePoint = 3;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

    // required uint32 SkillID = 4;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerSkillInScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerSkillInScene*>(&from));
}

void CSPlayerSkillInScene::MergeFrom(const CSPlayerSkillInScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_direct()) {
      mutable_direct()->::vmsg::CSScenePoint::MergeFrom(from.direct());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
}

void CSPlayerSkillInScene::CopyFrom(const CSPlayerSkillInScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerSkillInScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_direct()) {
    if (!this->direct().IsInitialized()) return false;
  }
  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerSkillInScene::Swap(CSPlayerSkillInScene* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(direct_, other->direct_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerSkillInScene::GetTypeName() const {
  return "vmsg.CSPlayerSkillInScene";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerStatChangeInScene::kUinFieldNumber;
const int CSPlayerStatChangeInScene::kStatFieldNumber;
#endif  // !_MSC_VER

CSPlayerStatChangeInScene::CSPlayerStatChangeInScene()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerStatChangeInScene::InitAsDefaultInstance() {
}

CSPlayerStatChangeInScene::CSPlayerStatChangeInScene(const CSPlayerStatChangeInScene& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerStatChangeInScene::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  stat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerStatChangeInScene::~CSPlayerStatChangeInScene() {
  SharedDtor();
}

void CSPlayerStatChangeInScene::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerStatChangeInScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerStatChangeInScene& CSPlayerStatChangeInScene::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerStatChangeInScene* CSPlayerStatChangeInScene::default_instance_ = NULL;

CSPlayerStatChangeInScene* CSPlayerStatChangeInScene::New() const {
  return new CSPlayerStatChangeInScene;
}

void CSPlayerStatChangeInScene::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    stat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerStatChangeInScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Stat;
        break;
      }

      // required uint32 Stat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Stat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stat_)));
          set_has_stat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerStatChangeInScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required uint32 Stat = 2;
  if (has_stat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stat(), output);
  }

}

int CSPlayerStatChangeInScene::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required uint32 Stat = 2;
    if (has_stat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stat());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerStatChangeInScene::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerStatChangeInScene*>(&from));
}

void CSPlayerStatChangeInScene::MergeFrom(const CSPlayerStatChangeInScene& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_stat()) {
      set_stat(from.stat());
    }
  }
}

void CSPlayerStatChangeInScene::CopyFrom(const CSPlayerStatChangeInScene& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerStatChangeInScene::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSPlayerStatChangeInScene::Swap(CSPlayerStatChangeInScene* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(stat_, other->stat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerStatChangeInScene::GetTypeName() const {
  return "vmsg.CSPlayerStatChangeInScene";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerOSDInfo::kTypeFieldNumber;
const int CSPlayerOSDInfo::kPlayerEnterSceneFieldNumber;
const int CSPlayerOSDInfo::kPlayerLeaveSceneUinFieldNumber;
const int CSPlayerOSDInfo::kPlayerMoveInSceneFieldNumber;
const int CSPlayerOSDInfo::kPlayerSetPosInSceneFieldNumber;
const int CSPlayerOSDInfo::kPlayerStartAtkFieldNumber;
const int CSPlayerOSDInfo::kPlayerStopAtkFieldNumber;
const int CSPlayerOSDInfo::kPlayerSkillFieldNumber;
const int CSPlayerOSDInfo::kPlayerStatChangeFieldNumber;
#endif  // !_MSC_VER

CSPlayerOSDInfo::CSPlayerOSDInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerOSDInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerenterscene_ = const_cast< ::vmsg::CSPlayerPosInScene*>(
      ::vmsg::CSPlayerPosInScene::internal_default_instance());
#else
  playerenterscene_ = const_cast< ::vmsg::CSPlayerPosInScene*>(&::vmsg::CSPlayerPosInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playermoveinscene_ = const_cast< ::vmsg::CSPlayerMoveInScene*>(
      ::vmsg::CSPlayerMoveInScene::internal_default_instance());
#else
  playermoveinscene_ = const_cast< ::vmsg::CSPlayerMoveInScene*>(&::vmsg::CSPlayerMoveInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playersetposinscene_ = const_cast< ::vmsg::CSPlayerSetPosInScene*>(
      ::vmsg::CSPlayerSetPosInScene::internal_default_instance());
#else
  playersetposinscene_ = const_cast< ::vmsg::CSPlayerSetPosInScene*>(&::vmsg::CSPlayerSetPosInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerstartatk_ = const_cast< ::vmsg::CSPlayerStartAtk*>(
      ::vmsg::CSPlayerStartAtk::internal_default_instance());
#else
  playerstartatk_ = const_cast< ::vmsg::CSPlayerStartAtk*>(&::vmsg::CSPlayerStartAtk::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerstopatk_ = const_cast< ::vmsg::CSPlayerStopAtk*>(
      ::vmsg::CSPlayerStopAtk::internal_default_instance());
#else
  playerstopatk_ = const_cast< ::vmsg::CSPlayerStopAtk*>(&::vmsg::CSPlayerStopAtk::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerskill_ = const_cast< ::vmsg::CSPlayerSkillInScene*>(
      ::vmsg::CSPlayerSkillInScene::internal_default_instance());
#else
  playerskill_ = const_cast< ::vmsg::CSPlayerSkillInScene*>(&::vmsg::CSPlayerSkillInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerstatchange_ = const_cast< ::vmsg::CSPlayerStatChangeInScene*>(
      ::vmsg::CSPlayerStatChangeInScene::internal_default_instance());
#else
  playerstatchange_ = const_cast< ::vmsg::CSPlayerStatChangeInScene*>(&::vmsg::CSPlayerStatChangeInScene::default_instance());
#endif
}

CSPlayerOSDInfo::CSPlayerOSDInfo(const CSPlayerOSDInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerOSDInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  playerenterscene_ = NULL;
  playerleavesceneuin_ = GOOGLE_ULONGLONG(0);
  playermoveinscene_ = NULL;
  playersetposinscene_ = NULL;
  playerstartatk_ = NULL;
  playerstopatk_ = NULL;
  playerskill_ = NULL;
  playerstatchange_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerOSDInfo::~CSPlayerOSDInfo() {
  SharedDtor();
}

void CSPlayerOSDInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playerenterscene_;
    delete playermoveinscene_;
    delete playersetposinscene_;
    delete playerstartatk_;
    delete playerstopatk_;
    delete playerskill_;
    delete playerstatchange_;
  }
}

void CSPlayerOSDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerOSDInfo& CSPlayerOSDInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerOSDInfo* CSPlayerOSDInfo::default_instance_ = NULL;

CSPlayerOSDInfo* CSPlayerOSDInfo::New() const {
  return new CSPlayerOSDInfo;
}

void CSPlayerOSDInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_playerenterscene()) {
      if (playerenterscene_ != NULL) playerenterscene_->::vmsg::CSPlayerPosInScene::Clear();
    }
    playerleavesceneuin_ = GOOGLE_ULONGLONG(0);
    if (has_playermoveinscene()) {
      if (playermoveinscene_ != NULL) playermoveinscene_->::vmsg::CSPlayerMoveInScene::Clear();
    }
    if (has_playersetposinscene()) {
      if (playersetposinscene_ != NULL) playersetposinscene_->::vmsg::CSPlayerSetPosInScene::Clear();
    }
    if (has_playerstartatk()) {
      if (playerstartatk_ != NULL) playerstartatk_->::vmsg::CSPlayerStartAtk::Clear();
    }
    if (has_playerstopatk()) {
      if (playerstopatk_ != NULL) playerstopatk_->::vmsg::CSPlayerStopAtk::Clear();
    }
    if (has_playerskill()) {
      if (playerskill_ != NULL) playerskill_->::vmsg::CSPlayerSkillInScene::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_playerstatchange()) {
      if (playerstatchange_ != NULL) playerstatchange_->::vmsg::CSPlayerStatChangeInScene::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerOSDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerEnterScene;
        break;
      }

      // optional .vmsg.CSPlayerPosInScene PlayerEnterScene = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEnterScene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerenterscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PlayerLeaveSceneUin;
        break;
      }

      // optional uint64 PlayerLeaveSceneUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerLeaveSceneUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerleavesceneuin_)));
          set_has_playerleavesceneuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PlayerMoveInScene;
        break;
      }

      // optional .vmsg.CSPlayerMoveInScene PlayerMoveInScene = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerMoveInScene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playermoveinscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PlayerSetPosInScene;
        break;
      }

      // optional .vmsg.CSPlayerSetPosInScene PlayerSetPosInScene = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerSetPosInScene:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersetposinscene()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PlayerStartAtk;
        break;
      }

      // optional .vmsg.CSPlayerStartAtk PlayerStartAtk = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerStartAtk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerstartatk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_PlayerStopAtk;
        break;
      }

      // optional .vmsg.CSPlayerStopAtk PlayerStopAtk = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerStopAtk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerstopatk()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PlayerSkill;
        break;
      }

      // optional .vmsg.CSPlayerSkillInScene PlayerSkill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_PlayerStatChange;
        break;
      }

      // optional .vmsg.CSPlayerStatChangeInScene PlayerStatChange = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerStatChange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerstatchange()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerOSDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .vmsg.CSPlayerPosInScene PlayerEnterScene = 2;
  if (has_playerenterscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playerenterscene(), output);
  }

  // optional uint64 PlayerLeaveSceneUin = 3;
  if (has_playerleavesceneuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->playerleavesceneuin(), output);
  }

  // optional .vmsg.CSPlayerMoveInScene PlayerMoveInScene = 4;
  if (has_playermoveinscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->playermoveinscene(), output);
  }

  // optional .vmsg.CSPlayerSetPosInScene PlayerSetPosInScene = 5;
  if (has_playersetposinscene()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->playersetposinscene(), output);
  }

  // optional .vmsg.CSPlayerStartAtk PlayerStartAtk = 6;
  if (has_playerstartatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->playerstartatk(), output);
  }

  // optional .vmsg.CSPlayerStopAtk PlayerStopAtk = 7;
  if (has_playerstopatk()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->playerstopatk(), output);
  }

  // optional .vmsg.CSPlayerSkillInScene PlayerSkill = 8;
  if (has_playerskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->playerskill(), output);
  }

  // optional .vmsg.CSPlayerStatChangeInScene PlayerStatChange = 9;
  if (has_playerstatchange()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->playerstatchange(), output);
  }

}

int CSPlayerOSDInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .vmsg.CSPlayerPosInScene PlayerEnterScene = 2;
    if (has_playerenterscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerenterscene());
    }

    // optional uint64 PlayerLeaveSceneUin = 3;
    if (has_playerleavesceneuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerleavesceneuin());
    }

    // optional .vmsg.CSPlayerMoveInScene PlayerMoveInScene = 4;
    if (has_playermoveinscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playermoveinscene());
    }

    // optional .vmsg.CSPlayerSetPosInScene PlayerSetPosInScene = 5;
    if (has_playersetposinscene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersetposinscene());
    }

    // optional .vmsg.CSPlayerStartAtk PlayerStartAtk = 6;
    if (has_playerstartatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerstartatk());
    }

    // optional .vmsg.CSPlayerStopAtk PlayerStopAtk = 7;
    if (has_playerstopatk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerstopatk());
    }

    // optional .vmsg.CSPlayerSkillInScene PlayerSkill = 8;
    if (has_playerskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerskill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSPlayerStatChangeInScene PlayerStatChange = 9;
    if (has_playerstatchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerstatchange());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerOSDInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerOSDInfo*>(&from));
}

void CSPlayerOSDInfo::MergeFrom(const CSPlayerOSDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_playerenterscene()) {
      mutable_playerenterscene()->::vmsg::CSPlayerPosInScene::MergeFrom(from.playerenterscene());
    }
    if (from.has_playerleavesceneuin()) {
      set_playerleavesceneuin(from.playerleavesceneuin());
    }
    if (from.has_playermoveinscene()) {
      mutable_playermoveinscene()->::vmsg::CSPlayerMoveInScene::MergeFrom(from.playermoveinscene());
    }
    if (from.has_playersetposinscene()) {
      mutable_playersetposinscene()->::vmsg::CSPlayerSetPosInScene::MergeFrom(from.playersetposinscene());
    }
    if (from.has_playerstartatk()) {
      mutable_playerstartatk()->::vmsg::CSPlayerStartAtk::MergeFrom(from.playerstartatk());
    }
    if (from.has_playerstopatk()) {
      mutable_playerstopatk()->::vmsg::CSPlayerStopAtk::MergeFrom(from.playerstopatk());
    }
    if (from.has_playerskill()) {
      mutable_playerskill()->::vmsg::CSPlayerSkillInScene::MergeFrom(from.playerskill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_playerstatchange()) {
      mutable_playerstatchange()->::vmsg::CSPlayerStatChangeInScene::MergeFrom(from.playerstatchange());
    }
  }
}

void CSPlayerOSDInfo::CopyFrom(const CSPlayerOSDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerOSDInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_playerenterscene()) {
    if (!this->playerenterscene().IsInitialized()) return false;
  }
  if (has_playermoveinscene()) {
    if (!this->playermoveinscene().IsInitialized()) return false;
  }
  if (has_playersetposinscene()) {
    if (!this->playersetposinscene().IsInitialized()) return false;
  }
  if (has_playerstartatk()) {
    if (!this->playerstartatk().IsInitialized()) return false;
  }
  if (has_playerstopatk()) {
    if (!this->playerstopatk().IsInitialized()) return false;
  }
  if (has_playerskill()) {
    if (!this->playerskill().IsInitialized()) return false;
  }
  if (has_playerstatchange()) {
    if (!this->playerstatchange().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerOSDInfo::Swap(CSPlayerOSDInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(playerenterscene_, other->playerenterscene_);
    std::swap(playerleavesceneuin_, other->playerleavesceneuin_);
    std::swap(playermoveinscene_, other->playermoveinscene_);
    std::swap(playersetposinscene_, other->playersetposinscene_);
    std::swap(playerstartatk_, other->playerstartatk_);
    std::swap(playerstopatk_, other->playerstopatk_);
    std::swap(playerskill_, other->playerskill_);
    std::swap(playerstatchange_, other->playerstatchange_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerOSDInfo::GetTypeName() const {
  return "vmsg.CSPlayerOSDInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSOSDMonstersInfo::kMonsterIDFieldNumber;
const int CSOSDMonstersInfo::kScenePointFieldNumber;
const int CSOSDMonstersInfo::kMOnsterTypeFieldNumber;
const int CSOSDMonstersInfo::kHPFieldNumber;
const int CSOSDMonstersInfo::kLvFieldNumber;
const int CSOSDMonstersInfo::kChannelFieldNumber;
const int CSOSDMonstersInfo::kWaveFieldNumber;
const int CSOSDMonstersInfo::kActionFieldNumber;
#endif  // !_MSC_VER

CSOSDMonstersInfo::CSOSDMonstersInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSOSDMonstersInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(
      ::vmsg::CSScenePoint::internal_default_instance());
#else
  scenepoint_ = const_cast< ::vmsg::CSScenePoint*>(&::vmsg::CSScenePoint::default_instance());
#endif
}

CSOSDMonstersInfo::CSOSDMonstersInfo(const CSOSDMonstersInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSOSDMonstersInfo::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  scenepoint_ = NULL;
  monstertype_ = 0u;
  hp_ = 0u;
  lv_ = 0u;
  channel_ = 0u;
  wave_ = 0u;
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOSDMonstersInfo::~CSOSDMonstersInfo() {
  SharedDtor();
}

void CSOSDMonstersInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete scenepoint_;
  }
}

void CSOSDMonstersInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSOSDMonstersInfo& CSOSDMonstersInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSOSDMonstersInfo* CSOSDMonstersInfo::default_instance_ = NULL;

CSOSDMonstersInfo* CSOSDMonstersInfo::New() const {
  return new CSOSDMonstersInfo;
}

void CSOSDMonstersInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    if (has_scenepoint()) {
      if (scenepoint_ != NULL) scenepoint_->::vmsg::CSScenePoint::Clear();
    }
    monstertype_ = 0u;
    hp_ = 0u;
    lv_ = 0u;
    channel_ = 0u;
    wave_ = 0u;
    action_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSOSDMonstersInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ScenePoint;
        break;
      }

      // required .vmsg.CSScenePoint ScenePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ScenePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scenepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MOnsterType;
        break;
      }

      // required uint32 MOnsterType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MOnsterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monstertype_)));
          set_has_monstertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HP;
        break;
      }

      // required uint32 HP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Lv;
        break;
      }

      // required uint32 Lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Channel;
        break;
      }

      // required uint32 Channel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Wave;
        break;
      }

      // required uint32 Wave = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Wave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Action;
        break;
      }

      // required uint32 Action = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOSDMonstersInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required .vmsg.CSScenePoint ScenePoint = 2;
  if (has_scenepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->scenepoint(), output);
  }

  // required uint32 MOnsterType = 3;
  if (has_monstertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->monstertype(), output);
  }

  // required uint32 HP = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hp(), output);
  }

  // required uint32 Lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lv(), output);
  }

  // required uint32 Channel = 6;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channel(), output);
  }

  // required uint32 Wave = 7;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wave(), output);
  }

  // required uint32 Action = 8;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->action(), output);
  }

}

int CSOSDMonstersInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required .vmsg.CSScenePoint ScenePoint = 2;
    if (has_scenepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scenepoint());
    }

    // required uint32 MOnsterType = 3;
    if (has_monstertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monstertype());
    }

    // required uint32 HP = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 Lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // required uint32 Channel = 6;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // required uint32 Wave = 7;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wave());
    }

    // required uint32 Action = 8;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOSDMonstersInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSOSDMonstersInfo*>(&from));
}

void CSOSDMonstersInfo::MergeFrom(const CSOSDMonstersInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_scenepoint()) {
      mutable_scenepoint()->::vmsg::CSScenePoint::MergeFrom(from.scenepoint());
    }
    if (from.has_monstertype()) {
      set_monstertype(from.monstertype());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
}

void CSOSDMonstersInfo::CopyFrom(const CSOSDMonstersInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOSDMonstersInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_scenepoint()) {
    if (!this->scenepoint().IsInitialized()) return false;
  }
  return true;
}

void CSOSDMonstersInfo::Swap(CSOSDMonstersInfo* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(scenepoint_, other->scenepoint_);
    std::swap(monstertype_, other->monstertype_);
    std::swap(hp_, other->hp_);
    std::swap(lv_, other->lv_);
    std::swap(channel_, other->channel_);
    std::swap(wave_, other->wave_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSOSDMonstersInfo::GetTypeName() const {
  return "vmsg.CSOSDMonstersInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryPlayerSceneOSDInfoRsp::kPlayersPosFieldNumber;
const int CSQueryPlayerSceneOSDInfoRsp::kMonsterOSDInfosFieldNumber;
#endif  // !_MSC_VER

CSQueryPlayerSceneOSDInfoRsp::CSQueryPlayerSceneOSDInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryPlayerSceneOSDInfoRsp::InitAsDefaultInstance() {
}

CSQueryPlayerSceneOSDInfoRsp::CSQueryPlayerSceneOSDInfoRsp(const CSQueryPlayerSceneOSDInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryPlayerSceneOSDInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryPlayerSceneOSDInfoRsp::~CSQueryPlayerSceneOSDInfoRsp() {
  SharedDtor();
}

void CSQueryPlayerSceneOSDInfoRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryPlayerSceneOSDInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryPlayerSceneOSDInfoRsp& CSQueryPlayerSceneOSDInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSQueryPlayerSceneOSDInfoRsp* CSQueryPlayerSceneOSDInfoRsp::default_instance_ = NULL;

CSQueryPlayerSceneOSDInfoRsp* CSQueryPlayerSceneOSDInfoRsp::New() const {
  return new CSQueryPlayerSceneOSDInfoRsp;
}

void CSQueryPlayerSceneOSDInfoRsp::Clear() {
  playerspos_.Clear();
  monsterosdinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryPlayerSceneOSDInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSPlayerPosInScene PlayersPos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayersPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerspos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PlayersPos;
        if (input->ExpectTag(18)) goto parse_MonsterOSDInfos;
        break;
      }

      // repeated .vmsg.CSOSDMonstersInfo MonsterOSDInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonsterOSDInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterosdinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MonsterOSDInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryPlayerSceneOSDInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSPlayerPosInScene PlayersPos = 1;
  for (int i = 0; i < this->playerspos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerspos(i), output);
  }

  // repeated .vmsg.CSOSDMonstersInfo MonsterOSDInfos = 2;
  for (int i = 0; i < this->monsterosdinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->monsterosdinfos(i), output);
  }

}

int CSQueryPlayerSceneOSDInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSPlayerPosInScene PlayersPos = 1;
  total_size += 1 * this->playerspos_size();
  for (int i = 0; i < this->playerspos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerspos(i));
  }

  // repeated .vmsg.CSOSDMonstersInfo MonsterOSDInfos = 2;
  total_size += 1 * this->monsterosdinfos_size();
  for (int i = 0; i < this->monsterosdinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterosdinfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryPlayerSceneOSDInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryPlayerSceneOSDInfoRsp*>(&from));
}

void CSQueryPlayerSceneOSDInfoRsp::MergeFrom(const CSQueryPlayerSceneOSDInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerspos_.MergeFrom(from.playerspos_);
  monsterosdinfos_.MergeFrom(from.monsterosdinfos_);
}

void CSQueryPlayerSceneOSDInfoRsp::CopyFrom(const CSQueryPlayerSceneOSDInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryPlayerSceneOSDInfoRsp::IsInitialized() const {

  for (int i = 0; i < playerspos_size(); i++) {
    if (!this->playerspos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monsterosdinfos_size(); i++) {
    if (!this->monsterosdinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryPlayerSceneOSDInfoRsp::Swap(CSQueryPlayerSceneOSDInfoRsp* other) {
  if (other != this) {
    playerspos_.Swap(&other->playerspos_);
    monsterosdinfos_.Swap(&other->monsterosdinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryPlayerSceneOSDInfoRsp::GetTypeName() const {
  return "vmsg.CSQueryPlayerSceneOSDInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSyncPlayerOSDInfo::kPlayerOSDInfosFieldNumber;
#endif  // !_MSC_VER

CSSyncPlayerOSDInfo::CSSyncPlayerOSDInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSyncPlayerOSDInfo::InitAsDefaultInstance() {
}

CSSyncPlayerOSDInfo::CSSyncPlayerOSDInfo(const CSSyncPlayerOSDInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSyncPlayerOSDInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSyncPlayerOSDInfo::~CSSyncPlayerOSDInfo() {
  SharedDtor();
}

void CSSyncPlayerOSDInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSyncPlayerOSDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSyncPlayerOSDInfo& CSSyncPlayerOSDInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSSyncPlayerOSDInfo* CSSyncPlayerOSDInfo::default_instance_ = NULL;

CSSyncPlayerOSDInfo* CSSyncPlayerOSDInfo::New() const {
  return new CSSyncPlayerOSDInfo;
}

void CSSyncPlayerOSDInfo::Clear() {
  playerosdinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSyncPlayerOSDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSPlayerOSDInfo PlayerOSDInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerOSDInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerosdinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_PlayerOSDInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSyncPlayerOSDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSPlayerOSDInfo PlayerOSDInfos = 1;
  for (int i = 0; i < this->playerosdinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerosdinfos(i), output);
  }

}

int CSSyncPlayerOSDInfo::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSPlayerOSDInfo PlayerOSDInfos = 1;
  total_size += 1 * this->playerosdinfos_size();
  for (int i = 0; i < this->playerosdinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerosdinfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSyncPlayerOSDInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSyncPlayerOSDInfo*>(&from));
}

void CSSyncPlayerOSDInfo::MergeFrom(const CSSyncPlayerOSDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerosdinfos_.MergeFrom(from.playerosdinfos_);
}

void CSSyncPlayerOSDInfo::CopyFrom(const CSSyncPlayerOSDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSyncPlayerOSDInfo::IsInitialized() const {

  for (int i = 0; i < playerosdinfos_size(); i++) {
    if (!this->playerosdinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CSSyncPlayerOSDInfo::Swap(CSSyncPlayerOSDInfo* other) {
  if (other != this) {
    playerosdinfos_.Swap(&other->playerosdinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSyncPlayerOSDInfo::GetTypeName() const {
  return "vmsg.CSSyncPlayerOSDInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerChangeSceneRqst::kNewSceneIDFieldNumber;
#endif  // !_MSC_VER

CSPlayerChangeSceneRqst::CSPlayerChangeSceneRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerChangeSceneRqst::InitAsDefaultInstance() {
}

CSPlayerChangeSceneRqst::CSPlayerChangeSceneRqst(const CSPlayerChangeSceneRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerChangeSceneRqst::SharedCtor() {
  _cached_size_ = 0;
  newsceneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerChangeSceneRqst::~CSPlayerChangeSceneRqst() {
  SharedDtor();
}

void CSPlayerChangeSceneRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPlayerChangeSceneRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerChangeSceneRqst& CSPlayerChangeSceneRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSPlayerChangeSceneRqst* CSPlayerChangeSceneRqst::default_instance_ = NULL;

CSPlayerChangeSceneRqst* CSPlayerChangeSceneRqst::New() const {
  return new CSPlayerChangeSceneRqst;
}

void CSPlayerChangeSceneRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    newsceneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerChangeSceneRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NewSceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newsceneid_)));
          set_has_newsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerChangeSceneRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 NewSceneID = 1;
  if (has_newsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->newsceneid(), output);
  }

}

int CSPlayerChangeSceneRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 NewSceneID = 1;
    if (has_newsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newsceneid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerChangeSceneRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerChangeSceneRqst*>(&from));
}

void CSPlayerChangeSceneRqst::MergeFrom(const CSPlayerChangeSceneRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_newsceneid()) {
      set_newsceneid(from.newsceneid());
    }
  }
}

void CSPlayerChangeSceneRqst::CopyFrom(const CSPlayerChangeSceneRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerChangeSceneRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPlayerChangeSceneRqst::Swap(CSPlayerChangeSceneRqst* other) {
  if (other != this) {
    std::swap(newsceneid_, other->newsceneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerChangeSceneRqst::GetTypeName() const {
  return "vmsg.CSPlayerChangeSceneRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSceneOSDRequest::kPlayerMoveRqstFieldNumber;
const int CSSceneOSDRequest::kPlayerSetPosRqstFieldNumber;
const int CSSceneOSDRequest::kPlayerChangeSceneRqstFieldNumber;
const int CSSceneOSDRequest::kPlayerStartAtkRqstFieldNumber;
const int CSSceneOSDRequest::kPlayerStopAtkRqstFieldNumber;
const int CSSceneOSDRequest::kPlayerSkillRqstFieldNumber;
#endif  // !_MSC_VER

CSSceneOSDRequest::CSSceneOSDRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSceneOSDRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playermove_rqst_ = const_cast< ::vmsg::CSPlayerMoveInScene*>(
      ::vmsg::CSPlayerMoveInScene::internal_default_instance());
#else
  playermove_rqst_ = const_cast< ::vmsg::CSPlayerMoveInScene*>(&::vmsg::CSPlayerMoveInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playersetpos_rqst_ = const_cast< ::vmsg::CSPlayerSetPosInScene*>(
      ::vmsg::CSPlayerSetPosInScene::internal_default_instance());
#else
  playersetpos_rqst_ = const_cast< ::vmsg::CSPlayerSetPosInScene*>(&::vmsg::CSPlayerSetPosInScene::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerchangescene_rqst_ = const_cast< ::vmsg::CSPlayerChangeSceneRqst*>(
      ::vmsg::CSPlayerChangeSceneRqst::internal_default_instance());
#else
  playerchangescene_rqst_ = const_cast< ::vmsg::CSPlayerChangeSceneRqst*>(&::vmsg::CSPlayerChangeSceneRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerstartatk_rqst_ = const_cast< ::vmsg::CSPlayerStartAtk*>(
      ::vmsg::CSPlayerStartAtk::internal_default_instance());
#else
  playerstartatk_rqst_ = const_cast< ::vmsg::CSPlayerStartAtk*>(&::vmsg::CSPlayerStartAtk::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerstopatk_rqst_ = const_cast< ::vmsg::CSPlayerStopAtk*>(
      ::vmsg::CSPlayerStopAtk::internal_default_instance());
#else
  playerstopatk_rqst_ = const_cast< ::vmsg::CSPlayerStopAtk*>(&::vmsg::CSPlayerStopAtk::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerskill_rqst_ = const_cast< ::vmsg::CSPlayerSkillInScene*>(
      ::vmsg::CSPlayerSkillInScene::internal_default_instance());
#else
  playerskill_rqst_ = const_cast< ::vmsg::CSPlayerSkillInScene*>(&::vmsg::CSPlayerSkillInScene::default_instance());
#endif
}

CSSceneOSDRequest::CSSceneOSDRequest(const CSSceneOSDRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSceneOSDRequest::SharedCtor() {
  _cached_size_ = 0;
  playermove_rqst_ = NULL;
  playersetpos_rqst_ = NULL;
  playerchangescene_rqst_ = NULL;
  playerstartatk_rqst_ = NULL;
  playerstopatk_rqst_ = NULL;
  playerskill_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSceneOSDRequest::~CSSceneOSDRequest() {
  SharedDtor();
}

void CSSceneOSDRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete playermove_rqst_;
    delete playersetpos_rqst_;
    delete playerchangescene_rqst_;
    delete playerstartatk_rqst_;
    delete playerstopatk_rqst_;
    delete playerskill_rqst_;
  }
}

void CSSceneOSDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSceneOSDRequest& CSSceneOSDRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSSceneOSDRequest* CSSceneOSDRequest::default_instance_ = NULL;

CSSceneOSDRequest* CSSceneOSDRequest::New() const {
  return new CSSceneOSDRequest;
}

void CSSceneOSDRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playermove_rqst()) {
      if (playermove_rqst_ != NULL) playermove_rqst_->::vmsg::CSPlayerMoveInScene::Clear();
    }
    if (has_playersetpos_rqst()) {
      if (playersetpos_rqst_ != NULL) playersetpos_rqst_->::vmsg::CSPlayerSetPosInScene::Clear();
    }
    if (has_playerchangescene_rqst()) {
      if (playerchangescene_rqst_ != NULL) playerchangescene_rqst_->::vmsg::CSPlayerChangeSceneRqst::Clear();
    }
    if (has_playerstartatk_rqst()) {
      if (playerstartatk_rqst_ != NULL) playerstartatk_rqst_->::vmsg::CSPlayerStartAtk::Clear();
    }
    if (has_playerstopatk_rqst()) {
      if (playerstopatk_rqst_ != NULL) playerstopatk_rqst_->::vmsg::CSPlayerStopAtk::Clear();
    }
    if (has_playerskill_rqst()) {
      if (playerskill_rqst_ != NULL) playerskill_rqst_->::vmsg::CSPlayerSkillInScene::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSceneOSDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSPlayerMoveInScene PlayerMove_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playermove_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerSetPos_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerSetPosInScene PlayerSetPos_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerSetPos_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playersetpos_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PlayerChangeScene_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerChangeSceneRqst PlayerChangeScene_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerChangeScene_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerchangescene_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_PlayerStartAtk_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerStartAtk PlayerStartAtk_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerStartAtk_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerstartatk_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PlayerStopAtk_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerStopAtk PlayerStopAtk_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerStopAtk_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerstopatk_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_PlayerSkill_Rqst;
        break;
      }

      // optional .vmsg.CSPlayerSkillInScene PlayerSkill_Rqst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerSkill_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerskill_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSceneOSDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSPlayerMoveInScene PlayerMove_Rqst = 1;
  if (has_playermove_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playermove_rqst(), output);
  }

  // optional .vmsg.CSPlayerSetPosInScene PlayerSetPos_Rqst = 2;
  if (has_playersetpos_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playersetpos_rqst(), output);
  }

  // optional .vmsg.CSPlayerChangeSceneRqst PlayerChangeScene_Rqst = 3;
  if (has_playerchangescene_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->playerchangescene_rqst(), output);
  }

  // optional .vmsg.CSPlayerStartAtk PlayerStartAtk_Rqst = 4;
  if (has_playerstartatk_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->playerstartatk_rqst(), output);
  }

  // optional .vmsg.CSPlayerStopAtk PlayerStopAtk_Rqst = 5;
  if (has_playerstopatk_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->playerstopatk_rqst(), output);
  }

  // optional .vmsg.CSPlayerSkillInScene PlayerSkill_Rqst = 6;
  if (has_playerskill_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->playerskill_rqst(), output);
  }

}

int CSSceneOSDRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSPlayerMoveInScene PlayerMove_Rqst = 1;
    if (has_playermove_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playermove_rqst());
    }

    // optional .vmsg.CSPlayerSetPosInScene PlayerSetPos_Rqst = 2;
    if (has_playersetpos_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playersetpos_rqst());
    }

    // optional .vmsg.CSPlayerChangeSceneRqst PlayerChangeScene_Rqst = 3;
    if (has_playerchangescene_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerchangescene_rqst());
    }

    // optional .vmsg.CSPlayerStartAtk PlayerStartAtk_Rqst = 4;
    if (has_playerstartatk_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerstartatk_rqst());
    }

    // optional .vmsg.CSPlayerStopAtk PlayerStopAtk_Rqst = 5;
    if (has_playerstopatk_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerstopatk_rqst());
    }

    // optional .vmsg.CSPlayerSkillInScene PlayerSkill_Rqst = 6;
    if (has_playerskill_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerskill_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSceneOSDRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSceneOSDRequest*>(&from));
}

void CSSceneOSDRequest::MergeFrom(const CSSceneOSDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playermove_rqst()) {
      mutable_playermove_rqst()->::vmsg::CSPlayerMoveInScene::MergeFrom(from.playermove_rqst());
    }
    if (from.has_playersetpos_rqst()) {
      mutable_playersetpos_rqst()->::vmsg::CSPlayerSetPosInScene::MergeFrom(from.playersetpos_rqst());
    }
    if (from.has_playerchangescene_rqst()) {
      mutable_playerchangescene_rqst()->::vmsg::CSPlayerChangeSceneRqst::MergeFrom(from.playerchangescene_rqst());
    }
    if (from.has_playerstartatk_rqst()) {
      mutable_playerstartatk_rqst()->::vmsg::CSPlayerStartAtk::MergeFrom(from.playerstartatk_rqst());
    }
    if (from.has_playerstopatk_rqst()) {
      mutable_playerstopatk_rqst()->::vmsg::CSPlayerStopAtk::MergeFrom(from.playerstopatk_rqst());
    }
    if (from.has_playerskill_rqst()) {
      mutable_playerskill_rqst()->::vmsg::CSPlayerSkillInScene::MergeFrom(from.playerskill_rqst());
    }
  }
}

void CSSceneOSDRequest::CopyFrom(const CSSceneOSDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSceneOSDRequest::IsInitialized() const {

  if (has_playermove_rqst()) {
    if (!this->playermove_rqst().IsInitialized()) return false;
  }
  if (has_playersetpos_rqst()) {
    if (!this->playersetpos_rqst().IsInitialized()) return false;
  }
  if (has_playerchangescene_rqst()) {
    if (!this->playerchangescene_rqst().IsInitialized()) return false;
  }
  if (has_playerstartatk_rqst()) {
    if (!this->playerstartatk_rqst().IsInitialized()) return false;
  }
  if (has_playerstopatk_rqst()) {
    if (!this->playerstopatk_rqst().IsInitialized()) return false;
  }
  if (has_playerskill_rqst()) {
    if (!this->playerskill_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSSceneOSDRequest::Swap(CSSceneOSDRequest* other) {
  if (other != this) {
    std::swap(playermove_rqst_, other->playermove_rqst_);
    std::swap(playersetpos_rqst_, other->playersetpos_rqst_);
    std::swap(playerchangescene_rqst_, other->playerchangescene_rqst_);
    std::swap(playerstartatk_rqst_, other->playerstartatk_rqst_);
    std::swap(playerstopatk_rqst_, other->playerstopatk_rqst_);
    std::swap(playerskill_rqst_, other->playerskill_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSceneOSDRequest::GetTypeName() const {
  return "vmsg.CSSceneOSDRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSceneOSDRespond::kQueryPlayerSceneOSDInfoRspFieldNumber;
const int CSSceneOSDRespond::kSyncPlayerOSDInfoPushFieldNumber;
#endif  // !_MSC_VER

CSSceneOSDRespond::CSSceneOSDRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSceneOSDRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryplayersceneosdinfo_rsp_ = const_cast< ::vmsg::CSQueryPlayerSceneOSDInfoRsp*>(
      ::vmsg::CSQueryPlayerSceneOSDInfoRsp::internal_default_instance());
#else
  queryplayersceneosdinfo_rsp_ = const_cast< ::vmsg::CSQueryPlayerSceneOSDInfoRsp*>(&::vmsg::CSQueryPlayerSceneOSDInfoRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  syncplayerosdinfo_push_ = const_cast< ::vmsg::CSSyncPlayerOSDInfo*>(
      ::vmsg::CSSyncPlayerOSDInfo::internal_default_instance());
#else
  syncplayerosdinfo_push_ = const_cast< ::vmsg::CSSyncPlayerOSDInfo*>(&::vmsg::CSSyncPlayerOSDInfo::default_instance());
#endif
}

CSSceneOSDRespond::CSSceneOSDRespond(const CSSceneOSDRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSceneOSDRespond::SharedCtor() {
  _cached_size_ = 0;
  queryplayersceneosdinfo_rsp_ = NULL;
  syncplayerosdinfo_push_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSceneOSDRespond::~CSSceneOSDRespond() {
  SharedDtor();
}

void CSSceneOSDRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete queryplayersceneosdinfo_rsp_;
    delete syncplayerosdinfo_push_;
  }
}

void CSSceneOSDRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSceneOSDRespond& CSSceneOSDRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSSenceOSD_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSSenceOSD_2eproto();
#endif
  return *default_instance_;
}

CSSceneOSDRespond* CSSceneOSDRespond::default_instance_ = NULL;

CSSceneOSDRespond* CSSceneOSDRespond::New() const {
  return new CSSceneOSDRespond;
}

void CSSceneOSDRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queryplayersceneosdinfo_rsp()) {
      if (queryplayersceneosdinfo_rsp_ != NULL) queryplayersceneosdinfo_rsp_->::vmsg::CSQueryPlayerSceneOSDInfoRsp::Clear();
    }
    if (has_syncplayerosdinfo_push()) {
      if (syncplayerosdinfo_push_ != NULL) syncplayerosdinfo_push_->::vmsg::CSSyncPlayerOSDInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSceneOSDRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSQueryPlayerSceneOSDInfoRsp QueryPlayerSceneOSDInfo_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryplayersceneosdinfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_SyncPlayerOSDInfo_Push;
        break;
      }

      // optional .vmsg.CSSyncPlayerOSDInfo SyncPlayerOSDInfo_Push = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SyncPlayerOSDInfo_Push:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_syncplayerosdinfo_push()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSceneOSDRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSQueryPlayerSceneOSDInfoRsp QueryPlayerSceneOSDInfo_Rsp = 1;
  if (has_queryplayersceneosdinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->queryplayersceneosdinfo_rsp(), output);
  }

  // optional .vmsg.CSSyncPlayerOSDInfo SyncPlayerOSDInfo_Push = 2;
  if (has_syncplayerosdinfo_push()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->syncplayerosdinfo_push(), output);
  }

}

int CSSceneOSDRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSQueryPlayerSceneOSDInfoRsp QueryPlayerSceneOSDInfo_Rsp = 1;
    if (has_queryplayersceneosdinfo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryplayersceneosdinfo_rsp());
    }

    // optional .vmsg.CSSyncPlayerOSDInfo SyncPlayerOSDInfo_Push = 2;
    if (has_syncplayerosdinfo_push()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->syncplayerosdinfo_push());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSceneOSDRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSceneOSDRespond*>(&from));
}

void CSSceneOSDRespond::MergeFrom(const CSSceneOSDRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queryplayersceneosdinfo_rsp()) {
      mutable_queryplayersceneosdinfo_rsp()->::vmsg::CSQueryPlayerSceneOSDInfoRsp::MergeFrom(from.queryplayersceneosdinfo_rsp());
    }
    if (from.has_syncplayerosdinfo_push()) {
      mutable_syncplayerosdinfo_push()->::vmsg::CSSyncPlayerOSDInfo::MergeFrom(from.syncplayerosdinfo_push());
    }
  }
}

void CSSceneOSDRespond::CopyFrom(const CSSceneOSDRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSceneOSDRespond::IsInitialized() const {

  if (has_queryplayersceneosdinfo_rsp()) {
    if (!this->queryplayersceneosdinfo_rsp().IsInitialized()) return false;
  }
  if (has_syncplayerosdinfo_push()) {
    if (!this->syncplayerosdinfo_push().IsInitialized()) return false;
  }
  return true;
}

void CSSceneOSDRespond::Swap(CSSceneOSDRespond* other) {
  if (other != this) {
    std::swap(queryplayersceneosdinfo_rsp_, other->queryplayersceneosdinfo_rsp_);
    std::swap(syncplayerosdinfo_push_, other->syncplayerosdinfo_push_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSceneOSDRespond::GetTypeName() const {
  return "vmsg.CSSceneOSDRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
