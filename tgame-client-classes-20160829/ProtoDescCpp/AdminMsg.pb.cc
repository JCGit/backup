// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AdminMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "AdminMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_AdminMsg_2eproto() {
  delete CSAdminAddGold::default_instance_;
  delete CSAdminAddItemRqst::default_instance_;
  delete CSAdminSendMailRqst::default_instance_;
  delete CSAdminSendMailGrpRqst::default_instance_;
  delete CSAdminAddArenaMoney::default_instance_;
  delete CSAdminForbidPlayer::default_instance_;
  delete CSAdminRequest::default_instance_;
  delete CSAdminRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_AdminMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_AdminMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_CSMailMsg_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  CSAdminAddGold::default_instance_ = new CSAdminAddGold();
  CSAdminAddItemRqst::default_instance_ = new CSAdminAddItemRqst();
  CSAdminSendMailRqst::default_instance_ = new CSAdminSendMailRqst();
  CSAdminSendMailGrpRqst::default_instance_ = new CSAdminSendMailGrpRqst();
  CSAdminAddArenaMoney::default_instance_ = new CSAdminAddArenaMoney();
  CSAdminForbidPlayer::default_instance_ = new CSAdminForbidPlayer();
  CSAdminRequest::default_instance_ = new CSAdminRequest();
  CSAdminRespond::default_instance_ = new CSAdminRespond();
  CSAdminAddGold::default_instance_->InitAsDefaultInstance();
  CSAdminAddItemRqst::default_instance_->InitAsDefaultInstance();
  CSAdminSendMailRqst::default_instance_->InitAsDefaultInstance();
  CSAdminSendMailGrpRqst::default_instance_->InitAsDefaultInstance();
  CSAdminAddArenaMoney::default_instance_->InitAsDefaultInstance();
  CSAdminForbidPlayer::default_instance_->InitAsDefaultInstance();
  CSAdminRequest::default_instance_->InitAsDefaultInstance();
  CSAdminRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_AdminMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_AdminMsg_2eproto_once_);
void protobuf_AddDesc_AdminMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_AdminMsg_2eproto_once_,
                 &protobuf_AddDesc_AdminMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_AdminMsg_2eproto {
  StaticDescriptorInitializer_AdminMsg_2eproto() {
    protobuf_AddDesc_AdminMsg_2eproto();
  }
} static_descriptor_initializer_AdminMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSAdminAddGold::kGoldCntFieldNumber;
const int CSAdminAddGold::kReasonFieldNumber;
#endif  // !_MSC_VER

CSAdminAddGold::CSAdminAddGold()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminAddGold::InitAsDefaultInstance() {
}

CSAdminAddGold::CSAdminAddGold(const CSAdminAddGold& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminAddGold::SharedCtor() {
  _cached_size_ = 0;
  goldcnt_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminAddGold::~CSAdminAddGold() {
  SharedDtor();
}

void CSAdminAddGold::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAdminAddGold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminAddGold& CSAdminAddGold::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminAddGold* CSAdminAddGold::default_instance_ = NULL;

CSAdminAddGold* CSAdminAddGold::New() const {
  return new CSAdminAddGold;
}

void CSAdminAddGold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goldcnt_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminAddGold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GoldCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcnt_)));
          set_has_goldcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }

      // required uint32 Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminAddGold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GoldCnt = 1;
  if (has_goldcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goldcnt(), output);
  }

  // required uint32 Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

}

int CSAdminAddGold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GoldCnt = 1;
    if (has_goldcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcnt());
    }

    // required uint32 Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminAddGold::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminAddGold*>(&from));
}

void CSAdminAddGold::MergeFrom(const CSAdminAddGold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goldcnt()) {
      set_goldcnt(from.goldcnt());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
}

void CSAdminAddGold::CopyFrom(const CSAdminAddGold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminAddGold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAdminAddGold::Swap(CSAdminAddGold* other) {
  if (other != this) {
    std::swap(goldcnt_, other->goldcnt_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminAddGold::GetTypeName() const {
  return "vmsg.CSAdminAddGold";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminAddItemRqst::kItemIDFieldNumber;
const int CSAdminAddItemRqst::kItemCntFieldNumber;
const int CSAdminAddItemRqst::kReasonFieldNumber;
#endif  // !_MSC_VER

CSAdminAddItemRqst::CSAdminAddItemRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminAddItemRqst::InitAsDefaultInstance() {
}

CSAdminAddItemRqst::CSAdminAddItemRqst(const CSAdminAddItemRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminAddItemRqst::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemcnt_ = 0u;
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminAddItemRqst::~CSAdminAddItemRqst() {
  SharedDtor();
}

void CSAdminAddItemRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAdminAddItemRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminAddItemRqst& CSAdminAddItemRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminAddItemRqst* CSAdminAddItemRqst::default_instance_ = NULL;

CSAdminAddItemRqst* CSAdminAddItemRqst::New() const {
  return new CSAdminAddItemRqst;
}

void CSAdminAddItemRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemcnt_ = 0u;
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminAddItemRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemCnt;
        break;
      }

      // required uint32 ItemCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcnt_)));
          set_has_itemcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Reason;
        break;
      }

      // required uint32 Reason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminAddItemRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 ItemCnt = 2;
  if (has_itemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcnt(), output);
  }

  // required uint32 Reason = 3;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reason(), output);
  }

}

int CSAdminAddItemRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 ItemCnt = 2;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcnt());
    }

    // required uint32 Reason = 3;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminAddItemRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminAddItemRqst*>(&from));
}

void CSAdminAddItemRqst::MergeFrom(const CSAdminAddItemRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcnt()) {
      set_itemcnt(from.itemcnt());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
}

void CSAdminAddItemRqst::CopyFrom(const CSAdminAddItemRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminAddItemRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAdminAddItemRqst::Swap(CSAdminAddItemRqst* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminAddItemRqst::GetTypeName() const {
  return "vmsg.CSAdminAddItemRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminSendMailRqst::kSenderUinFieldNumber;
const int CSAdminSendMailRqst::kMailHeadFieldNumber;
const int CSAdminSendMailRqst::kMailBodyFieldNumber;
const int CSAdminSendMailRqst::kAttachLstFieldNumber;
#endif  // !_MSC_VER

CSAdminSendMailRqst::CSAdminSendMailRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminSendMailRqst::InitAsDefaultInstance() {
}

CSAdminSendMailRqst::CSAdminSendMailRqst(const CSAdminSendMailRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminSendMailRqst::SharedCtor() {
  _cached_size_ = 0;
  senderuin_ = GOOGLE_ULONGLONG(0);
  mailhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminSendMailRqst::~CSAdminSendMailRqst() {
  SharedDtor();
}

void CSAdminSendMailRqst::SharedDtor() {
  if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
    delete mailhead_;
  }
  if (mailbody_ != &::google::protobuf::internal::kEmptyString) {
    delete mailbody_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAdminSendMailRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminSendMailRqst& CSAdminSendMailRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminSendMailRqst* CSAdminSendMailRqst::default_instance_ = NULL;

CSAdminSendMailRqst* CSAdminSendMailRqst::New() const {
  return new CSAdminSendMailRqst;
}

void CSAdminSendMailRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    senderuin_ = GOOGLE_ULONGLONG(0);
    if (has_mailhead()) {
      if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
        mailhead_->clear();
      }
    }
    if (has_mailbody()) {
      if (mailbody_ != &::google::protobuf::internal::kEmptyString) {
        mailbody_->clear();
      }
    }
  }
  attachlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminSendMailRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 SenderUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderuin_)));
          set_has_senderuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MailHead;
        break;
      }

      // required string MailHead = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MailBody;
        break;
      }

      // required string MailBody = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailbody()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AttachLst;
        break;
      }

      // repeated .vmsg.CSMailAttach AttachLst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttachLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AttachLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminSendMailRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 SenderUin = 1;
  if (has_senderuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->senderuin(), output);
  }

  // required string MailHead = 2;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mailhead(), output);
  }

  // required string MailBody = 3;
  if (has_mailbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mailbody(), output);
  }

  // repeated .vmsg.CSMailAttach AttachLst = 4;
  for (int i = 0; i < this->attachlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->attachlst(i), output);
  }

}

int CSAdminSendMailRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 SenderUin = 1;
    if (has_senderuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderuin());
    }

    // required string MailHead = 2;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailhead());
    }

    // required string MailBody = 3;
    if (has_mailbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailbody());
    }

  }
  // repeated .vmsg.CSMailAttach AttachLst = 4;
  total_size += 1 * this->attachlst_size();
  for (int i = 0; i < this->attachlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminSendMailRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminSendMailRqst*>(&from));
}

void CSAdminSendMailRqst::MergeFrom(const CSAdminSendMailRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachlst_.MergeFrom(from.attachlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderuin()) {
      set_senderuin(from.senderuin());
    }
    if (from.has_mailhead()) {
      set_mailhead(from.mailhead());
    }
    if (from.has_mailbody()) {
      set_mailbody(from.mailbody());
    }
  }
}

void CSAdminSendMailRqst::CopyFrom(const CSAdminSendMailRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminSendMailRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < attachlst_size(); i++) {
    if (!this->attachlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSAdminSendMailRqst::Swap(CSAdminSendMailRqst* other) {
  if (other != this) {
    std::swap(senderuin_, other->senderuin_);
    std::swap(mailhead_, other->mailhead_);
    std::swap(mailbody_, other->mailbody_);
    attachlst_.Swap(&other->attachlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminSendMailRqst::GetTypeName() const {
  return "vmsg.CSAdminSendMailRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminSendMailGrpRqst::kSenderUinFieldNumber;
const int CSAdminSendMailGrpRqst::kReceiveGrpIDFieldNumber;
const int CSAdminSendMailGrpRqst::kMailHeadFieldNumber;
const int CSAdminSendMailGrpRqst::kMailBodyFieldNumber;
const int CSAdminSendMailGrpRqst::kAttachLstFieldNumber;
#endif  // !_MSC_VER

CSAdminSendMailGrpRqst::CSAdminSendMailGrpRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminSendMailGrpRqst::InitAsDefaultInstance() {
}

CSAdminSendMailGrpRqst::CSAdminSendMailGrpRqst(const CSAdminSendMailGrpRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminSendMailGrpRqst::SharedCtor() {
  _cached_size_ = 0;
  senderuin_ = GOOGLE_ULONGLONG(0);
  receivegrpid_ = GOOGLE_ULONGLONG(0);
  mailhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mailbody_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminSendMailGrpRqst::~CSAdminSendMailGrpRqst() {
  SharedDtor();
}

void CSAdminSendMailGrpRqst::SharedDtor() {
  if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
    delete mailhead_;
  }
  if (mailbody_ != &::google::protobuf::internal::kEmptyString) {
    delete mailbody_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAdminSendMailGrpRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminSendMailGrpRqst& CSAdminSendMailGrpRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminSendMailGrpRqst* CSAdminSendMailGrpRqst::default_instance_ = NULL;

CSAdminSendMailGrpRqst* CSAdminSendMailGrpRqst::New() const {
  return new CSAdminSendMailGrpRqst;
}

void CSAdminSendMailGrpRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    senderuin_ = GOOGLE_ULONGLONG(0);
    receivegrpid_ = GOOGLE_ULONGLONG(0);
    if (has_mailhead()) {
      if (mailhead_ != &::google::protobuf::internal::kEmptyString) {
        mailhead_->clear();
      }
    }
    if (has_mailbody()) {
      if (mailbody_ != &::google::protobuf::internal::kEmptyString) {
        mailbody_->clear();
      }
    }
  }
  attachlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminSendMailGrpRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 SenderUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderuin_)));
          set_has_senderuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveGrpID;
        break;
      }

      // required uint64 ReceiveGrpID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReceiveGrpID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receivegrpid_)));
          set_has_receivegrpid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MailHead;
        break;
      }

      // required string MailHead = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailHead:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MailBody;
        break;
      }

      // required string MailBody = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailBody:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mailbody()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AttachLst;
        break;
      }

      // repeated .vmsg.CSMailAttach AttachLst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AttachLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AttachLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminSendMailGrpRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 SenderUin = 1;
  if (has_senderuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->senderuin(), output);
  }

  // required uint64 ReceiveGrpID = 2;
  if (has_receivegrpid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receivegrpid(), output);
  }

  // required string MailHead = 3;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mailhead(), output);
  }

  // required string MailBody = 4;
  if (has_mailbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mailbody(), output);
  }

  // repeated .vmsg.CSMailAttach AttachLst = 5;
  for (int i = 0; i < this->attachlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->attachlst(i), output);
  }

}

int CSAdminSendMailGrpRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 SenderUin = 1;
    if (has_senderuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderuin());
    }

    // required uint64 ReceiveGrpID = 2;
    if (has_receivegrpid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receivegrpid());
    }

    // required string MailHead = 3;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailhead());
    }

    // required string MailBody = 4;
    if (has_mailbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mailbody());
    }

  }
  // repeated .vmsg.CSMailAttach AttachLst = 5;
  total_size += 1 * this->attachlst_size();
  for (int i = 0; i < this->attachlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminSendMailGrpRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminSendMailGrpRqst*>(&from));
}

void CSAdminSendMailGrpRqst::MergeFrom(const CSAdminSendMailGrpRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachlst_.MergeFrom(from.attachlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_senderuin()) {
      set_senderuin(from.senderuin());
    }
    if (from.has_receivegrpid()) {
      set_receivegrpid(from.receivegrpid());
    }
    if (from.has_mailhead()) {
      set_mailhead(from.mailhead());
    }
    if (from.has_mailbody()) {
      set_mailbody(from.mailbody());
    }
  }
}

void CSAdminSendMailGrpRqst::CopyFrom(const CSAdminSendMailGrpRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminSendMailGrpRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < attachlst_size(); i++) {
    if (!this->attachlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSAdminSendMailGrpRqst::Swap(CSAdminSendMailGrpRqst* other) {
  if (other != this) {
    std::swap(senderuin_, other->senderuin_);
    std::swap(receivegrpid_, other->receivegrpid_);
    std::swap(mailhead_, other->mailhead_);
    std::swap(mailbody_, other->mailbody_);
    attachlst_.Swap(&other->attachlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminSendMailGrpRqst::GetTypeName() const {
  return "vmsg.CSAdminSendMailGrpRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminAddArenaMoney::kMoneyNumFieldNumber;
#endif  // !_MSC_VER

CSAdminAddArenaMoney::CSAdminAddArenaMoney()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminAddArenaMoney::InitAsDefaultInstance() {
}

CSAdminAddArenaMoney::CSAdminAddArenaMoney(const CSAdminAddArenaMoney& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminAddArenaMoney::SharedCtor() {
  _cached_size_ = 0;
  moneynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminAddArenaMoney::~CSAdminAddArenaMoney() {
  SharedDtor();
}

void CSAdminAddArenaMoney::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAdminAddArenaMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminAddArenaMoney& CSAdminAddArenaMoney::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminAddArenaMoney* CSAdminAddArenaMoney::default_instance_ = NULL;

CSAdminAddArenaMoney* CSAdminAddArenaMoney::New() const {
  return new CSAdminAddArenaMoney;
}

void CSAdminAddArenaMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moneynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminAddArenaMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MoneyNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneynum_)));
          set_has_moneynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminAddArenaMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MoneyNum = 1;
  if (has_moneynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moneynum(), output);
  }

}

int CSAdminAddArenaMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MoneyNum = 1;
    if (has_moneynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneynum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminAddArenaMoney::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminAddArenaMoney*>(&from));
}

void CSAdminAddArenaMoney::MergeFrom(const CSAdminAddArenaMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moneynum()) {
      set_moneynum(from.moneynum());
    }
  }
}

void CSAdminAddArenaMoney::CopyFrom(const CSAdminAddArenaMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminAddArenaMoney::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAdminAddArenaMoney::Swap(CSAdminAddArenaMoney* other) {
  if (other != this) {
    std::swap(moneynum_, other->moneynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminAddArenaMoney::GetTypeName() const {
  return "vmsg.CSAdminAddArenaMoney";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminForbidPlayer::kTimeInSecFieldNumber;
#endif  // !_MSC_VER

CSAdminForbidPlayer::CSAdminForbidPlayer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminForbidPlayer::InitAsDefaultInstance() {
}

CSAdminForbidPlayer::CSAdminForbidPlayer(const CSAdminForbidPlayer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminForbidPlayer::SharedCtor() {
  _cached_size_ = 0;
  timeinsec_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminForbidPlayer::~CSAdminForbidPlayer() {
  SharedDtor();
}

void CSAdminForbidPlayer::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAdminForbidPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminForbidPlayer& CSAdminForbidPlayer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminForbidPlayer* CSAdminForbidPlayer::default_instance_ = NULL;

CSAdminForbidPlayer* CSAdminForbidPlayer::New() const {
  return new CSAdminForbidPlayer;
}

void CSAdminForbidPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeinsec_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminForbidPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TimeInSec = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeinsec_)));
          set_has_timeinsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminForbidPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TimeInSec = 1;
  if (has_timeinsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timeinsec(), output);
  }

}

int CSAdminForbidPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TimeInSec = 1;
    if (has_timeinsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timeinsec());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminForbidPlayer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminForbidPlayer*>(&from));
}

void CSAdminForbidPlayer::MergeFrom(const CSAdminForbidPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeinsec()) {
      set_timeinsec(from.timeinsec());
    }
  }
}

void CSAdminForbidPlayer::CopyFrom(const CSAdminForbidPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminForbidPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAdminForbidPlayer::Swap(CSAdminForbidPlayer* other) {
  if (other != this) {
    std::swap(timeinsec_, other->timeinsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminForbidPlayer::GetTypeName() const {
  return "vmsg.CSAdminForbidPlayer";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminRequest::kUinFieldNumber;
const int CSAdminRequest::kZoneIDFieldNumber;
const int CSAdminRequest::kAddCoinFieldNumber;
const int CSAdminRequest::kAddGoldFieldNumber;
const int CSAdminRequest::kAddItemFieldNumber;
const int CSAdminRequest::kAddEquipFieldNumber;
const int CSAdminRequest::kAddExpFieldNumber;
const int CSAdminRequest::kAddWeaponFieldNumber;
const int CSAdminRequest::kSendMailFieldNumber;
const int CSAdminRequest::kSendGrpMailFieldNumber;
const int CSAdminRequest::kAddArenaMoneyFieldNumber;
const int CSAdminRequest::kPassWarMapFieldNumber;
const int CSAdminRequest::kReceiveTaskFieldNumber;
const int CSAdminRequest::kNotifyContentFieldNumber;
const int CSAdminRequest::kForbideRqstFieldNumber;
#endif  // !_MSC_VER

CSAdminRequest::CSAdminRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  addgold_ = const_cast< ::vmsg::CSAdminAddGold*>(
      ::vmsg::CSAdminAddGold::internal_default_instance());
#else
  addgold_ = const_cast< ::vmsg::CSAdminAddGold*>(&::vmsg::CSAdminAddGold::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  additem_ = const_cast< ::vmsg::CSAdminAddItemRqst*>(
      ::vmsg::CSAdminAddItemRqst::internal_default_instance());
#else
  additem_ = const_cast< ::vmsg::CSAdminAddItemRqst*>(&::vmsg::CSAdminAddItemRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sendmail_ = const_cast< ::vmsg::CSAdminSendMailRqst*>(
      ::vmsg::CSAdminSendMailRqst::internal_default_instance());
#else
  sendmail_ = const_cast< ::vmsg::CSAdminSendMailRqst*>(&::vmsg::CSAdminSendMailRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sendgrpmail_ = const_cast< ::vmsg::CSAdminSendMailGrpRqst*>(
      ::vmsg::CSAdminSendMailGrpRqst::internal_default_instance());
#else
  sendgrpmail_ = const_cast< ::vmsg::CSAdminSendMailGrpRqst*>(&::vmsg::CSAdminSendMailGrpRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  addarenamoney_ = const_cast< ::vmsg::CSAdminAddArenaMoney*>(
      ::vmsg::CSAdminAddArenaMoney::internal_default_instance());
#else
  addarenamoney_ = const_cast< ::vmsg::CSAdminAddArenaMoney*>(&::vmsg::CSAdminAddArenaMoney::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  forbiderqst_ = const_cast< ::vmsg::CSAdminForbidPlayer*>(
      ::vmsg::CSAdminForbidPlayer::internal_default_instance());
#else
  forbiderqst_ = const_cast< ::vmsg::CSAdminForbidPlayer*>(&::vmsg::CSAdminForbidPlayer::default_instance());
#endif
}

CSAdminRequest::CSAdminRequest(const CSAdminRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminRequest::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  addcoin_ = 0u;
  addgold_ = NULL;
  additem_ = NULL;
  addequip_ = 0u;
  addexp_ = 0u;
  addweapon_ = 0u;
  sendmail_ = NULL;
  sendgrpmail_ = NULL;
  addarenamoney_ = NULL;
  passwarmap_ = 0u;
  receivetask_ = 0u;
  notifycontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  forbiderqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminRequest::~CSAdminRequest() {
  SharedDtor();
}

void CSAdminRequest::SharedDtor() {
  if (notifycontent_ != &::google::protobuf::internal::kEmptyString) {
    delete notifycontent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete addgold_;
    delete additem_;
    delete sendmail_;
    delete sendgrpmail_;
    delete addarenamoney_;
    delete forbiderqst_;
  }
}

void CSAdminRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminRequest& CSAdminRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminRequest* CSAdminRequest::default_instance_ = NULL;

CSAdminRequest* CSAdminRequest::New() const {
  return new CSAdminRequest;
}

void CSAdminRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    zoneid_ = 0u;
    addcoin_ = 0u;
    if (has_addgold()) {
      if (addgold_ != NULL) addgold_->::vmsg::CSAdminAddGold::Clear();
    }
    if (has_additem()) {
      if (additem_ != NULL) additem_->::vmsg::CSAdminAddItemRqst::Clear();
    }
    addequip_ = 0u;
    addexp_ = 0u;
    addweapon_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sendmail()) {
      if (sendmail_ != NULL) sendmail_->::vmsg::CSAdminSendMailRqst::Clear();
    }
    if (has_sendgrpmail()) {
      if (sendgrpmail_ != NULL) sendgrpmail_->::vmsg::CSAdminSendMailGrpRqst::Clear();
    }
    if (has_addarenamoney()) {
      if (addarenamoney_ != NULL) addarenamoney_->::vmsg::CSAdminAddArenaMoney::Clear();
    }
    passwarmap_ = 0u;
    receivetask_ = 0u;
    if (has_notifycontent()) {
      if (notifycontent_ != &::google::protobuf::internal::kEmptyString) {
        notifycontent_->clear();
      }
    }
    if (has_forbiderqst()) {
      if (forbiderqst_ != NULL) forbiderqst_->::vmsg::CSAdminForbidPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ZoneID;
        break;
      }

      // required uint32 ZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AddCoin;
        break;
      }

      // optional uint32 AddCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addcoin_)));
          set_has_addcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AddGold;
        break;
      }

      // optional .vmsg.CSAdminAddGold AddGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddGold:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addgold()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AddItem;
        break;
      }

      // optional .vmsg.CSAdminAddItemRqst AddItem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_additem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AddEquip;
        break;
      }

      // optional uint32 AddEquip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddEquip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addequip_)));
          set_has_addequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AddExp;
        break;
      }

      // optional uint32 AddExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AddWeapon;
        break;
      }

      // optional uint32 AddWeapon = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addweapon_)));
          set_has_addweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_SendMail;
        break;
      }

      // optional .vmsg.CSAdminSendMailRqst SendMail = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SendMail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SendGrpMail;
        break;
      }

      // optional .vmsg.CSAdminSendMailGrpRqst SendGrpMail = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SendGrpMail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendgrpmail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_AddArenaMoney;
        break;
      }

      // optional .vmsg.CSAdminAddArenaMoney AddArenaMoney = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddArenaMoney:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addarenamoney()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_PassWarMap;
        break;
      }

      // optional uint32 PassWarMap = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassWarMap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passwarmap_)));
          set_has_passwarmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ReceiveTask;
        break;
      }

      // optional uint32 ReceiveTask = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReceiveTask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivetask_)));
          set_has_receivetask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_NotifyContent;
        break;
      }

      // optional string NotifyContent = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NotifyContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notifycontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_ForbideRqst;
        break;
      }

      // optional .vmsg.CSAdminForbidPlayer ForbideRqst = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForbideRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forbiderqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required uint32 ZoneID = 2;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 AddCoin = 3;
  if (has_addcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addcoin(), output);
  }

  // optional .vmsg.CSAdminAddGold AddGold = 4;
  if (has_addgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->addgold(), output);
  }

  // optional .vmsg.CSAdminAddItemRqst AddItem = 5;
  if (has_additem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->additem(), output);
  }

  // optional uint32 AddEquip = 6;
  if (has_addequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->addequip(), output);
  }

  // optional uint32 AddExp = 7;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->addexp(), output);
  }

  // optional uint32 AddWeapon = 8;
  if (has_addweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->addweapon(), output);
  }

  // optional .vmsg.CSAdminSendMailRqst SendMail = 9;
  if (has_sendmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->sendmail(), output);
  }

  // optional .vmsg.CSAdminSendMailGrpRqst SendGrpMail = 10;
  if (has_sendgrpmail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->sendgrpmail(), output);
  }

  // optional .vmsg.CSAdminAddArenaMoney AddArenaMoney = 11;
  if (has_addarenamoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->addarenamoney(), output);
  }

  // optional uint32 PassWarMap = 12;
  if (has_passwarmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->passwarmap(), output);
  }

  // optional uint32 ReceiveTask = 13;
  if (has_receivetask()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->receivetask(), output);
  }

  // optional string NotifyContent = 14;
  if (has_notifycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->notifycontent(), output);
  }

  // optional .vmsg.CSAdminForbidPlayer ForbideRqst = 15;
  if (has_forbiderqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->forbiderqst(), output);
  }

}

int CSAdminRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required uint32 ZoneID = 2;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 AddCoin = 3;
    if (has_addcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addcoin());
    }

    // optional .vmsg.CSAdminAddGold AddGold = 4;
    if (has_addgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addgold());
    }

    // optional .vmsg.CSAdminAddItemRqst AddItem = 5;
    if (has_additem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->additem());
    }

    // optional uint32 AddEquip = 6;
    if (has_addequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addequip());
    }

    // optional uint32 AddExp = 7;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addexp());
    }

    // optional uint32 AddWeapon = 8;
    if (has_addweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addweapon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSAdminSendMailRqst SendMail = 9;
    if (has_sendmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmail());
    }

    // optional .vmsg.CSAdminSendMailGrpRqst SendGrpMail = 10;
    if (has_sendgrpmail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendgrpmail());
    }

    // optional .vmsg.CSAdminAddArenaMoney AddArenaMoney = 11;
    if (has_addarenamoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addarenamoney());
    }

    // optional uint32 PassWarMap = 12;
    if (has_passwarmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passwarmap());
    }

    // optional uint32 ReceiveTask = 13;
    if (has_receivetask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivetask());
    }

    // optional string NotifyContent = 14;
    if (has_notifycontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notifycontent());
    }

    // optional .vmsg.CSAdminForbidPlayer ForbideRqst = 15;
    if (has_forbiderqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forbiderqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminRequest*>(&from));
}

void CSAdminRequest::MergeFrom(const CSAdminRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_addcoin()) {
      set_addcoin(from.addcoin());
    }
    if (from.has_addgold()) {
      mutable_addgold()->::vmsg::CSAdminAddGold::MergeFrom(from.addgold());
    }
    if (from.has_additem()) {
      mutable_additem()->::vmsg::CSAdminAddItemRqst::MergeFrom(from.additem());
    }
    if (from.has_addequip()) {
      set_addequip(from.addequip());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_addweapon()) {
      set_addweapon(from.addweapon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sendmail()) {
      mutable_sendmail()->::vmsg::CSAdminSendMailRqst::MergeFrom(from.sendmail());
    }
    if (from.has_sendgrpmail()) {
      mutable_sendgrpmail()->::vmsg::CSAdminSendMailGrpRqst::MergeFrom(from.sendgrpmail());
    }
    if (from.has_addarenamoney()) {
      mutable_addarenamoney()->::vmsg::CSAdminAddArenaMoney::MergeFrom(from.addarenamoney());
    }
    if (from.has_passwarmap()) {
      set_passwarmap(from.passwarmap());
    }
    if (from.has_receivetask()) {
      set_receivetask(from.receivetask());
    }
    if (from.has_notifycontent()) {
      set_notifycontent(from.notifycontent());
    }
    if (from.has_forbiderqst()) {
      mutable_forbiderqst()->::vmsg::CSAdminForbidPlayer::MergeFrom(from.forbiderqst());
    }
  }
}

void CSAdminRequest::CopyFrom(const CSAdminRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_addgold()) {
    if (!this->addgold().IsInitialized()) return false;
  }
  if (has_additem()) {
    if (!this->additem().IsInitialized()) return false;
  }
  if (has_sendmail()) {
    if (!this->sendmail().IsInitialized()) return false;
  }
  if (has_sendgrpmail()) {
    if (!this->sendgrpmail().IsInitialized()) return false;
  }
  if (has_addarenamoney()) {
    if (!this->addarenamoney().IsInitialized()) return false;
  }
  if (has_forbiderqst()) {
    if (!this->forbiderqst().IsInitialized()) return false;
  }
  return true;
}

void CSAdminRequest::Swap(CSAdminRequest* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(addcoin_, other->addcoin_);
    std::swap(addgold_, other->addgold_);
    std::swap(additem_, other->additem_);
    std::swap(addequip_, other->addequip_);
    std::swap(addexp_, other->addexp_);
    std::swap(addweapon_, other->addweapon_);
    std::swap(sendmail_, other->sendmail_);
    std::swap(sendgrpmail_, other->sendgrpmail_);
    std::swap(addarenamoney_, other->addarenamoney_);
    std::swap(passwarmap_, other->passwarmap_);
    std::swap(receivetask_, other->receivetask_);
    std::swap(notifycontent_, other->notifycontent_);
    std::swap(forbiderqst_, other->forbiderqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminRequest::GetTypeName() const {
  return "vmsg.CSAdminRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAdminRespond::kQueryMailRspFieldNumber;
const int CSAdminRespond::kReadMailRspFieldNumber;
const int CSAdminRespond::kGetAttachRspFieldNumber;
const int CSAdminRespond::kDeleteMailRspFieldNumber;
#endif  // !_MSC_VER

CSAdminRespond::CSAdminRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAdminRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querymail_rsp_ = const_cast< ::vmsg::CSQueryMailRsp*>(
      ::vmsg::CSQueryMailRsp::internal_default_instance());
#else
  querymail_rsp_ = const_cast< ::vmsg::CSQueryMailRsp*>(&::vmsg::CSQueryMailRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  readmail_rsp_ = const_cast< ::vmsg::CSReadMailRsp*>(
      ::vmsg::CSReadMailRsp::internal_default_instance());
#else
  readmail_rsp_ = const_cast< ::vmsg::CSReadMailRsp*>(&::vmsg::CSReadMailRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  getattach_rsp_ = const_cast< ::vmsg::CSGetAttachRsp*>(
      ::vmsg::CSGetAttachRsp::internal_default_instance());
#else
  getattach_rsp_ = const_cast< ::vmsg::CSGetAttachRsp*>(&::vmsg::CSGetAttachRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  deletemail_rsp_ = const_cast< ::vmsg::CSDeleteMailRsp*>(
      ::vmsg::CSDeleteMailRsp::internal_default_instance());
#else
  deletemail_rsp_ = const_cast< ::vmsg::CSDeleteMailRsp*>(&::vmsg::CSDeleteMailRsp::default_instance());
#endif
}

CSAdminRespond::CSAdminRespond(const CSAdminRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAdminRespond::SharedCtor() {
  _cached_size_ = 0;
  querymail_rsp_ = NULL;
  readmail_rsp_ = NULL;
  getattach_rsp_ = NULL;
  deletemail_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAdminRespond::~CSAdminRespond() {
  SharedDtor();
}

void CSAdminRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete querymail_rsp_;
    delete readmail_rsp_;
    delete getattach_rsp_;
    delete deletemail_rsp_;
  }
}

void CSAdminRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAdminRespond& CSAdminRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_AdminMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_AdminMsg_2eproto();
#endif
  return *default_instance_;
}

CSAdminRespond* CSAdminRespond::default_instance_ = NULL;

CSAdminRespond* CSAdminRespond::New() const {
  return new CSAdminRespond;
}

void CSAdminRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_querymail_rsp()) {
      if (querymail_rsp_ != NULL) querymail_rsp_->::vmsg::CSQueryMailRsp::Clear();
    }
    if (has_readmail_rsp()) {
      if (readmail_rsp_ != NULL) readmail_rsp_->::vmsg::CSReadMailRsp::Clear();
    }
    if (has_getattach_rsp()) {
      if (getattach_rsp_ != NULL) getattach_rsp_->::vmsg::CSGetAttachRsp::Clear();
    }
    if (has_deletemail_rsp()) {
      if (deletemail_rsp_ != NULL) deletemail_rsp_->::vmsg::CSDeleteMailRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAdminRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSQueryMailRsp QueryMail_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querymail_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ReadMail_Rsp;
        break;
      }

      // optional .vmsg.CSReadMailRsp ReadMail_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReadMail_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_readmail_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GetAttach_Rsp;
        break;
      }

      // optional .vmsg.CSGetAttachRsp GetAttach_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GetAttach_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getattach_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DeleteMail_Rsp;
        break;
      }

      // optional .vmsg.CSDeleteMailRsp DeleteMail_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeleteMail_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deletemail_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAdminRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSQueryMailRsp QueryMail_Rsp = 1;
  if (has_querymail_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->querymail_rsp(), output);
  }

  // optional .vmsg.CSReadMailRsp ReadMail_Rsp = 2;
  if (has_readmail_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->readmail_rsp(), output);
  }

  // optional .vmsg.CSGetAttachRsp GetAttach_Rsp = 3;
  if (has_getattach_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->getattach_rsp(), output);
  }

  // optional .vmsg.CSDeleteMailRsp DeleteMail_Rsp = 4;
  if (has_deletemail_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->deletemail_rsp(), output);
  }

}

int CSAdminRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSQueryMailRsp QueryMail_Rsp = 1;
    if (has_querymail_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querymail_rsp());
    }

    // optional .vmsg.CSReadMailRsp ReadMail_Rsp = 2;
    if (has_readmail_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->readmail_rsp());
    }

    // optional .vmsg.CSGetAttachRsp GetAttach_Rsp = 3;
    if (has_getattach_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getattach_rsp());
    }

    // optional .vmsg.CSDeleteMailRsp DeleteMail_Rsp = 4;
    if (has_deletemail_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deletemail_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAdminRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAdminRespond*>(&from));
}

void CSAdminRespond::MergeFrom(const CSAdminRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_querymail_rsp()) {
      mutable_querymail_rsp()->::vmsg::CSQueryMailRsp::MergeFrom(from.querymail_rsp());
    }
    if (from.has_readmail_rsp()) {
      mutable_readmail_rsp()->::vmsg::CSReadMailRsp::MergeFrom(from.readmail_rsp());
    }
    if (from.has_getattach_rsp()) {
      mutable_getattach_rsp()->::vmsg::CSGetAttachRsp::MergeFrom(from.getattach_rsp());
    }
    if (from.has_deletemail_rsp()) {
      mutable_deletemail_rsp()->::vmsg::CSDeleteMailRsp::MergeFrom(from.deletemail_rsp());
    }
  }
}

void CSAdminRespond::CopyFrom(const CSAdminRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAdminRespond::IsInitialized() const {

  if (has_querymail_rsp()) {
    if (!this->querymail_rsp().IsInitialized()) return false;
  }
  if (has_readmail_rsp()) {
    if (!this->readmail_rsp().IsInitialized()) return false;
  }
  if (has_deletemail_rsp()) {
    if (!this->deletemail_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSAdminRespond::Swap(CSAdminRespond* other) {
  if (other != this) {
    std::swap(querymail_rsp_, other->querymail_rsp_);
    std::swap(readmail_rsp_, other->readmail_rsp_);
    std::swap(getattach_rsp_, other->getattach_rsp_);
    std::swap(deletemail_rsp_, other->deletemail_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAdminRespond::GetTypeName() const {
  return "vmsg.CSAdminRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
