// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSBossChallengeMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSBossChallengeMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSBossChallengeMsg_2eproto() {
  delete CSAttendeeDamageElmt::default_instance_;
  delete CSBossChallengeInfo::default_instance_;
  delete CSSingleAttendeeDamageEvent::default_instance_;
  delete CSBossChallengeBigDamageReport::default_instance_;
  delete CSBossChallengeEnterEvent::default_instance_;
  delete CSBossChallengeDamageNotification::default_instance_;
  delete CSBossChallengeBossNotification::default_instance_;
  delete CSBossChallengeStateNotification::default_instance_;
  delete CSBossChallengeRqst::default_instance_;
  delete CSBossChallengeRsp::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSBossChallengeMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSBossChallengeMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  CSAttendeeDamageElmt::default_instance_ = new CSAttendeeDamageElmt();
  CSBossChallengeInfo::default_instance_ = new CSBossChallengeInfo();
  CSSingleAttendeeDamageEvent::default_instance_ = new CSSingleAttendeeDamageEvent();
  CSBossChallengeBigDamageReport::default_instance_ = new CSBossChallengeBigDamageReport();
  CSBossChallengeEnterEvent::default_instance_ = new CSBossChallengeEnterEvent();
  CSBossChallengeDamageNotification::default_instance_ = new CSBossChallengeDamageNotification();
  CSBossChallengeBossNotification::default_instance_ = new CSBossChallengeBossNotification();
  CSBossChallengeStateNotification::default_instance_ = new CSBossChallengeStateNotification();
  CSBossChallengeRqst::default_instance_ = new CSBossChallengeRqst();
  CSBossChallengeRsp::default_instance_ = new CSBossChallengeRsp();
  CSAttendeeDamageElmt::default_instance_->InitAsDefaultInstance();
  CSBossChallengeInfo::default_instance_->InitAsDefaultInstance();
  CSSingleAttendeeDamageEvent::default_instance_->InitAsDefaultInstance();
  CSBossChallengeBigDamageReport::default_instance_->InitAsDefaultInstance();
  CSBossChallengeEnterEvent::default_instance_->InitAsDefaultInstance();
  CSBossChallengeDamageNotification::default_instance_->InitAsDefaultInstance();
  CSBossChallengeBossNotification::default_instance_->InitAsDefaultInstance();
  CSBossChallengeStateNotification::default_instance_->InitAsDefaultInstance();
  CSBossChallengeRqst::default_instance_->InitAsDefaultInstance();
  CSBossChallengeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSBossChallengeMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSBossChallengeMsg_2eproto_once_);
void protobuf_AddDesc_CSBossChallengeMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSBossChallengeMsg_2eproto_once_,
                 &protobuf_AddDesc_CSBossChallengeMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSBossChallengeMsg_2eproto {
  StaticDescriptorInitializer_CSBossChallengeMsg_2eproto() {
    protobuf_AddDesc_CSBossChallengeMsg_2eproto();
  }
} static_descriptor_initializer_CSBossChallengeMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSAttendeeDamageElmt::kUidFieldNumber;
const int CSAttendeeDamageElmt::kNickFieldNumber;
const int CSAttendeeDamageElmt::kDamageFieldNumber;
#endif  // !_MSC_VER

CSAttendeeDamageElmt::CSAttendeeDamageElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAttendeeDamageElmt::InitAsDefaultInstance() {
}

CSAttendeeDamageElmt::CSAttendeeDamageElmt(const CSAttendeeDamageElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAttendeeDamageElmt::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAttendeeDamageElmt::~CSAttendeeDamageElmt() {
  SharedDtor();
}

void CSAttendeeDamageElmt::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAttendeeDamageElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAttendeeDamageElmt& CSAttendeeDamageElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSAttendeeDamageElmt* CSAttendeeDamageElmt::default_instance_ = NULL;

CSAttendeeDamageElmt* CSAttendeeDamageElmt::New() const {
  return new CSAttendeeDamageElmt;
}

void CSAttendeeDamageElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAttendeeDamageElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nick;
        break;
      }

      // required string Nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Damage;
        break;
      }

      // required uint32 Damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAttendeeDamageElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string Nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // required uint32 Damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->damage(), output);
  }

}

int CSAttendeeDamageElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string Nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required uint32 Damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAttendeeDamageElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAttendeeDamageElmt*>(&from));
}

void CSAttendeeDamageElmt::MergeFrom(const CSAttendeeDamageElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
}

void CSAttendeeDamageElmt::CopyFrom(const CSAttendeeDamageElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAttendeeDamageElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAttendeeDamageElmt::Swap(CSAttendeeDamageElmt* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nick_, other->nick_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAttendeeDamageElmt::GetTypeName() const {
  return "vmsg.CSAttendeeDamageElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeInfo::kStartTimeFieldNumber;
const int CSBossChallengeInfo::kStopTimeFieldNumber;
const int CSBossChallengeInfo::kBossIDFieldNumber;
const int CSBossChallengeInfo::kBossCurHPFieldNumber;
const int CSBossChallengeInfo::kBossTotalHpFieldNumber;
const int CSBossChallengeInfo::kStateFieldNumber;
const int CSBossChallengeInfo::kTopChallengersFieldNumber;
const int CSBossChallengeInfo::kPrepareTimeFieldNumber;
const int CSBossChallengeInfo::kBossLevelFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeInfo::CSBossChallengeInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeInfo::InitAsDefaultInstance() {
}

CSBossChallengeInfo::CSBossChallengeInfo(const CSBossChallengeInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeInfo::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  bossid_ = 0u;
  bosscurhp_ = GOOGLE_ULONGLONG(0);
  bosstotalhp_ = GOOGLE_ULONGLONG(0);
  state_ = GOOGLE_ULONGLONG(0);
  preparetime_ = 0u;
  bosslevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeInfo::~CSBossChallengeInfo() {
  SharedDtor();
}

void CSBossChallengeInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBossChallengeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeInfo& CSBossChallengeInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeInfo* CSBossChallengeInfo::default_instance_ = NULL;

CSBossChallengeInfo* CSBossChallengeInfo::New() const {
  return new CSBossChallengeInfo;
}

void CSBossChallengeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    bossid_ = 0u;
    bosscurhp_ = GOOGLE_ULONGLONG(0);
    bosstotalhp_ = GOOGLE_ULONGLONG(0);
    state_ = GOOGLE_ULONGLONG(0);
    preparetime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bosslevel_ = 0u;
  }
  topchallengers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BossID;
        break;
      }

      // required uint32 BossID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BossCurHP;
        break;
      }

      // required uint64 BossCurHP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossCurHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bosscurhp_)));
          set_has_bosscurhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BossTotalHp;
        break;
      }

      // required uint64 BossTotalHp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossTotalHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bosstotalhp_)));
          set_has_bosstotalhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_State;
        break;
      }

      // required uint64 State = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_TopChallengers;
        break;
      }

      // repeated .vmsg.CSAttendeeDamageElmt TopChallengers = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TopChallengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topchallengers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_TopChallengers;
        if (input->ExpectTag(64)) goto parse_PrepareTime;
        break;
      }

      // required uint32 PrepareTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PrepareTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &preparetime_)));
          set_has_preparetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BossLevel;
        break;
      }

      // required uint32 BossLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 BossID = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bossid(), output);
  }

  // required uint64 BossCurHP = 4;
  if (has_bosscurhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->bosscurhp(), output);
  }

  // required uint64 BossTotalHp = 5;
  if (has_bosstotalhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->bosstotalhp(), output);
  }

  // required uint64 State = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->state(), output);
  }

  // repeated .vmsg.CSAttendeeDamageElmt TopChallengers = 7;
  for (int i = 0; i < this->topchallengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->topchallengers(i), output);
  }

  // required uint32 PrepareTime = 8;
  if (has_preparetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->preparetime(), output);
  }

  // required uint32 BossLevel = 9;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bosslevel(), output);
  }

}

int CSBossChallengeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 BossID = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // required uint64 BossCurHP = 4;
    if (has_bosscurhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bosscurhp());
    }

    // required uint64 BossTotalHp = 5;
    if (has_bosstotalhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bosstotalhp());
    }

    // required uint64 State = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->state());
    }

    // required uint32 PrepareTime = 8;
    if (has_preparetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->preparetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 BossLevel = 9;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslevel());
    }

  }
  // repeated .vmsg.CSAttendeeDamageElmt TopChallengers = 7;
  total_size += 1 * this->topchallengers_size();
  for (int i = 0; i < this->topchallengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topchallengers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeInfo*>(&from));
}

void CSBossChallengeInfo::MergeFrom(const CSBossChallengeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  topchallengers_.MergeFrom(from.topchallengers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosscurhp()) {
      set_bosscurhp(from.bosscurhp());
    }
    if (from.has_bosstotalhp()) {
      set_bosstotalhp(from.bosstotalhp());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_preparetime()) {
      set_preparetime(from.preparetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
  }
}

void CSBossChallengeInfo::CopyFrom(const CSBossChallengeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001bf) != 0x000001bf) return false;

  for (int i = 0; i < topchallengers_size(); i++) {
    if (!this->topchallengers(i).IsInitialized()) return false;
  }
  return true;
}

void CSBossChallengeInfo::Swap(CSBossChallengeInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(bossid_, other->bossid_);
    std::swap(bosscurhp_, other->bosscurhp_);
    std::swap(bosstotalhp_, other->bosstotalhp_);
    std::swap(state_, other->state_);
    topchallengers_.Swap(&other->topchallengers_);
    std::swap(preparetime_, other->preparetime_);
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeInfo::GetTypeName() const {
  return "vmsg.CSBossChallengeInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSingleAttendeeDamageEvent::kUidFieldNumber;
const int CSSingleAttendeeDamageEvent::kDamageFieldNumber;
const int CSSingleAttendeeDamageEvent::kSkillIDFieldNumber;
const int CSSingleAttendeeDamageEvent::kNickFieldNumber;
#endif  // !_MSC_VER

CSSingleAttendeeDamageEvent::CSSingleAttendeeDamageEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSingleAttendeeDamageEvent::InitAsDefaultInstance() {
}

CSSingleAttendeeDamageEvent::CSSingleAttendeeDamageEvent(const CSSingleAttendeeDamageEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSingleAttendeeDamageEvent::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0u;
  skillid_ = 0u;
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSingleAttendeeDamageEvent::~CSSingleAttendeeDamageEvent() {
  SharedDtor();
}

void CSSingleAttendeeDamageEvent::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSingleAttendeeDamageEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSingleAttendeeDamageEvent& CSSingleAttendeeDamageEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSSingleAttendeeDamageEvent* CSSingleAttendeeDamageEvent::default_instance_ = NULL;

CSSingleAttendeeDamageEvent* CSSingleAttendeeDamageEvent::New() const {
  return new CSSingleAttendeeDamageEvent;
}

void CSSingleAttendeeDamageEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    damage_ = 0u;
    skillid_ = 0u;
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSingleAttendeeDamageEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Damage;
        break;
      }

      // required uint32 Damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SkillID;
        break;
      }

      // required uint32 SkillID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Nick;
        break;
      }

      // required string Nick = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSingleAttendeeDamageEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required uint32 Damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // required uint32 SkillID = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillid(), output);
  }

  // required string Nick = 4;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->nick(), output);
  }

}

int CSSingleAttendeeDamageEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required uint32 Damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // required uint32 SkillID = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required string Nick = 4;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSingleAttendeeDamageEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSingleAttendeeDamageEvent*>(&from));
}

void CSSingleAttendeeDamageEvent::MergeFrom(const CSSingleAttendeeDamageEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
}

void CSSingleAttendeeDamageEvent::CopyFrom(const CSSingleAttendeeDamageEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSingleAttendeeDamageEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSSingleAttendeeDamageEvent::Swap(CSSingleAttendeeDamageEvent* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(damage_, other->damage_);
    std::swap(skillid_, other->skillid_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSingleAttendeeDamageEvent::GetTypeName() const {
  return "vmsg.CSSingleAttendeeDamageEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeBigDamageReport::kMyDamageFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeBigDamageReport::CSBossChallengeBigDamageReport()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeBigDamageReport::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mydamage_ = const_cast< ::vmsg::CSSingleAttendeeDamageEvent*>(
      ::vmsg::CSSingleAttendeeDamageEvent::internal_default_instance());
#else
  mydamage_ = const_cast< ::vmsg::CSSingleAttendeeDamageEvent*>(&::vmsg::CSSingleAttendeeDamageEvent::default_instance());
#endif
}

CSBossChallengeBigDamageReport::CSBossChallengeBigDamageReport(const CSBossChallengeBigDamageReport& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeBigDamageReport::SharedCtor() {
  _cached_size_ = 0;
  mydamage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeBigDamageReport::~CSBossChallengeBigDamageReport() {
  SharedDtor();
}

void CSBossChallengeBigDamageReport::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete mydamage_;
  }
}

void CSBossChallengeBigDamageReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeBigDamageReport& CSBossChallengeBigDamageReport::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeBigDamageReport* CSBossChallengeBigDamageReport::default_instance_ = NULL;

CSBossChallengeBigDamageReport* CSBossChallengeBigDamageReport::New() const {
  return new CSBossChallengeBigDamageReport;
}

void CSBossChallengeBigDamageReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mydamage()) {
      if (mydamage_ != NULL) mydamage_->::vmsg::CSSingleAttendeeDamageEvent::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeBigDamageReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSSingleAttendeeDamageEvent MyDamage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mydamage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeBigDamageReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSSingleAttendeeDamageEvent MyDamage = 1;
  if (has_mydamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->mydamage(), output);
  }

}

int CSBossChallengeBigDamageReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSSingleAttendeeDamageEvent MyDamage = 1;
    if (has_mydamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mydamage());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeBigDamageReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeBigDamageReport*>(&from));
}

void CSBossChallengeBigDamageReport::MergeFrom(const CSBossChallengeBigDamageReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mydamage()) {
      mutable_mydamage()->::vmsg::CSSingleAttendeeDamageEvent::MergeFrom(from.mydamage());
    }
  }
}

void CSBossChallengeBigDamageReport::CopyFrom(const CSBossChallengeBigDamageReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeBigDamageReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_mydamage()) {
    if (!this->mydamage().IsInitialized()) return false;
  }
  return true;
}

void CSBossChallengeBigDamageReport::Swap(CSBossChallengeBigDamageReport* other) {
  if (other != this) {
    std::swap(mydamage_, other->mydamage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeBigDamageReport::GetTypeName() const {
  return "vmsg.CSBossChallengeBigDamageReport";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeEnterEvent::kUidFieldNumber;
const int CSBossChallengeEnterEvent::kNickFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeEnterEvent::CSBossChallengeEnterEvent()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeEnterEvent::InitAsDefaultInstance() {
}

CSBossChallengeEnterEvent::CSBossChallengeEnterEvent(const CSBossChallengeEnterEvent& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeEnterEvent::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeEnterEvent::~CSBossChallengeEnterEvent() {
  SharedDtor();
}

void CSBossChallengeEnterEvent::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBossChallengeEnterEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeEnterEvent& CSBossChallengeEnterEvent::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeEnterEvent* CSBossChallengeEnterEvent::default_instance_ = NULL;

CSBossChallengeEnterEvent* CSBossChallengeEnterEvent::New() const {
  return new CSBossChallengeEnterEvent;
}

void CSBossChallengeEnterEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeEnterEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nick;
        break;
      }

      // required string Nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeEnterEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // required string Nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

}

int CSBossChallengeEnterEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // required string Nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeEnterEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeEnterEvent*>(&from));
}

void CSBossChallengeEnterEvent::MergeFrom(const CSBossChallengeEnterEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
  }
}

void CSBossChallengeEnterEvent::CopyFrom(const CSBossChallengeEnterEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeEnterEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSBossChallengeEnterEvent::Swap(CSBossChallengeEnterEvent* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(nick_, other->nick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeEnterEvent::GetTypeName() const {
  return "vmsg.CSBossChallengeEnterEvent";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeDamageNotification::kBossHpFieldNumber;
const int CSBossChallengeDamageNotification::kDamagesFieldNumber;
const int CSBossChallengeDamageNotification::kPlayerEntryFieldNumber;
const int CSBossChallengeDamageNotification::kTopChallengersFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeDamageNotification::CSBossChallengeDamageNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeDamageNotification::InitAsDefaultInstance() {
}

CSBossChallengeDamageNotification::CSBossChallengeDamageNotification(const CSBossChallengeDamageNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeDamageNotification::SharedCtor() {
  _cached_size_ = 0;
  bosshp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeDamageNotification::~CSBossChallengeDamageNotification() {
  SharedDtor();
}

void CSBossChallengeDamageNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBossChallengeDamageNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeDamageNotification& CSBossChallengeDamageNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeDamageNotification* CSBossChallengeDamageNotification::default_instance_ = NULL;

CSBossChallengeDamageNotification* CSBossChallengeDamageNotification::New() const {
  return new CSBossChallengeDamageNotification;
}

void CSBossChallengeDamageNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bosshp_ = GOOGLE_ULONGLONG(0);
  }
  damages_.Clear();
  playerentry_.Clear();
  topchallengers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeDamageNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 BossHp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Damages;
        break;
      }

      // repeated .vmsg.CSSingleAttendeeDamageEvent Damages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Damages;
        if (input->ExpectTag(26)) goto parse_PlayerEntry;
        break;
      }

      // repeated .vmsg.CSBossChallengeEnterEvent PlayerEntry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEntry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerentry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PlayerEntry;
        if (input->ExpectTag(34)) goto parse_TopChallengers;
        break;
      }

      // repeated .vmsg.CSAttendeeDamageElmt TopChallengers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TopChallengers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_topchallengers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TopChallengers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeDamageNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 BossHp = 1;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bosshp(), output);
  }

  // repeated .vmsg.CSSingleAttendeeDamageEvent Damages = 2;
  for (int i = 0; i < this->damages_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->damages(i), output);
  }

  // repeated .vmsg.CSBossChallengeEnterEvent PlayerEntry = 3;
  for (int i = 0; i < this->playerentry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->playerentry(i), output);
  }

  // repeated .vmsg.CSAttendeeDamageElmt TopChallengers = 4;
  for (int i = 0; i < this->topchallengers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->topchallengers(i), output);
  }

}

int CSBossChallengeDamageNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 BossHp = 1;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bosshp());
    }

  }
  // repeated .vmsg.CSSingleAttendeeDamageEvent Damages = 2;
  total_size += 1 * this->damages_size();
  for (int i = 0; i < this->damages_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damages(i));
  }

  // repeated .vmsg.CSBossChallengeEnterEvent PlayerEntry = 3;
  total_size += 1 * this->playerentry_size();
  for (int i = 0; i < this->playerentry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerentry(i));
  }

  // repeated .vmsg.CSAttendeeDamageElmt TopChallengers = 4;
  total_size += 1 * this->topchallengers_size();
  for (int i = 0; i < this->topchallengers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->topchallengers(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeDamageNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeDamageNotification*>(&from));
}

void CSBossChallengeDamageNotification::MergeFrom(const CSBossChallengeDamageNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  damages_.MergeFrom(from.damages_);
  playerentry_.MergeFrom(from.playerentry_);
  topchallengers_.MergeFrom(from.topchallengers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
  }
}

void CSBossChallengeDamageNotification::CopyFrom(const CSBossChallengeDamageNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeDamageNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < damages_size(); i++) {
    if (!this->damages(i).IsInitialized()) return false;
  }
  for (int i = 0; i < playerentry_size(); i++) {
    if (!this->playerentry(i).IsInitialized()) return false;
  }
  for (int i = 0; i < topchallengers_size(); i++) {
    if (!this->topchallengers(i).IsInitialized()) return false;
  }
  return true;
}

void CSBossChallengeDamageNotification::Swap(CSBossChallengeDamageNotification* other) {
  if (other != this) {
    std::swap(bosshp_, other->bosshp_);
    damages_.Swap(&other->damages_);
    playerentry_.Swap(&other->playerentry_);
    topchallengers_.Swap(&other->topchallengers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeDamageNotification::GetTypeName() const {
  return "vmsg.CSBossChallengeDamageNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeBossNotification::kBossHpFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeBossNotification::CSBossChallengeBossNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeBossNotification::InitAsDefaultInstance() {
}

CSBossChallengeBossNotification::CSBossChallengeBossNotification(const CSBossChallengeBossNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeBossNotification::SharedCtor() {
  _cached_size_ = 0;
  bosshp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeBossNotification::~CSBossChallengeBossNotification() {
  SharedDtor();
}

void CSBossChallengeBossNotification::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBossChallengeBossNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeBossNotification& CSBossChallengeBossNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeBossNotification* CSBossChallengeBossNotification::default_instance_ = NULL;

CSBossChallengeBossNotification* CSBossChallengeBossNotification::New() const {
  return new CSBossChallengeBossNotification;
}

void CSBossChallengeBossNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bosshp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeBossNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 BossHp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeBossNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 BossHp = 1;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->bosshp(), output);
  }

}

int CSBossChallengeBossNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 BossHp = 1;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bosshp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeBossNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeBossNotification*>(&from));
}

void CSBossChallengeBossNotification::MergeFrom(const CSBossChallengeBossNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
  }
}

void CSBossChallengeBossNotification::CopyFrom(const CSBossChallengeBossNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeBossNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBossChallengeBossNotification::Swap(CSBossChallengeBossNotification* other) {
  if (other != this) {
    std::swap(bosshp_, other->bosshp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeBossNotification::GetTypeName() const {
  return "vmsg.CSBossChallengeBossNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeStateNotification::kStateFieldNumber;
const int CSBossChallengeStateNotification::kAdditionalMsg1FieldNumber;
const int CSBossChallengeStateNotification::kAdditionalParm1FieldNumber;
#endif  // !_MSC_VER

CSBossChallengeStateNotification::CSBossChallengeStateNotification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeStateNotification::InitAsDefaultInstance() {
}

CSBossChallengeStateNotification::CSBossChallengeStateNotification(const CSBossChallengeStateNotification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeStateNotification::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0u;
  additionalmsg1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  additionalparm1_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeStateNotification::~CSBossChallengeStateNotification() {
  SharedDtor();
}

void CSBossChallengeStateNotification::SharedDtor() {
  if (additionalmsg1_ != &::google::protobuf::internal::kEmptyString) {
    delete additionalmsg1_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBossChallengeStateNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeStateNotification& CSBossChallengeStateNotification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeStateNotification* CSBossChallengeStateNotification::default_instance_ = NULL;

CSBossChallengeStateNotification* CSBossChallengeStateNotification::New() const {
  return new CSBossChallengeStateNotification;
}

void CSBossChallengeStateNotification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0u;
    if (has_additionalmsg1()) {
      if (additionalmsg1_ != &::google::protobuf::internal::kEmptyString) {
        additionalmsg1_->clear();
      }
    }
    additionalparm1_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeStateNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 State = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AdditionalMsg1;
        break;
      }

      // optional string AdditionalMsg1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdditionalMsg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_additionalmsg1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AdditionalParm1;
        break;
      }

      // optional uint64 AdditionalParm1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdditionalParm1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &additionalparm1_)));
          set_has_additionalparm1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeStateNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 State = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // optional string AdditionalMsg1 = 2;
  if (has_additionalmsg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->additionalmsg1(), output);
  }

  // optional uint64 AdditionalParm1 = 3;
  if (has_additionalparm1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->additionalparm1(), output);
  }

}

int CSBossChallengeStateNotification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 State = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional string AdditionalMsg1 = 2;
    if (has_additionalmsg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->additionalmsg1());
    }

    // optional uint64 AdditionalParm1 = 3;
    if (has_additionalparm1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->additionalparm1());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeStateNotification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeStateNotification*>(&from));
}

void CSBossChallengeStateNotification::MergeFrom(const CSBossChallengeStateNotification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_additionalmsg1()) {
      set_additionalmsg1(from.additionalmsg1());
    }
    if (from.has_additionalparm1()) {
      set_additionalparm1(from.additionalparm1());
    }
  }
}

void CSBossChallengeStateNotification::CopyFrom(const CSBossChallengeStateNotification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeStateNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBossChallengeStateNotification::Swap(CSBossChallengeStateNotification* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(additionalmsg1_, other->additionalmsg1_);
    std::swap(additionalparm1_, other->additionalparm1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeStateNotification::GetTypeName() const {
  return "vmsg.CSBossChallengeStateNotification";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeRqst::kDamageReportFieldNumber;
const int CSBossChallengeRqst::kDelegateTypeFieldNumber;
const int CSBossChallengeRqst::kAttendOrLeaveFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeRqst::CSBossChallengeRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeRqst::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  damagereport_ = const_cast< ::vmsg::CSBossChallengeBigDamageReport*>(
      ::vmsg::CSBossChallengeBigDamageReport::internal_default_instance());
#else
  damagereport_ = const_cast< ::vmsg::CSBossChallengeBigDamageReport*>(&::vmsg::CSBossChallengeBigDamageReport::default_instance());
#endif
}

CSBossChallengeRqst::CSBossChallengeRqst(const CSBossChallengeRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeRqst::SharedCtor() {
  _cached_size_ = 0;
  damagereport_ = NULL;
  delegatetype_ = 0u;
  attendorleave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeRqst::~CSBossChallengeRqst() {
  SharedDtor();
}

void CSBossChallengeRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete damagereport_;
  }
}

void CSBossChallengeRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeRqst& CSBossChallengeRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeRqst* CSBossChallengeRqst::default_instance_ = NULL;

CSBossChallengeRqst* CSBossChallengeRqst::New() const {
  return new CSBossChallengeRqst;
}

void CSBossChallengeRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_damagereport()) {
      if (damagereport_ != NULL) damagereport_->::vmsg::CSBossChallengeBigDamageReport::Clear();
    }
    delegatetype_ = 0u;
    attendorleave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSBossChallengeBigDamageReport DamageReport = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_damagereport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DelegateType;
        break;
      }

      // optional uint32 DelegateType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DelegateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delegatetype_)));
          set_has_delegatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AttendOrLeave;
        break;
      }

      // optional uint32 AttendOrLeave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttendOrLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attendorleave_)));
          set_has_attendorleave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSBossChallengeBigDamageReport DamageReport = 1;
  if (has_damagereport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->damagereport(), output);
  }

  // optional uint32 DelegateType = 2;
  if (has_delegatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->delegatetype(), output);
  }

  // optional uint32 AttendOrLeave = 3;
  if (has_attendorleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attendorleave(), output);
  }

}

int CSBossChallengeRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSBossChallengeBigDamageReport DamageReport = 1;
    if (has_damagereport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damagereport());
    }

    // optional uint32 DelegateType = 2;
    if (has_delegatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delegatetype());
    }

    // optional uint32 AttendOrLeave = 3;
    if (has_attendorleave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attendorleave());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeRqst*>(&from));
}

void CSBossChallengeRqst::MergeFrom(const CSBossChallengeRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagereport()) {
      mutable_damagereport()->::vmsg::CSBossChallengeBigDamageReport::MergeFrom(from.damagereport());
    }
    if (from.has_delegatetype()) {
      set_delegatetype(from.delegatetype());
    }
    if (from.has_attendorleave()) {
      set_attendorleave(from.attendorleave());
    }
  }
}

void CSBossChallengeRqst::CopyFrom(const CSBossChallengeRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeRqst::IsInitialized() const {

  if (has_damagereport()) {
    if (!this->damagereport().IsInitialized()) return false;
  }
  return true;
}

void CSBossChallengeRqst::Swap(CSBossChallengeRqst* other) {
  if (other != this) {
    std::swap(damagereport_, other->damagereport_);
    std::swap(delegatetype_, other->delegatetype_);
    std::swap(attendorleave_, other->attendorleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeRqst::GetTypeName() const {
  return "vmsg.CSBossChallengeRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBossChallengeRsp::kChallengeInfoFieldNumber;
const int CSBossChallengeRsp::kDamagesFieldNumber;
const int CSBossChallengeRsp::kBossChallengeStateNotifyFieldNumber;
const int CSBossChallengeRsp::kDelegateTypeFieldNumber;
const int CSBossChallengeRsp::kAttendOrLeaveFieldNumber;
#endif  // !_MSC_VER

CSBossChallengeRsp::CSBossChallengeRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBossChallengeRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  challengeinfo_ = const_cast< ::vmsg::CSBossChallengeInfo*>(
      ::vmsg::CSBossChallengeInfo::internal_default_instance());
#else
  challengeinfo_ = const_cast< ::vmsg::CSBossChallengeInfo*>(&::vmsg::CSBossChallengeInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  damages_ = const_cast< ::vmsg::CSBossChallengeDamageNotification*>(
      ::vmsg::CSBossChallengeDamageNotification::internal_default_instance());
#else
  damages_ = const_cast< ::vmsg::CSBossChallengeDamageNotification*>(&::vmsg::CSBossChallengeDamageNotification::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bosschallengestatenotify_ = const_cast< ::vmsg::CSBossChallengeStateNotification*>(
      ::vmsg::CSBossChallengeStateNotification::internal_default_instance());
#else
  bosschallengestatenotify_ = const_cast< ::vmsg::CSBossChallengeStateNotification*>(&::vmsg::CSBossChallengeStateNotification::default_instance());
#endif
}

CSBossChallengeRsp::CSBossChallengeRsp(const CSBossChallengeRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBossChallengeRsp::SharedCtor() {
  _cached_size_ = 0;
  challengeinfo_ = NULL;
  damages_ = NULL;
  bosschallengestatenotify_ = NULL;
  delegatetype_ = 0u;
  attendorleave_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBossChallengeRsp::~CSBossChallengeRsp() {
  SharedDtor();
}

void CSBossChallengeRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete challengeinfo_;
    delete damages_;
    delete bosschallengestatenotify_;
  }
}

void CSBossChallengeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBossChallengeRsp& CSBossChallengeRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBossChallengeMsg_2eproto();
#endif
  return *default_instance_;
}

CSBossChallengeRsp* CSBossChallengeRsp::default_instance_ = NULL;

CSBossChallengeRsp* CSBossChallengeRsp::New() const {
  return new CSBossChallengeRsp;
}

void CSBossChallengeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_challengeinfo()) {
      if (challengeinfo_ != NULL) challengeinfo_->::vmsg::CSBossChallengeInfo::Clear();
    }
    if (has_damages()) {
      if (damages_ != NULL) damages_->::vmsg::CSBossChallengeDamageNotification::Clear();
    }
    if (has_bosschallengestatenotify()) {
      if (bosschallengestatenotify_ != NULL) bosschallengestatenotify_->::vmsg::CSBossChallengeStateNotification::Clear();
    }
    delegatetype_ = 0u;
    attendorleave_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBossChallengeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSBossChallengeInfo ChallengeInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Damages;
        break;
      }

      // optional .vmsg.CSBossChallengeDamageNotification Damages = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Damages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_damages()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BossChallengeStateNotify;
        break;
      }

      // optional .vmsg.CSBossChallengeStateNotification BossChallengeStateNotify = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BossChallengeStateNotify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bosschallengestatenotify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DelegateType;
        break;
      }

      // optional uint32 DelegateType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DelegateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delegatetype_)));
          set_has_delegatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AttendOrLeave;
        break;
      }

      // optional uint32 AttendOrLeave = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttendOrLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attendorleave_)));
          set_has_attendorleave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBossChallengeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSBossChallengeInfo ChallengeInfo = 1;
  if (has_challengeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->challengeinfo(), output);
  }

  // optional .vmsg.CSBossChallengeDamageNotification Damages = 2;
  if (has_damages()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->damages(), output);
  }

  // optional .vmsg.CSBossChallengeStateNotification BossChallengeStateNotify = 3;
  if (has_bosschallengestatenotify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bosschallengestatenotify(), output);
  }

  // optional uint32 DelegateType = 4;
  if (has_delegatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->delegatetype(), output);
  }

  // optional uint32 AttendOrLeave = 5;
  if (has_attendorleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->attendorleave(), output);
  }

}

int CSBossChallengeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSBossChallengeInfo ChallengeInfo = 1;
    if (has_challengeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengeinfo());
    }

    // optional .vmsg.CSBossChallengeDamageNotification Damages = 2;
    if (has_damages()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damages());
    }

    // optional .vmsg.CSBossChallengeStateNotification BossChallengeStateNotify = 3;
    if (has_bosschallengestatenotify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bosschallengestatenotify());
    }

    // optional uint32 DelegateType = 4;
    if (has_delegatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delegatetype());
    }

    // optional uint32 AttendOrLeave = 5;
    if (has_attendorleave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attendorleave());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBossChallengeRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBossChallengeRsp*>(&from));
}

void CSBossChallengeRsp::MergeFrom(const CSBossChallengeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengeinfo()) {
      mutable_challengeinfo()->::vmsg::CSBossChallengeInfo::MergeFrom(from.challengeinfo());
    }
    if (from.has_damages()) {
      mutable_damages()->::vmsg::CSBossChallengeDamageNotification::MergeFrom(from.damages());
    }
    if (from.has_bosschallengestatenotify()) {
      mutable_bosschallengestatenotify()->::vmsg::CSBossChallengeStateNotification::MergeFrom(from.bosschallengestatenotify());
    }
    if (from.has_delegatetype()) {
      set_delegatetype(from.delegatetype());
    }
    if (from.has_attendorleave()) {
      set_attendorleave(from.attendorleave());
    }
  }
}

void CSBossChallengeRsp::CopyFrom(const CSBossChallengeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBossChallengeRsp::IsInitialized() const {

  if (has_challengeinfo()) {
    if (!this->challengeinfo().IsInitialized()) return false;
  }
  if (has_damages()) {
    if (!this->damages().IsInitialized()) return false;
  }
  if (has_bosschallengestatenotify()) {
    if (!this->bosschallengestatenotify().IsInitialized()) return false;
  }
  return true;
}

void CSBossChallengeRsp::Swap(CSBossChallengeRsp* other) {
  if (other != this) {
    std::swap(challengeinfo_, other->challengeinfo_);
    std::swap(damages_, other->damages_);
    std::swap(bosschallengestatenotify_, other->bosschallengestatenotify_);
    std::swap(delegatetype_, other->delegatetype_);
    std::swap(attendorleave_, other->attendorleave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBossChallengeRsp::GetTypeName() const {
  return "vmsg.CSBossChallengeRsp";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
