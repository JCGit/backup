// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSRankMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSRankMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSRankMsg_2eproto() {
  delete CSRankQueryRqst::default_instance_;
  delete CSRankInfo::default_instance_;
  delete CSRankQueryRsp::default_instance_;
  delete CSRankQueryMyRankRqst::default_instance_;
  delete CSRankQueryMyRankRsp::default_instance_;
  delete CSRankQueryArenaArmyRankRqst::default_instance_;
  delete CSRankQueryArenaArmyRankRsp::default_instance_;
  delete CSRankRequest::default_instance_;
  delete CSRankRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSRankMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSRankMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSRankQueryRqst::default_instance_ = new CSRankQueryRqst();
  CSRankInfo::default_instance_ = new CSRankInfo();
  CSRankQueryRsp::default_instance_ = new CSRankQueryRsp();
  CSRankQueryMyRankRqst::default_instance_ = new CSRankQueryMyRankRqst();
  CSRankQueryMyRankRsp::default_instance_ = new CSRankQueryMyRankRsp();
  CSRankQueryArenaArmyRankRqst::default_instance_ = new CSRankQueryArenaArmyRankRqst();
  CSRankQueryArenaArmyRankRsp::default_instance_ = new CSRankQueryArenaArmyRankRsp();
  CSRankRequest::default_instance_ = new CSRankRequest();
  CSRankRespond::default_instance_ = new CSRankRespond();
  CSRankQueryRqst::default_instance_->InitAsDefaultInstance();
  CSRankInfo::default_instance_->InitAsDefaultInstance();
  CSRankQueryRsp::default_instance_->InitAsDefaultInstance();
  CSRankQueryMyRankRqst::default_instance_->InitAsDefaultInstance();
  CSRankQueryMyRankRsp::default_instance_->InitAsDefaultInstance();
  CSRankQueryArenaArmyRankRqst::default_instance_->InitAsDefaultInstance();
  CSRankQueryArenaArmyRankRsp::default_instance_->InitAsDefaultInstance();
  CSRankRequest::default_instance_->InitAsDefaultInstance();
  CSRankRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSRankMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSRankMsg_2eproto_once_);
void protobuf_AddDesc_CSRankMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSRankMsg_2eproto_once_,
                 &protobuf_AddDesc_CSRankMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSRankMsg_2eproto {
  StaticDescriptorInitializer_CSRankMsg_2eproto() {
    protobuf_AddDesc_CSRankMsg_2eproto();
  }
} static_descriptor_initializer_CSRankMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSRankQueryRqst::kRankTypeFieldNumber;
const int CSRankQueryRqst::kStartPosFieldNumber;
const int CSRankQueryRqst::kStopPosFieldNumber;
#endif  // !_MSC_VER

CSRankQueryRqst::CSRankQueryRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankQueryRqst::InitAsDefaultInstance() {
}

CSRankQueryRqst::CSRankQueryRqst(const CSRankQueryRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankQueryRqst::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  startpos_ = 0;
  stoppos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankQueryRqst::~CSRankQueryRqst() {
  SharedDtor();
}

void CSRankQueryRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankQueryRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankQueryRqst& CSRankQueryRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankQueryRqst* CSRankQueryRqst::default_instance_ = NULL;

CSRankQueryRqst* CSRankQueryRqst::New() const {
  return new CSRankQueryRqst;
}

void CSRankQueryRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    startpos_ = 0;
    stoppos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankQueryRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StartPos;
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
          set_has_startpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StopPos;
        break;
      }

      // required int32 StopPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoppos_)));
          set_has_stoppos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankQueryRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // required int32 StartPos = 2;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 StopPos = 3;
  if (has_stoppos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stoppos(), output);
  }

}

int CSRankQueryRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // required int32 StartPos = 2;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startpos());
    }

    // required int32 StopPos = 3;
    if (has_stoppos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoppos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankQueryRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankQueryRqst*>(&from));
}

void CSRankQueryRqst::MergeFrom(const CSRankQueryRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_startpos()) {
      set_startpos(from.startpos());
    }
    if (from.has_stoppos()) {
      set_stoppos(from.stoppos());
    }
  }
}

void CSRankQueryRqst::CopyFrom(const CSRankQueryRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankQueryRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSRankQueryRqst::Swap(CSRankQueryRqst* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(startpos_, other->startpos_);
    std::swap(stoppos_, other->stoppos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankQueryRqst::GetTypeName() const {
  return "vmsg.CSRankQueryRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankInfo::kUinFieldNumber;
const int CSRankInfo::kNickFieldNumber;
const int CSRankInfo::kValueFieldNumber;
const int CSRankInfo::kLevelFieldNumber;
const int CSRankInfo::kShowIDFieldNumber;
#endif  // !_MSC_VER

CSRankInfo::CSRankInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankInfo::InitAsDefaultInstance() {
}

CSRankInfo::CSRankInfo(const CSRankInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  showid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankInfo::~CSRankInfo() {
  SharedDtor();
}

void CSRankInfo::SharedDtor() {
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankInfo& CSRankInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankInfo* CSRankInfo::default_instance_ = NULL;

CSRankInfo* CSRankInfo::New() const {
  return new CSRankInfo;
}

void CSRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    value_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    showid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Nick;
        break;
      }

      // required string Nick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Value;
        break;
      }

      // required uint64 Value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // required uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ShowID;
        break;
      }

      // optional uint32 ShowID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Nick = 2;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->nick(), output);
  }

  // required uint64 Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->value(), output);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 ShowID = 5;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->showid(), output);
  }

}

int CSRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Nick = 2;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nick());
    }

    // required uint64 Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // required uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 ShowID = 5;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankInfo*>(&from));
}

void CSRankInfo::MergeFrom(const CSRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
  }
}

void CSRankInfo::CopyFrom(const CSRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSRankInfo::Swap(CSRankInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(nick_, other->nick_);
    std::swap(value_, other->value_);
    std::swap(level_, other->level_);
    std::swap(showid_, other->showid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankInfo::GetTypeName() const {
  return "vmsg.CSRankInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankQueryRsp::kRankTypeFieldNumber;
const int CSRankQueryRsp::kStartPosFieldNumber;
const int CSRankQueryRsp::kStopPosFieldNumber;
const int CSRankQueryRsp::kInfosFieldNumber;
#endif  // !_MSC_VER

CSRankQueryRsp::CSRankQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankQueryRsp::InitAsDefaultInstance() {
}

CSRankQueryRsp::CSRankQueryRsp(const CSRankQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  startpos_ = 0;
  stoppos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankQueryRsp::~CSRankQueryRsp() {
  SharedDtor();
}

void CSRankQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankQueryRsp& CSRankQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankQueryRsp* CSRankQueryRsp::default_instance_ = NULL;

CSRankQueryRsp* CSRankQueryRsp::New() const {
  return new CSRankQueryRsp;
}

void CSRankQueryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    startpos_ = 0;
    stoppos_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StartPos;
        break;
      }

      // required int32 StartPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startpos_)));
          set_has_startpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StopPos;
        break;
      }

      // required int32 StopPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoppos_)));
          set_has_stoppos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Infos;
        break;
      }

      // repeated .vmsg.CSRankInfo Infos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // required int32 StartPos = 2;
  if (has_startpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startpos(), output);
  }

  // required int32 StopPos = 3;
  if (has_stoppos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stoppos(), output);
  }

  // repeated .vmsg.CSRankInfo Infos = 4;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->infos(i), output);
  }

}

int CSRankQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // required int32 StartPos = 2;
    if (has_startpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startpos());
    }

    // required int32 StopPos = 3;
    if (has_stoppos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoppos());
    }

  }
  // repeated .vmsg.CSRankInfo Infos = 4;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankQueryRsp*>(&from));
}

void CSRankQueryRsp::MergeFrom(const CSRankQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_startpos()) {
      set_startpos(from.startpos());
    }
    if (from.has_stoppos()) {
      set_stoppos(from.stoppos());
    }
  }
}

void CSRankQueryRsp::CopyFrom(const CSRankQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void CSRankQueryRsp::Swap(CSRankQueryRsp* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(startpos_, other->startpos_);
    std::swap(stoppos_, other->stoppos_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankQueryRsp::GetTypeName() const {
  return "vmsg.CSRankQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankQueryMyRankRqst::kRankTypeFieldNumber;
#endif  // !_MSC_VER

CSRankQueryMyRankRqst::CSRankQueryMyRankRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankQueryMyRankRqst::InitAsDefaultInstance() {
}

CSRankQueryMyRankRqst::CSRankQueryMyRankRqst(const CSRankQueryMyRankRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankQueryMyRankRqst::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankQueryMyRankRqst::~CSRankQueryMyRankRqst() {
  SharedDtor();
}

void CSRankQueryMyRankRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankQueryMyRankRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankQueryMyRankRqst& CSRankQueryMyRankRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankQueryMyRankRqst* CSRankQueryMyRankRqst::default_instance_ = NULL;

CSRankQueryMyRankRqst* CSRankQueryMyRankRqst::New() const {
  return new CSRankQueryMyRankRqst;
}

void CSRankQueryMyRankRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankQueryMyRankRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankQueryMyRankRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

}

int CSRankQueryMyRankRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankQueryMyRankRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankQueryMyRankRqst*>(&from));
}

void CSRankQueryMyRankRqst::MergeFrom(const CSRankQueryMyRankRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
  }
}

void CSRankQueryMyRankRqst::CopyFrom(const CSRankQueryMyRankRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankQueryMyRankRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRankQueryMyRankRqst::Swap(CSRankQueryMyRankRqst* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankQueryMyRankRqst::GetTypeName() const {
  return "vmsg.CSRankQueryMyRankRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankQueryMyRankRsp::kRankTypeFieldNumber;
const int CSRankQueryMyRankRsp::kRankFieldNumber;
const int CSRankQueryMyRankRsp::kScoreFieldNumber;
#endif  // !_MSC_VER

CSRankQueryMyRankRsp::CSRankQueryMyRankRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankQueryMyRankRsp::InitAsDefaultInstance() {
}

CSRankQueryMyRankRsp::CSRankQueryMyRankRsp(const CSRankQueryMyRankRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankQueryMyRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ranktype_ = 0u;
  rank_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankQueryMyRankRsp::~CSRankQueryMyRankRsp() {
  SharedDtor();
}

void CSRankQueryMyRankRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankQueryMyRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankQueryMyRankRsp& CSRankQueryMyRankRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankQueryMyRankRsp* CSRankQueryMyRankRsp::default_instance_ = NULL;

CSRankQueryMyRankRsp* CSRankQueryMyRankRsp::New() const {
  return new CSRankQueryMyRankRsp;
}

void CSRankQueryMyRankRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ranktype_ = 0u;
    rank_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankQueryMyRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ranktype_)));
          set_has_ranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // required int32 Rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // required int32 Score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankQueryMyRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RankType = 1;
  if (has_ranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ranktype(), output);
  }

  // required int32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rank(), output);
  }

  // required int32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

}

int CSRankQueryMyRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RankType = 1;
    if (has_ranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ranktype());
    }

    // required int32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // required int32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankQueryMyRankRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankQueryMyRankRsp*>(&from));
}

void CSRankQueryMyRankRsp::MergeFrom(const CSRankQueryMyRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ranktype()) {
      set_ranktype(from.ranktype());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void CSRankQueryMyRankRsp::CopyFrom(const CSRankQueryMyRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankQueryMyRankRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSRankQueryMyRankRsp::Swap(CSRankQueryMyRankRsp* other) {
  if (other != this) {
    std::swap(ranktype_, other->ranktype_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankQueryMyRankRsp::GetTypeName() const {
  return "vmsg.CSRankQueryMyRankRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankQueryArenaArmyRankRqst::kStartFieldNumber;
const int CSRankQueryArenaArmyRankRqst::kStopFieldNumber;
const int CSRankQueryArenaArmyRankRqst::kCntFieldNumber;
const int CSRankQueryArenaArmyRankRqst::kUinFieldNumber;
#endif  // !_MSC_VER

CSRankQueryArenaArmyRankRqst::CSRankQueryArenaArmyRankRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankQueryArenaArmyRankRqst::InitAsDefaultInstance() {
}

CSRankQueryArenaArmyRankRqst::CSRankQueryArenaArmyRankRqst(const CSRankQueryArenaArmyRankRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankQueryArenaArmyRankRqst::SharedCtor() {
  _cached_size_ = 0;
  start_ = GOOGLE_ULONGLONG(0);
  stop_ = GOOGLE_ULONGLONG(0);
  cnt_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankQueryArenaArmyRankRqst::~CSRankQueryArenaArmyRankRqst() {
  SharedDtor();
}

void CSRankQueryArenaArmyRankRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankQueryArenaArmyRankRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankQueryArenaArmyRankRqst& CSRankQueryArenaArmyRankRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankQueryArenaArmyRankRqst* CSRankQueryArenaArmyRankRqst::default_instance_ = NULL;

CSRankQueryArenaArmyRankRqst* CSRankQueryArenaArmyRankRqst::New() const {
  return new CSRankQueryArenaArmyRankRqst;
}

void CSRankQueryArenaArmyRankRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_ = GOOGLE_ULONGLONG(0);
    stop_ = GOOGLE_ULONGLONG(0);
    cnt_ = 0;
    uin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankQueryArenaArmyRankRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Start = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Stop;
        break;
      }

      // required uint64 Stop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Stop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Cnt;
        break;
      }

      // required int32 Cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Uin;
        break;
      }

      // optional uint64 Uin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankQueryArenaArmyRankRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // required uint64 Stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->stop(), output);
  }

  // required int32 Cnt = 3;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cnt(), output);
  }

  // optional uint64 Uin = 4;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uin(), output);
  }

}

int CSRankQueryArenaArmyRankRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // required uint64 Stop = 2;
    if (has_stop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stop());
    }

    // required int32 Cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cnt());
    }

    // optional uint64 Uin = 4;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankQueryArenaArmyRankRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankQueryArenaArmyRankRqst*>(&from));
}

void CSRankQueryArenaArmyRankRqst::MergeFrom(const CSRankQueryArenaArmyRankRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_stop()) {
      set_stop(from.stop());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
}

void CSRankQueryArenaArmyRankRqst::CopyFrom(const CSRankQueryArenaArmyRankRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankQueryArenaArmyRankRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSRankQueryArenaArmyRankRqst::Swap(CSRankQueryArenaArmyRankRqst* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(stop_, other->stop_);
    std::swap(cnt_, other->cnt_);
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankQueryArenaArmyRankRqst::GetTypeName() const {
  return "vmsg.CSRankQueryArenaArmyRankRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankQueryArenaArmyRankRsp::kInfosFieldNumber;
const int CSRankQueryArenaArmyRankRsp::kMyArmyRankFieldNumber;
#endif  // !_MSC_VER

CSRankQueryArenaArmyRankRsp::CSRankQueryArenaArmyRankRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankQueryArenaArmyRankRsp::InitAsDefaultInstance() {
}

CSRankQueryArenaArmyRankRsp::CSRankQueryArenaArmyRankRsp(const CSRankQueryArenaArmyRankRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankQueryArenaArmyRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myarmyrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankQueryArenaArmyRankRsp::~CSRankQueryArenaArmyRankRsp() {
  SharedDtor();
}

void CSRankQueryArenaArmyRankRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRankQueryArenaArmyRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankQueryArenaArmyRankRsp& CSRankQueryArenaArmyRankRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankQueryArenaArmyRankRsp* CSRankQueryArenaArmyRankRsp::default_instance_ = NULL;

CSRankQueryArenaArmyRankRsp* CSRankQueryArenaArmyRankRsp::New() const {
  return new CSRankQueryArenaArmyRankRsp;
}

void CSRankQueryArenaArmyRankRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    myarmyrank_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankQueryArenaArmyRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSRankInfo Infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Infos;
        if (input->ExpectTag(16)) goto parse_MyArmyRank;
        break;
      }

      // optional int32 MyArmyRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyArmyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myarmyrank_)));
          set_has_myarmyrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankQueryArenaArmyRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSRankInfo Infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->infos(i), output);
  }

  // optional int32 MyArmyRank = 2;
  if (has_myarmyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myarmyrank(), output);
  }

}

int CSRankQueryArenaArmyRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyArmyRank = 2;
    if (has_myarmyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myarmyrank());
    }

  }
  // repeated .vmsg.CSRankInfo Infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankQueryArenaArmyRankRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankQueryArenaArmyRankRsp*>(&from));
}

void CSRankQueryArenaArmyRankRsp::MergeFrom(const CSRankQueryArenaArmyRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myarmyrank()) {
      set_myarmyrank(from.myarmyrank());
    }
  }
}

void CSRankQueryArenaArmyRankRsp::CopyFrom(const CSRankQueryArenaArmyRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankQueryArenaArmyRankRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void CSRankQueryArenaArmyRankRsp::Swap(CSRankQueryArenaArmyRankRsp* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(myarmyrank_, other->myarmyrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankQueryArenaArmyRankRsp::GetTypeName() const {
  return "vmsg.CSRankQueryArenaArmyRankRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankRequest::kRankQueryRqstFieldNumber;
const int CSRankRequest::kRankQueryMyRankRqstFieldNumber;
const int CSRankRequest::kRankQueryArenaArmyRankRqstFieldNumber;
#endif  // !_MSC_VER

CSRankRequest::CSRankRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankquery_rqst_ = const_cast< ::vmsg::CSRankQueryRqst*>(
      ::vmsg::CSRankQueryRqst::internal_default_instance());
#else
  rankquery_rqst_ = const_cast< ::vmsg::CSRankQueryRqst*>(&::vmsg::CSRankQueryRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankquerymyrank_rqst_ = const_cast< ::vmsg::CSRankQueryMyRankRqst*>(
      ::vmsg::CSRankQueryMyRankRqst::internal_default_instance());
#else
  rankquerymyrank_rqst_ = const_cast< ::vmsg::CSRankQueryMyRankRqst*>(&::vmsg::CSRankQueryMyRankRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankqueryarenaarmyrank_rqst_ = const_cast< ::vmsg::CSRankQueryArenaArmyRankRqst*>(
      ::vmsg::CSRankQueryArenaArmyRankRqst::internal_default_instance());
#else
  rankqueryarenaarmyrank_rqst_ = const_cast< ::vmsg::CSRankQueryArenaArmyRankRqst*>(&::vmsg::CSRankQueryArenaArmyRankRqst::default_instance());
#endif
}

CSRankRequest::CSRankRequest(const CSRankRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankRequest::SharedCtor() {
  _cached_size_ = 0;
  rankquery_rqst_ = NULL;
  rankquerymyrank_rqst_ = NULL;
  rankqueryarenaarmyrank_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankRequest::~CSRankRequest() {
  SharedDtor();
}

void CSRankRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rankquery_rqst_;
    delete rankquerymyrank_rqst_;
    delete rankqueryarenaarmyrank_rqst_;
  }
}

void CSRankRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankRequest& CSRankRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankRequest* CSRankRequest::default_instance_ = NULL;

CSRankRequest* CSRankRequest::New() const {
  return new CSRankRequest;
}

void CSRankRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rankquery_rqst()) {
      if (rankquery_rqst_ != NULL) rankquery_rqst_->::vmsg::CSRankQueryRqst::Clear();
    }
    if (has_rankquerymyrank_rqst()) {
      if (rankquerymyrank_rqst_ != NULL) rankquerymyrank_rqst_->::vmsg::CSRankQueryMyRankRqst::Clear();
    }
    if (has_rankqueryarenaarmyrank_rqst()) {
      if (rankqueryarenaarmyrank_rqst_ != NULL) rankqueryarenaarmyrank_rqst_->::vmsg::CSRankQueryArenaArmyRankRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSRankQueryRqst RankQuery_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankquery_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankQueryMyRank_Rqst;
        break;
      }

      // optional .vmsg.CSRankQueryMyRankRqst RankQueryMyRank_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankQueryMyRank_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankquerymyrank_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RankQueryArenaArmyRank_Rqst;
        break;
      }

      // optional .vmsg.CSRankQueryArenaArmyRankRqst RankQueryArenaArmyRank_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankQueryArenaArmyRank_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankqueryarenaarmyrank_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSRankQueryRqst RankQuery_Rqst = 1;
  if (has_rankquery_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rankquery_rqst(), output);
  }

  // optional .vmsg.CSRankQueryMyRankRqst RankQueryMyRank_Rqst = 2;
  if (has_rankquerymyrank_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rankquerymyrank_rqst(), output);
  }

  // optional .vmsg.CSRankQueryArenaArmyRankRqst RankQueryArenaArmyRank_Rqst = 3;
  if (has_rankqueryarenaarmyrank_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rankqueryarenaarmyrank_rqst(), output);
  }

}

int CSRankRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSRankQueryRqst RankQuery_Rqst = 1;
    if (has_rankquery_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankquery_rqst());
    }

    // optional .vmsg.CSRankQueryMyRankRqst RankQueryMyRank_Rqst = 2;
    if (has_rankquerymyrank_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankquerymyrank_rqst());
    }

    // optional .vmsg.CSRankQueryArenaArmyRankRqst RankQueryArenaArmyRank_Rqst = 3;
    if (has_rankqueryarenaarmyrank_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankqueryarenaarmyrank_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankRequest*>(&from));
}

void CSRankRequest::MergeFrom(const CSRankRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankquery_rqst()) {
      mutable_rankquery_rqst()->::vmsg::CSRankQueryRqst::MergeFrom(from.rankquery_rqst());
    }
    if (from.has_rankquerymyrank_rqst()) {
      mutable_rankquerymyrank_rqst()->::vmsg::CSRankQueryMyRankRqst::MergeFrom(from.rankquerymyrank_rqst());
    }
    if (from.has_rankqueryarenaarmyrank_rqst()) {
      mutable_rankqueryarenaarmyrank_rqst()->::vmsg::CSRankQueryArenaArmyRankRqst::MergeFrom(from.rankqueryarenaarmyrank_rqst());
    }
  }
}

void CSRankRequest::CopyFrom(const CSRankRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankRequest::IsInitialized() const {

  if (has_rankquery_rqst()) {
    if (!this->rankquery_rqst().IsInitialized()) return false;
  }
  if (has_rankquerymyrank_rqst()) {
    if (!this->rankquerymyrank_rqst().IsInitialized()) return false;
  }
  if (has_rankqueryarenaarmyrank_rqst()) {
    if (!this->rankqueryarenaarmyrank_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSRankRequest::Swap(CSRankRequest* other) {
  if (other != this) {
    std::swap(rankquery_rqst_, other->rankquery_rqst_);
    std::swap(rankquerymyrank_rqst_, other->rankquerymyrank_rqst_);
    std::swap(rankqueryarenaarmyrank_rqst_, other->rankqueryarenaarmyrank_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankRequest::GetTypeName() const {
  return "vmsg.CSRankRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRankRespond::kRankQueryRspFieldNumber;
const int CSRankRespond::kRankQueryMyRankRspFieldNumber;
const int CSRankRespond::kRankQueryArenaArmyRankRspFieldNumber;
#endif  // !_MSC_VER

CSRankRespond::CSRankRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRankRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankquery_rsp_ = const_cast< ::vmsg::CSRankQueryRsp*>(
      ::vmsg::CSRankQueryRsp::internal_default_instance());
#else
  rankquery_rsp_ = const_cast< ::vmsg::CSRankQueryRsp*>(&::vmsg::CSRankQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankquerymyrank_rsp_ = const_cast< ::vmsg::CSRankQueryMyRankRsp*>(
      ::vmsg::CSRankQueryMyRankRsp::internal_default_instance());
#else
  rankquerymyrank_rsp_ = const_cast< ::vmsg::CSRankQueryMyRankRsp*>(&::vmsg::CSRankQueryMyRankRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankqueryarenaarmyrank_rsp_ = const_cast< ::vmsg::CSRankQueryArenaArmyRankRsp*>(
      ::vmsg::CSRankQueryArenaArmyRankRsp::internal_default_instance());
#else
  rankqueryarenaarmyrank_rsp_ = const_cast< ::vmsg::CSRankQueryArenaArmyRankRsp*>(&::vmsg::CSRankQueryArenaArmyRankRsp::default_instance());
#endif
}

CSRankRespond::CSRankRespond(const CSRankRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRankRespond::SharedCtor() {
  _cached_size_ = 0;
  rankquery_rsp_ = NULL;
  rankquerymyrank_rsp_ = NULL;
  rankqueryarenaarmyrank_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRankRespond::~CSRankRespond() {
  SharedDtor();
}

void CSRankRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete rankquery_rsp_;
    delete rankquerymyrank_rsp_;
    delete rankqueryarenaarmyrank_rsp_;
  }
}

void CSRankRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRankRespond& CSRankRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSRankMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSRankMsg_2eproto();
#endif
  return *default_instance_;
}

CSRankRespond* CSRankRespond::default_instance_ = NULL;

CSRankRespond* CSRankRespond::New() const {
  return new CSRankRespond;
}

void CSRankRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rankquery_rsp()) {
      if (rankquery_rsp_ != NULL) rankquery_rsp_->::vmsg::CSRankQueryRsp::Clear();
    }
    if (has_rankquerymyrank_rsp()) {
      if (rankquerymyrank_rsp_ != NULL) rankquerymyrank_rsp_->::vmsg::CSRankQueryMyRankRsp::Clear();
    }
    if (has_rankqueryarenaarmyrank_rsp()) {
      if (rankqueryarenaarmyrank_rsp_ != NULL) rankqueryarenaarmyrank_rsp_->::vmsg::CSRankQueryArenaArmyRankRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRankRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSRankQueryRsp RankQuery_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankquery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RankQueryMyRank_Rsp;
        break;
      }

      // optional .vmsg.CSRankQueryMyRankRsp RankQueryMyRank_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankQueryMyRank_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankquerymyrank_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RankQueryArenaArmyRank_Rsp;
        break;
      }

      // optional .vmsg.CSRankQueryArenaArmyRankRsp RankQueryArenaArmyRank_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankQueryArenaArmyRank_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankqueryarenaarmyrank_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRankRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSRankQueryRsp RankQuery_Rsp = 1;
  if (has_rankquery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->rankquery_rsp(), output);
  }

  // optional .vmsg.CSRankQueryMyRankRsp RankQueryMyRank_Rsp = 2;
  if (has_rankquerymyrank_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->rankquerymyrank_rsp(), output);
  }

  // optional .vmsg.CSRankQueryArenaArmyRankRsp RankQueryArenaArmyRank_Rsp = 3;
  if (has_rankqueryarenaarmyrank_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rankqueryarenaarmyrank_rsp(), output);
  }

}

int CSRankRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSRankQueryRsp RankQuery_Rsp = 1;
    if (has_rankquery_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankquery_rsp());
    }

    // optional .vmsg.CSRankQueryMyRankRsp RankQueryMyRank_Rsp = 2;
    if (has_rankquerymyrank_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankquerymyrank_rsp());
    }

    // optional .vmsg.CSRankQueryArenaArmyRankRsp RankQueryArenaArmyRank_Rsp = 3;
    if (has_rankqueryarenaarmyrank_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankqueryarenaarmyrank_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRankRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRankRespond*>(&from));
}

void CSRankRespond::MergeFrom(const CSRankRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankquery_rsp()) {
      mutable_rankquery_rsp()->::vmsg::CSRankQueryRsp::MergeFrom(from.rankquery_rsp());
    }
    if (from.has_rankquerymyrank_rsp()) {
      mutable_rankquerymyrank_rsp()->::vmsg::CSRankQueryMyRankRsp::MergeFrom(from.rankquerymyrank_rsp());
    }
    if (from.has_rankqueryarenaarmyrank_rsp()) {
      mutable_rankqueryarenaarmyrank_rsp()->::vmsg::CSRankQueryArenaArmyRankRsp::MergeFrom(from.rankqueryarenaarmyrank_rsp());
    }
  }
}

void CSRankRespond::CopyFrom(const CSRankRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRankRespond::IsInitialized() const {

  if (has_rankquery_rsp()) {
    if (!this->rankquery_rsp().IsInitialized()) return false;
  }
  if (has_rankquerymyrank_rsp()) {
    if (!this->rankquerymyrank_rsp().IsInitialized()) return false;
  }
  if (has_rankqueryarenaarmyrank_rsp()) {
    if (!this->rankqueryarenaarmyrank_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSRankRespond::Swap(CSRankRespond* other) {
  if (other != this) {
    std::swap(rankquery_rsp_, other->rankquery_rsp_);
    std::swap(rankquerymyrank_rsp_, other->rankquerymyrank_rsp_);
    std::swap(rankqueryarenaarmyrank_rsp_, other->rankqueryarenaarmyrank_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRankRespond::GetTypeName() const {
  return "vmsg.CSRankRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
