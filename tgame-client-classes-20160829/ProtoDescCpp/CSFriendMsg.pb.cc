// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSFriendMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSFriendMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSFriendMsg_2eproto() {
  delete CSOneFriend::default_instance_;
  delete CSFriendQueryRsp::default_instance_;
  delete CSProposeFriendRsp::default_instance_;
  delete CSSendManualRsp::default_instance_;
  delete CSBatchAddUinLst::default_instance_;
  delete CSInviteFriendFightRqst::default_instance_;
  delete CSInviteFriendFightRsp::default_instance_;
  delete CSRecvManualRsp::default_instance_;
  delete CSFriendRequest::default_instance_;
  delete CSFriendRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSFriendMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSFriendMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSPlayerMsg_2eproto();
  CSOneFriend::default_instance_ = new CSOneFriend();
  CSFriendQueryRsp::default_instance_ = new CSFriendQueryRsp();
  CSProposeFriendRsp::default_instance_ = new CSProposeFriendRsp();
  CSSendManualRsp::default_instance_ = new CSSendManualRsp();
  CSBatchAddUinLst::default_instance_ = new CSBatchAddUinLst();
  CSInviteFriendFightRqst::default_instance_ = new CSInviteFriendFightRqst();
  CSInviteFriendFightRsp::default_instance_ = new CSInviteFriendFightRsp();
  CSRecvManualRsp::default_instance_ = new CSRecvManualRsp();
  CSFriendRequest::default_instance_ = new CSFriendRequest();
  CSFriendRespond::default_instance_ = new CSFriendRespond();
  CSOneFriend::default_instance_->InitAsDefaultInstance();
  CSFriendQueryRsp::default_instance_->InitAsDefaultInstance();
  CSProposeFriendRsp::default_instance_->InitAsDefaultInstance();
  CSSendManualRsp::default_instance_->InitAsDefaultInstance();
  CSBatchAddUinLst::default_instance_->InitAsDefaultInstance();
  CSInviteFriendFightRqst::default_instance_->InitAsDefaultInstance();
  CSInviteFriendFightRsp::default_instance_->InitAsDefaultInstance();
  CSRecvManualRsp::default_instance_->InitAsDefaultInstance();
  CSFriendRequest::default_instance_->InitAsDefaultInstance();
  CSFriendRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSFriendMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSFriendMsg_2eproto_once_);
void protobuf_AddDesc_CSFriendMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSFriendMsg_2eproto_once_,
                 &protobuf_AddDesc_CSFriendMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSFriendMsg_2eproto {
  StaticDescriptorInitializer_CSFriendMsg_2eproto() {
    protobuf_AddDesc_CSFriendMsg_2eproto();
  }
} static_descriptor_initializer_CSFriendMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSOneFriend::kUinFieldNumber;
const int CSOneFriend::kNameFieldNumber;
const int CSOneFriend::kFightPowerFieldNumber;
const int CSOneFriend::kIsOnlineFieldNumber;
const int CSOneFriend::kLevelFieldNumber;
const int CSOneFriend::kInviteCostCoinFieldNumber;
const int CSOneFriend::kFightCntFieldNumber;
const int CSOneFriend::kShowIDFieldNumber;
#endif  // !_MSC_VER

CSOneFriend::CSOneFriend()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSOneFriend::InitAsDefaultInstance() {
}

CSOneFriend::CSOneFriend(const CSOneFriend& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSOneFriend::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fightpower_ = 0u;
  isonline_ = 0u;
  level_ = 0u;
  invitecostcoin_ = 0u;
  fightcnt_ = 0u;
  showid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOneFriend::~CSOneFriend() {
  SharedDtor();
}

void CSOneFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSOneFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSOneFriend& CSOneFriend::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSOneFriend* CSOneFriend::default_instance_ = NULL;

CSOneFriend* CSOneFriend::New() const {
  return new CSOneFriend;
}

void CSOneFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fightpower_ = 0u;
    isonline_ = 0u;
    level_ = 0u;
    invitecostcoin_ = 0u;
    fightcnt_ = 0u;
    showid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSOneFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FightPower;
        break;
      }

      // required uint32 FightPower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsOnline;
        break;
      }

      // required uint32 IsOnline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // required uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_InviteCostCoin;
        break;
      }

      // optional uint32 InviteCostCoin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InviteCostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invitecostcoin_)));
          set_has_invitecostcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FightCnt;
        break;
      }

      // optional uint32 FightCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightcnt_)));
          set_has_fightcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ShowID;
        break;
      }

      // optional uint32 ShowID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOneFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 FightPower = 3;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fightpower(), output);
  }

  // required uint32 IsOnline = 4;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isonline(), output);
  }

  // required uint32 Level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 InviteCostCoin = 7;
  if (has_invitecostcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->invitecostcoin(), output);
  }

  // optional uint32 FightCnt = 8;
  if (has_fightcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fightcnt(), output);
  }

  // optional uint32 ShowID = 9;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->showid(), output);
  }

}

int CSOneFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 FightPower = 3;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpower());
    }

    // required uint32 IsOnline = 4;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isonline());
    }

    // required uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 InviteCostCoin = 7;
    if (has_invitecostcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invitecostcoin());
    }

    // optional uint32 FightCnt = 8;
    if (has_fightcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightcnt());
    }

    // optional uint32 ShowID = 9;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOneFriend::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSOneFriend*>(&from));
}

void CSOneFriend::MergeFrom(const CSOneFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_invitecostcoin()) {
      set_invitecostcoin(from.invitecostcoin());
    }
    if (from.has_fightcnt()) {
      set_fightcnt(from.fightcnt());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
  }
}

void CSOneFriend::CopyFrom(const CSOneFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOneFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSOneFriend::Swap(CSOneFriend* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(name_, other->name_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(isonline_, other->isonline_);
    std::swap(level_, other->level_);
    std::swap(invitecostcoin_, other->invitecostcoin_);
    std::swap(fightcnt_, other->fightcnt_);
    std::swap(showid_, other->showid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSOneFriend::GetTypeName() const {
  return "vmsg.CSOneFriend";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendQueryRsp::kFriendLstFieldNumber;
const int CSFriendQueryRsp::kBlackLstFieldNumber;
const int CSFriendQueryRsp::kAdminReqLstFieldNumber;
const int CSFriendQueryRsp::kSendManualUinLstFieldNumber;
const int CSFriendQueryRsp::kRecvManualUinLstFieldNumber;
const int CSFriendQueryRsp::kRecvManualCntFieldNumber;
#endif  // !_MSC_VER

CSFriendQueryRsp::CSFriendQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSFriendQueryRsp::InitAsDefaultInstance() {
}

CSFriendQueryRsp::CSFriendQueryRsp(const CSFriendQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSFriendQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  recvmanualcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendQueryRsp::~CSFriendQueryRsp() {
  SharedDtor();
}

void CSFriendQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSFriendQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendQueryRsp& CSFriendQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSFriendQueryRsp* CSFriendQueryRsp::default_instance_ = NULL;

CSFriendQueryRsp* CSFriendQueryRsp::New() const {
  return new CSFriendQueryRsp;
}

void CSFriendQueryRsp::Clear() {
  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    recvmanualcnt_ = 0u;
  }
  friendlst_.Clear();
  blacklst_.Clear();
  adminreqlst_.Clear();
  sendmanualuinlst_.Clear();
  recvmanualuinlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSFriendQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSOneFriend FriendLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FriendLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FriendLst;
        if (input->ExpectTag(18)) goto parse_BlackLst;
        break;
      }

      // repeated .vmsg.CSOneFriend BlackLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BlackLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blacklst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BlackLst;
        if (input->ExpectTag(26)) goto parse_AdminReqLst;
        break;
      }

      // repeated .vmsg.CSOneFriend AdminReqLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdminReqLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adminreqlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AdminReqLst;
        if (input->ExpectTag(32)) goto parse_SendManualUinLst;
        break;
      }

      // repeated uint64 SendManualUinLst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendManualUinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_sendmanualuinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sendmanualuinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SendManualUinLst;
        if (input->ExpectTag(40)) goto parse_RecvManualUinLst;
        break;
      }

      // repeated uint64 RecvManualUinLst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecvManualUinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_recvmanualuinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recvmanualuinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RecvManualUinLst;
        if (input->ExpectTag(48)) goto parse_RecvManualCnt;
        break;
      }

      // required uint32 RecvManualCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecvManualCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvmanualcnt_)));
          set_has_recvmanualcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFriendQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSOneFriend FriendLst = 1;
  for (int i = 0; i < this->friendlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friendlst(i), output);
  }

  // repeated .vmsg.CSOneFriend BlackLst = 2;
  for (int i = 0; i < this->blacklst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->blacklst(i), output);
  }

  // repeated .vmsg.CSOneFriend AdminReqLst = 3;
  for (int i = 0; i < this->adminreqlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->adminreqlst(i), output);
  }

  // repeated uint64 SendManualUinLst = 4;
  for (int i = 0; i < this->sendmanualuinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->sendmanualuinlst(i), output);
  }

  // repeated uint64 RecvManualUinLst = 5;
  for (int i = 0; i < this->recvmanualuinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->recvmanualuinlst(i), output);
  }

  // required uint32 RecvManualCnt = 6;
  if (has_recvmanualcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->recvmanualcnt(), output);
  }

}

int CSFriendQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    // required uint32 RecvManualCnt = 6;
    if (has_recvmanualcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvmanualcnt());
    }

  }
  // repeated .vmsg.CSOneFriend FriendLst = 1;
  total_size += 1 * this->friendlst_size();
  for (int i = 0; i < this->friendlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlst(i));
  }

  // repeated .vmsg.CSOneFriend BlackLst = 2;
  total_size += 1 * this->blacklst_size();
  for (int i = 0; i < this->blacklst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blacklst(i));
  }

  // repeated .vmsg.CSOneFriend AdminReqLst = 3;
  total_size += 1 * this->adminreqlst_size();
  for (int i = 0; i < this->adminreqlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adminreqlst(i));
  }

  // repeated uint64 SendManualUinLst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->sendmanualuinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->sendmanualuinlst(i));
    }
    total_size += 1 * this->sendmanualuinlst_size() + data_size;
  }

  // repeated uint64 RecvManualUinLst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->recvmanualuinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->recvmanualuinlst(i));
    }
    total_size += 1 * this->recvmanualuinlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendQueryRsp*>(&from));
}

void CSFriendQueryRsp::MergeFrom(const CSFriendQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlst_.MergeFrom(from.friendlst_);
  blacklst_.MergeFrom(from.blacklst_);
  adminreqlst_.MergeFrom(from.adminreqlst_);
  sendmanualuinlst_.MergeFrom(from.sendmanualuinlst_);
  recvmanualuinlst_.MergeFrom(from.recvmanualuinlst_);
  if (from._has_bits_[5 / 32] & (0xffu << (5 % 32))) {
    if (from.has_recvmanualcnt()) {
      set_recvmanualcnt(from.recvmanualcnt());
    }
  }
}

void CSFriendQueryRsp::CopyFrom(const CSFriendQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  for (int i = 0; i < friendlst_size(); i++) {
    if (!this->friendlst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < blacklst_size(); i++) {
    if (!this->blacklst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < adminreqlst_size(); i++) {
    if (!this->adminreqlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSFriendQueryRsp::Swap(CSFriendQueryRsp* other) {
  if (other != this) {
    friendlst_.Swap(&other->friendlst_);
    blacklst_.Swap(&other->blacklst_);
    adminreqlst_.Swap(&other->adminreqlst_);
    sendmanualuinlst_.Swap(&other->sendmanualuinlst_);
    recvmanualuinlst_.Swap(&other->recvmanualuinlst_);
    std::swap(recvmanualcnt_, other->recvmanualcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendQueryRsp::GetTypeName() const {
  return "vmsg.CSFriendQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSProposeFriendRsp::kFriendLstFieldNumber;
#endif  // !_MSC_VER

CSProposeFriendRsp::CSProposeFriendRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSProposeFriendRsp::InitAsDefaultInstance() {
}

CSProposeFriendRsp::CSProposeFriendRsp(const CSProposeFriendRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSProposeFriendRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSProposeFriendRsp::~CSProposeFriendRsp() {
  SharedDtor();
}

void CSProposeFriendRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSProposeFriendRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSProposeFriendRsp& CSProposeFriendRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSProposeFriendRsp* CSProposeFriendRsp::default_instance_ = NULL;

CSProposeFriendRsp* CSProposeFriendRsp::New() const {
  return new CSProposeFriendRsp;
}

void CSProposeFriendRsp::Clear() {
  friendlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSProposeFriendRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSOneFriend FriendLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FriendLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FriendLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSProposeFriendRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSOneFriend FriendLst = 1;
  for (int i = 0; i < this->friendlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friendlst(i), output);
  }

}

int CSProposeFriendRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSOneFriend FriendLst = 1;
  total_size += 1 * this->friendlst_size();
  for (int i = 0; i < this->friendlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSProposeFriendRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSProposeFriendRsp*>(&from));
}

void CSProposeFriendRsp::MergeFrom(const CSProposeFriendRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlst_.MergeFrom(from.friendlst_);
}

void CSProposeFriendRsp::CopyFrom(const CSProposeFriendRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSProposeFriendRsp::IsInitialized() const {

  for (int i = 0; i < friendlst_size(); i++) {
    if (!this->friendlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSProposeFriendRsp::Swap(CSProposeFriendRsp* other) {
  if (other != this) {
    friendlst_.Swap(&other->friendlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSProposeFriendRsp::GetTypeName() const {
  return "vmsg.CSProposeFriendRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSendManualRsp::kSendManualUinLstFieldNumber;
#endif  // !_MSC_VER

CSSendManualRsp::CSSendManualRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSendManualRsp::InitAsDefaultInstance() {
}

CSSendManualRsp::CSSendManualRsp(const CSSendManualRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSendManualRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSendManualRsp::~CSSendManualRsp() {
  SharedDtor();
}

void CSSendManualRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSendManualRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSendManualRsp& CSSendManualRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSSendManualRsp* CSSendManualRsp::default_instance_ = NULL;

CSSendManualRsp* CSSendManualRsp::New() const {
  return new CSSendManualRsp;
}

void CSSendManualRsp::Clear() {
  sendmanualuinlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSendManualRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 SendManualUinLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendManualUinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_sendmanualuinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_sendmanualuinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_SendManualUinLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSendManualRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 SendManualUinLst = 1;
  for (int i = 0; i < this->sendmanualuinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->sendmanualuinlst(i), output);
  }

}

int CSSendManualRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 SendManualUinLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->sendmanualuinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->sendmanualuinlst(i));
    }
    total_size += 1 * this->sendmanualuinlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSendManualRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSendManualRsp*>(&from));
}

void CSSendManualRsp::MergeFrom(const CSSendManualRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  sendmanualuinlst_.MergeFrom(from.sendmanualuinlst_);
}

void CSSendManualRsp::CopyFrom(const CSSendManualRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSendManualRsp::IsInitialized() const {

  return true;
}

void CSSendManualRsp::Swap(CSSendManualRsp* other) {
  if (other != this) {
    sendmanualuinlst_.Swap(&other->sendmanualuinlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSendManualRsp::GetTypeName() const {
  return "vmsg.CSSendManualRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBatchAddUinLst::kUinLstFieldNumber;
#endif  // !_MSC_VER

CSBatchAddUinLst::CSBatchAddUinLst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBatchAddUinLst::InitAsDefaultInstance() {
}

CSBatchAddUinLst::CSBatchAddUinLst(const CSBatchAddUinLst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBatchAddUinLst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBatchAddUinLst::~CSBatchAddUinLst() {
  SharedDtor();
}

void CSBatchAddUinLst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBatchAddUinLst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBatchAddUinLst& CSBatchAddUinLst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSBatchAddUinLst* CSBatchAddUinLst::default_instance_ = NULL;

CSBatchAddUinLst* CSBatchAddUinLst::New() const {
  return new CSBatchAddUinLst;
}

void CSBatchAddUinLst::Clear() {
  uinlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBatchAddUinLst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 UinLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_uinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_UinLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBatchAddUinLst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 UinLst = 1;
  for (int i = 0; i < this->uinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->uinlst(i), output);
  }

}

int CSBatchAddUinLst::ByteSize() const {
  int total_size = 0;

  // repeated uint64 UinLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->uinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uinlst(i));
    }
    total_size += 1 * this->uinlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBatchAddUinLst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBatchAddUinLst*>(&from));
}

void CSBatchAddUinLst::MergeFrom(const CSBatchAddUinLst& from) {
  GOOGLE_CHECK_NE(&from, this);
  uinlst_.MergeFrom(from.uinlst_);
}

void CSBatchAddUinLst::CopyFrom(const CSBatchAddUinLst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBatchAddUinLst::IsInitialized() const {

  return true;
}

void CSBatchAddUinLst::Swap(CSBatchAddUinLst* other) {
  if (other != this) {
    uinlst_.Swap(&other->uinlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBatchAddUinLst::GetTypeName() const {
  return "vmsg.CSBatchAddUinLst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInviteFriendFightRqst::kFriendUinFieldNumber;
#endif  // !_MSC_VER

CSInviteFriendFightRqst::CSInviteFriendFightRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInviteFriendFightRqst::InitAsDefaultInstance() {
}

CSInviteFriendFightRqst::CSInviteFriendFightRqst(const CSInviteFriendFightRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInviteFriendFightRqst::SharedCtor() {
  _cached_size_ = 0;
  frienduin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInviteFriendFightRqst::~CSInviteFriendFightRqst() {
  SharedDtor();
}

void CSInviteFriendFightRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInviteFriendFightRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInviteFriendFightRqst& CSInviteFriendFightRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSInviteFriendFightRqst* CSInviteFriendFightRqst::default_instance_ = NULL;

CSInviteFriendFightRqst* CSInviteFriendFightRqst::New() const {
  return new CSInviteFriendFightRqst;
}

void CSInviteFriendFightRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frienduin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInviteFriendFightRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 FriendUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frienduin_)));
          set_has_frienduin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInviteFriendFightRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 FriendUin = 1;
  if (has_frienduin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->frienduin(), output);
  }

}

int CSInviteFriendFightRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 FriendUin = 1;
    if (has_frienduin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frienduin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInviteFriendFightRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInviteFriendFightRqst*>(&from));
}

void CSInviteFriendFightRqst::MergeFrom(const CSInviteFriendFightRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frienduin()) {
      set_frienduin(from.frienduin());
    }
  }
}

void CSInviteFriendFightRqst::CopyFrom(const CSInviteFriendFightRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInviteFriendFightRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSInviteFriendFightRqst::Swap(CSInviteFriendFightRqst* other) {
  if (other != this) {
    std::swap(frienduin_, other->frienduin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInviteFriendFightRqst::GetTypeName() const {
  return "vmsg.CSInviteFriendFightRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInviteFriendFightRsp::kFriendFightInfoFieldNumber;
#endif  // !_MSC_VER

CSInviteFriendFightRsp::CSInviteFriendFightRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInviteFriendFightRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendfightinfo_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(
      ::vmsg::CSPlayerDetailInfo::internal_default_instance());
#else
  friendfightinfo_ = const_cast< ::vmsg::CSPlayerDetailInfo*>(&::vmsg::CSPlayerDetailInfo::default_instance());
#endif
}

CSInviteFriendFightRsp::CSInviteFriendFightRsp(const CSInviteFriendFightRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInviteFriendFightRsp::SharedCtor() {
  _cached_size_ = 0;
  friendfightinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInviteFriendFightRsp::~CSInviteFriendFightRsp() {
  SharedDtor();
}

void CSInviteFriendFightRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friendfightinfo_;
  }
}

void CSInviteFriendFightRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInviteFriendFightRsp& CSInviteFriendFightRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSInviteFriendFightRsp* CSInviteFriendFightRsp::default_instance_ = NULL;

CSInviteFriendFightRsp* CSInviteFriendFightRsp::New() const {
  return new CSInviteFriendFightRsp;
}

void CSInviteFriendFightRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendfightinfo()) {
      if (friendfightinfo_ != NULL) friendfightinfo_->::vmsg::CSPlayerDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInviteFriendFightRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSPlayerDetailInfo FriendFightInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendfightinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInviteFriendFightRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSPlayerDetailInfo FriendFightInfo = 1;
  if (has_friendfightinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friendfightinfo(), output);
  }

}

int CSInviteFriendFightRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSPlayerDetailInfo FriendFightInfo = 1;
    if (has_friendfightinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendfightinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInviteFriendFightRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInviteFriendFightRsp*>(&from));
}

void CSInviteFriendFightRsp::MergeFrom(const CSInviteFriendFightRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendfightinfo()) {
      mutable_friendfightinfo()->::vmsg::CSPlayerDetailInfo::MergeFrom(from.friendfightinfo());
    }
  }
}

void CSInviteFriendFightRsp::CopyFrom(const CSInviteFriendFightRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInviteFriendFightRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_friendfightinfo()) {
    if (!this->friendfightinfo().IsInitialized()) return false;
  }
  return true;
}

void CSInviteFriendFightRsp::Swap(CSInviteFriendFightRsp* other) {
  if (other != this) {
    std::swap(friendfightinfo_, other->friendfightinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInviteFriendFightRsp::GetTypeName() const {
  return "vmsg.CSInviteFriendFightRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRecvManualRsp::kRecvManualCntFieldNumber;
const int CSRecvManualRsp::kRecvManualUinLstFieldNumber;
#endif  // !_MSC_VER

CSRecvManualRsp::CSRecvManualRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRecvManualRsp::InitAsDefaultInstance() {
}

CSRecvManualRsp::CSRecvManualRsp(const CSRecvManualRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRecvManualRsp::SharedCtor() {
  _cached_size_ = 0;
  recvmanualcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRecvManualRsp::~CSRecvManualRsp() {
  SharedDtor();
}

void CSRecvManualRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRecvManualRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRecvManualRsp& CSRecvManualRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSRecvManualRsp* CSRecvManualRsp::default_instance_ = NULL;

CSRecvManualRsp* CSRecvManualRsp::New() const {
  return new CSRecvManualRsp;
}

void CSRecvManualRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    recvmanualcnt_ = 0u;
  }
  recvmanualuinlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRecvManualRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RecvManualCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvmanualcnt_)));
          set_has_recvmanualcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RecvManualUinLst;
        break;
      }

      // repeated uint64 RecvManualUinLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecvManualUinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_recvmanualuinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_recvmanualuinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RecvManualUinLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRecvManualRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RecvManualCnt = 1;
  if (has_recvmanualcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recvmanualcnt(), output);
  }

  // repeated uint64 RecvManualUinLst = 2;
  for (int i = 0; i < this->recvmanualuinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->recvmanualuinlst(i), output);
  }

}

int CSRecvManualRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RecvManualCnt = 1;
    if (has_recvmanualcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvmanualcnt());
    }

  }
  // repeated uint64 RecvManualUinLst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recvmanualuinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->recvmanualuinlst(i));
    }
    total_size += 1 * this->recvmanualuinlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRecvManualRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRecvManualRsp*>(&from));
}

void CSRecvManualRsp::MergeFrom(const CSRecvManualRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recvmanualuinlst_.MergeFrom(from.recvmanualuinlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recvmanualcnt()) {
      set_recvmanualcnt(from.recvmanualcnt());
    }
  }
}

void CSRecvManualRsp::CopyFrom(const CSRecvManualRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRecvManualRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRecvManualRsp::Swap(CSRecvManualRsp* other) {
  if (other != this) {
    std::swap(recvmanualcnt_, other->recvmanualcnt_);
    recvmanualuinlst_.Swap(&other->recvmanualuinlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRecvManualRsp::GetTypeName() const {
  return "vmsg.CSRecvManualRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRequest::kFriendAddRqstFieldNumber;
const int CSFriendRequest::kFriendDelRqstFieldNumber;
const int CSFriendRequest::kAddBlackRqstFieldNumber;
const int CSFriendRequest::kAdminAddFriendUinFieldNumber;
const int CSFriendRequest::kAdminRefuseUinFieldNumber;
const int CSFriendRequest::kSendManualUinFieldNumber;
const int CSFriendRequest::kRecvManualUinFieldNumber;
const int CSFriendRequest::kBatchAddRqstFieldNumber;
const int CSFriendRequest::kInviteFightRqstFieldNumber;
#endif  // !_MSC_VER

CSFriendRequest::CSFriendRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSFriendRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  batchadd_rqst_ = const_cast< ::vmsg::CSBatchAddUinLst*>(
      ::vmsg::CSBatchAddUinLst::internal_default_instance());
#else
  batchadd_rqst_ = const_cast< ::vmsg::CSBatchAddUinLst*>(&::vmsg::CSBatchAddUinLst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invitefight_rqst_ = const_cast< ::vmsg::CSInviteFriendFightRqst*>(
      ::vmsg::CSInviteFriendFightRqst::internal_default_instance());
#else
  invitefight_rqst_ = const_cast< ::vmsg::CSInviteFriendFightRqst*>(&::vmsg::CSInviteFriendFightRqst::default_instance());
#endif
}

CSFriendRequest::CSFriendRequest(const CSFriendRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSFriendRequest::SharedCtor() {
  _cached_size_ = 0;
  friendadd_rqst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frienddel_rqst_ = GOOGLE_ULONGLONG(0);
  addblack_rqst_ = GOOGLE_ULONGLONG(0);
  adminaddfrienduin_ = GOOGLE_ULONGLONG(0);
  adminrefuseuin_ = GOOGLE_ULONGLONG(0);
  sendmanualuin_ = GOOGLE_ULONGLONG(0);
  recvmanualuin_ = GOOGLE_ULONGLONG(0);
  batchadd_rqst_ = NULL;
  invitefight_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRequest::~CSFriendRequest() {
  SharedDtor();
}

void CSFriendRequest::SharedDtor() {
  if (friendadd_rqst_ != &::google::protobuf::internal::kEmptyString) {
    delete friendadd_rqst_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete batchadd_rqst_;
    delete invitefight_rqst_;
  }
}

void CSFriendRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRequest& CSFriendRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSFriendRequest* CSFriendRequest::default_instance_ = NULL;

CSFriendRequest* CSFriendRequest::New() const {
  return new CSFriendRequest;
}

void CSFriendRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendadd_rqst()) {
      if (friendadd_rqst_ != &::google::protobuf::internal::kEmptyString) {
        friendadd_rqst_->clear();
      }
    }
    frienddel_rqst_ = GOOGLE_ULONGLONG(0);
    addblack_rqst_ = GOOGLE_ULONGLONG(0);
    adminaddfrienduin_ = GOOGLE_ULONGLONG(0);
    adminrefuseuin_ = GOOGLE_ULONGLONG(0);
    sendmanualuin_ = GOOGLE_ULONGLONG(0);
    recvmanualuin_ = GOOGLE_ULONGLONG(0);
    if (has_batchadd_rqst()) {
      if (batchadd_rqst_ != NULL) batchadd_rqst_->::vmsg::CSBatchAddUinLst::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_invitefight_rqst()) {
      if (invitefight_rqst_ != NULL) invitefight_rqst_->::vmsg::CSInviteFriendFightRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSFriendRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FriendAdd_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendadd_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FriendDel_Rqst;
        break;
      }

      // optional uint64 FriendDel_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FriendDel_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frienddel_rqst_)));
          set_has_frienddel_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AddBlack_Rqst;
        break;
      }

      // optional uint64 AddBlack_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddBlack_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addblack_rqst_)));
          set_has_addblack_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AdminAddFriendUin;
        break;
      }

      // optional uint64 AdminAddFriendUin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdminAddFriendUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminaddfrienduin_)));
          set_has_adminaddfrienduin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AdminRefuseUin;
        break;
      }

      // optional uint64 AdminRefuseUin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdminRefuseUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminrefuseuin_)));
          set_has_adminrefuseuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_SendManualUin;
        break;
      }

      // optional uint64 SendManualUin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendManualUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendmanualuin_)));
          set_has_sendmanualuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_RecvManualUin;
        break;
      }

      // optional uint64 RecvManualUin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecvManualUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvmanualuin_)));
          set_has_recvmanualuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_BatchAdd_Rqst;
        break;
      }

      // optional .vmsg.CSBatchAddUinLst BatchAdd_Rqst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BatchAdd_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batchadd_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_InviteFight_Rqst;
        break;
      }

      // optional .vmsg.CSInviteFriendFightRqst InviteFight_Rqst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InviteFight_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitefight_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFriendRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FriendAdd_Rqst = 1;
  if (has_friendadd_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->friendadd_rqst(), output);
  }

  // optional uint64 FriendDel_Rqst = 2;
  if (has_frienddel_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->frienddel_rqst(), output);
  }

  // optional uint64 AddBlack_Rqst = 3;
  if (has_addblack_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->addblack_rqst(), output);
  }

  // optional uint64 AdminAddFriendUin = 5;
  if (has_adminaddfrienduin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->adminaddfrienduin(), output);
  }

  // optional uint64 AdminRefuseUin = 6;
  if (has_adminrefuseuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->adminrefuseuin(), output);
  }

  // optional uint64 SendManualUin = 7;
  if (has_sendmanualuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->sendmanualuin(), output);
  }

  // optional uint64 RecvManualUin = 8;
  if (has_recvmanualuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->recvmanualuin(), output);
  }

  // optional .vmsg.CSBatchAddUinLst BatchAdd_Rqst = 9;
  if (has_batchadd_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->batchadd_rqst(), output);
  }

  // optional .vmsg.CSInviteFriendFightRqst InviteFight_Rqst = 10;
  if (has_invitefight_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->invitefight_rqst(), output);
  }

}

int CSFriendRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FriendAdd_Rqst = 1;
    if (has_friendadd_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendadd_rqst());
    }

    // optional uint64 FriendDel_Rqst = 2;
    if (has_frienddel_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frienddel_rqst());
    }

    // optional uint64 AddBlack_Rqst = 3;
    if (has_addblack_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addblack_rqst());
    }

    // optional uint64 AdminAddFriendUin = 5;
    if (has_adminaddfrienduin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminaddfrienduin());
    }

    // optional uint64 AdminRefuseUin = 6;
    if (has_adminrefuseuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminrefuseuin());
    }

    // optional uint64 SendManualUin = 7;
    if (has_sendmanualuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendmanualuin());
    }

    // optional uint64 RecvManualUin = 8;
    if (has_recvmanualuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvmanualuin());
    }

    // optional .vmsg.CSBatchAddUinLst BatchAdd_Rqst = 9;
    if (has_batchadd_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batchadd_rqst());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSInviteFriendFightRqst InviteFight_Rqst = 10;
    if (has_invitefight_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitefight_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRequest*>(&from));
}

void CSFriendRequest::MergeFrom(const CSFriendRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendadd_rqst()) {
      set_friendadd_rqst(from.friendadd_rqst());
    }
    if (from.has_frienddel_rqst()) {
      set_frienddel_rqst(from.frienddel_rqst());
    }
    if (from.has_addblack_rqst()) {
      set_addblack_rqst(from.addblack_rqst());
    }
    if (from.has_adminaddfrienduin()) {
      set_adminaddfrienduin(from.adminaddfrienduin());
    }
    if (from.has_adminrefuseuin()) {
      set_adminrefuseuin(from.adminrefuseuin());
    }
    if (from.has_sendmanualuin()) {
      set_sendmanualuin(from.sendmanualuin());
    }
    if (from.has_recvmanualuin()) {
      set_recvmanualuin(from.recvmanualuin());
    }
    if (from.has_batchadd_rqst()) {
      mutable_batchadd_rqst()->::vmsg::CSBatchAddUinLst::MergeFrom(from.batchadd_rqst());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_invitefight_rqst()) {
      mutable_invitefight_rqst()->::vmsg::CSInviteFriendFightRqst::MergeFrom(from.invitefight_rqst());
    }
  }
}

void CSFriendRequest::CopyFrom(const CSFriendRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRequest::IsInitialized() const {

  if (has_invitefight_rqst()) {
    if (!this->invitefight_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSFriendRequest::Swap(CSFriendRequest* other) {
  if (other != this) {
    std::swap(friendadd_rqst_, other->friendadd_rqst_);
    std::swap(frienddel_rqst_, other->frienddel_rqst_);
    std::swap(addblack_rqst_, other->addblack_rqst_);
    std::swap(adminaddfrienduin_, other->adminaddfrienduin_);
    std::swap(adminrefuseuin_, other->adminrefuseuin_);
    std::swap(sendmanualuin_, other->sendmanualuin_);
    std::swap(recvmanualuin_, other->recvmanualuin_);
    std::swap(batchadd_rqst_, other->batchadd_rqst_);
    std::swap(invitefight_rqst_, other->invitefight_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRequest::GetTypeName() const {
  return "vmsg.CSFriendRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSFriendRespond::kFriendQueryRspFieldNumber;
const int CSFriendRespond::kAdminAddRspFieldNumber;
const int CSFriendRespond::kFriendDelRspFieldNumber;
const int CSFriendRespond::kAddBlackRspFieldNumber;
const int CSFriendRespond::kProposeFriendRspFieldNumber;
const int CSFriendRespond::kAddReqUinRspFieldNumber;
const int CSFriendRespond::kAdminRefuseUinFieldNumber;
const int CSFriendRespond::kSendManualRspFieldNumber;
const int CSFriendRespond::kBatchAddRspFieldNumber;
const int CSFriendRespond::kInviteFriendRspFieldNumber;
const int CSFriendRespond::kReqNumNotifyRspFieldNumber;
const int CSFriendRespond::kRecvManualRspFieldNumber;
#endif  // !_MSC_VER

CSFriendRespond::CSFriendRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSFriendRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendquery_rsp_ = const_cast< ::vmsg::CSFriendQueryRsp*>(
      ::vmsg::CSFriendQueryRsp::internal_default_instance());
#else
  friendquery_rsp_ = const_cast< ::vmsg::CSFriendQueryRsp*>(&::vmsg::CSFriendQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminadd_rsp_ = const_cast< ::vmsg::CSOneFriend*>(
      ::vmsg::CSOneFriend::internal_default_instance());
#else
  adminadd_rsp_ = const_cast< ::vmsg::CSOneFriend*>(&::vmsg::CSOneFriend::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  addblack_rsp_ = const_cast< ::vmsg::CSOneFriend*>(
      ::vmsg::CSOneFriend::internal_default_instance());
#else
  addblack_rsp_ = const_cast< ::vmsg::CSOneFriend*>(&::vmsg::CSOneFriend::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  proposefriend_rsp_ = const_cast< ::vmsg::CSProposeFriendRsp*>(
      ::vmsg::CSProposeFriendRsp::internal_default_instance());
#else
  proposefriend_rsp_ = const_cast< ::vmsg::CSProposeFriendRsp*>(&::vmsg::CSProposeFriendRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sendmanual_rsp_ = const_cast< ::vmsg::CSSendManualRsp*>(
      ::vmsg::CSSendManualRsp::internal_default_instance());
#else
  sendmanual_rsp_ = const_cast< ::vmsg::CSSendManualRsp*>(&::vmsg::CSSendManualRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  batchadd_rsp_ = const_cast< ::vmsg::CSBatchAddUinLst*>(
      ::vmsg::CSBatchAddUinLst::internal_default_instance());
#else
  batchadd_rsp_ = const_cast< ::vmsg::CSBatchAddUinLst*>(&::vmsg::CSBatchAddUinLst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  invitefriend_rsp_ = const_cast< ::vmsg::CSInviteFriendFightRsp*>(
      ::vmsg::CSInviteFriendFightRsp::internal_default_instance());
#else
  invitefriend_rsp_ = const_cast< ::vmsg::CSInviteFriendFightRsp*>(&::vmsg::CSInviteFriendFightRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  recvmanual_rsp_ = const_cast< ::vmsg::CSRecvManualRsp*>(
      ::vmsg::CSRecvManualRsp::internal_default_instance());
#else
  recvmanual_rsp_ = const_cast< ::vmsg::CSRecvManualRsp*>(&::vmsg::CSRecvManualRsp::default_instance());
#endif
}

CSFriendRespond::CSFriendRespond(const CSFriendRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSFriendRespond::SharedCtor() {
  _cached_size_ = 0;
  friendquery_rsp_ = NULL;
  adminadd_rsp_ = NULL;
  frienddel_rsp_ = GOOGLE_ULONGLONG(0);
  addblack_rsp_ = NULL;
  proposefriend_rsp_ = NULL;
  addrequin_rsp_ = GOOGLE_ULONGLONG(0);
  adminrefuseuin_ = GOOGLE_ULONGLONG(0);
  sendmanual_rsp_ = NULL;
  batchadd_rsp_ = NULL;
  invitefriend_rsp_ = NULL;
  reqnumnotify_rsp_ = 0u;
  recvmanual_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSFriendRespond::~CSFriendRespond() {
  SharedDtor();
}

void CSFriendRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete friendquery_rsp_;
    delete adminadd_rsp_;
    delete addblack_rsp_;
    delete proposefriend_rsp_;
    delete sendmanual_rsp_;
    delete batchadd_rsp_;
    delete invitefriend_rsp_;
    delete recvmanual_rsp_;
  }
}

void CSFriendRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSFriendRespond& CSFriendRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSFriendMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSFriendMsg_2eproto();
#endif
  return *default_instance_;
}

CSFriendRespond* CSFriendRespond::default_instance_ = NULL;

CSFriendRespond* CSFriendRespond::New() const {
  return new CSFriendRespond;
}

void CSFriendRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendquery_rsp()) {
      if (friendquery_rsp_ != NULL) friendquery_rsp_->::vmsg::CSFriendQueryRsp::Clear();
    }
    if (has_adminadd_rsp()) {
      if (adminadd_rsp_ != NULL) adminadd_rsp_->::vmsg::CSOneFriend::Clear();
    }
    frienddel_rsp_ = GOOGLE_ULONGLONG(0);
    if (has_addblack_rsp()) {
      if (addblack_rsp_ != NULL) addblack_rsp_->::vmsg::CSOneFriend::Clear();
    }
    if (has_proposefriend_rsp()) {
      if (proposefriend_rsp_ != NULL) proposefriend_rsp_->::vmsg::CSProposeFriendRsp::Clear();
    }
    addrequin_rsp_ = GOOGLE_ULONGLONG(0);
    adminrefuseuin_ = GOOGLE_ULONGLONG(0);
    if (has_sendmanual_rsp()) {
      if (sendmanual_rsp_ != NULL) sendmanual_rsp_->::vmsg::CSSendManualRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_batchadd_rsp()) {
      if (batchadd_rsp_ != NULL) batchadd_rsp_->::vmsg::CSBatchAddUinLst::Clear();
    }
    if (has_invitefriend_rsp()) {
      if (invitefriend_rsp_ != NULL) invitefriend_rsp_->::vmsg::CSInviteFriendFightRsp::Clear();
    }
    reqnumnotify_rsp_ = 0u;
    if (has_recvmanual_rsp()) {
      if (recvmanual_rsp_ != NULL) recvmanual_rsp_->::vmsg::CSRecvManualRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSFriendRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSFriendQueryRsp FriendQuery_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendquery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AdminAdd_Rsp;
        break;
      }

      // optional .vmsg.CSOneFriend AdminAdd_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdminAdd_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminadd_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FriendDel_Rsp;
        break;
      }

      // optional uint64 FriendDel_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FriendDel_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frienddel_rsp_)));
          set_has_frienddel_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AddBlack_Rsp;
        break;
      }

      // optional .vmsg.CSOneFriend AddBlack_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AddBlack_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addblack_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ProposeFriend_Rsp;
        break;
      }

      // optional .vmsg.CSProposeFriendRsp ProposeFriend_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProposeFriend_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_proposefriend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AddReqUin_Rsp;
        break;
      }

      // optional uint64 AddReqUin_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AddReqUin_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addrequin_rsp_)));
          set_has_addrequin_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AdminRefuseUin;
        break;
      }

      // optional uint64 AdminRefuseUin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdminRefuseUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &adminrefuseuin_)));
          set_has_adminrefuseuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_SendManual_Rsp;
        break;
      }

      // optional .vmsg.CSSendManualRsp SendManual_Rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SendManual_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmanual_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_BatchAdd_Rsp;
        break;
      }

      // optional .vmsg.CSBatchAddUinLst BatchAdd_Rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BatchAdd_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_batchadd_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_InviteFriend_Rsp;
        break;
      }

      // optional .vmsg.CSInviteFriendFightRsp InviteFriend_Rsp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InviteFriend_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invitefriend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ReqNumNotify_Rsp;
        break;
      }

      // optional uint32 ReqNumNotify_Rsp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReqNumNotify_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqnumnotify_rsp_)));
          set_has_reqnumnotify_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_RecvManual_Rsp;
        break;
      }

      // optional .vmsg.CSRecvManualRsp RecvManual_Rsp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RecvManual_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_recvmanual_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSFriendRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSFriendQueryRsp FriendQuery_Rsp = 1;
  if (has_friendquery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->friendquery_rsp(), output);
  }

  // optional .vmsg.CSOneFriend AdminAdd_Rsp = 2;
  if (has_adminadd_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->adminadd_rsp(), output);
  }

  // optional uint64 FriendDel_Rsp = 3;
  if (has_frienddel_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->frienddel_rsp(), output);
  }

  // optional .vmsg.CSOneFriend AddBlack_Rsp = 4;
  if (has_addblack_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->addblack_rsp(), output);
  }

  // optional .vmsg.CSProposeFriendRsp ProposeFriend_Rsp = 5;
  if (has_proposefriend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->proposefriend_rsp(), output);
  }

  // optional uint64 AddReqUin_Rsp = 6;
  if (has_addrequin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->addrequin_rsp(), output);
  }

  // optional uint64 AdminRefuseUin = 7;
  if (has_adminrefuseuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->adminrefuseuin(), output);
  }

  // optional .vmsg.CSSendManualRsp SendManual_Rsp = 8;
  if (has_sendmanual_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->sendmanual_rsp(), output);
  }

  // optional .vmsg.CSBatchAddUinLst BatchAdd_Rsp = 10;
  if (has_batchadd_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->batchadd_rsp(), output);
  }

  // optional .vmsg.CSInviteFriendFightRsp InviteFriend_Rsp = 11;
  if (has_invitefriend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->invitefriend_rsp(), output);
  }

  // optional uint32 ReqNumNotify_Rsp = 12;
  if (has_reqnumnotify_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->reqnumnotify_rsp(), output);
  }

  // optional .vmsg.CSRecvManualRsp RecvManual_Rsp = 13;
  if (has_recvmanual_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->recvmanual_rsp(), output);
  }

}

int CSFriendRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSFriendQueryRsp FriendQuery_Rsp = 1;
    if (has_friendquery_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendquery_rsp());
    }

    // optional .vmsg.CSOneFriend AdminAdd_Rsp = 2;
    if (has_adminadd_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminadd_rsp());
    }

    // optional uint64 FriendDel_Rsp = 3;
    if (has_frienddel_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->frienddel_rsp());
    }

    // optional .vmsg.CSOneFriend AddBlack_Rsp = 4;
    if (has_addblack_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addblack_rsp());
    }

    // optional .vmsg.CSProposeFriendRsp ProposeFriend_Rsp = 5;
    if (has_proposefriend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->proposefriend_rsp());
    }

    // optional uint64 AddReqUin_Rsp = 6;
    if (has_addrequin_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->addrequin_rsp());
    }

    // optional uint64 AdminRefuseUin = 7;
    if (has_adminrefuseuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->adminrefuseuin());
    }

    // optional .vmsg.CSSendManualRsp SendManual_Rsp = 8;
    if (has_sendmanual_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmanual_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSBatchAddUinLst BatchAdd_Rsp = 10;
    if (has_batchadd_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->batchadd_rsp());
    }

    // optional .vmsg.CSInviteFriendFightRsp InviteFriend_Rsp = 11;
    if (has_invitefriend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invitefriend_rsp());
    }

    // optional uint32 ReqNumNotify_Rsp = 12;
    if (has_reqnumnotify_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqnumnotify_rsp());
    }

    // optional .vmsg.CSRecvManualRsp RecvManual_Rsp = 13;
    if (has_recvmanual_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->recvmanual_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSFriendRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSFriendRespond*>(&from));
}

void CSFriendRespond::MergeFrom(const CSFriendRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendquery_rsp()) {
      mutable_friendquery_rsp()->::vmsg::CSFriendQueryRsp::MergeFrom(from.friendquery_rsp());
    }
    if (from.has_adminadd_rsp()) {
      mutable_adminadd_rsp()->::vmsg::CSOneFriend::MergeFrom(from.adminadd_rsp());
    }
    if (from.has_frienddel_rsp()) {
      set_frienddel_rsp(from.frienddel_rsp());
    }
    if (from.has_addblack_rsp()) {
      mutable_addblack_rsp()->::vmsg::CSOneFriend::MergeFrom(from.addblack_rsp());
    }
    if (from.has_proposefriend_rsp()) {
      mutable_proposefriend_rsp()->::vmsg::CSProposeFriendRsp::MergeFrom(from.proposefriend_rsp());
    }
    if (from.has_addrequin_rsp()) {
      set_addrequin_rsp(from.addrequin_rsp());
    }
    if (from.has_adminrefuseuin()) {
      set_adminrefuseuin(from.adminrefuseuin());
    }
    if (from.has_sendmanual_rsp()) {
      mutable_sendmanual_rsp()->::vmsg::CSSendManualRsp::MergeFrom(from.sendmanual_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_batchadd_rsp()) {
      mutable_batchadd_rsp()->::vmsg::CSBatchAddUinLst::MergeFrom(from.batchadd_rsp());
    }
    if (from.has_invitefriend_rsp()) {
      mutable_invitefriend_rsp()->::vmsg::CSInviteFriendFightRsp::MergeFrom(from.invitefriend_rsp());
    }
    if (from.has_reqnumnotify_rsp()) {
      set_reqnumnotify_rsp(from.reqnumnotify_rsp());
    }
    if (from.has_recvmanual_rsp()) {
      mutable_recvmanual_rsp()->::vmsg::CSRecvManualRsp::MergeFrom(from.recvmanual_rsp());
    }
  }
}

void CSFriendRespond::CopyFrom(const CSFriendRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSFriendRespond::IsInitialized() const {

  if (has_friendquery_rsp()) {
    if (!this->friendquery_rsp().IsInitialized()) return false;
  }
  if (has_adminadd_rsp()) {
    if (!this->adminadd_rsp().IsInitialized()) return false;
  }
  if (has_addblack_rsp()) {
    if (!this->addblack_rsp().IsInitialized()) return false;
  }
  if (has_proposefriend_rsp()) {
    if (!this->proposefriend_rsp().IsInitialized()) return false;
  }
  if (has_invitefriend_rsp()) {
    if (!this->invitefriend_rsp().IsInitialized()) return false;
  }
  if (has_recvmanual_rsp()) {
    if (!this->recvmanual_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSFriendRespond::Swap(CSFriendRespond* other) {
  if (other != this) {
    std::swap(friendquery_rsp_, other->friendquery_rsp_);
    std::swap(adminadd_rsp_, other->adminadd_rsp_);
    std::swap(frienddel_rsp_, other->frienddel_rsp_);
    std::swap(addblack_rsp_, other->addblack_rsp_);
    std::swap(proposefriend_rsp_, other->proposefriend_rsp_);
    std::swap(addrequin_rsp_, other->addrequin_rsp_);
    std::swap(adminrefuseuin_, other->adminrefuseuin_);
    std::swap(sendmanual_rsp_, other->sendmanual_rsp_);
    std::swap(batchadd_rsp_, other->batchadd_rsp_);
    std::swap(invitefriend_rsp_, other->invitefriend_rsp_);
    std::swap(reqnumnotify_rsp_, other->reqnumnotify_rsp_);
    std::swap(recvmanual_rsp_, other->recvmanual_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSFriendRespond::GetTypeName() const {
  return "vmsg.CSFriendRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
