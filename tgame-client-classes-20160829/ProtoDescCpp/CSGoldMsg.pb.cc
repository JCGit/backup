// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSGoldMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSGoldMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSGoldMsg_2eproto() {
  delete CSGoldInfo::default_instance_;
  delete CSBuyGoldRqst::default_instance_;
  delete CSBuyGoldRsp::default_instance_;
  delete CSBuyRMBStoreRqst::default_instance_;
  delete CSBuyRMBStoreRsp::default_instance_;
  delete CSRMBStoreProductInfo::default_instance_;
  delete CSQueryRMBStoreRsp::default_instance_;
  delete CSQueryRMBStoreItemRqst::default_instance_;
  delete CSQueryRMBStoreItemRsp::default_instance_;
  delete CSAppAuthedBuyRqst::default_instance_;
  delete CSAppAuthedBuyRsp::default_instance_;
  delete CSAppAuthedBuySucceedRqst::default_instance_;
  delete CSGoldRequest::default_instance_;
  delete CSGoldRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSGoldMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSGoldMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  CSGoldInfo::default_instance_ = new CSGoldInfo();
  CSBuyGoldRqst::default_instance_ = new CSBuyGoldRqst();
  CSBuyGoldRsp::default_instance_ = new CSBuyGoldRsp();
  CSBuyRMBStoreRqst::default_instance_ = new CSBuyRMBStoreRqst();
  CSBuyRMBStoreRsp::default_instance_ = new CSBuyRMBStoreRsp();
  CSRMBStoreProductInfo::default_instance_ = new CSRMBStoreProductInfo();
  CSQueryRMBStoreRsp::default_instance_ = new CSQueryRMBStoreRsp();
  CSQueryRMBStoreItemRqst::default_instance_ = new CSQueryRMBStoreItemRqst();
  CSQueryRMBStoreItemRsp::default_instance_ = new CSQueryRMBStoreItemRsp();
  CSAppAuthedBuyRqst::default_instance_ = new CSAppAuthedBuyRqst();
  CSAppAuthedBuyRsp::default_instance_ = new CSAppAuthedBuyRsp();
  CSAppAuthedBuySucceedRqst::default_instance_ = new CSAppAuthedBuySucceedRqst();
  CSGoldRequest::default_instance_ = new CSGoldRequest();
  CSGoldRespond::default_instance_ = new CSGoldRespond();
  CSGoldInfo::default_instance_->InitAsDefaultInstance();
  CSBuyGoldRqst::default_instance_->InitAsDefaultInstance();
  CSBuyGoldRsp::default_instance_->InitAsDefaultInstance();
  CSBuyRMBStoreRqst::default_instance_->InitAsDefaultInstance();
  CSBuyRMBStoreRsp::default_instance_->InitAsDefaultInstance();
  CSRMBStoreProductInfo::default_instance_->InitAsDefaultInstance();
  CSQueryRMBStoreRsp::default_instance_->InitAsDefaultInstance();
  CSQueryRMBStoreItemRqst::default_instance_->InitAsDefaultInstance();
  CSQueryRMBStoreItemRsp::default_instance_->InitAsDefaultInstance();
  CSAppAuthedBuyRqst::default_instance_->InitAsDefaultInstance();
  CSAppAuthedBuyRsp::default_instance_->InitAsDefaultInstance();
  CSAppAuthedBuySucceedRqst::default_instance_->InitAsDefaultInstance();
  CSGoldRequest::default_instance_->InitAsDefaultInstance();
  CSGoldRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSGoldMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSGoldMsg_2eproto_once_);
void protobuf_AddDesc_CSGoldMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSGoldMsg_2eproto_once_,
                 &protobuf_AddDesc_CSGoldMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSGoldMsg_2eproto {
  StaticDescriptorInitializer_CSGoldMsg_2eproto() {
    protobuf_AddDesc_CSGoldMsg_2eproto();
  }
} static_descriptor_initializer_CSGoldMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSGoldInfo::kGoldFieldNumber;
const int CSGoldInfo::kTotalGoldByMoneyFieldNumber;
const int CSGoldInfo::kPayFlagFieldNumber;
#endif  // !_MSC_VER

CSGoldInfo::CSGoldInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGoldInfo::InitAsDefaultInstance() {
}

CSGoldInfo::CSGoldInfo(const CSGoldInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGoldInfo::SharedCtor() {
  _cached_size_ = 0;
  gold_ = 0u;
  totalgoldbymoney_ = 0u;
  payflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGoldInfo::~CSGoldInfo() {
  SharedDtor();
}

void CSGoldInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGoldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGoldInfo& CSGoldInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSGoldInfo* CSGoldInfo::default_instance_ = NULL;

CSGoldInfo* CSGoldInfo::New() const {
  return new CSGoldInfo;
}

void CSGoldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gold_ = 0u;
    totalgoldbymoney_ = 0u;
    payflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGoldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Gold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TotalGoldByMoney;
        break;
      }

      // required uint32 TotalGoldByMoney = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalGoldByMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalgoldbymoney_)));
          set_has_totalgoldbymoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PayFlag;
        break;
      }

      // optional uint32 PayFlag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PayFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payflag_)));
          set_has_payflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGoldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Gold = 1;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gold(), output);
  }

  // required uint32 TotalGoldByMoney = 2;
  if (has_totalgoldbymoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalgoldbymoney(), output);
  }

  // optional uint32 PayFlag = 3;
  if (has_payflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->payflag(), output);
  }

}

int CSGoldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Gold = 1;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 TotalGoldByMoney = 2;
    if (has_totalgoldbymoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalgoldbymoney());
    }

    // optional uint32 PayFlag = 3;
    if (has_payflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payflag());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGoldInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGoldInfo*>(&from));
}

void CSGoldInfo::MergeFrom(const CSGoldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_totalgoldbymoney()) {
      set_totalgoldbymoney(from.totalgoldbymoney());
    }
    if (from.has_payflag()) {
      set_payflag(from.payflag());
    }
  }
}

void CSGoldInfo::CopyFrom(const CSGoldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGoldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGoldInfo::Swap(CSGoldInfo* other) {
  if (other != this) {
    std::swap(gold_, other->gold_);
    std::swap(totalgoldbymoney_, other->totalgoldbymoney_);
    std::swap(payflag_, other->payflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGoldInfo::GetTypeName() const {
  return "vmsg.CSGoldInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyGoldRqst::kStrFieldNumber;
#endif  // !_MSC_VER

CSBuyGoldRqst::CSBuyGoldRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyGoldRqst::InitAsDefaultInstance() {
}

CSBuyGoldRqst::CSBuyGoldRqst(const CSBuyGoldRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyGoldRqst::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyGoldRqst::~CSBuyGoldRqst() {
  SharedDtor();
}

void CSBuyGoldRqst::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyGoldRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyGoldRqst& CSBuyGoldRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyGoldRqst* CSBuyGoldRqst::default_instance_ = NULL;

CSBuyGoldRqst* CSBuyGoldRqst::New() const {
  return new CSBuyGoldRqst;
}

void CSBuyGoldRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyGoldRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyGoldRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

}

int CSBuyGoldRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyGoldRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyGoldRqst*>(&from));
}

void CSBuyGoldRqst::MergeFrom(const CSBuyGoldRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
}

void CSBuyGoldRqst::CopyFrom(const CSBuyGoldRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyGoldRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBuyGoldRqst::Swap(CSBuyGoldRqst* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyGoldRqst::GetTypeName() const {
  return "vmsg.CSBuyGoldRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyGoldRsp::kStrFieldNumber;
#endif  // !_MSC_VER

CSBuyGoldRsp::CSBuyGoldRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyGoldRsp::InitAsDefaultInstance() {
}

CSBuyGoldRsp::CSBuyGoldRsp(const CSBuyGoldRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyGoldRsp::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyGoldRsp::~CSBuyGoldRsp() {
  SharedDtor();
}

void CSBuyGoldRsp::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyGoldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyGoldRsp& CSBuyGoldRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyGoldRsp* CSBuyGoldRsp::default_instance_ = NULL;

CSBuyGoldRsp* CSBuyGoldRsp::New() const {
  return new CSBuyGoldRsp;
}

void CSBuyGoldRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyGoldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyGoldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

}

int CSBuyGoldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyGoldRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyGoldRsp*>(&from));
}

void CSBuyGoldRsp::MergeFrom(const CSBuyGoldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
}

void CSBuyGoldRsp::CopyFrom(const CSBuyGoldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyGoldRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBuyGoldRsp::Swap(CSBuyGoldRsp* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyGoldRsp::GetTypeName() const {
  return "vmsg.CSBuyGoldRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyRMBStoreRqst::kStrFieldNumber;
#endif  // !_MSC_VER

CSBuyRMBStoreRqst::CSBuyRMBStoreRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyRMBStoreRqst::InitAsDefaultInstance() {
}

CSBuyRMBStoreRqst::CSBuyRMBStoreRqst(const CSBuyRMBStoreRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyRMBStoreRqst::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyRMBStoreRqst::~CSBuyRMBStoreRqst() {
  SharedDtor();
}

void CSBuyRMBStoreRqst::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSBuyRMBStoreRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyRMBStoreRqst& CSBuyRMBStoreRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyRMBStoreRqst* CSBuyRMBStoreRqst::default_instance_ = NULL;

CSBuyRMBStoreRqst* CSBuyRMBStoreRqst::New() const {
  return new CSBuyRMBStoreRqst;
}

void CSBuyRMBStoreRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyRMBStoreRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyRMBStoreRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

}

int CSBuyRMBStoreRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyRMBStoreRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyRMBStoreRqst*>(&from));
}

void CSBuyRMBStoreRqst::MergeFrom(const CSBuyRMBStoreRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
  }
}

void CSBuyRMBStoreRqst::CopyFrom(const CSBuyRMBStoreRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyRMBStoreRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSBuyRMBStoreRqst::Swap(CSBuyRMBStoreRqst* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyRMBStoreRqst::GetTypeName() const {
  return "vmsg.CSBuyRMBStoreRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSBuyRMBStoreRsp::kStrFieldNumber;
const int CSBuyRMBStoreRsp::kBagInfoFieldNumber;
#endif  // !_MSC_VER

CSBuyRMBStoreRsp::CSBuyRMBStoreRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSBuyRMBStoreRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSBuyRMBStoreRsp::CSBuyRMBStoreRsp(const CSBuyRMBStoreRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSBuyRMBStoreRsp::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSBuyRMBStoreRsp::~CSBuyRMBStoreRsp() {
  SharedDtor();
}

void CSBuyRMBStoreRsp::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSBuyRMBStoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSBuyRMBStoreRsp& CSBuyRMBStoreRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSBuyRMBStoreRsp* CSBuyRMBStoreRsp::default_instance_ = NULL;

CSBuyRMBStoreRsp* CSBuyRMBStoreRsp::New() const {
  return new CSBuyRMBStoreRsp;
}

void CSBuyRMBStoreRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSBuyRMBStoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BagInfo;
        break;
      }

      // optional .vmsg.CSBagInfo BagInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSBuyRMBStoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }

  // optional .vmsg.CSBagInfo BagInfo = 2;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->baginfo(), output);
  }

}

int CSBuyRMBStoreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }

    // optional .vmsg.CSBagInfo BagInfo = 2;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSBuyRMBStoreRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSBuyRMBStoreRsp*>(&from));
}

void CSBuyRMBStoreRsp::MergeFrom(const CSBuyRMBStoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void CSBuyRMBStoreRsp::CopyFrom(const CSBuyRMBStoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSBuyRMBStoreRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  return true;
}

void CSBuyRMBStoreRsp::Swap(CSBuyRMBStoreRsp* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(baginfo_, other->baginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSBuyRMBStoreRsp::GetTypeName() const {
  return "vmsg.CSBuyRMBStoreRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRMBStoreProductInfo::kChannelProductIDFieldNumber;
const int CSRMBStoreProductInfo::kElmtTypeFieldNumber;
const int CSRMBStoreProductInfo::kElmtCfgIDFieldNumber;
const int CSRMBStoreProductInfo::kElmtCntFieldNumber;
const int CSRMBStoreProductInfo::kExtraCntFieldNumber;
const int CSRMBStoreProductInfo::kPriceFieldNumber;
const int CSRMBStoreProductInfo::kFirstExtraCntFieldNumber;
const int CSRMBStoreProductInfo::kICONFieldNumber;
const int CSRMBStoreProductInfo::kIDFieldNumber;
const int CSRMBStoreProductInfo::kExtraItemTypeFieldNumber;
const int CSRMBStoreProductInfo::kExtraItemIDFieldNumber;
const int CSRMBStoreProductInfo::kExtraItemCntFieldNumber;
const int CSRMBStoreProductInfo::kTabIDFieldNumber;
#endif  // !_MSC_VER

CSRMBStoreProductInfo::CSRMBStoreProductInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRMBStoreProductInfo::InitAsDefaultInstance() {
}

CSRMBStoreProductInfo::CSRMBStoreProductInfo(const CSRMBStoreProductInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRMBStoreProductInfo::SharedCtor() {
  _cached_size_ = 0;
  channelproductid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  elmttype_ = 0u;
  elmtcfgid_ = 0u;
  elmtcnt_ = 0u;
  extracnt_ = 0u;
  price_ = 0u;
  firstextracnt_ = 0u;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  extraitemtype_ = 0u;
  extraitemid_ = 0u;
  extraitemcnt_ = 0u;
  tabid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRMBStoreProductInfo::~CSRMBStoreProductInfo() {
  SharedDtor();
}

void CSRMBStoreProductInfo::SharedDtor() {
  if (channelproductid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelproductid_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRMBStoreProductInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRMBStoreProductInfo& CSRMBStoreProductInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSRMBStoreProductInfo* CSRMBStoreProductInfo::default_instance_ = NULL;

CSRMBStoreProductInfo* CSRMBStoreProductInfo::New() const {
  return new CSRMBStoreProductInfo;
}

void CSRMBStoreProductInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_channelproductid()) {
      if (channelproductid_ != &::google::protobuf::internal::kEmptyString) {
        channelproductid_->clear();
      }
    }
    elmttype_ = 0u;
    elmtcfgid_ = 0u;
    elmtcnt_ = 0u;
    extracnt_ = 0u;
    price_ = 0u;
    firstextracnt_ = 0u;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    id_ = 0u;
    extraitemtype_ = 0u;
    extraitemid_ = 0u;
    extraitemcnt_ = 0u;
    tabid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRMBStoreProductInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ChannelProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelproductid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElmtType;
        break;
      }

      // required uint32 ElmtType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElmtType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elmttype_)));
          set_has_elmttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElmtCfgID;
        break;
      }

      // required uint32 ElmtCfgID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElmtCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elmtcfgid_)));
          set_has_elmtcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ElmtCnt;
        break;
      }

      // required uint32 ElmtCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElmtCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elmtcnt_)));
          set_has_elmtcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ExtraCnt;
        break;
      }

      // required uint32 ExtraCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extracnt_)));
          set_has_extracnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Price;
        break;
      }

      // required uint32 Price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FirstExtraCnt;
        break;
      }

      // required uint32 FirstExtraCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FirstExtraCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstextracnt_)));
          set_has_firstextracnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ICON;
        break;
      }

      // required string ICON = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ICON:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ID;
        break;
      }

      // required uint32 ID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ExtraItemType;
        break;
      }

      // required uint32 ExtraItemType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraitemtype_)));
          set_has_extraitemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ExtraItemID;
        break;
      }

      // required uint32 ExtraItemID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraitemid_)));
          set_has_extraitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ExtraItemCnt;
        break;
      }

      // required uint32 ExtraItemCnt = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraItemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraitemcnt_)));
          set_has_extraitemcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_TabID;
        break;
      }

      // required uint32 TabID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TabID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tabid_)));
          set_has_tabid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRMBStoreProductInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ChannelProductID = 1;
  if (has_channelproductid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->channelproductid(), output);
  }

  // required uint32 ElmtType = 2;
  if (has_elmttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elmttype(), output);
  }

  // required uint32 ElmtCfgID = 3;
  if (has_elmtcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elmtcfgid(), output);
  }

  // required uint32 ElmtCnt = 4;
  if (has_elmtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->elmtcnt(), output);
  }

  // required uint32 ExtraCnt = 5;
  if (has_extracnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extracnt(), output);
  }

  // required uint32 Price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->price(), output);
  }

  // required uint32 FirstExtraCnt = 7;
  if (has_firstextracnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->firstextracnt(), output);
  }

  // required string ICON = 8;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->icon(), output);
  }

  // required uint32 ID = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->id(), output);
  }

  // required uint32 ExtraItemType = 10;
  if (has_extraitemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->extraitemtype(), output);
  }

  // required uint32 ExtraItemID = 11;
  if (has_extraitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->extraitemid(), output);
  }

  // required uint32 ExtraItemCnt = 12;
  if (has_extraitemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->extraitemcnt(), output);
  }

  // required uint32 TabID = 13;
  if (has_tabid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->tabid(), output);
  }

}

int CSRMBStoreProductInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ChannelProductID = 1;
    if (has_channelproductid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelproductid());
    }

    // required uint32 ElmtType = 2;
    if (has_elmttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elmttype());
    }

    // required uint32 ElmtCfgID = 3;
    if (has_elmtcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elmtcfgid());
    }

    // required uint32 ElmtCnt = 4;
    if (has_elmtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elmtcnt());
    }

    // required uint32 ExtraCnt = 5;
    if (has_extracnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extracnt());
    }

    // required uint32 Price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required uint32 FirstExtraCnt = 7;
    if (has_firstextracnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstextracnt());
    }

    // required string ICON = 8;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ID = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 ExtraItemType = 10;
    if (has_extraitemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraitemtype());
    }

    // required uint32 ExtraItemID = 11;
    if (has_extraitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraitemid());
    }

    // required uint32 ExtraItemCnt = 12;
    if (has_extraitemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraitemcnt());
    }

    // required uint32 TabID = 13;
    if (has_tabid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tabid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRMBStoreProductInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRMBStoreProductInfo*>(&from));
}

void CSRMBStoreProductInfo::MergeFrom(const CSRMBStoreProductInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channelproductid()) {
      set_channelproductid(from.channelproductid());
    }
    if (from.has_elmttype()) {
      set_elmttype(from.elmttype());
    }
    if (from.has_elmtcfgid()) {
      set_elmtcfgid(from.elmtcfgid());
    }
    if (from.has_elmtcnt()) {
      set_elmtcnt(from.elmtcnt());
    }
    if (from.has_extracnt()) {
      set_extracnt(from.extracnt());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_firstextracnt()) {
      set_firstextracnt(from.firstextracnt());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_extraitemtype()) {
      set_extraitemtype(from.extraitemtype());
    }
    if (from.has_extraitemid()) {
      set_extraitemid(from.extraitemid());
    }
    if (from.has_extraitemcnt()) {
      set_extraitemcnt(from.extraitemcnt());
    }
    if (from.has_tabid()) {
      set_tabid(from.tabid());
    }
  }
}

void CSRMBStoreProductInfo::CopyFrom(const CSRMBStoreProductInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRMBStoreProductInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void CSRMBStoreProductInfo::Swap(CSRMBStoreProductInfo* other) {
  if (other != this) {
    std::swap(channelproductid_, other->channelproductid_);
    std::swap(elmttype_, other->elmttype_);
    std::swap(elmtcfgid_, other->elmtcfgid_);
    std::swap(elmtcnt_, other->elmtcnt_);
    std::swap(extracnt_, other->extracnt_);
    std::swap(price_, other->price_);
    std::swap(firstextracnt_, other->firstextracnt_);
    std::swap(icon_, other->icon_);
    std::swap(id_, other->id_);
    std::swap(extraitemtype_, other->extraitemtype_);
    std::swap(extraitemid_, other->extraitemid_);
    std::swap(extraitemcnt_, other->extraitemcnt_);
    std::swap(tabid_, other->tabid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRMBStoreProductInfo::GetTypeName() const {
  return "vmsg.CSRMBStoreProductInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryRMBStoreRsp::kProductsFieldNumber;
const int CSQueryRMBStoreRsp::kBoughtIDsFieldNumber;
#endif  // !_MSC_VER

CSQueryRMBStoreRsp::CSQueryRMBStoreRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryRMBStoreRsp::InitAsDefaultInstance() {
}

CSQueryRMBStoreRsp::CSQueryRMBStoreRsp(const CSQueryRMBStoreRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryRMBStoreRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryRMBStoreRsp::~CSQueryRMBStoreRsp() {
  SharedDtor();
}

void CSQueryRMBStoreRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryRMBStoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryRMBStoreRsp& CSQueryRMBStoreRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryRMBStoreRsp* CSQueryRMBStoreRsp::default_instance_ = NULL;

CSQueryRMBStoreRsp* CSQueryRMBStoreRsp::New() const {
  return new CSQueryRMBStoreRsp;
}

void CSQueryRMBStoreRsp::Clear() {
  products_.Clear();
  boughtids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryRMBStoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSRMBStoreProductInfo Products = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Products:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_products()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Products;
        if (input->ExpectTag(16)) goto parse_BoughtIDs;
        break;
      }

      // repeated uint32 BoughtIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoughtIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_boughtids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_boughtids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BoughtIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryRMBStoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSRMBStoreProductInfo Products = 1;
  for (int i = 0; i < this->products_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->products(i), output);
  }

  // repeated uint32 BoughtIDs = 2;
  for (int i = 0; i < this->boughtids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->boughtids(i), output);
  }

}

int CSQueryRMBStoreRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSRMBStoreProductInfo Products = 1;
  total_size += 1 * this->products_size();
  for (int i = 0; i < this->products_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->products(i));
  }

  // repeated uint32 BoughtIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->boughtids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->boughtids(i));
    }
    total_size += 1 * this->boughtids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryRMBStoreRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryRMBStoreRsp*>(&from));
}

void CSQueryRMBStoreRsp::MergeFrom(const CSQueryRMBStoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  products_.MergeFrom(from.products_);
  boughtids_.MergeFrom(from.boughtids_);
}

void CSQueryRMBStoreRsp::CopyFrom(const CSQueryRMBStoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryRMBStoreRsp::IsInitialized() const {

  for (int i = 0; i < products_size(); i++) {
    if (!this->products(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryRMBStoreRsp::Swap(CSQueryRMBStoreRsp* other) {
  if (other != this) {
    products_.Swap(&other->products_);
    boughtids_.Swap(&other->boughtids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryRMBStoreRsp::GetTypeName() const {
  return "vmsg.CSQueryRMBStoreRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryRMBStoreItemRqst::kProductIDFieldNumber;
#endif  // !_MSC_VER

CSQueryRMBStoreItemRqst::CSQueryRMBStoreItemRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryRMBStoreItemRqst::InitAsDefaultInstance() {
}

CSQueryRMBStoreItemRqst::CSQueryRMBStoreItemRqst(const CSQueryRMBStoreItemRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryRMBStoreItemRqst::SharedCtor() {
  _cached_size_ = 0;
  productid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryRMBStoreItemRqst::~CSQueryRMBStoreItemRqst() {
  SharedDtor();
}

void CSQueryRMBStoreItemRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryRMBStoreItemRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryRMBStoreItemRqst& CSQueryRMBStoreItemRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryRMBStoreItemRqst* CSQueryRMBStoreItemRqst::default_instance_ = NULL;

CSQueryRMBStoreItemRqst* CSQueryRMBStoreItemRqst::New() const {
  return new CSQueryRMBStoreItemRqst;
}

void CSQueryRMBStoreItemRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    productid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryRMBStoreItemRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryRMBStoreItemRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ProductID = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->productid(), output);
  }

}

int CSQueryRMBStoreItemRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->productid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryRMBStoreItemRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryRMBStoreItemRqst*>(&from));
}

void CSQueryRMBStoreItemRqst::MergeFrom(const CSQueryRMBStoreItemRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
  }
}

void CSQueryRMBStoreItemRqst::CopyFrom(const CSQueryRMBStoreItemRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryRMBStoreItemRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSQueryRMBStoreItemRqst::Swap(CSQueryRMBStoreItemRqst* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryRMBStoreItemRqst::GetTypeName() const {
  return "vmsg.CSQueryRMBStoreItemRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryRMBStoreItemRsp::kProductInfoFieldNumber;
#endif  // !_MSC_VER

CSQueryRMBStoreItemRsp::CSQueryRMBStoreItemRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryRMBStoreItemRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  productinfo_ = const_cast< ::vmsg::CSRMBStoreProductInfo*>(
      ::vmsg::CSRMBStoreProductInfo::internal_default_instance());
#else
  productinfo_ = const_cast< ::vmsg::CSRMBStoreProductInfo*>(&::vmsg::CSRMBStoreProductInfo::default_instance());
#endif
}

CSQueryRMBStoreItemRsp::CSQueryRMBStoreItemRsp(const CSQueryRMBStoreItemRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryRMBStoreItemRsp::SharedCtor() {
  _cached_size_ = 0;
  productinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryRMBStoreItemRsp::~CSQueryRMBStoreItemRsp() {
  SharedDtor();
}

void CSQueryRMBStoreItemRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete productinfo_;
  }
}

void CSQueryRMBStoreItemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryRMBStoreItemRsp& CSQueryRMBStoreItemRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryRMBStoreItemRsp* CSQueryRMBStoreItemRsp::default_instance_ = NULL;

CSQueryRMBStoreItemRsp* CSQueryRMBStoreItemRsp::New() const {
  return new CSQueryRMBStoreItemRsp;
}

void CSQueryRMBStoreItemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productinfo()) {
      if (productinfo_ != NULL) productinfo_->::vmsg::CSRMBStoreProductInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryRMBStoreItemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSRMBStoreProductInfo ProductInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_productinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryRMBStoreItemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSRMBStoreProductInfo ProductInfo = 1;
  if (has_productinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->productinfo(), output);
  }

}

int CSQueryRMBStoreItemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSRMBStoreProductInfo ProductInfo = 1;
    if (has_productinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->productinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryRMBStoreItemRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryRMBStoreItemRsp*>(&from));
}

void CSQueryRMBStoreItemRsp::MergeFrom(const CSQueryRMBStoreItemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productinfo()) {
      mutable_productinfo()->::vmsg::CSRMBStoreProductInfo::MergeFrom(from.productinfo());
    }
  }
}

void CSQueryRMBStoreItemRsp::CopyFrom(const CSQueryRMBStoreItemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryRMBStoreItemRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_productinfo()) {
    if (!this->productinfo().IsInitialized()) return false;
  }
  return true;
}

void CSQueryRMBStoreItemRsp::Swap(CSQueryRMBStoreItemRsp* other) {
  if (other != this) {
    std::swap(productinfo_, other->productinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryRMBStoreItemRsp::GetTypeName() const {
  return "vmsg.CSQueryRMBStoreItemRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAppAuthedBuyRqst::kProductIDFieldNumber;
const int CSAppAuthedBuyRqst::kCountFieldNumber;
#endif  // !_MSC_VER

CSAppAuthedBuyRqst::CSAppAuthedBuyRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAppAuthedBuyRqst::InitAsDefaultInstance() {
}

CSAppAuthedBuyRqst::CSAppAuthedBuyRqst(const CSAppAuthedBuyRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAppAuthedBuyRqst::SharedCtor() {
  _cached_size_ = 0;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAppAuthedBuyRqst::~CSAppAuthedBuyRqst() {
  SharedDtor();
}

void CSAppAuthedBuyRqst::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAppAuthedBuyRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAppAuthedBuyRqst& CSAppAuthedBuyRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSAppAuthedBuyRqst* CSAppAuthedBuyRqst::default_instance_ = NULL;

CSAppAuthedBuyRqst* CSAppAuthedBuyRqst::New() const {
  return new CSAppAuthedBuyRqst;
}

void CSAppAuthedBuyRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAppAuthedBuyRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // required uint32 Count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAppAuthedBuyRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ProductID = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->productid(), output);
  }

  // required uint32 Count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

}

int CSAppAuthedBuyRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // required uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAppAuthedBuyRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAppAuthedBuyRqst*>(&from));
}

void CSAppAuthedBuyRqst::MergeFrom(const CSAppAuthedBuyRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void CSAppAuthedBuyRqst::CopyFrom(const CSAppAuthedBuyRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAppAuthedBuyRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAppAuthedBuyRqst::Swap(CSAppAuthedBuyRqst* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAppAuthedBuyRqst::GetTypeName() const {
  return "vmsg.CSAppAuthedBuyRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAppAuthedBuyRsp::kOrderIDFieldNumber;
const int CSAppAuthedBuyRsp::kProductIDFieldNumber;
const int CSAppAuthedBuyRsp::kCountFieldNumber;
const int CSAppAuthedBuyRsp::kTotalMoneyAmountFieldNumber;
#endif  // !_MSC_VER

CSAppAuthedBuyRsp::CSAppAuthedBuyRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAppAuthedBuyRsp::InitAsDefaultInstance() {
}

CSAppAuthedBuyRsp::CSAppAuthedBuyRsp(const CSAppAuthedBuyRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAppAuthedBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  totalmoneyamount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAppAuthedBuyRsp::~CSAppAuthedBuyRsp() {
  SharedDtor();
}

void CSAppAuthedBuyRsp::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAppAuthedBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAppAuthedBuyRsp& CSAppAuthedBuyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSAppAuthedBuyRsp* CSAppAuthedBuyRsp::default_instance_ = NULL;

CSAppAuthedBuyRsp* CSAppAuthedBuyRsp::New() const {
  return new CSAppAuthedBuyRsp;
}

void CSAppAuthedBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    count_ = 0u;
    totalmoneyamount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAppAuthedBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string OrderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ProductID;
        break;
      }

      // required string ProductID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ProductID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Count;
        break;
      }

      // required uint32 Count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalMoneyAmount;
        break;
      }

      // required uint32 TotalMoneyAmount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalMoneyAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalmoneyamount_)));
          set_has_totalmoneyamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAppAuthedBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string OrderID = 1;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->orderid(), output);
  }

  // required string ProductID = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productid(), output);
  }

  // required uint32 Count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required uint32 TotalMoneyAmount = 4;
  if (has_totalmoneyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalmoneyamount(), output);
  }

}

int CSAppAuthedBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string OrderID = 1;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required string ProductID = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // required uint32 Count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 TotalMoneyAmount = 4;
    if (has_totalmoneyamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalmoneyamount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAppAuthedBuyRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAppAuthedBuyRsp*>(&from));
}

void CSAppAuthedBuyRsp::MergeFrom(const CSAppAuthedBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_totalmoneyamount()) {
      set_totalmoneyamount(from.totalmoneyamount());
    }
  }
}

void CSAppAuthedBuyRsp::CopyFrom(const CSAppAuthedBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAppAuthedBuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSAppAuthedBuyRsp::Swap(CSAppAuthedBuyRsp* other) {
  if (other != this) {
    std::swap(orderid_, other->orderid_);
    std::swap(productid_, other->productid_);
    std::swap(count_, other->count_);
    std::swap(totalmoneyamount_, other->totalmoneyamount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAppAuthedBuyRsp::GetTypeName() const {
  return "vmsg.CSAppAuthedBuyRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAppAuthedBuySucceedRqst::kProductIDFieldNumber;
const int CSAppAuthedBuySucceedRqst::kTotalMoneyAmountFieldNumber;
const int CSAppAuthedBuySucceedRqst::kOrderIDFieldNumber;
const int CSAppAuthedBuySucceedRqst::kCountFieldNumber;
#endif  // !_MSC_VER

CSAppAuthedBuySucceedRqst::CSAppAuthedBuySucceedRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAppAuthedBuySucceedRqst::InitAsDefaultInstance() {
}

CSAppAuthedBuySucceedRqst::CSAppAuthedBuySucceedRqst(const CSAppAuthedBuySucceedRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAppAuthedBuySucceedRqst::SharedCtor() {
  _cached_size_ = 0;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalmoneyamount_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAppAuthedBuySucceedRqst::~CSAppAuthedBuySucceedRqst() {
  SharedDtor();
}

void CSAppAuthedBuySucceedRqst::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAppAuthedBuySucceedRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAppAuthedBuySucceedRqst& CSAppAuthedBuySucceedRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSAppAuthedBuySucceedRqst* CSAppAuthedBuySucceedRqst::default_instance_ = NULL;

CSAppAuthedBuySucceedRqst* CSAppAuthedBuySucceedRqst::New() const {
  return new CSAppAuthedBuySucceedRqst;
}

void CSAppAuthedBuySucceedRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    totalmoneyamount_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAppAuthedBuySucceedRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ProductID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TotalMoneyAmount;
        break;
      }

      // required uint32 TotalMoneyAmount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalMoneyAmount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalmoneyamount_)));
          set_has_totalmoneyamount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_OrderID;
        break;
      }

      // required string OrderID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Count;
        break;
      }

      // required uint32 Count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAppAuthedBuySucceedRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ProductID = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->productid(), output);
  }

  // required uint32 TotalMoneyAmount = 2;
  if (has_totalmoneyamount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalmoneyamount(), output);
  }

  // required string OrderID = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // required uint32 Count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }

}

int CSAppAuthedBuySucceedRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ProductID = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // required uint32 TotalMoneyAmount = 2;
    if (has_totalmoneyamount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalmoneyamount());
    }

    // required string OrderID = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required uint32 Count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAppAuthedBuySucceedRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAppAuthedBuySucceedRqst*>(&from));
}

void CSAppAuthedBuySucceedRqst::MergeFrom(const CSAppAuthedBuySucceedRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_totalmoneyamount()) {
      set_totalmoneyamount(from.totalmoneyamount());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
}

void CSAppAuthedBuySucceedRqst::CopyFrom(const CSAppAuthedBuySucceedRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAppAuthedBuySucceedRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSAppAuthedBuySucceedRqst::Swap(CSAppAuthedBuySucceedRqst* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(totalmoneyamount_, other->totalmoneyamount_);
    std::swap(orderid_, other->orderid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAppAuthedBuySucceedRqst::GetTypeName() const {
  return "vmsg.CSAppAuthedBuySucceedRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGoldRequest::kBuyGoldRqstFieldNumber;
const int CSGoldRequest::kBuyRMBStoreRqstFieldNumber;
const int CSGoldRequest::kAppAuthedBuySucceedRqstFieldNumber;
const int CSGoldRequest::kAppAuthedBuyRqstFieldNumber;
const int CSGoldRequest::kQuerySingleItemRqstFieldNumber;
#endif  // !_MSC_VER

CSGoldRequest::CSGoldRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGoldRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buygold_rqst_ = const_cast< ::vmsg::CSBuyGoldRqst*>(
      ::vmsg::CSBuyGoldRqst::internal_default_instance());
#else
  buygold_rqst_ = const_cast< ::vmsg::CSBuyGoldRqst*>(&::vmsg::CSBuyGoldRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyrmbstore_rqst_ = const_cast< ::vmsg::CSBuyRMBStoreRqst*>(
      ::vmsg::CSBuyRMBStoreRqst::internal_default_instance());
#else
  buyrmbstore_rqst_ = const_cast< ::vmsg::CSBuyRMBStoreRqst*>(&::vmsg::CSBuyRMBStoreRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  appauthedbuysucceed_rqst_ = const_cast< ::vmsg::CSAppAuthedBuySucceedRqst*>(
      ::vmsg::CSAppAuthedBuySucceedRqst::internal_default_instance());
#else
  appauthedbuysucceed_rqst_ = const_cast< ::vmsg::CSAppAuthedBuySucceedRqst*>(&::vmsg::CSAppAuthedBuySucceedRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  appauthedbuy_rqst_ = const_cast< ::vmsg::CSAppAuthedBuyRqst*>(
      ::vmsg::CSAppAuthedBuyRqst::internal_default_instance());
#else
  appauthedbuy_rqst_ = const_cast< ::vmsg::CSAppAuthedBuyRqst*>(&::vmsg::CSAppAuthedBuyRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querysingleitem_rqst_ = const_cast< ::vmsg::CSQueryRMBStoreItemRqst*>(
      ::vmsg::CSQueryRMBStoreItemRqst::internal_default_instance());
#else
  querysingleitem_rqst_ = const_cast< ::vmsg::CSQueryRMBStoreItemRqst*>(&::vmsg::CSQueryRMBStoreItemRqst::default_instance());
#endif
}

CSGoldRequest::CSGoldRequest(const CSGoldRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGoldRequest::SharedCtor() {
  _cached_size_ = 0;
  buygold_rqst_ = NULL;
  buyrmbstore_rqst_ = NULL;
  appauthedbuysucceed_rqst_ = NULL;
  appauthedbuy_rqst_ = NULL;
  querysingleitem_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGoldRequest::~CSGoldRequest() {
  SharedDtor();
}

void CSGoldRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete buygold_rqst_;
    delete buyrmbstore_rqst_;
    delete appauthedbuysucceed_rqst_;
    delete appauthedbuy_rqst_;
    delete querysingleitem_rqst_;
  }
}

void CSGoldRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGoldRequest& CSGoldRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSGoldRequest* CSGoldRequest::default_instance_ = NULL;

CSGoldRequest* CSGoldRequest::New() const {
  return new CSGoldRequest;
}

void CSGoldRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buygold_rqst()) {
      if (buygold_rqst_ != NULL) buygold_rqst_->::vmsg::CSBuyGoldRqst::Clear();
    }
    if (has_buyrmbstore_rqst()) {
      if (buyrmbstore_rqst_ != NULL) buyrmbstore_rqst_->::vmsg::CSBuyRMBStoreRqst::Clear();
    }
    if (has_appauthedbuysucceed_rqst()) {
      if (appauthedbuysucceed_rqst_ != NULL) appauthedbuysucceed_rqst_->::vmsg::CSAppAuthedBuySucceedRqst::Clear();
    }
    if (has_appauthedbuy_rqst()) {
      if (appauthedbuy_rqst_ != NULL) appauthedbuy_rqst_->::vmsg::CSAppAuthedBuyRqst::Clear();
    }
    if (has_querysingleitem_rqst()) {
      if (querysingleitem_rqst_ != NULL) querysingleitem_rqst_->::vmsg::CSQueryRMBStoreItemRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGoldRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSBuyGoldRqst BuyGold_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buygold_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BuyRMBStore_Rqst;
        break;
      }

      // optional .vmsg.CSBuyRMBStoreRqst BuyRMBStore_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyRMBStore_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyrmbstore_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AppAuthedBuySucceed_Rqst;
        break;
      }

      // optional .vmsg.CSAppAuthedBuySucceedRqst AppAuthedBuySucceed_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppAuthedBuySucceed_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appauthedbuysucceed_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_AppAuthedBuy_Rqst;
        break;
      }

      // optional .vmsg.CSAppAuthedBuyRqst AppAuthedBuy_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppAuthedBuy_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appauthedbuy_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_QuerySingleItem_Rqst;
        break;
      }

      // optional .vmsg.CSQueryRMBStoreItemRqst QuerySingleItem_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuerySingleItem_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querysingleitem_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGoldRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSBuyGoldRqst BuyGold_Rqst = 1;
  if (has_buygold_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->buygold_rqst(), output);
  }

  // optional .vmsg.CSBuyRMBStoreRqst BuyRMBStore_Rqst = 2;
  if (has_buyrmbstore_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->buyrmbstore_rqst(), output);
  }

  // optional .vmsg.CSAppAuthedBuySucceedRqst AppAuthedBuySucceed_Rqst = 3;
  if (has_appauthedbuysucceed_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->appauthedbuysucceed_rqst(), output);
  }

  // optional .vmsg.CSAppAuthedBuyRqst AppAuthedBuy_Rqst = 4;
  if (has_appauthedbuy_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->appauthedbuy_rqst(), output);
  }

  // optional .vmsg.CSQueryRMBStoreItemRqst QuerySingleItem_Rqst = 5;
  if (has_querysingleitem_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->querysingleitem_rqst(), output);
  }

}

int CSGoldRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSBuyGoldRqst BuyGold_Rqst = 1;
    if (has_buygold_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buygold_rqst());
    }

    // optional .vmsg.CSBuyRMBStoreRqst BuyRMBStore_Rqst = 2;
    if (has_buyrmbstore_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyrmbstore_rqst());
    }

    // optional .vmsg.CSAppAuthedBuySucceedRqst AppAuthedBuySucceed_Rqst = 3;
    if (has_appauthedbuysucceed_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appauthedbuysucceed_rqst());
    }

    // optional .vmsg.CSAppAuthedBuyRqst AppAuthedBuy_Rqst = 4;
    if (has_appauthedbuy_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appauthedbuy_rqst());
    }

    // optional .vmsg.CSQueryRMBStoreItemRqst QuerySingleItem_Rqst = 5;
    if (has_querysingleitem_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querysingleitem_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGoldRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGoldRequest*>(&from));
}

void CSGoldRequest::MergeFrom(const CSGoldRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buygold_rqst()) {
      mutable_buygold_rqst()->::vmsg::CSBuyGoldRqst::MergeFrom(from.buygold_rqst());
    }
    if (from.has_buyrmbstore_rqst()) {
      mutable_buyrmbstore_rqst()->::vmsg::CSBuyRMBStoreRqst::MergeFrom(from.buyrmbstore_rqst());
    }
    if (from.has_appauthedbuysucceed_rqst()) {
      mutable_appauthedbuysucceed_rqst()->::vmsg::CSAppAuthedBuySucceedRqst::MergeFrom(from.appauthedbuysucceed_rqst());
    }
    if (from.has_appauthedbuy_rqst()) {
      mutable_appauthedbuy_rqst()->::vmsg::CSAppAuthedBuyRqst::MergeFrom(from.appauthedbuy_rqst());
    }
    if (from.has_querysingleitem_rqst()) {
      mutable_querysingleitem_rqst()->::vmsg::CSQueryRMBStoreItemRqst::MergeFrom(from.querysingleitem_rqst());
    }
  }
}

void CSGoldRequest::CopyFrom(const CSGoldRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGoldRequest::IsInitialized() const {

  if (has_buygold_rqst()) {
    if (!this->buygold_rqst().IsInitialized()) return false;
  }
  if (has_buyrmbstore_rqst()) {
    if (!this->buyrmbstore_rqst().IsInitialized()) return false;
  }
  if (has_appauthedbuysucceed_rqst()) {
    if (!this->appauthedbuysucceed_rqst().IsInitialized()) return false;
  }
  if (has_appauthedbuy_rqst()) {
    if (!this->appauthedbuy_rqst().IsInitialized()) return false;
  }
  if (has_querysingleitem_rqst()) {
    if (!this->querysingleitem_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSGoldRequest::Swap(CSGoldRequest* other) {
  if (other != this) {
    std::swap(buygold_rqst_, other->buygold_rqst_);
    std::swap(buyrmbstore_rqst_, other->buyrmbstore_rqst_);
    std::swap(appauthedbuysucceed_rqst_, other->appauthedbuysucceed_rqst_);
    std::swap(appauthedbuy_rqst_, other->appauthedbuy_rqst_);
    std::swap(querysingleitem_rqst_, other->querysingleitem_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGoldRequest::GetTypeName() const {
  return "vmsg.CSGoldRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGoldRespond::kQueryGoldRspFieldNumber;
const int CSGoldRespond::kGoldNotifyFieldNumber;
const int CSGoldRespond::kBuyGoldRspFieldNumber;
const int CSGoldRespond::kBuyRMBStoreRspFieldNumber;
const int CSGoldRespond::kQueryRMBStoreRspFieldNumber;
const int CSGoldRespond::kAppAuthedBuyRspFieldNumber;
const int CSGoldRespond::kQuerySingleItemRspFieldNumber;
#endif  // !_MSC_VER

CSGoldRespond::CSGoldRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGoldRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querygold_rsp_ = const_cast< ::vmsg::CSGoldInfo*>(
      ::vmsg::CSGoldInfo::internal_default_instance());
#else
  querygold_rsp_ = const_cast< ::vmsg::CSGoldInfo*>(&::vmsg::CSGoldInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gold_notify_ = const_cast< ::vmsg::CSGoldInfo*>(
      ::vmsg::CSGoldInfo::internal_default_instance());
#else
  gold_notify_ = const_cast< ::vmsg::CSGoldInfo*>(&::vmsg::CSGoldInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buygold_rsp_ = const_cast< ::vmsg::CSBuyGoldRsp*>(
      ::vmsg::CSBuyGoldRsp::internal_default_instance());
#else
  buygold_rsp_ = const_cast< ::vmsg::CSBuyGoldRsp*>(&::vmsg::CSBuyGoldRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buyrmbstore_rsp_ = const_cast< ::vmsg::CSBuyRMBStoreRsp*>(
      ::vmsg::CSBuyRMBStoreRsp::internal_default_instance());
#else
  buyrmbstore_rsp_ = const_cast< ::vmsg::CSBuyRMBStoreRsp*>(&::vmsg::CSBuyRMBStoreRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryrmbstore_rsp_ = const_cast< ::vmsg::CSQueryRMBStoreRsp*>(
      ::vmsg::CSQueryRMBStoreRsp::internal_default_instance());
#else
  queryrmbstore_rsp_ = const_cast< ::vmsg::CSQueryRMBStoreRsp*>(&::vmsg::CSQueryRMBStoreRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  appauthedbuy_rsp_ = const_cast< ::vmsg::CSAppAuthedBuyRsp*>(
      ::vmsg::CSAppAuthedBuyRsp::internal_default_instance());
#else
  appauthedbuy_rsp_ = const_cast< ::vmsg::CSAppAuthedBuyRsp*>(&::vmsg::CSAppAuthedBuyRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querysingleitem_rsp_ = const_cast< ::vmsg::CSQueryRMBStoreItemRsp*>(
      ::vmsg::CSQueryRMBStoreItemRsp::internal_default_instance());
#else
  querysingleitem_rsp_ = const_cast< ::vmsg::CSQueryRMBStoreItemRsp*>(&::vmsg::CSQueryRMBStoreItemRsp::default_instance());
#endif
}

CSGoldRespond::CSGoldRespond(const CSGoldRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGoldRespond::SharedCtor() {
  _cached_size_ = 0;
  querygold_rsp_ = NULL;
  gold_notify_ = NULL;
  buygold_rsp_ = NULL;
  buyrmbstore_rsp_ = NULL;
  queryrmbstore_rsp_ = NULL;
  appauthedbuy_rsp_ = NULL;
  querysingleitem_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGoldRespond::~CSGoldRespond() {
  SharedDtor();
}

void CSGoldRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete querygold_rsp_;
    delete gold_notify_;
    delete buygold_rsp_;
    delete buyrmbstore_rsp_;
    delete queryrmbstore_rsp_;
    delete appauthedbuy_rsp_;
    delete querysingleitem_rsp_;
  }
}

void CSGoldRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGoldRespond& CSGoldRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGoldMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGoldMsg_2eproto();
#endif
  return *default_instance_;
}

CSGoldRespond* CSGoldRespond::default_instance_ = NULL;

CSGoldRespond* CSGoldRespond::New() const {
  return new CSGoldRespond;
}

void CSGoldRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_querygold_rsp()) {
      if (querygold_rsp_ != NULL) querygold_rsp_->::vmsg::CSGoldInfo::Clear();
    }
    if (has_gold_notify()) {
      if (gold_notify_ != NULL) gold_notify_->::vmsg::CSGoldInfo::Clear();
    }
    if (has_buygold_rsp()) {
      if (buygold_rsp_ != NULL) buygold_rsp_->::vmsg::CSBuyGoldRsp::Clear();
    }
    if (has_buyrmbstore_rsp()) {
      if (buyrmbstore_rsp_ != NULL) buyrmbstore_rsp_->::vmsg::CSBuyRMBStoreRsp::Clear();
    }
    if (has_queryrmbstore_rsp()) {
      if (queryrmbstore_rsp_ != NULL) queryrmbstore_rsp_->::vmsg::CSQueryRMBStoreRsp::Clear();
    }
    if (has_appauthedbuy_rsp()) {
      if (appauthedbuy_rsp_ != NULL) appauthedbuy_rsp_->::vmsg::CSAppAuthedBuyRsp::Clear();
    }
    if (has_querysingleitem_rsp()) {
      if (querysingleitem_rsp_ != NULL) querysingleitem_rsp_->::vmsg::CSQueryRMBStoreItemRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGoldRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSGoldInfo QueryGold_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querygold_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Gold_Notify;
        break;
      }

      // optional .vmsg.CSGoldInfo Gold_Notify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Gold_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gold_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BuyGold_Rsp;
        break;
      }

      // optional .vmsg.CSBuyGoldRsp BuyGold_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyGold_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buygold_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BuyRMBStore_Rsp;
        break;
      }

      // optional .vmsg.CSBuyRMBStoreRsp BuyRMBStore_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyRMBStore_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buyrmbstore_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_QueryRMBStore_Rsp;
        break;
      }

      // optional .vmsg.CSQueryRMBStoreRsp QueryRMBStore_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryRMBStore_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryrmbstore_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AppAuthedBuy_Rsp;
        break;
      }

      // optional .vmsg.CSAppAuthedBuyRsp AppAuthedBuy_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AppAuthedBuy_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_appauthedbuy_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_QuerySingleItem_Rsp;
        break;
      }

      // optional .vmsg.CSQueryRMBStoreItemRsp QuerySingleItem_Rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuerySingleItem_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querysingleitem_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGoldRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSGoldInfo QueryGold_Rsp = 1;
  if (has_querygold_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->querygold_rsp(), output);
  }

  // optional .vmsg.CSGoldInfo Gold_Notify = 2;
  if (has_gold_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->gold_notify(), output);
  }

  // optional .vmsg.CSBuyGoldRsp BuyGold_Rsp = 3;
  if (has_buygold_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->buygold_rsp(), output);
  }

  // optional .vmsg.CSBuyRMBStoreRsp BuyRMBStore_Rsp = 4;
  if (has_buyrmbstore_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->buyrmbstore_rsp(), output);
  }

  // optional .vmsg.CSQueryRMBStoreRsp QueryRMBStore_Rsp = 5;
  if (has_queryrmbstore_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->queryrmbstore_rsp(), output);
  }

  // optional .vmsg.CSAppAuthedBuyRsp AppAuthedBuy_Rsp = 6;
  if (has_appauthedbuy_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->appauthedbuy_rsp(), output);
  }

  // optional .vmsg.CSQueryRMBStoreItemRsp QuerySingleItem_Rsp = 7;
  if (has_querysingleitem_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->querysingleitem_rsp(), output);
  }

}

int CSGoldRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSGoldInfo QueryGold_Rsp = 1;
    if (has_querygold_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querygold_rsp());
    }

    // optional .vmsg.CSGoldInfo Gold_Notify = 2;
    if (has_gold_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gold_notify());
    }

    // optional .vmsg.CSBuyGoldRsp BuyGold_Rsp = 3;
    if (has_buygold_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buygold_rsp());
    }

    // optional .vmsg.CSBuyRMBStoreRsp BuyRMBStore_Rsp = 4;
    if (has_buyrmbstore_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buyrmbstore_rsp());
    }

    // optional .vmsg.CSQueryRMBStoreRsp QueryRMBStore_Rsp = 5;
    if (has_queryrmbstore_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryrmbstore_rsp());
    }

    // optional .vmsg.CSAppAuthedBuyRsp AppAuthedBuy_Rsp = 6;
    if (has_appauthedbuy_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->appauthedbuy_rsp());
    }

    // optional .vmsg.CSQueryRMBStoreItemRsp QuerySingleItem_Rsp = 7;
    if (has_querysingleitem_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querysingleitem_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGoldRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGoldRespond*>(&from));
}

void CSGoldRespond::MergeFrom(const CSGoldRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_querygold_rsp()) {
      mutable_querygold_rsp()->::vmsg::CSGoldInfo::MergeFrom(from.querygold_rsp());
    }
    if (from.has_gold_notify()) {
      mutable_gold_notify()->::vmsg::CSGoldInfo::MergeFrom(from.gold_notify());
    }
    if (from.has_buygold_rsp()) {
      mutable_buygold_rsp()->::vmsg::CSBuyGoldRsp::MergeFrom(from.buygold_rsp());
    }
    if (from.has_buyrmbstore_rsp()) {
      mutable_buyrmbstore_rsp()->::vmsg::CSBuyRMBStoreRsp::MergeFrom(from.buyrmbstore_rsp());
    }
    if (from.has_queryrmbstore_rsp()) {
      mutable_queryrmbstore_rsp()->::vmsg::CSQueryRMBStoreRsp::MergeFrom(from.queryrmbstore_rsp());
    }
    if (from.has_appauthedbuy_rsp()) {
      mutable_appauthedbuy_rsp()->::vmsg::CSAppAuthedBuyRsp::MergeFrom(from.appauthedbuy_rsp());
    }
    if (from.has_querysingleitem_rsp()) {
      mutable_querysingleitem_rsp()->::vmsg::CSQueryRMBStoreItemRsp::MergeFrom(from.querysingleitem_rsp());
    }
  }
}

void CSGoldRespond::CopyFrom(const CSGoldRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGoldRespond::IsInitialized() const {

  if (has_querygold_rsp()) {
    if (!this->querygold_rsp().IsInitialized()) return false;
  }
  if (has_gold_notify()) {
    if (!this->gold_notify().IsInitialized()) return false;
  }
  if (has_buygold_rsp()) {
    if (!this->buygold_rsp().IsInitialized()) return false;
  }
  if (has_buyrmbstore_rsp()) {
    if (!this->buyrmbstore_rsp().IsInitialized()) return false;
  }
  if (has_queryrmbstore_rsp()) {
    if (!this->queryrmbstore_rsp().IsInitialized()) return false;
  }
  if (has_appauthedbuy_rsp()) {
    if (!this->appauthedbuy_rsp().IsInitialized()) return false;
  }
  if (has_querysingleitem_rsp()) {
    if (!this->querysingleitem_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSGoldRespond::Swap(CSGoldRespond* other) {
  if (other != this) {
    std::swap(querygold_rsp_, other->querygold_rsp_);
    std::swap(gold_notify_, other->gold_notify_);
    std::swap(buygold_rsp_, other->buygold_rsp_);
    std::swap(buyrmbstore_rsp_, other->buyrmbstore_rsp_);
    std::swap(queryrmbstore_rsp_, other->queryrmbstore_rsp_);
    std::swap(appauthedbuy_rsp_, other->appauthedbuy_rsp_);
    std::swap(querysingleitem_rsp_, other->querysingleitem_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGoldRespond::GetTypeName() const {
  return "vmsg.CSGoldRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
