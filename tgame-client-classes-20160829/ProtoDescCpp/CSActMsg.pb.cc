// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSActMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSActMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSActMsg_2eproto() {
  delete CSManualActPart::default_instance_;
  delete CSWorldBossActPart::default_instance_;
  delete CSActInfo::default_instance_;
  delete CSActStatChange::default_instance_;
  delete CSActQueryRsp::default_instance_;
  delete CSActRequest::default_instance_;
  delete CSActRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSActMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSActMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSManualActPart::default_instance_ = new CSManualActPart();
  CSWorldBossActPart::default_instance_ = new CSWorldBossActPart();
  CSActInfo::default_instance_ = new CSActInfo();
  CSActStatChange::default_instance_ = new CSActStatChange();
  CSActQueryRsp::default_instance_ = new CSActQueryRsp();
  CSActRequest::default_instance_ = new CSActRequest();
  CSActRespond::default_instance_ = new CSActRespond();
  CSManualActPart::default_instance_->InitAsDefaultInstance();
  CSWorldBossActPart::default_instance_->InitAsDefaultInstance();
  CSActInfo::default_instance_->InitAsDefaultInstance();
  CSActStatChange::default_instance_->InitAsDefaultInstance();
  CSActQueryRsp::default_instance_->InitAsDefaultInstance();
  CSActRequest::default_instance_->InitAsDefaultInstance();
  CSActRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSActMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSActMsg_2eproto_once_);
void protobuf_AddDesc_CSActMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSActMsg_2eproto_once_,
                 &protobuf_AddDesc_CSActMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSActMsg_2eproto {
  StaticDescriptorInitializer_CSActMsg_2eproto() {
    protobuf_AddDesc_CSActMsg_2eproto();
  }
} static_descriptor_initializer_CSActMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSManualActPart::kManualCntFieldNumber;
#endif  // !_MSC_VER

CSManualActPart::CSManualActPart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSManualActPart::InitAsDefaultInstance() {
}

CSManualActPart::CSManualActPart(const CSManualActPart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSManualActPart::SharedCtor() {
  _cached_size_ = 0;
  manualcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSManualActPart::~CSManualActPart() {
  SharedDtor();
}

void CSManualActPart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSManualActPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSManualActPart& CSManualActPart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSManualActPart* CSManualActPart::default_instance_ = NULL;

CSManualActPart* CSManualActPart::New() const {
  return new CSManualActPart;
}

void CSManualActPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manualcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSManualActPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ManualCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manualcnt_)));
          set_has_manualcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSManualActPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ManualCnt = 1;
  if (has_manualcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manualcnt(), output);
  }

}

int CSManualActPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ManualCnt = 1;
    if (has_manualcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manualcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSManualActPart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSManualActPart*>(&from));
}

void CSManualActPart::MergeFrom(const CSManualActPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manualcnt()) {
      set_manualcnt(from.manualcnt());
    }
  }
}

void CSManualActPart::CopyFrom(const CSManualActPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSManualActPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSManualActPart::Swap(CSManualActPart* other) {
  if (other != this) {
    std::swap(manualcnt_, other->manualcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSManualActPart::GetTypeName() const {
  return "vmsg.CSManualActPart";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWorldBossActPart::kDelegatedFieldNumber;
#endif  // !_MSC_VER

CSWorldBossActPart::CSWorldBossActPart()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWorldBossActPart::InitAsDefaultInstance() {
}

CSWorldBossActPart::CSWorldBossActPart(const CSWorldBossActPart& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWorldBossActPart::SharedCtor() {
  _cached_size_ = 0;
  delegated_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWorldBossActPart::~CSWorldBossActPart() {
  SharedDtor();
}

void CSWorldBossActPart::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWorldBossActPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWorldBossActPart& CSWorldBossActPart::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSWorldBossActPart* CSWorldBossActPart::default_instance_ = NULL;

CSWorldBossActPart* CSWorldBossActPart::New() const {
  return new CSWorldBossActPart;
}

void CSWorldBossActPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delegated_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWorldBossActPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Delegated = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delegated_)));
          set_has_delegated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWorldBossActPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Delegated = 1;
  if (has_delegated()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->delegated(), output);
  }

}

int CSWorldBossActPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Delegated = 1;
    if (has_delegated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delegated());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWorldBossActPart::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWorldBossActPart*>(&from));
}

void CSWorldBossActPart::MergeFrom(const CSWorldBossActPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delegated()) {
      set_delegated(from.delegated());
    }
  }
}

void CSWorldBossActPart::CopyFrom(const CSWorldBossActPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWorldBossActPart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSWorldBossActPart::Swap(CSWorldBossActPart* other) {
  if (other != this) {
    std::swap(delegated_, other->delegated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWorldBossActPart::GetTypeName() const {
  return "vmsg.CSWorldBossActPart";
}


// ===================================================================

#ifndef _MSC_VER
const int CSActInfo::kActIDFieldNumber;
const int CSActInfo::kActStatFieldNumber;
const int CSActInfo::kStartTimeFieldNumber;
const int CSActInfo::kOverTimeFieldNumber;
const int CSActInfo::kManualActFieldNumber;
const int CSActInfo::kWorldBossActFieldNumber;
#endif  // !_MSC_VER

CSActInfo::CSActInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSActInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  manualact_ = const_cast< ::vmsg::CSManualActPart*>(
      ::vmsg::CSManualActPart::internal_default_instance());
#else
  manualact_ = const_cast< ::vmsg::CSManualActPart*>(&::vmsg::CSManualActPart::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  worldbossact_ = const_cast< ::vmsg::CSWorldBossActPart*>(
      ::vmsg::CSWorldBossActPart::internal_default_instance());
#else
  worldbossact_ = const_cast< ::vmsg::CSWorldBossActPart*>(&::vmsg::CSWorldBossActPart::default_instance());
#endif
}

CSActInfo::CSActInfo(const CSActInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSActInfo::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0u;
  actstat_ = 0u;
  starttime_ = 0;
  overtime_ = 0;
  manualact_ = NULL;
  worldbossact_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSActInfo::~CSActInfo() {
  SharedDtor();
}

void CSActInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete manualact_;
    delete worldbossact_;
  }
}

void CSActInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSActInfo& CSActInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSActInfo* CSActInfo::default_instance_ = NULL;

CSActInfo* CSActInfo::New() const {
  return new CSActInfo;
}

void CSActInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = 0u;
    actstat_ = 0u;
    starttime_ = 0;
    overtime_ = 0;
    if (has_manualact()) {
      if (manualact_ != NULL) manualact_->::vmsg::CSManualActPart::Clear();
    }
    if (has_worldbossact()) {
      if (worldbossact_ != NULL) worldbossact_->::vmsg::CSWorldBossActPart::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSActInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ActID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActStat;
        break;
      }

      // required uint32 ActStat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actstat_)));
          set_has_actstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StartTime;
        break;
      }

      // required int32 StartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_OverTime;
        break;
      }

      // required int32 OverTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overtime_)));
          set_has_overtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ManualAct;
        break;
      }

      // optional .vmsg.CSManualActPart ManualAct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ManualAct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manualact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_WorldBossAct;
        break;
      }

      // optional .vmsg.CSWorldBossActPart WorldBossAct = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WorldBossAct:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_worldbossact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSActInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ActID = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actid(), output);
  }

  // required uint32 ActStat = 2;
  if (has_actstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actstat(), output);
  }

  // required int32 StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }

  // required int32 OverTime = 4;
  if (has_overtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->overtime(), output);
  }

  // optional .vmsg.CSManualActPart ManualAct = 5;
  if (has_manualact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->manualact(), output);
  }

  // optional .vmsg.CSWorldBossActPart WorldBossAct = 6;
  if (has_worldbossact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->worldbossact(), output);
  }

}

int CSActInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ActID = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // required uint32 ActStat = 2;
    if (has_actstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actstat());
    }

    // required int32 StartTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // required int32 OverTime = 4;
    if (has_overtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->overtime());
    }

    // optional .vmsg.CSManualActPart ManualAct = 5;
    if (has_manualact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manualact());
    }

    // optional .vmsg.CSWorldBossActPart WorldBossAct = 6;
    if (has_worldbossact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->worldbossact());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSActInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSActInfo*>(&from));
}

void CSActInfo::MergeFrom(const CSActInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_actstat()) {
      set_actstat(from.actstat());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_overtime()) {
      set_overtime(from.overtime());
    }
    if (from.has_manualact()) {
      mutable_manualact()->::vmsg::CSManualActPart::MergeFrom(from.manualact());
    }
    if (from.has_worldbossact()) {
      mutable_worldbossact()->::vmsg::CSWorldBossActPart::MergeFrom(from.worldbossact());
    }
  }
}

void CSActInfo::CopyFrom(const CSActInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_manualact()) {
    if (!this->manualact().IsInitialized()) return false;
  }
  if (has_worldbossact()) {
    if (!this->worldbossact().IsInitialized()) return false;
  }
  return true;
}

void CSActInfo::Swap(CSActInfo* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(actstat_, other->actstat_);
    std::swap(starttime_, other->starttime_);
    std::swap(overtime_, other->overtime_);
    std::swap(manualact_, other->manualact_);
    std::swap(worldbossact_, other->worldbossact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSActInfo::GetTypeName() const {
  return "vmsg.CSActInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSActStatChange::kActIDFieldNumber;
const int CSActStatChange::kActStatFieldNumber;
#endif  // !_MSC_VER

CSActStatChange::CSActStatChange()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSActStatChange::InitAsDefaultInstance() {
}

CSActStatChange::CSActStatChange(const CSActStatChange& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSActStatChange::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0u;
  actstat_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSActStatChange::~CSActStatChange() {
  SharedDtor();
}

void CSActStatChange::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSActStatChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSActStatChange& CSActStatChange::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSActStatChange* CSActStatChange::default_instance_ = NULL;

CSActStatChange* CSActStatChange::New() const {
  return new CSActStatChange;
}

void CSActStatChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = 0u;
    actstat_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSActStatChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ActID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActStat;
        break;
      }

      // required uint32 ActStat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actstat_)));
          set_has_actstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSActStatChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ActID = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actid(), output);
  }

  // required uint32 ActStat = 2;
  if (has_actstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->actstat(), output);
  }

}

int CSActStatChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ActID = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // required uint32 ActStat = 2;
    if (has_actstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actstat());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSActStatChange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSActStatChange*>(&from));
}

void CSActStatChange::MergeFrom(const CSActStatChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_actstat()) {
      set_actstat(from.actstat());
    }
  }
}

void CSActStatChange::CopyFrom(const CSActStatChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActStatChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSActStatChange::Swap(CSActStatChange* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(actstat_, other->actstat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSActStatChange::GetTypeName() const {
  return "vmsg.CSActStatChange";
}


// ===================================================================

#ifndef _MSC_VER
const int CSActQueryRsp::kActInfosFieldNumber;
#endif  // !_MSC_VER

CSActQueryRsp::CSActQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSActQueryRsp::InitAsDefaultInstance() {
}

CSActQueryRsp::CSActQueryRsp(const CSActQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSActQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSActQueryRsp::~CSActQueryRsp() {
  SharedDtor();
}

void CSActQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSActQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSActQueryRsp& CSActQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSActQueryRsp* CSActQueryRsp::default_instance_ = NULL;

CSActQueryRsp* CSActQueryRsp::New() const {
  return new CSActQueryRsp;
}

void CSActQueryRsp::Clear() {
  actinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSActQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSActInfo ActInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_actinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ActInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSActQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSActInfo ActInfos = 1;
  for (int i = 0; i < this->actinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->actinfos(i), output);
  }

}

int CSActQueryRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSActInfo ActInfos = 1;
  total_size += 1 * this->actinfos_size();
  for (int i = 0; i < this->actinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->actinfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSActQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSActQueryRsp*>(&from));
}

void CSActQueryRsp::MergeFrom(const CSActQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  actinfos_.MergeFrom(from.actinfos_);
}

void CSActQueryRsp::CopyFrom(const CSActQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActQueryRsp::IsInitialized() const {

  for (int i = 0; i < actinfos_size(); i++) {
    if (!this->actinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CSActQueryRsp::Swap(CSActQueryRsp* other) {
  if (other != this) {
    actinfos_.Swap(&other->actinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSActQueryRsp::GetTypeName() const {
  return "vmsg.CSActQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSActRequest::CSActRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSActRequest::InitAsDefaultInstance() {
}

CSActRequest::CSActRequest(const CSActRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSActRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSActRequest::~CSActRequest() {
  SharedDtor();
}

void CSActRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSActRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSActRequest& CSActRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSActRequest* CSActRequest::default_instance_ = NULL;

CSActRequest* CSActRequest::New() const {
  return new CSActRequest;
}

void CSActRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSActRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CSActRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CSActRequest::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSActRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSActRequest*>(&from));
}

void CSActRequest::MergeFrom(const CSActRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CSActRequest::CopyFrom(const CSActRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActRequest::IsInitialized() const {

  return true;
}

void CSActRequest::Swap(CSActRequest* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSActRequest::GetTypeName() const {
  return "vmsg.CSActRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSActRespond::kActQueryRspFieldNumber;
const int CSActRespond::kActStatNotifyFieldNumber;
#endif  // !_MSC_VER

CSActRespond::CSActRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSActRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actquery_rsp_ = const_cast< ::vmsg::CSActQueryRsp*>(
      ::vmsg::CSActQueryRsp::internal_default_instance());
#else
  actquery_rsp_ = const_cast< ::vmsg::CSActQueryRsp*>(&::vmsg::CSActQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actstat_notify_ = const_cast< ::vmsg::CSActStatChange*>(
      ::vmsg::CSActStatChange::internal_default_instance());
#else
  actstat_notify_ = const_cast< ::vmsg::CSActStatChange*>(&::vmsg::CSActStatChange::default_instance());
#endif
}

CSActRespond::CSActRespond(const CSActRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSActRespond::SharedCtor() {
  _cached_size_ = 0;
  actquery_rsp_ = NULL;
  actstat_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSActRespond::~CSActRespond() {
  SharedDtor();
}

void CSActRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete actquery_rsp_;
    delete actstat_notify_;
  }
}

void CSActRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSActRespond& CSActRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSActMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSActMsg_2eproto();
#endif
  return *default_instance_;
}

CSActRespond* CSActRespond::default_instance_ = NULL;

CSActRespond* CSActRespond::New() const {
  return new CSActRespond;
}

void CSActRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_actquery_rsp()) {
      if (actquery_rsp_ != NULL) actquery_rsp_->::vmsg::CSActQueryRsp::Clear();
    }
    if (has_actstat_notify()) {
      if (actstat_notify_ != NULL) actstat_notify_->::vmsg::CSActStatChange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSActRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSActQueryRsp ActQuery_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actquery_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ActStat_Notify;
        break;
      }

      // optional .vmsg.CSActStatChange ActStat_Notify = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActStat_Notify:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actstat_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSActRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSActQueryRsp ActQuery_Rsp = 1;
  if (has_actquery_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->actquery_rsp(), output);
  }

  // optional .vmsg.CSActStatChange ActStat_Notify = 2;
  if (has_actstat_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->actstat_notify(), output);
  }

}

int CSActRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSActQueryRsp ActQuery_Rsp = 1;
    if (has_actquery_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actquery_rsp());
    }

    // optional .vmsg.CSActStatChange ActStat_Notify = 2;
    if (has_actstat_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actstat_notify());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSActRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSActRespond*>(&from));
}

void CSActRespond::MergeFrom(const CSActRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actquery_rsp()) {
      mutable_actquery_rsp()->::vmsg::CSActQueryRsp::MergeFrom(from.actquery_rsp());
    }
    if (from.has_actstat_notify()) {
      mutable_actstat_notify()->::vmsg::CSActStatChange::MergeFrom(from.actstat_notify());
    }
  }
}

void CSActRespond::CopyFrom(const CSActRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSActRespond::IsInitialized() const {

  if (has_actquery_rsp()) {
    if (!this->actquery_rsp().IsInitialized()) return false;
  }
  if (has_actstat_notify()) {
    if (!this->actstat_notify().IsInitialized()) return false;
  }
  return true;
}

void CSActRespond::Swap(CSActRespond* other) {
  if (other != this) {
    std::swap(actquery_rsp_, other->actquery_rsp_);
    std::swap(actstat_notify_, other->actstat_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSActRespond::GetTypeName() const {
  return "vmsg.CSActRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
