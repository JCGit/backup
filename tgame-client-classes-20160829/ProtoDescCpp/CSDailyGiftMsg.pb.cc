// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSDailyGiftMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSDailyGiftMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto() {
  delete CSModuleGiftNextTime::default_instance_;
  delete CSQueryDailyGiftRsp::default_instance_;
  delete CSAwardDailyGiftRqst::default_instance_;
  delete CSAwardVipDailyGift::default_instance_;
  delete CSAwardDailyGiftRsp::default_instance_;
  delete CSClaimVipDailyAwardRsp::default_instance_;
  delete CSDailyGiftRequest::default_instance_;
  delete CSDailyGiftRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSDailyGiftMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  CSModuleGiftNextTime::default_instance_ = new CSModuleGiftNextTime();
  CSQueryDailyGiftRsp::default_instance_ = new CSQueryDailyGiftRsp();
  CSAwardDailyGiftRqst::default_instance_ = new CSAwardDailyGiftRqst();
  CSAwardVipDailyGift::default_instance_ = new CSAwardVipDailyGift();
  CSAwardDailyGiftRsp::default_instance_ = new CSAwardDailyGiftRsp();
  CSClaimVipDailyAwardRsp::default_instance_ = new CSClaimVipDailyAwardRsp();
  CSDailyGiftRequest::default_instance_ = new CSDailyGiftRequest();
  CSDailyGiftRespond::default_instance_ = new CSDailyGiftRespond();
  CSModuleGiftNextTime::default_instance_->InitAsDefaultInstance();
  CSQueryDailyGiftRsp::default_instance_->InitAsDefaultInstance();
  CSAwardDailyGiftRqst::default_instance_->InitAsDefaultInstance();
  CSAwardVipDailyGift::default_instance_->InitAsDefaultInstance();
  CSAwardDailyGiftRsp::default_instance_->InitAsDefaultInstance();
  CSClaimVipDailyAwardRsp::default_instance_->InitAsDefaultInstance();
  CSDailyGiftRequest::default_instance_->InitAsDefaultInstance();
  CSDailyGiftRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSDailyGiftMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSDailyGiftMsg_2eproto_once_);
void protobuf_AddDesc_CSDailyGiftMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSDailyGiftMsg_2eproto_once_,
                 &protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSDailyGiftMsg_2eproto {
  StaticDescriptorInitializer_CSDailyGiftMsg_2eproto() {
    protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  }
} static_descriptor_initializer_CSDailyGiftMsg_2eproto_;
#endif
bool DAILY_GIFT_MODULE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSModuleGiftNextTime::kModuleIDFieldNumber;
const int CSModuleGiftNextTime::kNextGiftTimeFieldNumber;
const int CSModuleGiftNextTime::kEventIDFieldNumber;
const int CSModuleGiftNextTime::kVipDailyGiftFieldNumber;
#endif  // !_MSC_VER

CSModuleGiftNextTime::CSModuleGiftNextTime()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSModuleGiftNextTime::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vipdailygift_ = const_cast< ::vmsg::CSAwardVipDailyGift*>(
      ::vmsg::CSAwardVipDailyGift::internal_default_instance());
#else
  vipdailygift_ = const_cast< ::vmsg::CSAwardVipDailyGift*>(&::vmsg::CSAwardVipDailyGift::default_instance());
#endif
}

CSModuleGiftNextTime::CSModuleGiftNextTime(const CSModuleGiftNextTime& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSModuleGiftNextTime::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 0u;
  nextgifttime_ = 0;
  eventid_ = 0u;
  vipdailygift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSModuleGiftNextTime::~CSModuleGiftNextTime() {
  SharedDtor();
}

void CSModuleGiftNextTime::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete vipdailygift_;
  }
}

void CSModuleGiftNextTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSModuleGiftNextTime& CSModuleGiftNextTime::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSModuleGiftNextTime* CSModuleGiftNextTime::default_instance_ = NULL;

CSModuleGiftNextTime* CSModuleGiftNextTime::New() const {
  return new CSModuleGiftNextTime;
}

void CSModuleGiftNextTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moduleid_ = 0u;
    nextgifttime_ = 0;
    eventid_ = 0u;
    if (has_vipdailygift()) {
      if (vipdailygift_ != NULL) vipdailygift_->::vmsg::CSAwardVipDailyGift::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSModuleGiftNextTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ModuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NextGiftTime;
        break;
      }

      // required int32 NextGiftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextGiftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextgifttime_)));
          set_has_nextgifttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EventID;
        break;
      }

      // optional uint32 EventID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EventID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_VipDailyGift;
        break;
      }

      // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipDailyGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipdailygift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSModuleGiftNextTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ModuleID = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moduleid(), output);
  }

  // required int32 NextGiftTime = 2;
  if (has_nextgifttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextgifttime(), output);
  }

  // optional uint32 EventID = 3;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eventid(), output);
  }

  // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 4;
  if (has_vipdailygift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->vipdailygift(), output);
  }

}

int CSModuleGiftNextTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ModuleID = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }

    // required int32 NextGiftTime = 2;
    if (has_nextgifttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextgifttime());
    }

    // optional uint32 EventID = 3;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 4;
    if (has_vipdailygift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipdailygift());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSModuleGiftNextTime::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSModuleGiftNextTime*>(&from));
}

void CSModuleGiftNextTime::MergeFrom(const CSModuleGiftNextTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_nextgifttime()) {
      set_nextgifttime(from.nextgifttime());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_vipdailygift()) {
      mutable_vipdailygift()->::vmsg::CSAwardVipDailyGift::MergeFrom(from.vipdailygift());
    }
  }
}

void CSModuleGiftNextTime::CopyFrom(const CSModuleGiftNextTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSModuleGiftNextTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vipdailygift()) {
    if (!this->vipdailygift().IsInitialized()) return false;
  }
  return true;
}

void CSModuleGiftNextTime::Swap(CSModuleGiftNextTime* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(nextgifttime_, other->nextgifttime_);
    std::swap(eventid_, other->eventid_);
    std::swap(vipdailygift_, other->vipdailygift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSModuleGiftNextTime::GetTypeName() const {
  return "vmsg.CSModuleGiftNextTime";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryDailyGiftRsp::kTimeLstFieldNumber;
#endif  // !_MSC_VER

CSQueryDailyGiftRsp::CSQueryDailyGiftRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryDailyGiftRsp::InitAsDefaultInstance() {
}

CSQueryDailyGiftRsp::CSQueryDailyGiftRsp(const CSQueryDailyGiftRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryDailyGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryDailyGiftRsp::~CSQueryDailyGiftRsp() {
  SharedDtor();
}

void CSQueryDailyGiftRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryDailyGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryDailyGiftRsp& CSQueryDailyGiftRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryDailyGiftRsp* CSQueryDailyGiftRsp::default_instance_ = NULL;

CSQueryDailyGiftRsp* CSQueryDailyGiftRsp::New() const {
  return new CSQueryDailyGiftRsp;
}

void CSQueryDailyGiftRsp::Clear() {
  timelst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryDailyGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSModuleGiftNextTime TimeLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TimeLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_TimeLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryDailyGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSModuleGiftNextTime TimeLst = 1;
  for (int i = 0; i < this->timelst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->timelst(i), output);
  }

}

int CSQueryDailyGiftRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSModuleGiftNextTime TimeLst = 1;
  total_size += 1 * this->timelst_size();
  for (int i = 0; i < this->timelst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryDailyGiftRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryDailyGiftRsp*>(&from));
}

void CSQueryDailyGiftRsp::MergeFrom(const CSQueryDailyGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  timelst_.MergeFrom(from.timelst_);
}

void CSQueryDailyGiftRsp::CopyFrom(const CSQueryDailyGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryDailyGiftRsp::IsInitialized() const {

  for (int i = 0; i < timelst_size(); i++) {
    if (!this->timelst(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryDailyGiftRsp::Swap(CSQueryDailyGiftRsp* other) {
  if (other != this) {
    timelst_.Swap(&other->timelst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryDailyGiftRsp::GetTypeName() const {
  return "vmsg.CSQueryDailyGiftRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAwardDailyGiftRqst::kModuleIDFieldNumber;
const int CSAwardDailyGiftRqst::kEventIDFieldNumber;
#endif  // !_MSC_VER

CSAwardDailyGiftRqst::CSAwardDailyGiftRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAwardDailyGiftRqst::InitAsDefaultInstance() {
}

CSAwardDailyGiftRqst::CSAwardDailyGiftRqst(const CSAwardDailyGiftRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAwardDailyGiftRqst::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 0u;
  eventid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAwardDailyGiftRqst::~CSAwardDailyGiftRqst() {
  SharedDtor();
}

void CSAwardDailyGiftRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAwardDailyGiftRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAwardDailyGiftRqst& CSAwardDailyGiftRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSAwardDailyGiftRqst* CSAwardDailyGiftRqst::default_instance_ = NULL;

CSAwardDailyGiftRqst* CSAwardDailyGiftRqst::New() const {
  return new CSAwardDailyGiftRqst;
}

void CSAwardDailyGiftRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moduleid_ = 0u;
    eventid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAwardDailyGiftRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ModuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EventID;
        break;
      }

      // optional uint32 EventID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EventID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAwardDailyGiftRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ModuleID = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moduleid(), output);
  }

  // optional uint32 EventID = 2;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eventid(), output);
  }

}

int CSAwardDailyGiftRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ModuleID = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }

    // optional uint32 EventID = 2;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAwardDailyGiftRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAwardDailyGiftRqst*>(&from));
}

void CSAwardDailyGiftRqst::MergeFrom(const CSAwardDailyGiftRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
  }
}

void CSAwardDailyGiftRqst::CopyFrom(const CSAwardDailyGiftRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardDailyGiftRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSAwardDailyGiftRqst::Swap(CSAwardDailyGiftRqst* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(eventid_, other->eventid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAwardDailyGiftRqst::GetTypeName() const {
  return "vmsg.CSAwardDailyGiftRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAwardVipDailyGift::kVIPLevelFieldNumber;
const int CSAwardVipDailyGift::kGoldAwardFieldNumber;
const int CSAwardVipDailyGift::kCoinAwardFieldNumber;
#endif  // !_MSC_VER

CSAwardVipDailyGift::CSAwardVipDailyGift()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAwardVipDailyGift::InitAsDefaultInstance() {
}

CSAwardVipDailyGift::CSAwardVipDailyGift(const CSAwardVipDailyGift& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAwardVipDailyGift::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0u;
  goldaward_ = 0u;
  coinaward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAwardVipDailyGift::~CSAwardVipDailyGift() {
  SharedDtor();
}

void CSAwardVipDailyGift::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAwardVipDailyGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAwardVipDailyGift& CSAwardVipDailyGift::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSAwardVipDailyGift* CSAwardVipDailyGift::default_instance_ = NULL;

CSAwardVipDailyGift* CSAwardVipDailyGift::New() const {
  return new CSAwardVipDailyGift;
}

void CSAwardVipDailyGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viplevel_ = 0u;
    goldaward_ = 0u;
    coinaward_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAwardVipDailyGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 VIPLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GoldAward;
        break;
      }

      // required uint32 GoldAward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldaward_)));
          set_has_goldaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CoinAward;
        break;
      }

      // required uint32 CoinAward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinAward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinaward_)));
          set_has_coinaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAwardVipDailyGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 VIPLevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viplevel(), output);
  }

  // required uint32 GoldAward = 2;
  if (has_goldaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goldaward(), output);
  }

  // required uint32 CoinAward = 3;
  if (has_coinaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coinaward(), output);
  }

}

int CSAwardVipDailyGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 VIPLevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // required uint32 GoldAward = 2;
    if (has_goldaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldaward());
    }

    // required uint32 CoinAward = 3;
    if (has_coinaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coinaward());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAwardVipDailyGift::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAwardVipDailyGift*>(&from));
}

void CSAwardVipDailyGift::MergeFrom(const CSAwardVipDailyGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_goldaward()) {
      set_goldaward(from.goldaward());
    }
    if (from.has_coinaward()) {
      set_coinaward(from.coinaward());
    }
  }
}

void CSAwardVipDailyGift::CopyFrom(const CSAwardVipDailyGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardVipDailyGift::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAwardVipDailyGift::Swap(CSAwardVipDailyGift* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(goldaward_, other->goldaward_);
    std::swap(coinaward_, other->coinaward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAwardVipDailyGift::GetTypeName() const {
  return "vmsg.CSAwardVipDailyGift";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAwardDailyGiftRsp::kModuleIDFieldNumber;
const int CSAwardDailyGiftRsp::kNextGiftTimeFieldNumber;
const int CSAwardDailyGiftRsp::kVipDailyGiftFieldNumber;
#endif  // !_MSC_VER

CSAwardDailyGiftRsp::CSAwardDailyGiftRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAwardDailyGiftRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vipdailygift_ = const_cast< ::vmsg::CSAwardVipDailyGift*>(
      ::vmsg::CSAwardVipDailyGift::internal_default_instance());
#else
  vipdailygift_ = const_cast< ::vmsg::CSAwardVipDailyGift*>(&::vmsg::CSAwardVipDailyGift::default_instance());
#endif
}

CSAwardDailyGiftRsp::CSAwardDailyGiftRsp(const CSAwardDailyGiftRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAwardDailyGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 0u;
  nextgifttime_ = 0;
  vipdailygift_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAwardDailyGiftRsp::~CSAwardDailyGiftRsp() {
  SharedDtor();
}

void CSAwardDailyGiftRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete vipdailygift_;
  }
}

void CSAwardDailyGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAwardDailyGiftRsp& CSAwardDailyGiftRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSAwardDailyGiftRsp* CSAwardDailyGiftRsp::default_instance_ = NULL;

CSAwardDailyGiftRsp* CSAwardDailyGiftRsp::New() const {
  return new CSAwardDailyGiftRsp;
}

void CSAwardDailyGiftRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moduleid_ = 0u;
    nextgifttime_ = 0;
    if (has_vipdailygift()) {
      if (vipdailygift_ != NULL) vipdailygift_->::vmsg::CSAwardVipDailyGift::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAwardDailyGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ModuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NextGiftTime;
        break;
      }

      // required int32 NextGiftTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextGiftTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextgifttime_)));
          set_has_nextgifttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_VipDailyGift;
        break;
      }

      // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipDailyGift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipdailygift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAwardDailyGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ModuleID = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moduleid(), output);
  }

  // required int32 NextGiftTime = 2;
  if (has_nextgifttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextgifttime(), output);
  }

  // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 3;
  if (has_vipdailygift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->vipdailygift(), output);
  }

}

int CSAwardDailyGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ModuleID = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }

    // required int32 NextGiftTime = 2;
    if (has_nextgifttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextgifttime());
    }

    // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 3;
    if (has_vipdailygift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipdailygift());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAwardDailyGiftRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAwardDailyGiftRsp*>(&from));
}

void CSAwardDailyGiftRsp::MergeFrom(const CSAwardDailyGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_nextgifttime()) {
      set_nextgifttime(from.nextgifttime());
    }
    if (from.has_vipdailygift()) {
      mutable_vipdailygift()->::vmsg::CSAwardVipDailyGift::MergeFrom(from.vipdailygift());
    }
  }
}

void CSAwardDailyGiftRsp::CopyFrom(const CSAwardDailyGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardDailyGiftRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vipdailygift()) {
    if (!this->vipdailygift().IsInitialized()) return false;
  }
  return true;
}

void CSAwardDailyGiftRsp::Swap(CSAwardDailyGiftRsp* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(nextgifttime_, other->nextgifttime_);
    std::swap(vipdailygift_, other->vipdailygift_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAwardDailyGiftRsp::GetTypeName() const {
  return "vmsg.CSAwardDailyGiftRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSClaimVipDailyAwardRsp::kBagInfoFieldNumber;
const int CSClaimVipDailyAwardRsp::kAwardLstFieldNumber;
#endif  // !_MSC_VER

CSClaimVipDailyAwardRsp::CSClaimVipDailyAwardRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSClaimVipDailyAwardRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSClaimVipDailyAwardRsp::CSClaimVipDailyAwardRsp(const CSClaimVipDailyAwardRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSClaimVipDailyAwardRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClaimVipDailyAwardRsp::~CSClaimVipDailyAwardRsp() {
  SharedDtor();
}

void CSClaimVipDailyAwardRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSClaimVipDailyAwardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSClaimVipDailyAwardRsp& CSClaimVipDailyAwardRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSClaimVipDailyAwardRsp* CSClaimVipDailyAwardRsp::default_instance_ = NULL;

CSClaimVipDailyAwardRsp* CSClaimVipDailyAwardRsp::New() const {
  return new CSClaimVipDailyAwardRsp;
}

void CSClaimVipDailyAwardRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSClaimVipDailyAwardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardLst;
        break;
      }

      // repeated .vmsg.CSAwardElement AwardLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClaimVipDailyAwardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.CSAwardElement AwardLst = 2;
  for (int i = 0; i < this->awardlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardlst(i), output);
  }

}

int CSClaimVipDailyAwardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.CSAwardElement AwardLst = 2;
  total_size += 1 * this->awardlst_size();
  for (int i = 0; i < this->awardlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClaimVipDailyAwardRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSClaimVipDailyAwardRsp*>(&from));
}

void CSClaimVipDailyAwardRsp::MergeFrom(const CSClaimVipDailyAwardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlst_.MergeFrom(from.awardlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void CSClaimVipDailyAwardRsp::CopyFrom(const CSClaimVipDailyAwardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClaimVipDailyAwardRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardlst_size(); i++) {
    if (!this->awardlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSClaimVipDailyAwardRsp::Swap(CSClaimVipDailyAwardRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardlst_.Swap(&other->awardlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSClaimVipDailyAwardRsp::GetTypeName() const {
  return "vmsg.CSClaimVipDailyAwardRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyGiftRequest::kAwardDailyGiftRqstFieldNumber;
#endif  // !_MSC_VER

CSDailyGiftRequest::CSDailyGiftRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyGiftRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  awarddailygift_rqst_ = const_cast< ::vmsg::CSAwardDailyGiftRqst*>(
      ::vmsg::CSAwardDailyGiftRqst::internal_default_instance());
#else
  awarddailygift_rqst_ = const_cast< ::vmsg::CSAwardDailyGiftRqst*>(&::vmsg::CSAwardDailyGiftRqst::default_instance());
#endif
}

CSDailyGiftRequest::CSDailyGiftRequest(const CSDailyGiftRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyGiftRequest::SharedCtor() {
  _cached_size_ = 0;
  awarddailygift_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyGiftRequest::~CSDailyGiftRequest() {
  SharedDtor();
}

void CSDailyGiftRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete awarddailygift_rqst_;
  }
}

void CSDailyGiftRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyGiftRequest& CSDailyGiftRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyGiftRequest* CSDailyGiftRequest::default_instance_ = NULL;

CSDailyGiftRequest* CSDailyGiftRequest::New() const {
  return new CSDailyGiftRequest;
}

void CSDailyGiftRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_awarddailygift_rqst()) {
      if (awarddailygift_rqst_ != NULL) awarddailygift_rqst_->::vmsg::CSAwardDailyGiftRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyGiftRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSAwardDailyGiftRqst AwardDailyGift_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awarddailygift_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyGiftRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSAwardDailyGiftRqst AwardDailyGift_Rqst = 1;
  if (has_awarddailygift_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->awarddailygift_rqst(), output);
  }

}

int CSDailyGiftRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSAwardDailyGiftRqst AwardDailyGift_Rqst = 1;
    if (has_awarddailygift_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awarddailygift_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyGiftRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyGiftRequest*>(&from));
}

void CSDailyGiftRequest::MergeFrom(const CSDailyGiftRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awarddailygift_rqst()) {
      mutable_awarddailygift_rqst()->::vmsg::CSAwardDailyGiftRqst::MergeFrom(from.awarddailygift_rqst());
    }
  }
}

void CSDailyGiftRequest::CopyFrom(const CSDailyGiftRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyGiftRequest::IsInitialized() const {

  if (has_awarddailygift_rqst()) {
    if (!this->awarddailygift_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSDailyGiftRequest::Swap(CSDailyGiftRequest* other) {
  if (other != this) {
    std::swap(awarddailygift_rqst_, other->awarddailygift_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyGiftRequest::GetTypeName() const {
  return "vmsg.CSDailyGiftRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSDailyGiftRespond::kQueryDailyGiftRspFieldNumber;
const int CSDailyGiftRespond::kAwardDailyGiftRspFieldNumber;
const int CSDailyGiftRespond::kClaimVipDailyAwardRspFieldNumber;
#endif  // !_MSC_VER

CSDailyGiftRespond::CSDailyGiftRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSDailyGiftRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querydailygift_rsp_ = const_cast< ::vmsg::CSQueryDailyGiftRsp*>(
      ::vmsg::CSQueryDailyGiftRsp::internal_default_instance());
#else
  querydailygift_rsp_ = const_cast< ::vmsg::CSQueryDailyGiftRsp*>(&::vmsg::CSQueryDailyGiftRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  awarddailygift_rsp_ = const_cast< ::vmsg::CSAwardDailyGiftRsp*>(
      ::vmsg::CSAwardDailyGiftRsp::internal_default_instance());
#else
  awarddailygift_rsp_ = const_cast< ::vmsg::CSAwardDailyGiftRsp*>(&::vmsg::CSAwardDailyGiftRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claimvipdailyaward_rsp_ = const_cast< ::vmsg::CSClaimVipDailyAwardRsp*>(
      ::vmsg::CSClaimVipDailyAwardRsp::internal_default_instance());
#else
  claimvipdailyaward_rsp_ = const_cast< ::vmsg::CSClaimVipDailyAwardRsp*>(&::vmsg::CSClaimVipDailyAwardRsp::default_instance());
#endif
}

CSDailyGiftRespond::CSDailyGiftRespond(const CSDailyGiftRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSDailyGiftRespond::SharedCtor() {
  _cached_size_ = 0;
  querydailygift_rsp_ = NULL;
  awarddailygift_rsp_ = NULL;
  claimvipdailyaward_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSDailyGiftRespond::~CSDailyGiftRespond() {
  SharedDtor();
}

void CSDailyGiftRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete querydailygift_rsp_;
    delete awarddailygift_rsp_;
    delete claimvipdailyaward_rsp_;
  }
}

void CSDailyGiftRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSDailyGiftRespond& CSDailyGiftRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSDailyGiftMsg_2eproto();
#endif
  return *default_instance_;
}

CSDailyGiftRespond* CSDailyGiftRespond::default_instance_ = NULL;

CSDailyGiftRespond* CSDailyGiftRespond::New() const {
  return new CSDailyGiftRespond;
}

void CSDailyGiftRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_querydailygift_rsp()) {
      if (querydailygift_rsp_ != NULL) querydailygift_rsp_->::vmsg::CSQueryDailyGiftRsp::Clear();
    }
    if (has_awarddailygift_rsp()) {
      if (awarddailygift_rsp_ != NULL) awarddailygift_rsp_->::vmsg::CSAwardDailyGiftRsp::Clear();
    }
    if (has_claimvipdailyaward_rsp()) {
      if (claimvipdailyaward_rsp_ != NULL) claimvipdailyaward_rsp_->::vmsg::CSClaimVipDailyAwardRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSDailyGiftRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSQueryDailyGiftRsp QueryDailyGift_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querydailygift_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardDailyGift_Rsp;
        break;
      }

      // optional .vmsg.CSAwardDailyGiftRsp AwardDailyGift_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardDailyGift_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awarddailygift_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ClaimVipDailyAward_Rsp;
        break;
      }

      // optional .vmsg.CSClaimVipDailyAwardRsp ClaimVipDailyAward_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClaimVipDailyAward_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claimvipdailyaward_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSDailyGiftRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSQueryDailyGiftRsp QueryDailyGift_Rsp = 1;
  if (has_querydailygift_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->querydailygift_rsp(), output);
  }

  // optional .vmsg.CSAwardDailyGiftRsp AwardDailyGift_Rsp = 2;
  if (has_awarddailygift_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awarddailygift_rsp(), output);
  }

  // optional .vmsg.CSClaimVipDailyAwardRsp ClaimVipDailyAward_Rsp = 3;
  if (has_claimvipdailyaward_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->claimvipdailyaward_rsp(), output);
  }

}

int CSDailyGiftRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSQueryDailyGiftRsp QueryDailyGift_Rsp = 1;
    if (has_querydailygift_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querydailygift_rsp());
    }

    // optional .vmsg.CSAwardDailyGiftRsp AwardDailyGift_Rsp = 2;
    if (has_awarddailygift_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awarddailygift_rsp());
    }

    // optional .vmsg.CSClaimVipDailyAwardRsp ClaimVipDailyAward_Rsp = 3;
    if (has_claimvipdailyaward_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claimvipdailyaward_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSDailyGiftRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSDailyGiftRespond*>(&from));
}

void CSDailyGiftRespond::MergeFrom(const CSDailyGiftRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_querydailygift_rsp()) {
      mutable_querydailygift_rsp()->::vmsg::CSQueryDailyGiftRsp::MergeFrom(from.querydailygift_rsp());
    }
    if (from.has_awarddailygift_rsp()) {
      mutable_awarddailygift_rsp()->::vmsg::CSAwardDailyGiftRsp::MergeFrom(from.awarddailygift_rsp());
    }
    if (from.has_claimvipdailyaward_rsp()) {
      mutable_claimvipdailyaward_rsp()->::vmsg::CSClaimVipDailyAwardRsp::MergeFrom(from.claimvipdailyaward_rsp());
    }
  }
}

void CSDailyGiftRespond::CopyFrom(const CSDailyGiftRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSDailyGiftRespond::IsInitialized() const {

  if (has_querydailygift_rsp()) {
    if (!this->querydailygift_rsp().IsInitialized()) return false;
  }
  if (has_awarddailygift_rsp()) {
    if (!this->awarddailygift_rsp().IsInitialized()) return false;
  }
  if (has_claimvipdailyaward_rsp()) {
    if (!this->claimvipdailyaward_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSDailyGiftRespond::Swap(CSDailyGiftRespond* other) {
  if (other != this) {
    std::swap(querydailygift_rsp_, other->querydailygift_rsp_);
    std::swap(awarddailygift_rsp_, other->awarddailygift_rsp_);
    std::swap(claimvipdailyaward_rsp_, other->claimvipdailyaward_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSDailyGiftRespond::GetTypeName() const {
  return "vmsg.CSDailyGiftRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
