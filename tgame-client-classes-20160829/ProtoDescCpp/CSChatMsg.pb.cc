// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSChatMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSChatMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSChatMsg_2eproto() {
  delete CSChatSendMsgRqst::default_instance_;
  delete CSChatInfo::default_instance_;
  delete CSChatMsgNotify::default_instance_;
  delete CSChatRequest::default_instance_;
  delete CSChatRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSChatMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSChatMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSChatSendMsgRqst::default_instance_ = new CSChatSendMsgRqst();
  CSChatInfo::default_instance_ = new CSChatInfo();
  CSChatMsgNotify::default_instance_ = new CSChatMsgNotify();
  CSChatRequest::default_instance_ = new CSChatRequest();
  CSChatRespond::default_instance_ = new CSChatRespond();
  CSChatSendMsgRqst::default_instance_->InitAsDefaultInstance();
  CSChatInfo::default_instance_->InitAsDefaultInstance();
  CSChatMsgNotify::default_instance_->InitAsDefaultInstance();
  CSChatRequest::default_instance_->InitAsDefaultInstance();
  CSChatRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSChatMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSChatMsg_2eproto_once_);
void protobuf_AddDesc_CSChatMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSChatMsg_2eproto_once_,
                 &protobuf_AddDesc_CSChatMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSChatMsg_2eproto {
  StaticDescriptorInitializer_CSChatMsg_2eproto() {
    protobuf_AddDesc_CSChatMsg_2eproto();
  }
} static_descriptor_initializer_CSChatMsg_2eproto_;
#endif
bool CHAT_CHANNEL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatSendMsgRqst::kChannelTypeFieldNumber;
const int CSChatSendMsgRqst::kMsgContentFieldNumber;
const int CSChatSendMsgRqst::kReceiveUinFieldNumber;
#endif  // !_MSC_VER

CSChatSendMsgRqst::CSChatSendMsgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChatSendMsgRqst::InitAsDefaultInstance() {
}

CSChatSendMsgRqst::CSChatSendMsgRqst(const CSChatSendMsgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatSendMsgRqst::SharedCtor() {
  _cached_size_ = 0;
  channeltype_ = 0u;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  receiveuin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatSendMsgRqst::~CSChatSendMsgRqst() {
  SharedDtor();
}

void CSChatSendMsgRqst::SharedDtor() {
  if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete msgcontent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSChatSendMsgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChatSendMsgRqst& CSChatSendMsgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSChatMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSChatMsg_2eproto();
#endif
  return *default_instance_;
}

CSChatSendMsgRqst* CSChatSendMsgRqst::default_instance_ = NULL;

CSChatSendMsgRqst* CSChatSendMsgRqst::New() const {
  return new CSChatSendMsgRqst;
}

void CSChatSendMsgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channeltype_ = 0u;
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
        msgcontent_->clear();
      }
    }
    receiveuin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChatSendMsgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ChannelType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channeltype_)));
          set_has_channeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MsgContent;
        break;
      }

      // required string MsgContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReceiveUin;
        break;
      }

      // optional uint64 ReceiveUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReceiveUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiveuin_)));
          set_has_receiveuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatSendMsgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ChannelType = 1;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channeltype(), output);
  }

  // required string MsgContent = 2;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgcontent(), output);
  }

  // optional uint64 ReceiveUin = 3;
  if (has_receiveuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->receiveuin(), output);
  }

}

int CSChatSendMsgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ChannelType = 1;
    if (has_channeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channeltype());
    }

    // required string MsgContent = 2;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcontent());
    }

    // optional uint64 ReceiveUin = 3;
    if (has_receiveuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiveuin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatSendMsgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChatSendMsgRqst*>(&from));
}

void CSChatSendMsgRqst::MergeFrom(const CSChatSendMsgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
    if (from.has_receiveuin()) {
      set_receiveuin(from.receiveuin());
    }
  }
}

void CSChatSendMsgRqst::CopyFrom(const CSChatSendMsgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatSendMsgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSChatSendMsgRqst::Swap(CSChatSendMsgRqst* other) {
  if (other != this) {
    std::swap(channeltype_, other->channeltype_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(receiveuin_, other->receiveuin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChatSendMsgRqst::GetTypeName() const {
  return "vmsg.CSChatSendMsgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatInfo::kSenderNickFieldNumber;
const int CSChatInfo::kSenderUinFieldNumber;
const int CSChatInfo::kSendTimeFieldNumber;
const int CSChatInfo::kMsgContentFieldNumber;
const int CSChatInfo::kVipLvFieldNumber;
const int CSChatInfo::kShowIDFieldNumber;
#endif  // !_MSC_VER

CSChatInfo::CSChatInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChatInfo::InitAsDefaultInstance() {
}

CSChatInfo::CSChatInfo(const CSChatInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatInfo::SharedCtor() {
  _cached_size_ = 0;
  sendernick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  senderuin_ = GOOGLE_ULONGLONG(0);
  sendtime_ = 0u;
  msgcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplv_ = 0u;
  showid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatInfo::~CSChatInfo() {
  SharedDtor();
}

void CSChatInfo::SharedDtor() {
  if (sendernick_ != &::google::protobuf::internal::kEmptyString) {
    delete sendernick_;
  }
  if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete msgcontent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChatInfo& CSChatInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSChatMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSChatMsg_2eproto();
#endif
  return *default_instance_;
}

CSChatInfo* CSChatInfo::default_instance_ = NULL;

CSChatInfo* CSChatInfo::New() const {
  return new CSChatInfo;
}

void CSChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendernick()) {
      if (sendernick_ != &::google::protobuf::internal::kEmptyString) {
        sendernick_->clear();
      }
    }
    senderuin_ = GOOGLE_ULONGLONG(0);
    sendtime_ = 0u;
    if (has_msgcontent()) {
      if (msgcontent_ != &::google::protobuf::internal::kEmptyString) {
        msgcontent_->clear();
      }
    }
    viplv_ = 0u;
    showid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SenderNick = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendernick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SenderUin;
        break;
      }

      // required uint64 SenderUin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SenderUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &senderuin_)));
          set_has_senderuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SendTime;
        break;
      }

      // required uint32 SendTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MsgContent;
        break;
      }

      // required string MsgContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MsgContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_VipLv;
        break;
      }

      // required uint32 VipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ShowID;
        break;
      }

      // optional uint32 ShowID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SenderNick = 1;
  if (has_sendernick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendernick(), output);
  }

  // required uint64 SenderUin = 2;
  if (has_senderuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->senderuin(), output);
  }

  // required uint32 SendTime = 3;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sendtime(), output);
  }

  // required string MsgContent = 4;
  if (has_msgcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->msgcontent(), output);
  }

  // required uint32 VipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional uint32 ShowID = 6;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->showid(), output);
  }

}

int CSChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SenderNick = 1;
    if (has_sendernick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendernick());
    }

    // required uint64 SenderUin = 2;
    if (has_senderuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->senderuin());
    }

    // required uint32 SendTime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendtime());
    }

    // required string MsgContent = 4;
    if (has_msgcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgcontent());
    }

    // required uint32 VipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 ShowID = 6;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChatInfo*>(&from));
}

void CSChatInfo::MergeFrom(const CSChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendernick()) {
      set_sendernick(from.sendernick());
    }
    if (from.has_senderuin()) {
      set_senderuin(from.senderuin());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_msgcontent()) {
      set_msgcontent(from.msgcontent());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
  }
}

void CSChatInfo::CopyFrom(const CSChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSChatInfo::Swap(CSChatInfo* other) {
  if (other != this) {
    std::swap(sendernick_, other->sendernick_);
    std::swap(senderuin_, other->senderuin_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(msgcontent_, other->msgcontent_);
    std::swap(viplv_, other->viplv_);
    std::swap(showid_, other->showid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChatInfo::GetTypeName() const {
  return "vmsg.CSChatInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatMsgNotify::kChannelTypeFieldNumber;
const int CSChatMsgNotify::kChatInfosFieldNumber;
#endif  // !_MSC_VER

CSChatMsgNotify::CSChatMsgNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChatMsgNotify::InitAsDefaultInstance() {
}

CSChatMsgNotify::CSChatMsgNotify(const CSChatMsgNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  channeltype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatMsgNotify::~CSChatMsgNotify() {
  SharedDtor();
}

void CSChatMsgNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSChatMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChatMsgNotify& CSChatMsgNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSChatMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSChatMsg_2eproto();
#endif
  return *default_instance_;
}

CSChatMsgNotify* CSChatMsgNotify::default_instance_ = NULL;

CSChatMsgNotify* CSChatMsgNotify::New() const {
  return new CSChatMsgNotify;
}

void CSChatMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channeltype_ = 0u;
  }
  chatinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChatMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ChannelType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channeltype_)));
          set_has_channeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChatInfos;
        break;
      }

      // repeated .vmsg.CSChatInfo ChatInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chatinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ChatInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ChannelType = 1;
  if (has_channeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channeltype(), output);
  }

  // repeated .vmsg.CSChatInfo ChatInfos = 2;
  for (int i = 0; i < this->chatinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->chatinfos(i), output);
  }

}

int CSChatMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ChannelType = 1;
    if (has_channeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channeltype());
    }

  }
  // repeated .vmsg.CSChatInfo ChatInfos = 2;
  total_size += 1 * this->chatinfos_size();
  for (int i = 0; i < this->chatinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chatinfos(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatMsgNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChatMsgNotify*>(&from));
}

void CSChatMsgNotify::MergeFrom(const CSChatMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  chatinfos_.MergeFrom(from.chatinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channeltype()) {
      set_channeltype(from.channeltype());
    }
  }
}

void CSChatMsgNotify::CopyFrom(const CSChatMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatMsgNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < chatinfos_size(); i++) {
    if (!this->chatinfos(i).IsInitialized()) return false;
  }
  return true;
}

void CSChatMsgNotify::Swap(CSChatMsgNotify* other) {
  if (other != this) {
    std::swap(channeltype_, other->channeltype_);
    chatinfos_.Swap(&other->chatinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChatMsgNotify::GetTypeName() const {
  return "vmsg.CSChatMsgNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatRequest::kSendMsgRqstFieldNumber;
#endif  // !_MSC_VER

CSChatRequest::CSChatRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChatRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sendmsg_rqst_ = const_cast< ::vmsg::CSChatSendMsgRqst*>(
      ::vmsg::CSChatSendMsgRqst::internal_default_instance());
#else
  sendmsg_rqst_ = const_cast< ::vmsg::CSChatSendMsgRqst*>(&::vmsg::CSChatSendMsgRqst::default_instance());
#endif
}

CSChatRequest::CSChatRequest(const CSChatRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatRequest::SharedCtor() {
  _cached_size_ = 0;
  sendmsg_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatRequest::~CSChatRequest() {
  SharedDtor();
}

void CSChatRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sendmsg_rqst_;
  }
}

void CSChatRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChatRequest& CSChatRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSChatMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSChatMsg_2eproto();
#endif
  return *default_instance_;
}

CSChatRequest* CSChatRequest::default_instance_ = NULL;

CSChatRequest* CSChatRequest::New() const {
  return new CSChatRequest;
}

void CSChatRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendmsg_rqst()) {
      if (sendmsg_rqst_ != NULL) sendmsg_rqst_->::vmsg::CSChatSendMsgRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChatRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSChatSendMsgRqst SendMsg_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sendmsg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSChatSendMsgRqst SendMsg_Rqst = 1;
  if (has_sendmsg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sendmsg_rqst(), output);
  }

}

int CSChatRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSChatSendMsgRqst SendMsg_Rqst = 1;
    if (has_sendmsg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sendmsg_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChatRequest*>(&from));
}

void CSChatRequest::MergeFrom(const CSChatRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendmsg_rqst()) {
      mutable_sendmsg_rqst()->::vmsg::CSChatSendMsgRqst::MergeFrom(from.sendmsg_rqst());
    }
  }
}

void CSChatRequest::CopyFrom(const CSChatRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatRequest::IsInitialized() const {

  if (has_sendmsg_rqst()) {
    if (!this->sendmsg_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSChatRequest::Swap(CSChatRequest* other) {
  if (other != this) {
    std::swap(sendmsg_rqst_, other->sendmsg_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChatRequest::GetTypeName() const {
  return "vmsg.CSChatRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChatRespond::kChatMsgNotifyFieldNumber;
#endif  // !_MSC_VER

CSChatRespond::CSChatRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChatRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chatmsg_notify_ = const_cast< ::vmsg::CSChatMsgNotify*>(
      ::vmsg::CSChatMsgNotify::internal_default_instance());
#else
  chatmsg_notify_ = const_cast< ::vmsg::CSChatMsgNotify*>(&::vmsg::CSChatMsgNotify::default_instance());
#endif
}

CSChatRespond::CSChatRespond(const CSChatRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChatRespond::SharedCtor() {
  _cached_size_ = 0;
  chatmsg_notify_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChatRespond::~CSChatRespond() {
  SharedDtor();
}

void CSChatRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete chatmsg_notify_;
  }
}

void CSChatRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChatRespond& CSChatRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSChatMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSChatMsg_2eproto();
#endif
  return *default_instance_;
}

CSChatRespond* CSChatRespond::default_instance_ = NULL;

CSChatRespond* CSChatRespond::New() const {
  return new CSChatRespond;
}

void CSChatRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_chatmsg_notify()) {
      if (chatmsg_notify_ != NULL) chatmsg_notify_->::vmsg::CSChatMsgNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChatRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSChatMsgNotify ChatMsg_Notify = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmsg_notify()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChatRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSChatMsgNotify ChatMsg_Notify = 1;
  if (has_chatmsg_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->chatmsg_notify(), output);
  }

}

int CSChatRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSChatMsgNotify ChatMsg_Notify = 1;
    if (has_chatmsg_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmsg_notify());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChatRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChatRespond*>(&from));
}

void CSChatRespond::MergeFrom(const CSChatRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatmsg_notify()) {
      mutable_chatmsg_notify()->::vmsg::CSChatMsgNotify::MergeFrom(from.chatmsg_notify());
    }
  }
}

void CSChatRespond::CopyFrom(const CSChatRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChatRespond::IsInitialized() const {

  if (has_chatmsg_notify()) {
    if (!this->chatmsg_notify().IsInitialized()) return false;
  }
  return true;
}

void CSChatRespond::Swap(CSChatRespond* other) {
  if (other != this) {
    std::swap(chatmsg_notify_, other->chatmsg_notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChatRespond::GetTypeName() const {
  return "vmsg.CSChatRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
