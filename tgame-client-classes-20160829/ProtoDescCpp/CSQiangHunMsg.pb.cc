// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSQiangHunMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSQiangHunMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSQiangHunMsg_2eproto() {
  delete CSQiangHunElmt::default_instance_;
  delete CSQiangHunInfo::default_instance_;
  delete CSQiangHunLayerQueryRqst::default_instance_;
  delete CSQiangHunFlopRqst::default_instance_;
  delete CSQiangHunRequest::default_instance_;
  delete CSQiangHunRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSQiangHunMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSQiangHunMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  CSQiangHunElmt::default_instance_ = new CSQiangHunElmt();
  CSQiangHunInfo::default_instance_ = new CSQiangHunInfo();
  CSQiangHunLayerQueryRqst::default_instance_ = new CSQiangHunLayerQueryRqst();
  CSQiangHunFlopRqst::default_instance_ = new CSQiangHunFlopRqst();
  CSQiangHunRequest::default_instance_ = new CSQiangHunRequest();
  CSQiangHunRespond::default_instance_ = new CSQiangHunRespond();
  CSQiangHunElmt::default_instance_->InitAsDefaultInstance();
  CSQiangHunInfo::default_instance_->InitAsDefaultInstance();
  CSQiangHunLayerQueryRqst::default_instance_->InitAsDefaultInstance();
  CSQiangHunFlopRqst::default_instance_->InitAsDefaultInstance();
  CSQiangHunRequest::default_instance_->InitAsDefaultInstance();
  CSQiangHunRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSQiangHunMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSQiangHunMsg_2eproto_once_);
void protobuf_AddDesc_CSQiangHunMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSQiangHunMsg_2eproto_once_,
                 &protobuf_AddDesc_CSQiangHunMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSQiangHunMsg_2eproto {
  StaticDescriptorInitializer_CSQiangHunMsg_2eproto() {
    protobuf_AddDesc_CSQiangHunMsg_2eproto();
  }
} static_descriptor_initializer_CSQiangHunMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSQiangHunElmt::kIsKeyFieldNumber;
const int CSQiangHunElmt::kTypeFieldNumber;
const int CSQiangHunElmt::kCfgIDFieldNumber;
const int CSQiangHunElmt::kCntFieldNumber;
const int CSQiangHunElmt::kPosFieldNumber;
#endif  // !_MSC_VER

CSQiangHunElmt::CSQiangHunElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQiangHunElmt::InitAsDefaultInstance() {
}

CSQiangHunElmt::CSQiangHunElmt(const CSQiangHunElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQiangHunElmt::SharedCtor() {
  _cached_size_ = 0;
  iskey_ = 0u;
  type_ = 0u;
  cfgid_ = 0u;
  cnt_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQiangHunElmt::~CSQiangHunElmt() {
  SharedDtor();
}

void CSQiangHunElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQiangHunElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQiangHunElmt& CSQiangHunElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSQiangHunMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSQiangHunMsg_2eproto();
#endif
  return *default_instance_;
}

CSQiangHunElmt* CSQiangHunElmt::default_instance_ = NULL;

CSQiangHunElmt* CSQiangHunElmt::New() const {
  return new CSQiangHunElmt;
}

void CSQiangHunElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iskey_ = 0u;
    type_ = 0u;
    cfgid_ = 0u;
    cnt_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQiangHunElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IsKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iskey_)));
          set_has_iskey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CfgID;
        break;
      }

      // required uint32 CfgID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Cnt;
        break;
      }

      // required uint32 Cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Pos;
        break;
      }

      // required uint32 Pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQiangHunElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IsKey = 1;
  if (has_iskey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iskey(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 CfgID = 3;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cfgid(), output);
  }

  // required uint32 Cnt = 4;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cnt(), output);
  }

  // required uint32 Pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pos(), output);
  }

}

int CSQiangHunElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IsKey = 1;
    if (has_iskey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iskey());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 CfgID = 3;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Cnt = 4;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

    // required uint32 Pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQiangHunElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQiangHunElmt*>(&from));
}

void CSQiangHunElmt::MergeFrom(const CSQiangHunElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iskey()) {
      set_iskey(from.iskey());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
}

void CSQiangHunElmt::CopyFrom(const CSQiangHunElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQiangHunElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSQiangHunElmt::Swap(CSQiangHunElmt* other) {
  if (other != this) {
    std::swap(iskey_, other->iskey_);
    std::swap(type_, other->type_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(cnt_, other->cnt_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQiangHunElmt::GetTypeName() const {
  return "vmsg.CSQiangHunElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQiangHunInfo::kLayerFieldNumber;
const int CSQiangHunInfo::kMaxLayerFieldNumber;
const int CSQiangHunInfo::kElmtsFieldNumber;
const int CSQiangHunInfo::kNextCostFieldNumber;
#endif  // !_MSC_VER

CSQiangHunInfo::CSQiangHunInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQiangHunInfo::InitAsDefaultInstance() {
}

CSQiangHunInfo::CSQiangHunInfo(const CSQiangHunInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQiangHunInfo::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  maxlayer_ = 0u;
  nextcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQiangHunInfo::~CSQiangHunInfo() {
  SharedDtor();
}

void CSQiangHunInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQiangHunInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQiangHunInfo& CSQiangHunInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSQiangHunMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSQiangHunMsg_2eproto();
#endif
  return *default_instance_;
}

CSQiangHunInfo* CSQiangHunInfo::default_instance_ = NULL;

CSQiangHunInfo* CSQiangHunInfo::New() const {
  return new CSQiangHunInfo;
}

void CSQiangHunInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0u;
    maxlayer_ = 0u;
    nextcost_ = 0u;
  }
  elmts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQiangHunInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MaxLayer;
        break;
      }

      // required uint32 MaxLayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxLayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Elmts;
        break;
      }

      // repeated .vmsg.CSQiangHunElmt Elmts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Elmts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elmts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Elmts;
        if (input->ExpectTag(32)) goto parse_NextCost;
        break;
      }

      // required uint32 NextCost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextcost_)));
          set_has_nextcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQiangHunInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  // required uint32 MaxLayer = 2;
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxlayer(), output);
  }

  // repeated .vmsg.CSQiangHunElmt Elmts = 3;
  for (int i = 0; i < this->elmts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->elmts(i), output);
  }

  // required uint32 NextCost = 4;
  if (has_nextcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->nextcost(), output);
  }

}

int CSQiangHunInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // required uint32 MaxLayer = 2;
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

    // required uint32 NextCost = 4;
    if (has_nextcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextcost());
    }

  }
  // repeated .vmsg.CSQiangHunElmt Elmts = 3;
  total_size += 1 * this->elmts_size();
  for (int i = 0; i < this->elmts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elmts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQiangHunInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQiangHunInfo*>(&from));
}

void CSQiangHunInfo::MergeFrom(const CSQiangHunInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  elmts_.MergeFrom(from.elmts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_nextcost()) {
      set_nextcost(from.nextcost());
    }
  }
}

void CSQiangHunInfo::CopyFrom(const CSQiangHunInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQiangHunInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < elmts_size(); i++) {
    if (!this->elmts(i).IsInitialized()) return false;
  }
  return true;
}

void CSQiangHunInfo::Swap(CSQiangHunInfo* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(maxlayer_, other->maxlayer_);
    elmts_.Swap(&other->elmts_);
    std::swap(nextcost_, other->nextcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQiangHunInfo::GetTypeName() const {
  return "vmsg.CSQiangHunInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQiangHunLayerQueryRqst::kLayerFieldNumber;
#endif  // !_MSC_VER

CSQiangHunLayerQueryRqst::CSQiangHunLayerQueryRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQiangHunLayerQueryRqst::InitAsDefaultInstance() {
}

CSQiangHunLayerQueryRqst::CSQiangHunLayerQueryRqst(const CSQiangHunLayerQueryRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQiangHunLayerQueryRqst::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQiangHunLayerQueryRqst::~CSQiangHunLayerQueryRqst() {
  SharedDtor();
}

void CSQiangHunLayerQueryRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQiangHunLayerQueryRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQiangHunLayerQueryRqst& CSQiangHunLayerQueryRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSQiangHunMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSQiangHunMsg_2eproto();
#endif
  return *default_instance_;
}

CSQiangHunLayerQueryRqst* CSQiangHunLayerQueryRqst::default_instance_ = NULL;

CSQiangHunLayerQueryRqst* CSQiangHunLayerQueryRqst::New() const {
  return new CSQiangHunLayerQueryRqst;
}

void CSQiangHunLayerQueryRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQiangHunLayerQueryRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQiangHunLayerQueryRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

}

int CSQiangHunLayerQueryRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQiangHunLayerQueryRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQiangHunLayerQueryRqst*>(&from));
}

void CSQiangHunLayerQueryRqst::MergeFrom(const CSQiangHunLayerQueryRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
}

void CSQiangHunLayerQueryRqst::CopyFrom(const CSQiangHunLayerQueryRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQiangHunLayerQueryRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSQiangHunLayerQueryRqst::Swap(CSQiangHunLayerQueryRqst* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQiangHunLayerQueryRqst::GetTypeName() const {
  return "vmsg.CSQiangHunLayerQueryRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQiangHunFlopRqst::kPosFieldNumber;
const int CSQiangHunFlopRqst::kLayerFieldNumber;
#endif  // !_MSC_VER

CSQiangHunFlopRqst::CSQiangHunFlopRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQiangHunFlopRqst::InitAsDefaultInstance() {
}

CSQiangHunFlopRqst::CSQiangHunFlopRqst(const CSQiangHunFlopRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQiangHunFlopRqst::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQiangHunFlopRqst::~CSQiangHunFlopRqst() {
  SharedDtor();
}

void CSQiangHunFlopRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQiangHunFlopRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQiangHunFlopRqst& CSQiangHunFlopRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSQiangHunMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSQiangHunMsg_2eproto();
#endif
  return *default_instance_;
}

CSQiangHunFlopRqst* CSQiangHunFlopRqst::default_instance_ = NULL;

CSQiangHunFlopRqst* CSQiangHunFlopRqst::New() const {
  return new CSQiangHunFlopRqst;
}

void CSQiangHunFlopRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    layer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQiangHunFlopRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Layer;
        break;
      }

      // required uint32 Layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQiangHunFlopRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // required uint32 Layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }

}

int CSQiangHunFlopRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // required uint32 Layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQiangHunFlopRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQiangHunFlopRqst*>(&from));
}

void CSQiangHunFlopRqst::MergeFrom(const CSQiangHunFlopRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
}

void CSQiangHunFlopRqst::CopyFrom(const CSQiangHunFlopRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQiangHunFlopRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSQiangHunFlopRqst::Swap(CSQiangHunFlopRqst* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQiangHunFlopRqst::GetTypeName() const {
  return "vmsg.CSQiangHunFlopRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQiangHunRequest::kQueryLayerRqstFieldNumber;
const int CSQiangHunRequest::kFlopRqstFieldNumber;
#endif  // !_MSC_VER

CSQiangHunRequest::CSQiangHunRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQiangHunRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querylayer_rqst_ = const_cast< ::vmsg::CSQiangHunLayerQueryRqst*>(
      ::vmsg::CSQiangHunLayerQueryRqst::internal_default_instance());
#else
  querylayer_rqst_ = const_cast< ::vmsg::CSQiangHunLayerQueryRqst*>(&::vmsg::CSQiangHunLayerQueryRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  flop_rqst_ = const_cast< ::vmsg::CSQiangHunFlopRqst*>(
      ::vmsg::CSQiangHunFlopRqst::internal_default_instance());
#else
  flop_rqst_ = const_cast< ::vmsg::CSQiangHunFlopRqst*>(&::vmsg::CSQiangHunFlopRqst::default_instance());
#endif
}

CSQiangHunRequest::CSQiangHunRequest(const CSQiangHunRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQiangHunRequest::SharedCtor() {
  _cached_size_ = 0;
  querylayer_rqst_ = NULL;
  flop_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQiangHunRequest::~CSQiangHunRequest() {
  SharedDtor();
}

void CSQiangHunRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete querylayer_rqst_;
    delete flop_rqst_;
  }
}

void CSQiangHunRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQiangHunRequest& CSQiangHunRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSQiangHunMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSQiangHunMsg_2eproto();
#endif
  return *default_instance_;
}

CSQiangHunRequest* CSQiangHunRequest::default_instance_ = NULL;

CSQiangHunRequest* CSQiangHunRequest::New() const {
  return new CSQiangHunRequest;
}

void CSQiangHunRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_querylayer_rqst()) {
      if (querylayer_rqst_ != NULL) querylayer_rqst_->::vmsg::CSQiangHunLayerQueryRqst::Clear();
    }
    if (has_flop_rqst()) {
      if (flop_rqst_ != NULL) flop_rqst_->::vmsg::CSQiangHunFlopRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQiangHunRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSQiangHunLayerQueryRqst QueryLayer_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querylayer_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Flop_Rqst;
        break;
      }

      // optional .vmsg.CSQiangHunFlopRqst Flop_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Flop_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQiangHunRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSQiangHunLayerQueryRqst QueryLayer_Rqst = 1;
  if (has_querylayer_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->querylayer_rqst(), output);
  }

  // optional .vmsg.CSQiangHunFlopRqst Flop_Rqst = 2;
  if (has_flop_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->flop_rqst(), output);
  }

}

int CSQiangHunRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSQiangHunLayerQueryRqst QueryLayer_Rqst = 1;
    if (has_querylayer_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querylayer_rqst());
    }

    // optional .vmsg.CSQiangHunFlopRqst Flop_Rqst = 2;
    if (has_flop_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flop_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQiangHunRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQiangHunRequest*>(&from));
}

void CSQiangHunRequest::MergeFrom(const CSQiangHunRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_querylayer_rqst()) {
      mutable_querylayer_rqst()->::vmsg::CSQiangHunLayerQueryRqst::MergeFrom(from.querylayer_rqst());
    }
    if (from.has_flop_rqst()) {
      mutable_flop_rqst()->::vmsg::CSQiangHunFlopRqst::MergeFrom(from.flop_rqst());
    }
  }
}

void CSQiangHunRequest::CopyFrom(const CSQiangHunRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQiangHunRequest::IsInitialized() const {

  if (has_querylayer_rqst()) {
    if (!this->querylayer_rqst().IsInitialized()) return false;
  }
  if (has_flop_rqst()) {
    if (!this->flop_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSQiangHunRequest::Swap(CSQiangHunRequest* other) {
  if (other != this) {
    std::swap(querylayer_rqst_, other->querylayer_rqst_);
    std::swap(flop_rqst_, other->flop_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQiangHunRequest::GetTypeName() const {
  return "vmsg.CSQiangHunRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQiangHunRespond::kQueryQiangHunRspFieldNumber;
const int CSQiangHunRespond::kQueryLayerRspFieldNumber;
const int CSQiangHunRespond::kFlopRspFieldNumber;
#endif  // !_MSC_VER

CSQiangHunRespond::CSQiangHunRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQiangHunRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryqianghun_rsp_ = const_cast< ::vmsg::CSQiangHunInfo*>(
      ::vmsg::CSQiangHunInfo::internal_default_instance());
#else
  queryqianghun_rsp_ = const_cast< ::vmsg::CSQiangHunInfo*>(&::vmsg::CSQiangHunInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  querylayer_rsp_ = const_cast< ::vmsg::CSQiangHunInfo*>(
      ::vmsg::CSQiangHunInfo::internal_default_instance());
#else
  querylayer_rsp_ = const_cast< ::vmsg::CSQiangHunInfo*>(&::vmsg::CSQiangHunInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  flop_rsp_ = const_cast< ::vmsg::CSQiangHunInfo*>(
      ::vmsg::CSQiangHunInfo::internal_default_instance());
#else
  flop_rsp_ = const_cast< ::vmsg::CSQiangHunInfo*>(&::vmsg::CSQiangHunInfo::default_instance());
#endif
}

CSQiangHunRespond::CSQiangHunRespond(const CSQiangHunRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQiangHunRespond::SharedCtor() {
  _cached_size_ = 0;
  queryqianghun_rsp_ = NULL;
  querylayer_rsp_ = NULL;
  flop_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQiangHunRespond::~CSQiangHunRespond() {
  SharedDtor();
}

void CSQiangHunRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete queryqianghun_rsp_;
    delete querylayer_rsp_;
    delete flop_rsp_;
  }
}

void CSQiangHunRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQiangHunRespond& CSQiangHunRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSQiangHunMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSQiangHunMsg_2eproto();
#endif
  return *default_instance_;
}

CSQiangHunRespond* CSQiangHunRespond::default_instance_ = NULL;

CSQiangHunRespond* CSQiangHunRespond::New() const {
  return new CSQiangHunRespond;
}

void CSQiangHunRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queryqianghun_rsp()) {
      if (queryqianghun_rsp_ != NULL) queryqianghun_rsp_->::vmsg::CSQiangHunInfo::Clear();
    }
    if (has_querylayer_rsp()) {
      if (querylayer_rsp_ != NULL) querylayer_rsp_->::vmsg::CSQiangHunInfo::Clear();
    }
    if (has_flop_rsp()) {
      if (flop_rsp_ != NULL) flop_rsp_->::vmsg::CSQiangHunInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQiangHunRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSQiangHunInfo QueryQiangHun_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryqianghun_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_QueryLayer_Rsp;
        break;
      }

      // optional .vmsg.CSQiangHunInfo QueryLayer_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryLayer_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querylayer_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Flop_Rsp;
        break;
      }

      // optional .vmsg.CSQiangHunInfo Flop_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Flop_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_flop_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQiangHunRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSQiangHunInfo QueryQiangHun_Rsp = 1;
  if (has_queryqianghun_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->queryqianghun_rsp(), output);
  }

  // optional .vmsg.CSQiangHunInfo QueryLayer_Rsp = 2;
  if (has_querylayer_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->querylayer_rsp(), output);
  }

  // optional .vmsg.CSQiangHunInfo Flop_Rsp = 3;
  if (has_flop_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->flop_rsp(), output);
  }

}

int CSQiangHunRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSQiangHunInfo QueryQiangHun_Rsp = 1;
    if (has_queryqianghun_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryqianghun_rsp());
    }

    // optional .vmsg.CSQiangHunInfo QueryLayer_Rsp = 2;
    if (has_querylayer_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querylayer_rsp());
    }

    // optional .vmsg.CSQiangHunInfo Flop_Rsp = 3;
    if (has_flop_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->flop_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQiangHunRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQiangHunRespond*>(&from));
}

void CSQiangHunRespond::MergeFrom(const CSQiangHunRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queryqianghun_rsp()) {
      mutable_queryqianghun_rsp()->::vmsg::CSQiangHunInfo::MergeFrom(from.queryqianghun_rsp());
    }
    if (from.has_querylayer_rsp()) {
      mutable_querylayer_rsp()->::vmsg::CSQiangHunInfo::MergeFrom(from.querylayer_rsp());
    }
    if (from.has_flop_rsp()) {
      mutable_flop_rsp()->::vmsg::CSQiangHunInfo::MergeFrom(from.flop_rsp());
    }
  }
}

void CSQiangHunRespond::CopyFrom(const CSQiangHunRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQiangHunRespond::IsInitialized() const {

  if (has_queryqianghun_rsp()) {
    if (!this->queryqianghun_rsp().IsInitialized()) return false;
  }
  if (has_querylayer_rsp()) {
    if (!this->querylayer_rsp().IsInitialized()) return false;
  }
  if (has_flop_rsp()) {
    if (!this->flop_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSQiangHunRespond::Swap(CSQiangHunRespond* other) {
  if (other != this) {
    std::swap(queryqianghun_rsp_, other->queryqianghun_rsp_);
    std::swap(querylayer_rsp_, other->querylayer_rsp_);
    std::swap(flop_rsp_, other->flop_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQiangHunRespond::GetTypeName() const {
  return "vmsg.CSQiangHunRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
