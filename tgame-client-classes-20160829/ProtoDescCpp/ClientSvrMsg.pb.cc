// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClientSvrMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ClientSvrMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_ClientSvrMsg_2eproto() {
  delete CSHeartBeatRqst::default_instance_;
  delete CSHeartBeatRsp::default_instance_;
  delete CSCommonErrMsg::default_instance_;
  delete VCli2LogicSvrMsg::default_instance_;
  delete VLogicSvr2CliMsg::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ClientSvrMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ClientSvrMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSPlayerMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSSenceOSD_2eproto();
  ::vmsg::protobuf_AddDesc_AdminMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipOpMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSTaskMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSRankMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSGoldMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSItemOpMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSWeaponMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSWarMapMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSFriendMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSGuildMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSMailMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSInfiniteMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSChatMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSCVZMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSServerNotifyMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSArenaMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSStoreMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSQiangHunMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSDebrisMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSActMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSDotaItemMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSCouponMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSPushMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBossChallengeMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSAccountMsg_2eproto();
  CSHeartBeatRqst::default_instance_ = new CSHeartBeatRqst();
  CSHeartBeatRsp::default_instance_ = new CSHeartBeatRsp();
  CSCommonErrMsg::default_instance_ = new CSCommonErrMsg();
  VCli2LogicSvrMsg::default_instance_ = new VCli2LogicSvrMsg();
  VLogicSvr2CliMsg::default_instance_ = new VLogicSvr2CliMsg();
  CSHeartBeatRqst::default_instance_->InitAsDefaultInstance();
  CSHeartBeatRsp::default_instance_->InitAsDefaultInstance();
  CSCommonErrMsg::default_instance_->InitAsDefaultInstance();
  VCli2LogicSvrMsg::default_instance_->InitAsDefaultInstance();
  VLogicSvr2CliMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ClientSvrMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ClientSvrMsg_2eproto_once_);
void protobuf_AddDesc_ClientSvrMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ClientSvrMsg_2eproto_once_,
                 &protobuf_AddDesc_ClientSvrMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ClientSvrMsg_2eproto {
  StaticDescriptorInitializer_ClientSvrMsg_2eproto() {
    protobuf_AddDesc_ClientSvrMsg_2eproto();
  }
} static_descriptor_initializer_ClientSvrMsg_2eproto_;
#endif
bool CS_CMD_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 300:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 601:
    case 602:
    case 603:
    case 604:
    case 605:
    case 606:
    case 607:
    case 608:
    case 609:
    case 701:
    case 702:
    case 703:
    case 704:
    case 705:
    case 706:
    case 707:
    case 708:
    case 709:
    case 710:
    case 711:
    case 712:
    case 800:
    case 801:
    case 802:
    case 900:
    case 901:
    case 902:
    case 903:
    case 904:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1201:
    case 1301:
    case 1302:
    case 1303:
    case 1304:
    case 1305:
    case 1306:
    case 1307:
    case 1308:
    case 1309:
    case 1310:
    case 1311:
    case 1312:
    case 1313:
    case 1314:
    case 1400:
    case 1401:
    case 1402:
    case 1403:
    case 1404:
    case 1405:
    case 1406:
    case 1407:
    case 1408:
    case 1409:
    case 1410:
    case 1411:
    case 1412:
    case 1413:
    case 1500:
    case 1501:
    case 1502:
    case 1503:
    case 1504:
    case 1505:
    case 1506:
    case 1507:
    case 1508:
    case 1509:
    case 1510:
    case 1511:
    case 1512:
    case 1513:
    case 1514:
    case 1515:
    case 1516:
    case 1517:
    case 1518:
    case 1520:
    case 1521:
    case 1522:
    case 1523:
    case 1600:
    case 1601:
    case 1602:
    case 1603:
    case 1604:
    case 1605:
    case 1606:
    case 1700:
    case 1701:
    case 1702:
    case 1703:
    case 1704:
    case 1705:
    case 1706:
    case 1707:
    case 1801:
    case 1900:
    case 1901:
    case 1902:
    case 1903:
    case 1904:
    case 1905:
    case 1906:
    case 1907:
    case 1908:
    case 1909:
    case 1910:
    case 1911:
    case 1912:
    case 1913:
    case 1914:
    case 1915:
    case 1916:
    case 1917:
    case 2000:
    case 2100:
    case 2101:
    case 2200:
    case 2201:
    case 2202:
    case 2203:
    case 2204:
    case 2205:
    case 2206:
    case 2207:
    case 2208:
    case 2209:
    case 2210:
    case 2211:
    case 2300:
    case 2301:
    case 2302:
    case 2303:
    case 2304:
    case 2400:
    case 2401:
    case 2402:
    case 2500:
    case 2501:
    case 2600:
    case 2601:
    case 2700:
    case 2701:
    case 2702:
    case 2703:
    case 2800:
    case 2801:
    case 2802:
    case 2803:
    case 2804:
    case 2805:
    case 2806:
    case 2807:
    case 2808:
    case 2809:
    case 2810:
    case 2811:
    case 2812:
    case 2813:
    case 2900:
    case 3000:
    case 3001:
    case 3002:
    case 3003:
    case 3004:
    case 3005:
    case 3006:
    case 1000000:
    case 1000001:
    case 1000002:
    case 1000003:
    case 1000004:
    case 1000005:
    case 1000006:
    case 1000007:
    case 1000008:
    case 1000009:
    case 1000010:
    case 1000011:
    case 1000012:
    case 1000013:
    case 1000014:
    case 2000000:
    case 2000001:
    case 2000002:
    case 2000003:
    case 10000000:
    case 10000001:
      return true;
    default:
      return false;
  }
}

bool THING_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

bool ITEM_DETAIL_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool TASK_STAT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool TASK_TARGET_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool ATTR_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 255:
      return true;
    default:
      return false;
  }
}

bool DEF_ATK_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool EQUIP_POS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool EQUIP_GRADE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool WEAPON_COLOR_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool WEAPON_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool WEAPON_ARRAY_CELL_STATE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool DAILY_SYS_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

bool DAILY_TARGET_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

bool MILESTONE_TARGET_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

bool RANK_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 100:
    case 101:
    case 102:
      return true;
    default:
      return false;
  }
}

bool GEN_STRENGTHEN_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

bool CVZ_STAT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

bool SCENE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

bool VIP_MODULE_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

bool ACT_STAT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool ACT_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool ACT_LIST_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 100:
      return true;
    default:
      return false;
  }
}

bool ACT_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool ONE_SHOT_GIFT_MASK_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

bool BOSS_CHALLENGE_STAT_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

bool BOSS_CHALLENGE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool SPEICIAL_ITEM_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 9:
    case 10:
    case 11:
    case 17004:
    case 17005:
      return true;
    default:
      return false;
  }
}

bool PLAYER_ENFORCE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSHeartBeatRqst::kReservedFieldNumber;
#endif  // !_MSC_VER

CSHeartBeatRqst::CSHeartBeatRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSHeartBeatRqst::InitAsDefaultInstance() {
}

CSHeartBeatRqst::CSHeartBeatRqst(const CSHeartBeatRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSHeartBeatRqst::SharedCtor() {
  _cached_size_ = 0;
  reserved_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSHeartBeatRqst::~CSHeartBeatRqst() {
  SharedDtor();
}

void CSHeartBeatRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSHeartBeatRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSHeartBeatRqst& CSHeartBeatRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

CSHeartBeatRqst* CSHeartBeatRqst::default_instance_ = NULL;

CSHeartBeatRqst* CSHeartBeatRqst::New() const {
  return new CSHeartBeatRqst;
}

void CSHeartBeatRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reserved_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSHeartBeatRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Reserved = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reserved_)));
          set_has_reserved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSHeartBeatRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Reserved = 1;
  if (has_reserved()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reserved(), output);
  }

}

int CSHeartBeatRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Reserved = 1;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reserved());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSHeartBeatRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSHeartBeatRqst*>(&from));
}

void CSHeartBeatRqst::MergeFrom(const CSHeartBeatRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reserved()) {
      set_reserved(from.reserved());
    }
  }
}

void CSHeartBeatRqst::CopyFrom(const CSHeartBeatRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHeartBeatRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSHeartBeatRqst::Swap(CSHeartBeatRqst* other) {
  if (other != this) {
    std::swap(reserved_, other->reserved_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSHeartBeatRqst::GetTypeName() const {
  return "vmsg.CSHeartBeatRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSHeartBeatRsp::kSvrTimeFieldNumber;
#endif  // !_MSC_VER

CSHeartBeatRsp::CSHeartBeatRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSHeartBeatRsp::InitAsDefaultInstance() {
}

CSHeartBeatRsp::CSHeartBeatRsp(const CSHeartBeatRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSHeartBeatRsp::SharedCtor() {
  _cached_size_ = 0;
  svr_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSHeartBeatRsp::~CSHeartBeatRsp() {
  SharedDtor();
}

void CSHeartBeatRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSHeartBeatRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSHeartBeatRsp& CSHeartBeatRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

CSHeartBeatRsp* CSHeartBeatRsp::default_instance_ = NULL;

CSHeartBeatRsp* CSHeartBeatRsp::New() const {
  return new CSHeartBeatRsp;
}

void CSHeartBeatRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svr_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSHeartBeatRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Svr_Time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svr_time_)));
          set_has_svr_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSHeartBeatRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Svr_Time = 1;
  if (has_svr_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svr_time(), output);
  }

}

int CSHeartBeatRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Svr_Time = 1;
    if (has_svr_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svr_time());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSHeartBeatRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSHeartBeatRsp*>(&from));
}

void CSHeartBeatRsp::MergeFrom(const CSHeartBeatRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svr_time()) {
      set_svr_time(from.svr_time());
    }
  }
}

void CSHeartBeatRsp::CopyFrom(const CSHeartBeatRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSHeartBeatRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSHeartBeatRsp::Swap(CSHeartBeatRsp* other) {
  if (other != this) {
    std::swap(svr_time_, other->svr_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSHeartBeatRsp::GetTypeName() const {
  return "vmsg.CSHeartBeatRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCommonErrMsg::kRqstCmdIDFieldNumber;
const int CSCommonErrMsg::kErrorCodeFieldNumber;
const int CSCommonErrMsg::kOpt1FieldNumber;
const int CSCommonErrMsg::kOpt2FieldNumber;
#endif  // !_MSC_VER

CSCommonErrMsg::CSCommonErrMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCommonErrMsg::InitAsDefaultInstance() {
}

CSCommonErrMsg::CSCommonErrMsg(const CSCommonErrMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCommonErrMsg::SharedCtor() {
  _cached_size_ = 0;
  rqstcmdid_ = 0u;
  errorcode_ = 0u;
  opt1_ = 0;
  opt2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCommonErrMsg::~CSCommonErrMsg() {
  SharedDtor();
}

void CSCommonErrMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSCommonErrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCommonErrMsg& CSCommonErrMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

CSCommonErrMsg* CSCommonErrMsg::default_instance_ = NULL;

CSCommonErrMsg* CSCommonErrMsg::New() const {
  return new CSCommonErrMsg;
}

void CSCommonErrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rqstcmdid_ = 0u;
    errorcode_ = 0u;
    opt1_ = 0;
    opt2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCommonErrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RqstCmdID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rqstcmdid_)));
          set_has_rqstcmdid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ErrorCode;
        break;
      }

      // required uint32 ErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opt1;
        break;
      }

      // optional int32 opt1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt1_)));
          set_has_opt1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opt2;
        break;
      }

      // optional int32 opt2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opt2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opt2_)));
          set_has_opt2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCommonErrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RqstCmdID = 1;
  if (has_rqstcmdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rqstcmdid(), output);
  }

  // required uint32 ErrorCode = 2;
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->errorcode(), output);
  }

  // optional int32 opt1 = 3;
  if (has_opt1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->opt1(), output);
  }

  // optional int32 opt2 = 4;
  if (has_opt2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->opt2(), output);
  }

}

int CSCommonErrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RqstCmdID = 1;
    if (has_rqstcmdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rqstcmdid());
    }

    // required uint32 ErrorCode = 2;
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional int32 opt1 = 3;
    if (has_opt1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt1());
    }

    // optional int32 opt2 = 4;
    if (has_opt2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opt2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCommonErrMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCommonErrMsg*>(&from));
}

void CSCommonErrMsg::MergeFrom(const CSCommonErrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rqstcmdid()) {
      set_rqstcmdid(from.rqstcmdid());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_opt1()) {
      set_opt1(from.opt1());
    }
    if (from.has_opt2()) {
      set_opt2(from.opt2());
    }
  }
}

void CSCommonErrMsg::CopyFrom(const CSCommonErrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCommonErrMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSCommonErrMsg::Swap(CSCommonErrMsg* other) {
  if (other != this) {
    std::swap(rqstcmdid_, other->rqstcmdid_);
    std::swap(errorcode_, other->errorcode_);
    std::swap(opt1_, other->opt1_);
    std::swap(opt2_, other->opt2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCommonErrMsg::GetTypeName() const {
  return "vmsg.CSCommonErrMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int VCli2LogicSvrMsg::kMsgHeadFieldNumber;
const int VCli2LogicSvrMsg::kBagRqstFieldNumber;
const int VCli2LogicSvrMsg::kPlayerRequestFieldNumber;
const int VCli2LogicSvrMsg::kSceneOSDRequestFieldNumber;
const int VCli2LogicSvrMsg::kEquipRequestFieldNumber;
const int VCli2LogicSvrMsg::kTaskRequestFieldNumber;
const int VCli2LogicSvrMsg::kRankRequestFieldNumber;
const int VCli2LogicSvrMsg::kWeaponRequestFieldNumber;
const int VCli2LogicSvrMsg::kGoldRequestFieldNumber;
const int VCli2LogicSvrMsg::kItemRequestFieldNumber;
const int VCli2LogicSvrMsg::kWarMapRequestFieldNumber;
const int VCli2LogicSvrMsg::kFriendRequestFieldNumber;
const int VCli2LogicSvrMsg::kGuildRequestFieldNumber;
const int VCli2LogicSvrMsg::kMailRequestFieldNumber;
const int VCli2LogicSvrMsg::kInfiniteRequestFieldNumber;
const int VCli2LogicSvrMsg::kChatRequestFieldNumber;
const int VCli2LogicSvrMsg::kCVZRequestFieldNumber;
const int VCli2LogicSvrMsg::kServerNotifyRequestFieldNumber;
const int VCli2LogicSvrMsg::kDailyGiftRequestFieldNumber;
const int VCli2LogicSvrMsg::kArenaRequestFieldNumber;
const int VCli2LogicSvrMsg::kStoreRequestFieldNumber;
const int VCli2LogicSvrMsg::kQiangHunRequestFieldNumber;
const int VCli2LogicSvrMsg::kDebrisRequestFieldNumber;
const int VCli2LogicSvrMsg::kActRequestFieldNumber;
const int VCli2LogicSvrMsg::kDotaItemRequestFieldNumber;
const int VCli2LogicSvrMsg::kCouponRequestFieldNumber;
const int VCli2LogicSvrMsg::kPanicBuyingRequstFieldNumber;
const int VCli2LogicSvrMsg::kDeviceTokenReportFieldNumber;
const int VCli2LogicSvrMsg::kBossChallengeRqstFieldNumber;
const int VCli2LogicSvrMsg::kHeartBeatRqstFieldNumber;
const int VCli2LogicSvrMsg::kAdminRequestFieldNumber;
const int VCli2LogicSvrMsg::kAccountRqstFieldNumber;
#endif  // !_MSC_VER

VCli2LogicSvrMsg::VCli2LogicSvrMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VCli2LogicSvrMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_head_ = const_cast< ::vmsg::MsgHead*>(
      ::vmsg::MsgHead::internal_default_instance());
#else
  msg_head_ = const_cast< ::vmsg::MsgHead*>(&::vmsg::MsgHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bagrqst_ = const_cast< ::vmsg::CSBagRequest*>(
      ::vmsg::CSBagRequest::internal_default_instance());
#else
  bagrqst_ = const_cast< ::vmsg::CSBagRequest*>(&::vmsg::CSBagRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerrequest_ = const_cast< ::vmsg::CSPlayerRequest*>(
      ::vmsg::CSPlayerRequest::internal_default_instance());
#else
  playerrequest_ = const_cast< ::vmsg::CSPlayerRequest*>(&::vmsg::CSPlayerRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sceneosdrequest_ = const_cast< ::vmsg::CSSceneOSDRequest*>(
      ::vmsg::CSSceneOSDRequest::internal_default_instance());
#else
  sceneosdrequest_ = const_cast< ::vmsg::CSSceneOSDRequest*>(&::vmsg::CSSceneOSDRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprequest_ = const_cast< ::vmsg::CSEquipRequest*>(
      ::vmsg::CSEquipRequest::internal_default_instance());
#else
  equiprequest_ = const_cast< ::vmsg::CSEquipRequest*>(&::vmsg::CSEquipRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  taskrequest_ = const_cast< ::vmsg::CSTaskRequest*>(
      ::vmsg::CSTaskRequest::internal_default_instance());
#else
  taskrequest_ = const_cast< ::vmsg::CSTaskRequest*>(&::vmsg::CSTaskRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankrequest_ = const_cast< ::vmsg::CSRankRequest*>(
      ::vmsg::CSRankRequest::internal_default_instance());
#else
  rankrequest_ = const_cast< ::vmsg::CSRankRequest*>(&::vmsg::CSRankRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weaponrequest_ = const_cast< ::vmsg::CSWeaponRequest*>(
      ::vmsg::CSWeaponRequest::internal_default_instance());
#else
  weaponrequest_ = const_cast< ::vmsg::CSWeaponRequest*>(&::vmsg::CSWeaponRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  goldrequest_ = const_cast< ::vmsg::CSGoldRequest*>(
      ::vmsg::CSGoldRequest::internal_default_instance());
#else
  goldrequest_ = const_cast< ::vmsg::CSGoldRequest*>(&::vmsg::CSGoldRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  itemrequest_ = const_cast< ::vmsg::CSItemRequest*>(
      ::vmsg::CSItemRequest::internal_default_instance());
#else
  itemrequest_ = const_cast< ::vmsg::CSItemRequest*>(&::vmsg::CSItemRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmaprequest_ = const_cast< ::vmsg::CSWarMapRequest*>(
      ::vmsg::CSWarMapRequest::internal_default_instance());
#else
  warmaprequest_ = const_cast< ::vmsg::CSWarMapRequest*>(&::vmsg::CSWarMapRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendrequest_ = const_cast< ::vmsg::CSFriendRequest*>(
      ::vmsg::CSFriendRequest::internal_default_instance());
#else
  friendrequest_ = const_cast< ::vmsg::CSFriendRequest*>(&::vmsg::CSFriendRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildrequest_ = const_cast< ::vmsg::CSGuildRequest*>(
      ::vmsg::CSGuildRequest::internal_default_instance());
#else
  guildrequest_ = const_cast< ::vmsg::CSGuildRequest*>(&::vmsg::CSGuildRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mailrequest_ = const_cast< ::vmsg::CSMailRequest*>(
      ::vmsg::CSMailRequest::internal_default_instance());
#else
  mailrequest_ = const_cast< ::vmsg::CSMailRequest*>(&::vmsg::CSMailRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  infiniterequest_ = const_cast< ::vmsg::CSInfiniteRequest*>(
      ::vmsg::CSInfiniteRequest::internal_default_instance());
#else
  infiniterequest_ = const_cast< ::vmsg::CSInfiniteRequest*>(&::vmsg::CSInfiniteRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chatrequest_ = const_cast< ::vmsg::CSChatRequest*>(
      ::vmsg::CSChatRequest::internal_default_instance());
#else
  chatrequest_ = const_cast< ::vmsg::CSChatRequest*>(&::vmsg::CSChatRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cvzrequest_ = const_cast< ::vmsg::CSCVZRequest*>(
      ::vmsg::CSCVZRequest::internal_default_instance());
#else
  cvzrequest_ = const_cast< ::vmsg::CSCVZRequest*>(&::vmsg::CSCVZRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  servernotifyrequest_ = const_cast< ::vmsg::CSServerNotifyRequest*>(
      ::vmsg::CSServerNotifyRequest::internal_default_instance());
#else
  servernotifyrequest_ = const_cast< ::vmsg::CSServerNotifyRequest*>(&::vmsg::CSServerNotifyRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailygiftrequest_ = const_cast< ::vmsg::CSDailyGiftRequest*>(
      ::vmsg::CSDailyGiftRequest::internal_default_instance());
#else
  dailygiftrequest_ = const_cast< ::vmsg::CSDailyGiftRequest*>(&::vmsg::CSDailyGiftRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arenarequest_ = const_cast< ::vmsg::CSArenaRequest*>(
      ::vmsg::CSArenaRequest::internal_default_instance());
#else
  arenarequest_ = const_cast< ::vmsg::CSArenaRequest*>(&::vmsg::CSArenaRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storerequest_ = const_cast< ::vmsg::CSStoreRequest*>(
      ::vmsg::CSStoreRequest::internal_default_instance());
#else
  storerequest_ = const_cast< ::vmsg::CSStoreRequest*>(&::vmsg::CSStoreRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  qianghunrequest_ = const_cast< ::vmsg::CSQiangHunRequest*>(
      ::vmsg::CSQiangHunRequest::internal_default_instance());
#else
  qianghunrequest_ = const_cast< ::vmsg::CSQiangHunRequest*>(&::vmsg::CSQiangHunRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  debrisrequest_ = const_cast< ::vmsg::CSDebrisRequest*>(
      ::vmsg::CSDebrisRequest::internal_default_instance());
#else
  debrisrequest_ = const_cast< ::vmsg::CSDebrisRequest*>(&::vmsg::CSDebrisRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actrequest_ = const_cast< ::vmsg::CSActRequest*>(
      ::vmsg::CSActRequest::internal_default_instance());
#else
  actrequest_ = const_cast< ::vmsg::CSActRequest*>(&::vmsg::CSActRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dotaitemrequest_ = const_cast< ::vmsg::CSDotaItemRequest*>(
      ::vmsg::CSDotaItemRequest::internal_default_instance());
#else
  dotaitemrequest_ = const_cast< ::vmsg::CSDotaItemRequest*>(&::vmsg::CSDotaItemRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  couponrequest_ = const_cast< ::vmsg::CSCouponRequest*>(
      ::vmsg::CSCouponRequest::internal_default_instance());
#else
  couponrequest_ = const_cast< ::vmsg::CSCouponRequest*>(&::vmsg::CSCouponRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  panicbuyingrequst_ = const_cast< ::vmsg::CSPanicBuyingStoreRequest*>(
      ::vmsg::CSPanicBuyingStoreRequest::internal_default_instance());
#else
  panicbuyingrequst_ = const_cast< ::vmsg::CSPanicBuyingStoreRequest*>(&::vmsg::CSPanicBuyingStoreRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  devicetokenreport_ = const_cast< ::vmsg::CSUMemDeviceTokenReport*>(
      ::vmsg::CSUMemDeviceTokenReport::internal_default_instance());
#else
  devicetokenreport_ = const_cast< ::vmsg::CSUMemDeviceTokenReport*>(&::vmsg::CSUMemDeviceTokenReport::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bosschallengerqst_ = const_cast< ::vmsg::CSBossChallengeRqst*>(
      ::vmsg::CSBossChallengeRqst::internal_default_instance());
#else
  bosschallengerqst_ = const_cast< ::vmsg::CSBossChallengeRqst*>(&::vmsg::CSBossChallengeRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  heartbeat_rqst_ = const_cast< ::vmsg::CSHeartBeatRqst*>(
      ::vmsg::CSHeartBeatRqst::internal_default_instance());
#else
  heartbeat_rqst_ = const_cast< ::vmsg::CSHeartBeatRqst*>(&::vmsg::CSHeartBeatRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminrequest_ = const_cast< ::vmsg::CSAdminRequest*>(
      ::vmsg::CSAdminRequest::internal_default_instance());
#else
  adminrequest_ = const_cast< ::vmsg::CSAdminRequest*>(&::vmsg::CSAdminRequest::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  account_rqst_ = const_cast< ::vmsg::CSAccountRquest*>(
      ::vmsg::CSAccountRquest::internal_default_instance());
#else
  account_rqst_ = const_cast< ::vmsg::CSAccountRquest*>(&::vmsg::CSAccountRquest::default_instance());
#endif
}

VCli2LogicSvrMsg::VCli2LogicSvrMsg(const VCli2LogicSvrMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VCli2LogicSvrMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_head_ = NULL;
  bagrqst_ = NULL;
  playerrequest_ = NULL;
  sceneosdrequest_ = NULL;
  equiprequest_ = NULL;
  taskrequest_ = NULL;
  rankrequest_ = NULL;
  weaponrequest_ = NULL;
  goldrequest_ = NULL;
  itemrequest_ = NULL;
  warmaprequest_ = NULL;
  friendrequest_ = NULL;
  guildrequest_ = NULL;
  mailrequest_ = NULL;
  infiniterequest_ = NULL;
  chatrequest_ = NULL;
  cvzrequest_ = NULL;
  servernotifyrequest_ = NULL;
  dailygiftrequest_ = NULL;
  arenarequest_ = NULL;
  storerequest_ = NULL;
  qianghunrequest_ = NULL;
  debrisrequest_ = NULL;
  actrequest_ = NULL;
  dotaitemrequest_ = NULL;
  couponrequest_ = NULL;
  panicbuyingrequst_ = NULL;
  devicetokenreport_ = NULL;
  bosschallengerqst_ = NULL;
  heartbeat_rqst_ = NULL;
  adminrequest_ = NULL;
  account_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VCli2LogicSvrMsg::~VCli2LogicSvrMsg() {
  SharedDtor();
}

void VCli2LogicSvrMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_head_;
    delete bagrqst_;
    delete playerrequest_;
    delete sceneosdrequest_;
    delete equiprequest_;
    delete taskrequest_;
    delete rankrequest_;
    delete weaponrequest_;
    delete goldrequest_;
    delete itemrequest_;
    delete warmaprequest_;
    delete friendrequest_;
    delete guildrequest_;
    delete mailrequest_;
    delete infiniterequest_;
    delete chatrequest_;
    delete cvzrequest_;
    delete servernotifyrequest_;
    delete dailygiftrequest_;
    delete arenarequest_;
    delete storerequest_;
    delete qianghunrequest_;
    delete debrisrequest_;
    delete actrequest_;
    delete dotaitemrequest_;
    delete couponrequest_;
    delete panicbuyingrequst_;
    delete devicetokenreport_;
    delete bosschallengerqst_;
    delete heartbeat_rqst_;
    delete adminrequest_;
    delete account_rqst_;
  }
}

void VCli2LogicSvrMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VCli2LogicSvrMsg& VCli2LogicSvrMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

VCli2LogicSvrMsg* VCli2LogicSvrMsg::default_instance_ = NULL;

VCli2LogicSvrMsg* VCli2LogicSvrMsg::New() const {
  return new VCli2LogicSvrMsg;
}

void VCli2LogicSvrMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_head()) {
      if (msg_head_ != NULL) msg_head_->::vmsg::MsgHead::Clear();
    }
    if (has_bagrqst()) {
      if (bagrqst_ != NULL) bagrqst_->::vmsg::CSBagRequest::Clear();
    }
    if (has_playerrequest()) {
      if (playerrequest_ != NULL) playerrequest_->::vmsg::CSPlayerRequest::Clear();
    }
    if (has_sceneosdrequest()) {
      if (sceneosdrequest_ != NULL) sceneosdrequest_->::vmsg::CSSceneOSDRequest::Clear();
    }
    if (has_equiprequest()) {
      if (equiprequest_ != NULL) equiprequest_->::vmsg::CSEquipRequest::Clear();
    }
    if (has_taskrequest()) {
      if (taskrequest_ != NULL) taskrequest_->::vmsg::CSTaskRequest::Clear();
    }
    if (has_rankrequest()) {
      if (rankrequest_ != NULL) rankrequest_->::vmsg::CSRankRequest::Clear();
    }
    if (has_weaponrequest()) {
      if (weaponrequest_ != NULL) weaponrequest_->::vmsg::CSWeaponRequest::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_goldrequest()) {
      if (goldrequest_ != NULL) goldrequest_->::vmsg::CSGoldRequest::Clear();
    }
    if (has_itemrequest()) {
      if (itemrequest_ != NULL) itemrequest_->::vmsg::CSItemRequest::Clear();
    }
    if (has_warmaprequest()) {
      if (warmaprequest_ != NULL) warmaprequest_->::vmsg::CSWarMapRequest::Clear();
    }
    if (has_friendrequest()) {
      if (friendrequest_ != NULL) friendrequest_->::vmsg::CSFriendRequest::Clear();
    }
    if (has_guildrequest()) {
      if (guildrequest_ != NULL) guildrequest_->::vmsg::CSGuildRequest::Clear();
    }
    if (has_mailrequest()) {
      if (mailrequest_ != NULL) mailrequest_->::vmsg::CSMailRequest::Clear();
    }
    if (has_infiniterequest()) {
      if (infiniterequest_ != NULL) infiniterequest_->::vmsg::CSInfiniteRequest::Clear();
    }
    if (has_chatrequest()) {
      if (chatrequest_ != NULL) chatrequest_->::vmsg::CSChatRequest::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_cvzrequest()) {
      if (cvzrequest_ != NULL) cvzrequest_->::vmsg::CSCVZRequest::Clear();
    }
    if (has_servernotifyrequest()) {
      if (servernotifyrequest_ != NULL) servernotifyrequest_->::vmsg::CSServerNotifyRequest::Clear();
    }
    if (has_dailygiftrequest()) {
      if (dailygiftrequest_ != NULL) dailygiftrequest_->::vmsg::CSDailyGiftRequest::Clear();
    }
    if (has_arenarequest()) {
      if (arenarequest_ != NULL) arenarequest_->::vmsg::CSArenaRequest::Clear();
    }
    if (has_storerequest()) {
      if (storerequest_ != NULL) storerequest_->::vmsg::CSStoreRequest::Clear();
    }
    if (has_qianghunrequest()) {
      if (qianghunrequest_ != NULL) qianghunrequest_->::vmsg::CSQiangHunRequest::Clear();
    }
    if (has_debrisrequest()) {
      if (debrisrequest_ != NULL) debrisrequest_->::vmsg::CSDebrisRequest::Clear();
    }
    if (has_actrequest()) {
      if (actrequest_ != NULL) actrequest_->::vmsg::CSActRequest::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_dotaitemrequest()) {
      if (dotaitemrequest_ != NULL) dotaitemrequest_->::vmsg::CSDotaItemRequest::Clear();
    }
    if (has_couponrequest()) {
      if (couponrequest_ != NULL) couponrequest_->::vmsg::CSCouponRequest::Clear();
    }
    if (has_panicbuyingrequst()) {
      if (panicbuyingrequst_ != NULL) panicbuyingrequst_->::vmsg::CSPanicBuyingStoreRequest::Clear();
    }
    if (has_devicetokenreport()) {
      if (devicetokenreport_ != NULL) devicetokenreport_->::vmsg::CSUMemDeviceTokenReport::Clear();
    }
    if (has_bosschallengerqst()) {
      if (bosschallengerqst_ != NULL) bosschallengerqst_->::vmsg::CSBossChallengeRqst::Clear();
    }
    if (has_heartbeat_rqst()) {
      if (heartbeat_rqst_ != NULL) heartbeat_rqst_->::vmsg::CSHeartBeatRqst::Clear();
    }
    if (has_adminrequest()) {
      if (adminrequest_ != NULL) adminrequest_->::vmsg::CSAdminRequest::Clear();
    }
    if (has_account_rqst()) {
      if (account_rqst_ != NULL) account_rqst_->::vmsg::CSAccountRquest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VCli2LogicSvrMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.MsgHead Msg_Head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BagRqst;
        break;
      }

      // optional .vmsg.CSBagRequest BagRqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagrqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PlayerRequest;
        break;
      }

      // optional .vmsg.CSPlayerRequest PlayerRequest = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SceneOSDRequest;
        break;
      }

      // optional .vmsg.CSSceneOSDRequest SceneOSDRequest = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SceneOSDRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sceneosdrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_EquipRequest;
        break;
      }

      // optional .vmsg.CSEquipRequest EquipRequest = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_TaskRequest;
        break;
      }

      // optional .vmsg.CSTaskRequest TaskRequest = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_RankRequest;
        break;
      }

      // optional .vmsg.CSRankRequest RankRequest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_WeaponRequest;
        break;
      }

      // optional .vmsg.CSWeaponRequest WeaponRequest = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weaponrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GoldRequest;
        break;
      }

      // optional .vmsg.CSGoldRequest GoldRequest = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GoldRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goldrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ItemRequest;
        break;
      }

      // optional .vmsg.CSItemRequest ItemRequest = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_WarMapRequest;
        break;
      }

      // optional .vmsg.CSWarMapRequest WarMapRequest = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmaprequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FriendRequest;
        break;
      }

      // optional .vmsg.CSFriendRequest FriendRequest = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FriendRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_GuildRequest;
        break;
      }

      // optional .vmsg.CSGuildRequest GuildRequest = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_MailRequest;
        break;
      }

      // optional .vmsg.CSMailRequest MailRequest = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_InfiniteRequest;
        break;
      }

      // optional .vmsg.CSInfiniteRequest InfiniteRequest = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfiniteRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infiniterequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_ChatRequest;
        break;
      }

      // optional .vmsg.CSChatRequest ChatRequest = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_CVZRequest;
        break;
      }

      // optional .vmsg.CSCVZRequest CVZRequest = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CVZRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvzrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ServerNotifyRequest;
        break;
      }

      // optional .vmsg.CSServerNotifyRequest ServerNotifyRequest = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerNotifyRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servernotifyrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_DailyGiftRequest;
        break;
      }

      // optional .vmsg.CSDailyGiftRequest DailyGiftRequest = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyGiftRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailygiftrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ArenaRequest;
        break;
      }

      // optional .vmsg.CSArenaRequest ArenaRequest = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ArenaRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenarequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_StoreRequest;
        break;
      }

      // optional .vmsg.CSStoreRequest StoreRequest = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StoreRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storerequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_QiangHunRequest;
        break;
      }

      // optional .vmsg.CSQiangHunRequest QiangHunRequest = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QiangHunRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qianghunrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_DebrisRequest;
        break;
      }

      // optional .vmsg.CSDebrisRequest DebrisRequest = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DebrisRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debrisrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ActRequest;
        break;
      }

      // optional .vmsg.CSActRequest ActRequest = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_DotaItemRequest;
        break;
      }

      // optional .vmsg.CSDotaItemRequest DotaItemRequest = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DotaItemRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dotaitemrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_CouponRequest;
        break;
      }

      // optional .vmsg.CSCouponRequest CouponRequest = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CouponRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_couponrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_PanicBuyingRequst;
        break;
      }

      // optional .vmsg.CSPanicBuyingStoreRequest PanicBuyingRequst = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PanicBuyingRequst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_panicbuyingrequst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_DeviceTokenReport;
        break;
      }

      // optional .vmsg.CSUMemDeviceTokenReport DeviceTokenReport = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceTokenReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_devicetokenreport()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_BossChallengeRqst;
        break;
      }

      // optional .vmsg.CSBossChallengeRqst BossChallengeRqst = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BossChallengeRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bosschallengerqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_HeartBeat_Rqst;
        break;
      }

      // optional .vmsg.CSHeartBeatRqst HeartBeat_Rqst = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeartBeat_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_AdminRequest;
        break;
      }

      // optional .vmsg.CSAdminRequest AdminRequest = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdminRequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminrequest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_Account_Rqst;
        break;
      }

      // optional .vmsg.CSAccountRquest Account_Rqst = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Account_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VCli2LogicSvrMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.MsgHead Msg_Head = 1;
  if (has_msg_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg_head(), output);
  }

  // optional .vmsg.CSBagRequest BagRqst = 3;
  if (has_bagrqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bagrqst(), output);
  }

  // optional .vmsg.CSPlayerRequest PlayerRequest = 5;
  if (has_playerrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->playerrequest(), output);
  }

  // optional .vmsg.CSSceneOSDRequest SceneOSDRequest = 6;
  if (has_sceneosdrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->sceneosdrequest(), output);
  }

  // optional .vmsg.CSEquipRequest EquipRequest = 7;
  if (has_equiprequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->equiprequest(), output);
  }

  // optional .vmsg.CSTaskRequest TaskRequest = 8;
  if (has_taskrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->taskrequest(), output);
  }

  // optional .vmsg.CSRankRequest RankRequest = 9;
  if (has_rankrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->rankrequest(), output);
  }

  // optional .vmsg.CSWeaponRequest WeaponRequest = 10;
  if (has_weaponrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->weaponrequest(), output);
  }

  // optional .vmsg.CSGoldRequest GoldRequest = 11;
  if (has_goldrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->goldrequest(), output);
  }

  // optional .vmsg.CSItemRequest ItemRequest = 12;
  if (has_itemrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->itemrequest(), output);
  }

  // optional .vmsg.CSWarMapRequest WarMapRequest = 13;
  if (has_warmaprequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->warmaprequest(), output);
  }

  // optional .vmsg.CSFriendRequest FriendRequest = 14;
  if (has_friendrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->friendrequest(), output);
  }

  // optional .vmsg.CSGuildRequest GuildRequest = 15;
  if (has_guildrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->guildrequest(), output);
  }

  // optional .vmsg.CSMailRequest MailRequest = 16;
  if (has_mailrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->mailrequest(), output);
  }

  // optional .vmsg.CSInfiniteRequest InfiniteRequest = 17;
  if (has_infiniterequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->infiniterequest(), output);
  }

  // optional .vmsg.CSChatRequest ChatRequest = 18;
  if (has_chatrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->chatrequest(), output);
  }

  // optional .vmsg.CSCVZRequest CVZRequest = 19;
  if (has_cvzrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->cvzrequest(), output);
  }

  // optional .vmsg.CSServerNotifyRequest ServerNotifyRequest = 20;
  if (has_servernotifyrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->servernotifyrequest(), output);
  }

  // optional .vmsg.CSDailyGiftRequest DailyGiftRequest = 21;
  if (has_dailygiftrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->dailygiftrequest(), output);
  }

  // optional .vmsg.CSArenaRequest ArenaRequest = 22;
  if (has_arenarequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->arenarequest(), output);
  }

  // optional .vmsg.CSStoreRequest StoreRequest = 23;
  if (has_storerequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->storerequest(), output);
  }

  // optional .vmsg.CSQiangHunRequest QiangHunRequest = 24;
  if (has_qianghunrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->qianghunrequest(), output);
  }

  // optional .vmsg.CSDebrisRequest DebrisRequest = 25;
  if (has_debrisrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->debrisrequest(), output);
  }

  // optional .vmsg.CSActRequest ActRequest = 26;
  if (has_actrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->actrequest(), output);
  }

  // optional .vmsg.CSDotaItemRequest DotaItemRequest = 27;
  if (has_dotaitemrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->dotaitemrequest(), output);
  }

  // optional .vmsg.CSCouponRequest CouponRequest = 28;
  if (has_couponrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->couponrequest(), output);
  }

  // optional .vmsg.CSPanicBuyingStoreRequest PanicBuyingRequst = 29;
  if (has_panicbuyingrequst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->panicbuyingrequst(), output);
  }

  // optional .vmsg.CSUMemDeviceTokenReport DeviceTokenReport = 30;
  if (has_devicetokenreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->devicetokenreport(), output);
  }

  // optional .vmsg.CSBossChallengeRqst BossChallengeRqst = 31;
  if (has_bosschallengerqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      31, this->bosschallengerqst(), output);
  }

  // optional .vmsg.CSHeartBeatRqst HeartBeat_Rqst = 100;
  if (has_heartbeat_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->heartbeat_rqst(), output);
  }

  // optional .vmsg.CSAdminRequest AdminRequest = 101;
  if (has_adminrequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->adminrequest(), output);
  }

  // optional .vmsg.CSAccountRquest Account_Rqst = 102;
  if (has_account_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, this->account_rqst(), output);
  }

}

int VCli2LogicSvrMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.MsgHead Msg_Head = 1;
    if (has_msg_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_head());
    }

    // optional .vmsg.CSBagRequest BagRqst = 3;
    if (has_bagrqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagrqst());
    }

    // optional .vmsg.CSPlayerRequest PlayerRequest = 5;
    if (has_playerrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerrequest());
    }

    // optional .vmsg.CSSceneOSDRequest SceneOSDRequest = 6;
    if (has_sceneosdrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sceneosdrequest());
    }

    // optional .vmsg.CSEquipRequest EquipRequest = 7;
    if (has_equiprequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprequest());
    }

    // optional .vmsg.CSTaskRequest TaskRequest = 8;
    if (has_taskrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskrequest());
    }

    // optional .vmsg.CSRankRequest RankRequest = 9;
    if (has_rankrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankrequest());
    }

    // optional .vmsg.CSWeaponRequest WeaponRequest = 10;
    if (has_weaponrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weaponrequest());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSGoldRequest GoldRequest = 11;
    if (has_goldrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goldrequest());
    }

    // optional .vmsg.CSItemRequest ItemRequest = 12;
    if (has_itemrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemrequest());
    }

    // optional .vmsg.CSWarMapRequest WarMapRequest = 13;
    if (has_warmaprequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmaprequest());
    }

    // optional .vmsg.CSFriendRequest FriendRequest = 14;
    if (has_friendrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendrequest());
    }

    // optional .vmsg.CSGuildRequest GuildRequest = 15;
    if (has_guildrequest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildrequest());
    }

    // optional .vmsg.CSMailRequest MailRequest = 16;
    if (has_mailrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailrequest());
    }

    // optional .vmsg.CSInfiniteRequest InfiniteRequest = 17;
    if (has_infiniterequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infiniterequest());
    }

    // optional .vmsg.CSChatRequest ChatRequest = 18;
    if (has_chatrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatrequest());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .vmsg.CSCVZRequest CVZRequest = 19;
    if (has_cvzrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvzrequest());
    }

    // optional .vmsg.CSServerNotifyRequest ServerNotifyRequest = 20;
    if (has_servernotifyrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servernotifyrequest());
    }

    // optional .vmsg.CSDailyGiftRequest DailyGiftRequest = 21;
    if (has_dailygiftrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailygiftrequest());
    }

    // optional .vmsg.CSArenaRequest ArenaRequest = 22;
    if (has_arenarequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenarequest());
    }

    // optional .vmsg.CSStoreRequest StoreRequest = 23;
    if (has_storerequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storerequest());
    }

    // optional .vmsg.CSQiangHunRequest QiangHunRequest = 24;
    if (has_qianghunrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qianghunrequest());
    }

    // optional .vmsg.CSDebrisRequest DebrisRequest = 25;
    if (has_debrisrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debrisrequest());
    }

    // optional .vmsg.CSActRequest ActRequest = 26;
    if (has_actrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actrequest());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .vmsg.CSDotaItemRequest DotaItemRequest = 27;
    if (has_dotaitemrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotaitemrequest());
    }

    // optional .vmsg.CSCouponRequest CouponRequest = 28;
    if (has_couponrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->couponrequest());
    }

    // optional .vmsg.CSPanicBuyingStoreRequest PanicBuyingRequst = 29;
    if (has_panicbuyingrequst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->panicbuyingrequst());
    }

    // optional .vmsg.CSUMemDeviceTokenReport DeviceTokenReport = 30;
    if (has_devicetokenreport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->devicetokenreport());
    }

    // optional .vmsg.CSBossChallengeRqst BossChallengeRqst = 31;
    if (has_bosschallengerqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bosschallengerqst());
    }

    // optional .vmsg.CSHeartBeatRqst HeartBeat_Rqst = 100;
    if (has_heartbeat_rqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_rqst());
    }

    // optional .vmsg.CSAdminRequest AdminRequest = 101;
    if (has_adminrequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminrequest());
    }

    // optional .vmsg.CSAccountRquest Account_Rqst = 102;
    if (has_account_rqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VCli2LogicSvrMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VCli2LogicSvrMsg*>(&from));
}

void VCli2LogicSvrMsg::MergeFrom(const VCli2LogicSvrMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_head()) {
      mutable_msg_head()->::vmsg::MsgHead::MergeFrom(from.msg_head());
    }
    if (from.has_bagrqst()) {
      mutable_bagrqst()->::vmsg::CSBagRequest::MergeFrom(from.bagrqst());
    }
    if (from.has_playerrequest()) {
      mutable_playerrequest()->::vmsg::CSPlayerRequest::MergeFrom(from.playerrequest());
    }
    if (from.has_sceneosdrequest()) {
      mutable_sceneosdrequest()->::vmsg::CSSceneOSDRequest::MergeFrom(from.sceneosdrequest());
    }
    if (from.has_equiprequest()) {
      mutable_equiprequest()->::vmsg::CSEquipRequest::MergeFrom(from.equiprequest());
    }
    if (from.has_taskrequest()) {
      mutable_taskrequest()->::vmsg::CSTaskRequest::MergeFrom(from.taskrequest());
    }
    if (from.has_rankrequest()) {
      mutable_rankrequest()->::vmsg::CSRankRequest::MergeFrom(from.rankrequest());
    }
    if (from.has_weaponrequest()) {
      mutable_weaponrequest()->::vmsg::CSWeaponRequest::MergeFrom(from.weaponrequest());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goldrequest()) {
      mutable_goldrequest()->::vmsg::CSGoldRequest::MergeFrom(from.goldrequest());
    }
    if (from.has_itemrequest()) {
      mutable_itemrequest()->::vmsg::CSItemRequest::MergeFrom(from.itemrequest());
    }
    if (from.has_warmaprequest()) {
      mutable_warmaprequest()->::vmsg::CSWarMapRequest::MergeFrom(from.warmaprequest());
    }
    if (from.has_friendrequest()) {
      mutable_friendrequest()->::vmsg::CSFriendRequest::MergeFrom(from.friendrequest());
    }
    if (from.has_guildrequest()) {
      mutable_guildrequest()->::vmsg::CSGuildRequest::MergeFrom(from.guildrequest());
    }
    if (from.has_mailrequest()) {
      mutable_mailrequest()->::vmsg::CSMailRequest::MergeFrom(from.mailrequest());
    }
    if (from.has_infiniterequest()) {
      mutable_infiniterequest()->::vmsg::CSInfiniteRequest::MergeFrom(from.infiniterequest());
    }
    if (from.has_chatrequest()) {
      mutable_chatrequest()->::vmsg::CSChatRequest::MergeFrom(from.chatrequest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cvzrequest()) {
      mutable_cvzrequest()->::vmsg::CSCVZRequest::MergeFrom(from.cvzrequest());
    }
    if (from.has_servernotifyrequest()) {
      mutable_servernotifyrequest()->::vmsg::CSServerNotifyRequest::MergeFrom(from.servernotifyrequest());
    }
    if (from.has_dailygiftrequest()) {
      mutable_dailygiftrequest()->::vmsg::CSDailyGiftRequest::MergeFrom(from.dailygiftrequest());
    }
    if (from.has_arenarequest()) {
      mutable_arenarequest()->::vmsg::CSArenaRequest::MergeFrom(from.arenarequest());
    }
    if (from.has_storerequest()) {
      mutable_storerequest()->::vmsg::CSStoreRequest::MergeFrom(from.storerequest());
    }
    if (from.has_qianghunrequest()) {
      mutable_qianghunrequest()->::vmsg::CSQiangHunRequest::MergeFrom(from.qianghunrequest());
    }
    if (from.has_debrisrequest()) {
      mutable_debrisrequest()->::vmsg::CSDebrisRequest::MergeFrom(from.debrisrequest());
    }
    if (from.has_actrequest()) {
      mutable_actrequest()->::vmsg::CSActRequest::MergeFrom(from.actrequest());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dotaitemrequest()) {
      mutable_dotaitemrequest()->::vmsg::CSDotaItemRequest::MergeFrom(from.dotaitemrequest());
    }
    if (from.has_couponrequest()) {
      mutable_couponrequest()->::vmsg::CSCouponRequest::MergeFrom(from.couponrequest());
    }
    if (from.has_panicbuyingrequst()) {
      mutable_panicbuyingrequst()->::vmsg::CSPanicBuyingStoreRequest::MergeFrom(from.panicbuyingrequst());
    }
    if (from.has_devicetokenreport()) {
      mutable_devicetokenreport()->::vmsg::CSUMemDeviceTokenReport::MergeFrom(from.devicetokenreport());
    }
    if (from.has_bosschallengerqst()) {
      mutable_bosschallengerqst()->::vmsg::CSBossChallengeRqst::MergeFrom(from.bosschallengerqst());
    }
    if (from.has_heartbeat_rqst()) {
      mutable_heartbeat_rqst()->::vmsg::CSHeartBeatRqst::MergeFrom(from.heartbeat_rqst());
    }
    if (from.has_adminrequest()) {
      mutable_adminrequest()->::vmsg::CSAdminRequest::MergeFrom(from.adminrequest());
    }
    if (from.has_account_rqst()) {
      mutable_account_rqst()->::vmsg::CSAccountRquest::MergeFrom(from.account_rqst());
    }
  }
}

void VCli2LogicSvrMsg::CopyFrom(const VCli2LogicSvrMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VCli2LogicSvrMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg_head()) {
    if (!this->msg_head().IsInitialized()) return false;
  }
  if (has_bagrqst()) {
    if (!this->bagrqst().IsInitialized()) return false;
  }
  if (has_playerrequest()) {
    if (!this->playerrequest().IsInitialized()) return false;
  }
  if (has_sceneosdrequest()) {
    if (!this->sceneosdrequest().IsInitialized()) return false;
  }
  if (has_equiprequest()) {
    if (!this->equiprequest().IsInitialized()) return false;
  }
  if (has_rankrequest()) {
    if (!this->rankrequest().IsInitialized()) return false;
  }
  if (has_weaponrequest()) {
    if (!this->weaponrequest().IsInitialized()) return false;
  }
  if (has_goldrequest()) {
    if (!this->goldrequest().IsInitialized()) return false;
  }
  if (has_itemrequest()) {
    if (!this->itemrequest().IsInitialized()) return false;
  }
  if (has_warmaprequest()) {
    if (!this->warmaprequest().IsInitialized()) return false;
  }
  if (has_friendrequest()) {
    if (!this->friendrequest().IsInitialized()) return false;
  }
  if (has_guildrequest()) {
    if (!this->guildrequest().IsInitialized()) return false;
  }
  if (has_mailrequest()) {
    if (!this->mailrequest().IsInitialized()) return false;
  }
  if (has_infiniterequest()) {
    if (!this->infiniterequest().IsInitialized()) return false;
  }
  if (has_chatrequest()) {
    if (!this->chatrequest().IsInitialized()) return false;
  }
  if (has_cvzrequest()) {
    if (!this->cvzrequest().IsInitialized()) return false;
  }
  if (has_dailygiftrequest()) {
    if (!this->dailygiftrequest().IsInitialized()) return false;
  }
  if (has_arenarequest()) {
    if (!this->arenarequest().IsInitialized()) return false;
  }
  if (has_storerequest()) {
    if (!this->storerequest().IsInitialized()) return false;
  }
  if (has_qianghunrequest()) {
    if (!this->qianghunrequest().IsInitialized()) return false;
  }
  if (has_debrisrequest()) {
    if (!this->debrisrequest().IsInitialized()) return false;
  }
  if (has_dotaitemrequest()) {
    if (!this->dotaitemrequest().IsInitialized()) return false;
  }
  if (has_couponrequest()) {
    if (!this->couponrequest().IsInitialized()) return false;
  }
  if (has_panicbuyingrequst()) {
    if (!this->panicbuyingrequst().IsInitialized()) return false;
  }
  if (has_bosschallengerqst()) {
    if (!this->bosschallengerqst().IsInitialized()) return false;
  }
  if (has_heartbeat_rqst()) {
    if (!this->heartbeat_rqst().IsInitialized()) return false;
  }
  if (has_adminrequest()) {
    if (!this->adminrequest().IsInitialized()) return false;
  }
  if (has_account_rqst()) {
    if (!this->account_rqst().IsInitialized()) return false;
  }
  return true;
}

void VCli2LogicSvrMsg::Swap(VCli2LogicSvrMsg* other) {
  if (other != this) {
    std::swap(msg_head_, other->msg_head_);
    std::swap(bagrqst_, other->bagrqst_);
    std::swap(playerrequest_, other->playerrequest_);
    std::swap(sceneosdrequest_, other->sceneosdrequest_);
    std::swap(equiprequest_, other->equiprequest_);
    std::swap(taskrequest_, other->taskrequest_);
    std::swap(rankrequest_, other->rankrequest_);
    std::swap(weaponrequest_, other->weaponrequest_);
    std::swap(goldrequest_, other->goldrequest_);
    std::swap(itemrequest_, other->itemrequest_);
    std::swap(warmaprequest_, other->warmaprequest_);
    std::swap(friendrequest_, other->friendrequest_);
    std::swap(guildrequest_, other->guildrequest_);
    std::swap(mailrequest_, other->mailrequest_);
    std::swap(infiniterequest_, other->infiniterequest_);
    std::swap(chatrequest_, other->chatrequest_);
    std::swap(cvzrequest_, other->cvzrequest_);
    std::swap(servernotifyrequest_, other->servernotifyrequest_);
    std::swap(dailygiftrequest_, other->dailygiftrequest_);
    std::swap(arenarequest_, other->arenarequest_);
    std::swap(storerequest_, other->storerequest_);
    std::swap(qianghunrequest_, other->qianghunrequest_);
    std::swap(debrisrequest_, other->debrisrequest_);
    std::swap(actrequest_, other->actrequest_);
    std::swap(dotaitemrequest_, other->dotaitemrequest_);
    std::swap(couponrequest_, other->couponrequest_);
    std::swap(panicbuyingrequst_, other->panicbuyingrequst_);
    std::swap(devicetokenreport_, other->devicetokenreport_);
    std::swap(bosschallengerqst_, other->bosschallengerqst_);
    std::swap(heartbeat_rqst_, other->heartbeat_rqst_);
    std::swap(adminrequest_, other->adminrequest_);
    std::swap(account_rqst_, other->account_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VCli2LogicSvrMsg::GetTypeName() const {
  return "vmsg.VCli2LogicSvrMsg";
}


// ===================================================================

#ifndef _MSC_VER
const int VLogicSvr2CliMsg::kMsgHeadFieldNumber;
const int VLogicSvr2CliMsg::kErrMsgFieldNumber;
const int VLogicSvr2CliMsg::kBagRespondFieldNumber;
const int VLogicSvr2CliMsg::kPlayerRespondFieldNumber;
const int VLogicSvr2CliMsg::kSceneOSDRespondFieldNumber;
const int VLogicSvr2CliMsg::kEquipRespondFieldNumber;
const int VLogicSvr2CliMsg::kTaskRespondFieldNumber;
const int VLogicSvr2CliMsg::kRankRespondFieldNumber;
const int VLogicSvr2CliMsg::kWeaponRespondFieldNumber;
const int VLogicSvr2CliMsg::kGoldRespondFieldNumber;
const int VLogicSvr2CliMsg::kItemRespondFieldNumber;
const int VLogicSvr2CliMsg::kWarMapRespondFieldNumber;
const int VLogicSvr2CliMsg::kFriendRespondFieldNumber;
const int VLogicSvr2CliMsg::kGuildRespondFieldNumber;
const int VLogicSvr2CliMsg::kMailRespondFieldNumber;
const int VLogicSvr2CliMsg::kInfiniteRespondFieldNumber;
const int VLogicSvr2CliMsg::kChatRespondFieldNumber;
const int VLogicSvr2CliMsg::kCVZRespondFieldNumber;
const int VLogicSvr2CliMsg::kServerNotifyRespondFieldNumber;
const int VLogicSvr2CliMsg::kDailyGiftRespondFieldNumber;
const int VLogicSvr2CliMsg::kArenaRespondFieldNumber;
const int VLogicSvr2CliMsg::kStoreRespondFieldNumber;
const int VLogicSvr2CliMsg::kQiangHunRespondFieldNumber;
const int VLogicSvr2CliMsg::kDebrisRespondFieldNumber;
const int VLogicSvr2CliMsg::kActRespondFieldNumber;
const int VLogicSvr2CliMsg::kDotaItemRespondFieldNumber;
const int VLogicSvr2CliMsg::kCouponRespondFieldNumber;
const int VLogicSvr2CliMsg::kPanicBuyingRespondFieldNumber;
const int VLogicSvr2CliMsg::kBossChallengeRspFieldNumber;
const int VLogicSvr2CliMsg::kCheckNickRspFieldNumber;
const int VLogicSvr2CliMsg::kHeartBeatRspFieldNumber;
const int VLogicSvr2CliMsg::kAdminRespondFieldNumber;
const int VLogicSvr2CliMsg::kAccountRspFieldNumber;
#endif  // !_MSC_VER

VLogicSvr2CliMsg::VLogicSvr2CliMsg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VLogicSvr2CliMsg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  msg_head_ = const_cast< ::vmsg::MsgHead*>(
      ::vmsg::MsgHead::internal_default_instance());
#else
  msg_head_ = const_cast< ::vmsg::MsgHead*>(&::vmsg::MsgHead::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  errmsg_ = const_cast< ::vmsg::CSCommonErrMsg*>(
      ::vmsg::CSCommonErrMsg::internal_default_instance());
#else
  errmsg_ = const_cast< ::vmsg::CSCommonErrMsg*>(&::vmsg::CSCommonErrMsg::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bagrespond_ = const_cast< ::vmsg::CSBagRespond*>(
      ::vmsg::CSBagRespond::internal_default_instance());
#else
  bagrespond_ = const_cast< ::vmsg::CSBagRespond*>(&::vmsg::CSBagRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerrespond_ = const_cast< ::vmsg::CSPlayerRespond*>(
      ::vmsg::CSPlayerRespond::internal_default_instance());
#else
  playerrespond_ = const_cast< ::vmsg::CSPlayerRespond*>(&::vmsg::CSPlayerRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sceneosdrespond_ = const_cast< ::vmsg::CSSceneOSDRespond*>(
      ::vmsg::CSSceneOSDRespond::internal_default_instance());
#else
  sceneosdrespond_ = const_cast< ::vmsg::CSSceneOSDRespond*>(&::vmsg::CSSceneOSDRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprespond_ = const_cast< ::vmsg::CSEquipRespond*>(
      ::vmsg::CSEquipRespond::internal_default_instance());
#else
  equiprespond_ = const_cast< ::vmsg::CSEquipRespond*>(&::vmsg::CSEquipRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  taskrespond_ = const_cast< ::vmsg::CSTaskRespond*>(
      ::vmsg::CSTaskRespond::internal_default_instance());
#else
  taskrespond_ = const_cast< ::vmsg::CSTaskRespond*>(&::vmsg::CSTaskRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rankrespond_ = const_cast< ::vmsg::CSRankRespond*>(
      ::vmsg::CSRankRespond::internal_default_instance());
#else
  rankrespond_ = const_cast< ::vmsg::CSRankRespond*>(&::vmsg::CSRankRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weaponrespond_ = const_cast< ::vmsg::CSWeaponRespond*>(
      ::vmsg::CSWeaponRespond::internal_default_instance());
#else
  weaponrespond_ = const_cast< ::vmsg::CSWeaponRespond*>(&::vmsg::CSWeaponRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  goldrespond_ = const_cast< ::vmsg::CSGoldRespond*>(
      ::vmsg::CSGoldRespond::internal_default_instance());
#else
  goldrespond_ = const_cast< ::vmsg::CSGoldRespond*>(&::vmsg::CSGoldRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  itemrespond_ = const_cast< ::vmsg::CSItemRespond*>(
      ::vmsg::CSItemRespond::internal_default_instance());
#else
  itemrespond_ = const_cast< ::vmsg::CSItemRespond*>(&::vmsg::CSItemRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  warmaprespond_ = const_cast< ::vmsg::CSWarMapRespond*>(
      ::vmsg::CSWarMapRespond::internal_default_instance());
#else
  warmaprespond_ = const_cast< ::vmsg::CSWarMapRespond*>(&::vmsg::CSWarMapRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friendrespond_ = const_cast< ::vmsg::CSFriendRespond*>(
      ::vmsg::CSFriendRespond::internal_default_instance());
#else
  friendrespond_ = const_cast< ::vmsg::CSFriendRespond*>(&::vmsg::CSFriendRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildrespond_ = const_cast< ::vmsg::CSGuildRespond*>(
      ::vmsg::CSGuildRespond::internal_default_instance());
#else
  guildrespond_ = const_cast< ::vmsg::CSGuildRespond*>(&::vmsg::CSGuildRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  mailrespond_ = const_cast< ::vmsg::CSMailRespond*>(
      ::vmsg::CSMailRespond::internal_default_instance());
#else
  mailrespond_ = const_cast< ::vmsg::CSMailRespond*>(&::vmsg::CSMailRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  infiniterespond_ = const_cast< ::vmsg::CSInfiniteRespond*>(
      ::vmsg::CSInfiniteRespond::internal_default_instance());
#else
  infiniterespond_ = const_cast< ::vmsg::CSInfiniteRespond*>(&::vmsg::CSInfiniteRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chatrespond_ = const_cast< ::vmsg::CSChatRespond*>(
      ::vmsg::CSChatRespond::internal_default_instance());
#else
  chatrespond_ = const_cast< ::vmsg::CSChatRespond*>(&::vmsg::CSChatRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  cvzrespond_ = const_cast< ::vmsg::CSCVZRespond*>(
      ::vmsg::CSCVZRespond::internal_default_instance());
#else
  cvzrespond_ = const_cast< ::vmsg::CSCVZRespond*>(&::vmsg::CSCVZRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  servernotifyrespond_ = const_cast< ::vmsg::CSServerNotifyRespond*>(
      ::vmsg::CSServerNotifyRespond::internal_default_instance());
#else
  servernotifyrespond_ = const_cast< ::vmsg::CSServerNotifyRespond*>(&::vmsg::CSServerNotifyRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailygiftrespond_ = const_cast< ::vmsg::CSDailyGiftRespond*>(
      ::vmsg::CSDailyGiftRespond::internal_default_instance());
#else
  dailygiftrespond_ = const_cast< ::vmsg::CSDailyGiftRespond*>(&::vmsg::CSDailyGiftRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  arenarespond_ = const_cast< ::vmsg::CSArenaRespond*>(
      ::vmsg::CSArenaRespond::internal_default_instance());
#else
  arenarespond_ = const_cast< ::vmsg::CSArenaRespond*>(&::vmsg::CSArenaRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storerespond_ = const_cast< ::vmsg::CSStoreRespond*>(
      ::vmsg::CSStoreRespond::internal_default_instance());
#else
  storerespond_ = const_cast< ::vmsg::CSStoreRespond*>(&::vmsg::CSStoreRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  qianghunrespond_ = const_cast< ::vmsg::CSQiangHunRespond*>(
      ::vmsg::CSQiangHunRespond::internal_default_instance());
#else
  qianghunrespond_ = const_cast< ::vmsg::CSQiangHunRespond*>(&::vmsg::CSQiangHunRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  debrisrespond_ = const_cast< ::vmsg::CSDebrisRespond*>(
      ::vmsg::CSDebrisRespond::internal_default_instance());
#else
  debrisrespond_ = const_cast< ::vmsg::CSDebrisRespond*>(&::vmsg::CSDebrisRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actrespond_ = const_cast< ::vmsg::CSActRespond*>(
      ::vmsg::CSActRespond::internal_default_instance());
#else
  actrespond_ = const_cast< ::vmsg::CSActRespond*>(&::vmsg::CSActRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dotaitemrespond_ = const_cast< ::vmsg::CSDotaItemRespond*>(
      ::vmsg::CSDotaItemRespond::internal_default_instance());
#else
  dotaitemrespond_ = const_cast< ::vmsg::CSDotaItemRespond*>(&::vmsg::CSDotaItemRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  couponrespond_ = const_cast< ::vmsg::CSCouponRespond*>(
      ::vmsg::CSCouponRespond::internal_default_instance());
#else
  couponrespond_ = const_cast< ::vmsg::CSCouponRespond*>(&::vmsg::CSCouponRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  panicbuyingrespond_ = const_cast< ::vmsg::CSPanicBuyingStoreResponse*>(
      ::vmsg::CSPanicBuyingStoreResponse::internal_default_instance());
#else
  panicbuyingrespond_ = const_cast< ::vmsg::CSPanicBuyingStoreResponse*>(&::vmsg::CSPanicBuyingStoreResponse::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  bosschallengersp_ = const_cast< ::vmsg::CSBossChallengeRsp*>(
      ::vmsg::CSBossChallengeRsp::internal_default_instance());
#else
  bosschallengersp_ = const_cast< ::vmsg::CSBossChallengeRsp*>(&::vmsg::CSBossChallengeRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  heartbeat_rsp_ = const_cast< ::vmsg::CSHeartBeatRsp*>(
      ::vmsg::CSHeartBeatRsp::internal_default_instance());
#else
  heartbeat_rsp_ = const_cast< ::vmsg::CSHeartBeatRsp*>(&::vmsg::CSHeartBeatRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  adminrespond_ = const_cast< ::vmsg::CSAdminRespond*>(
      ::vmsg::CSAdminRespond::internal_default_instance());
#else
  adminrespond_ = const_cast< ::vmsg::CSAdminRespond*>(&::vmsg::CSAdminRespond::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  account_rsp_ = const_cast< ::vmsg::CSAccountRespond*>(
      ::vmsg::CSAccountRespond::internal_default_instance());
#else
  account_rsp_ = const_cast< ::vmsg::CSAccountRespond*>(&::vmsg::CSAccountRespond::default_instance());
#endif
}

VLogicSvr2CliMsg::VLogicSvr2CliMsg(const VLogicSvr2CliMsg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VLogicSvr2CliMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_head_ = NULL;
  errmsg_ = NULL;
  bagrespond_ = NULL;
  playerrespond_ = NULL;
  sceneosdrespond_ = NULL;
  equiprespond_ = NULL;
  taskrespond_ = NULL;
  rankrespond_ = NULL;
  weaponrespond_ = NULL;
  goldrespond_ = NULL;
  itemrespond_ = NULL;
  warmaprespond_ = NULL;
  friendrespond_ = NULL;
  guildrespond_ = NULL;
  mailrespond_ = NULL;
  infiniterespond_ = NULL;
  chatrespond_ = NULL;
  cvzrespond_ = NULL;
  servernotifyrespond_ = NULL;
  dailygiftrespond_ = NULL;
  arenarespond_ = NULL;
  storerespond_ = NULL;
  qianghunrespond_ = NULL;
  debrisrespond_ = NULL;
  actrespond_ = NULL;
  dotaitemrespond_ = NULL;
  couponrespond_ = NULL;
  panicbuyingrespond_ = NULL;
  bosschallengersp_ = NULL;
  checknick_rsp_ = 0;
  heartbeat_rsp_ = NULL;
  adminrespond_ = NULL;
  account_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VLogicSvr2CliMsg::~VLogicSvr2CliMsg() {
  SharedDtor();
}

void VLogicSvr2CliMsg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete msg_head_;
    delete errmsg_;
    delete bagrespond_;
    delete playerrespond_;
    delete sceneosdrespond_;
    delete equiprespond_;
    delete taskrespond_;
    delete rankrespond_;
    delete weaponrespond_;
    delete goldrespond_;
    delete itemrespond_;
    delete warmaprespond_;
    delete friendrespond_;
    delete guildrespond_;
    delete mailrespond_;
    delete infiniterespond_;
    delete chatrespond_;
    delete cvzrespond_;
    delete servernotifyrespond_;
    delete dailygiftrespond_;
    delete arenarespond_;
    delete storerespond_;
    delete qianghunrespond_;
    delete debrisrespond_;
    delete actrespond_;
    delete dotaitemrespond_;
    delete couponrespond_;
    delete panicbuyingrespond_;
    delete bosschallengersp_;
    delete heartbeat_rsp_;
    delete adminrespond_;
    delete account_rsp_;
  }
}

void VLogicSvr2CliMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VLogicSvr2CliMsg& VLogicSvr2CliMsg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ClientSvrMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ClientSvrMsg_2eproto();
#endif
  return *default_instance_;
}

VLogicSvr2CliMsg* VLogicSvr2CliMsg::default_instance_ = NULL;

VLogicSvr2CliMsg* VLogicSvr2CliMsg::New() const {
  return new VLogicSvr2CliMsg;
}

void VLogicSvr2CliMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg_head()) {
      if (msg_head_ != NULL) msg_head_->::vmsg::MsgHead::Clear();
    }
    if (has_errmsg()) {
      if (errmsg_ != NULL) errmsg_->::vmsg::CSCommonErrMsg::Clear();
    }
    if (has_bagrespond()) {
      if (bagrespond_ != NULL) bagrespond_->::vmsg::CSBagRespond::Clear();
    }
    if (has_playerrespond()) {
      if (playerrespond_ != NULL) playerrespond_->::vmsg::CSPlayerRespond::Clear();
    }
    if (has_sceneosdrespond()) {
      if (sceneosdrespond_ != NULL) sceneosdrespond_->::vmsg::CSSceneOSDRespond::Clear();
    }
    if (has_equiprespond()) {
      if (equiprespond_ != NULL) equiprespond_->::vmsg::CSEquipRespond::Clear();
    }
    if (has_taskrespond()) {
      if (taskrespond_ != NULL) taskrespond_->::vmsg::CSTaskRespond::Clear();
    }
    if (has_rankrespond()) {
      if (rankrespond_ != NULL) rankrespond_->::vmsg::CSRankRespond::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_weaponrespond()) {
      if (weaponrespond_ != NULL) weaponrespond_->::vmsg::CSWeaponRespond::Clear();
    }
    if (has_goldrespond()) {
      if (goldrespond_ != NULL) goldrespond_->::vmsg::CSGoldRespond::Clear();
    }
    if (has_itemrespond()) {
      if (itemrespond_ != NULL) itemrespond_->::vmsg::CSItemRespond::Clear();
    }
    if (has_warmaprespond()) {
      if (warmaprespond_ != NULL) warmaprespond_->::vmsg::CSWarMapRespond::Clear();
    }
    if (has_friendrespond()) {
      if (friendrespond_ != NULL) friendrespond_->::vmsg::CSFriendRespond::Clear();
    }
    if (has_guildrespond()) {
      if (guildrespond_ != NULL) guildrespond_->::vmsg::CSGuildRespond::Clear();
    }
    if (has_mailrespond()) {
      if (mailrespond_ != NULL) mailrespond_->::vmsg::CSMailRespond::Clear();
    }
    if (has_infiniterespond()) {
      if (infiniterespond_ != NULL) infiniterespond_->::vmsg::CSInfiniteRespond::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_chatrespond()) {
      if (chatrespond_ != NULL) chatrespond_->::vmsg::CSChatRespond::Clear();
    }
    if (has_cvzrespond()) {
      if (cvzrespond_ != NULL) cvzrespond_->::vmsg::CSCVZRespond::Clear();
    }
    if (has_servernotifyrespond()) {
      if (servernotifyrespond_ != NULL) servernotifyrespond_->::vmsg::CSServerNotifyRespond::Clear();
    }
    if (has_dailygiftrespond()) {
      if (dailygiftrespond_ != NULL) dailygiftrespond_->::vmsg::CSDailyGiftRespond::Clear();
    }
    if (has_arenarespond()) {
      if (arenarespond_ != NULL) arenarespond_->::vmsg::CSArenaRespond::Clear();
    }
    if (has_storerespond()) {
      if (storerespond_ != NULL) storerespond_->::vmsg::CSStoreRespond::Clear();
    }
    if (has_qianghunrespond()) {
      if (qianghunrespond_ != NULL) qianghunrespond_->::vmsg::CSQiangHunRespond::Clear();
    }
    if (has_debrisrespond()) {
      if (debrisrespond_ != NULL) debrisrespond_->::vmsg::CSDebrisRespond::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_actrespond()) {
      if (actrespond_ != NULL) actrespond_->::vmsg::CSActRespond::Clear();
    }
    if (has_dotaitemrespond()) {
      if (dotaitemrespond_ != NULL) dotaitemrespond_->::vmsg::CSDotaItemRespond::Clear();
    }
    if (has_couponrespond()) {
      if (couponrespond_ != NULL) couponrespond_->::vmsg::CSCouponRespond::Clear();
    }
    if (has_panicbuyingrespond()) {
      if (panicbuyingrespond_ != NULL) panicbuyingrespond_->::vmsg::CSPanicBuyingStoreResponse::Clear();
    }
    if (has_bosschallengersp()) {
      if (bosschallengersp_ != NULL) bosschallengersp_->::vmsg::CSBossChallengeRsp::Clear();
    }
    checknick_rsp_ = 0;
    if (has_heartbeat_rsp()) {
      if (heartbeat_rsp_ != NULL) heartbeat_rsp_->::vmsg::CSHeartBeatRsp::Clear();
    }
    if (has_adminrespond()) {
      if (adminrespond_ != NULL) adminrespond_->::vmsg::CSAdminRespond::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_account_rsp()) {
      if (account_rsp_ != NULL) account_rsp_->::vmsg::CSAccountRespond::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VLogicSvr2CliMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.MsgHead Msg_Head = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg_head()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ErrMsg;
        break;
      }

      // optional .vmsg.CSCommonErrMsg ErrMsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ErrMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_errmsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_BagRespond;
        break;
      }

      // optional .vmsg.CSBagRespond BagRespond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BagRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bagrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PlayerRespond;
        break;
      }

      // optional .vmsg.CSPlayerRespond PlayerRespond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SceneOSDRespond;
        break;
      }

      // optional .vmsg.CSSceneOSDRespond SceneOSDRespond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SceneOSDRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sceneosdrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_EquipRespond;
        break;
      }

      // optional .vmsg.CSEquipRespond EquipRespond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_TaskRespond;
        break;
      }

      // optional .vmsg.CSTaskRespond TaskRespond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_RankRespond;
        break;
      }

      // optional .vmsg.CSRankRespond RankRespond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RankRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_WeaponRespond;
        break;
      }

      // optional .vmsg.CSWeaponRespond WeaponRespond = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weaponrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_GoldRespond;
        break;
      }

      // optional .vmsg.CSGoldRespond GoldRespond = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GoldRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_goldrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_ItemRespond;
        break;
      }

      // optional .vmsg.CSItemRespond ItemRespond = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_WarMapRespond;
        break;
      }

      // optional .vmsg.CSWarMapRespond WarMapRespond = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WarMapRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_warmaprespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_FriendRespond;
        break;
      }

      // optional .vmsg.CSFriendRespond FriendRespond = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FriendRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_GuildRespond;
        break;
      }

      // optional .vmsg.CSGuildRespond GuildRespond = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_MailRespond;
        break;
      }

      // optional .vmsg.CSMailRespond MailRespond = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MailRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_InfiniteRespond;
        break;
      }

      // optional .vmsg.CSInfiniteRespond InfiniteRespond = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfiniteRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infiniterespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_ChatRespond;
        break;
      }

      // optional .vmsg.CSChatRespond ChatRespond = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChatRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_CVZRespond;
        break;
      }

      // optional .vmsg.CSCVZRespond CVZRespond = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CVZRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cvzrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ServerNotifyRespond;
        break;
      }

      // optional .vmsg.CSServerNotifyRespond ServerNotifyRespond = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ServerNotifyRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servernotifyrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_DailyGiftRespond;
        break;
      }

      // optional .vmsg.CSDailyGiftRespond DailyGiftRespond = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyGiftRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailygiftrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_ArenaRespond;
        break;
      }

      // optional .vmsg.CSArenaRespond ArenaRespond = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ArenaRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenarespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_StoreRespond;
        break;
      }

      // optional .vmsg.CSStoreRespond StoreRespond = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StoreRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storerespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_QiangHunRespond;
        break;
      }

      // optional .vmsg.CSQiangHunRespond QiangHunRespond = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QiangHunRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qianghunrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_DebrisRespond;
        break;
      }

      // optional .vmsg.CSDebrisRespond DebrisRespond = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DebrisRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debrisrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_ActRespond;
        break;
      }

      // optional .vmsg.CSActRespond ActRespond = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_DotaItemRespond;
        break;
      }

      // optional .vmsg.CSDotaItemRespond DotaItemRespond = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DotaItemRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dotaitemrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_CouponRespond;
        break;
      }

      // optional .vmsg.CSCouponRespond CouponRespond = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CouponRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_couponrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_PanicBuyingRespond;
        break;
      }

      // optional .vmsg.CSPanicBuyingStoreResponse PanicBuyingRespond = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PanicBuyingRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_panicbuyingrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_BossChallengeRsp;
        break;
      }

      // optional .vmsg.CSBossChallengeRsp BossChallengeRsp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BossChallengeRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bosschallengersp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(792)) goto parse_CheckNick_Rsp;
        break;
      }

      // optional int32 CheckNick_Rsp = 99;
      case 99: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CheckNick_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checknick_rsp_)));
          set_has_checknick_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(802)) goto parse_HeartBeat_Rsp;
        break;
      }

      // optional .vmsg.CSHeartBeatRsp HeartBeat_Rsp = 100;
      case 100: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeartBeat_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartbeat_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(810)) goto parse_AdminRespond;
        break;
      }

      // optional .vmsg.CSAdminRespond AdminRespond = 101;
      case 101: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdminRespond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_adminrespond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(818)) goto parse_Account_Rsp;
        break;
      }

      // optional .vmsg.CSAccountRespond Account_Rsp = 102;
      case 102: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Account_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_account_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VLogicSvr2CliMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.MsgHead Msg_Head = 1;
  if (has_msg_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->msg_head(), output);
  }

  // optional .vmsg.CSCommonErrMsg ErrMsg = 2;
  if (has_errmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->errmsg(), output);
  }

  // optional .vmsg.CSBagRespond BagRespond = 3;
  if (has_bagrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->bagrespond(), output);
  }

  // optional .vmsg.CSPlayerRespond PlayerRespond = 5;
  if (has_playerrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->playerrespond(), output);
  }

  // optional .vmsg.CSSceneOSDRespond SceneOSDRespond = 6;
  if (has_sceneosdrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->sceneosdrespond(), output);
  }

  // optional .vmsg.CSEquipRespond EquipRespond = 7;
  if (has_equiprespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->equiprespond(), output);
  }

  // optional .vmsg.CSTaskRespond TaskRespond = 8;
  if (has_taskrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->taskrespond(), output);
  }

  // optional .vmsg.CSRankRespond RankRespond = 9;
  if (has_rankrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->rankrespond(), output);
  }

  // optional .vmsg.CSWeaponRespond WeaponRespond = 10;
  if (has_weaponrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->weaponrespond(), output);
  }

  // optional .vmsg.CSGoldRespond GoldRespond = 11;
  if (has_goldrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->goldrespond(), output);
  }

  // optional .vmsg.CSItemRespond ItemRespond = 12;
  if (has_itemrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->itemrespond(), output);
  }

  // optional .vmsg.CSWarMapRespond WarMapRespond = 13;
  if (has_warmaprespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->warmaprespond(), output);
  }

  // optional .vmsg.CSFriendRespond FriendRespond = 14;
  if (has_friendrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->friendrespond(), output);
  }

  // optional .vmsg.CSGuildRespond GuildRespond = 15;
  if (has_guildrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->guildrespond(), output);
  }

  // optional .vmsg.CSMailRespond MailRespond = 16;
  if (has_mailrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->mailrespond(), output);
  }

  // optional .vmsg.CSInfiniteRespond InfiniteRespond = 17;
  if (has_infiniterespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->infiniterespond(), output);
  }

  // optional .vmsg.CSChatRespond ChatRespond = 18;
  if (has_chatrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->chatrespond(), output);
  }

  // optional .vmsg.CSCVZRespond CVZRespond = 19;
  if (has_cvzrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->cvzrespond(), output);
  }

  // optional .vmsg.CSServerNotifyRespond ServerNotifyRespond = 20;
  if (has_servernotifyrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->servernotifyrespond(), output);
  }

  // optional .vmsg.CSDailyGiftRespond DailyGiftRespond = 21;
  if (has_dailygiftrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->dailygiftrespond(), output);
  }

  // optional .vmsg.CSArenaRespond ArenaRespond = 22;
  if (has_arenarespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, this->arenarespond(), output);
  }

  // optional .vmsg.CSStoreRespond StoreRespond = 23;
  if (has_storerespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->storerespond(), output);
  }

  // optional .vmsg.CSQiangHunRespond QiangHunRespond = 24;
  if (has_qianghunrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->qianghunrespond(), output);
  }

  // optional .vmsg.CSDebrisRespond DebrisRespond = 25;
  if (has_debrisrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, this->debrisrespond(), output);
  }

  // optional .vmsg.CSActRespond ActRespond = 26;
  if (has_actrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      26, this->actrespond(), output);
  }

  // optional .vmsg.CSDotaItemRespond DotaItemRespond = 27;
  if (has_dotaitemrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, this->dotaitemrespond(), output);
  }

  // optional .vmsg.CSCouponRespond CouponRespond = 28;
  if (has_couponrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, this->couponrespond(), output);
  }

  // optional .vmsg.CSPanicBuyingStoreResponse PanicBuyingRespond = 29;
  if (has_panicbuyingrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, this->panicbuyingrespond(), output);
  }

  // optional .vmsg.CSBossChallengeRsp BossChallengeRsp = 30;
  if (has_bosschallengersp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->bosschallengersp(), output);
  }

  // optional int32 CheckNick_Rsp = 99;
  if (has_checknick_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(99, this->checknick_rsp(), output);
  }

  // optional .vmsg.CSHeartBeatRsp HeartBeat_Rsp = 100;
  if (has_heartbeat_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      100, this->heartbeat_rsp(), output);
  }

  // optional .vmsg.CSAdminRespond AdminRespond = 101;
  if (has_adminrespond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      101, this->adminrespond(), output);
  }

  // optional .vmsg.CSAccountRespond Account_Rsp = 102;
  if (has_account_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      102, this->account_rsp(), output);
  }

}

int VLogicSvr2CliMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.MsgHead Msg_Head = 1;
    if (has_msg_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg_head());
    }

    // optional .vmsg.CSCommonErrMsg ErrMsg = 2;
    if (has_errmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->errmsg());
    }

    // optional .vmsg.CSBagRespond BagRespond = 3;
    if (has_bagrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bagrespond());
    }

    // optional .vmsg.CSPlayerRespond PlayerRespond = 5;
    if (has_playerrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerrespond());
    }

    // optional .vmsg.CSSceneOSDRespond SceneOSDRespond = 6;
    if (has_sceneosdrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sceneosdrespond());
    }

    // optional .vmsg.CSEquipRespond EquipRespond = 7;
    if (has_equiprespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprespond());
    }

    // optional .vmsg.CSTaskRespond TaskRespond = 8;
    if (has_taskrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskrespond());
    }

    // optional .vmsg.CSRankRespond RankRespond = 9;
    if (has_rankrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankrespond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSWeaponRespond WeaponRespond = 10;
    if (has_weaponrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weaponrespond());
    }

    // optional .vmsg.CSGoldRespond GoldRespond = 11;
    if (has_goldrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->goldrespond());
    }

    // optional .vmsg.CSItemRespond ItemRespond = 12;
    if (has_itemrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemrespond());
    }

    // optional .vmsg.CSWarMapRespond WarMapRespond = 13;
    if (has_warmaprespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->warmaprespond());
    }

    // optional .vmsg.CSFriendRespond FriendRespond = 14;
    if (has_friendrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendrespond());
    }

    // optional .vmsg.CSGuildRespond GuildRespond = 15;
    if (has_guildrespond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildrespond());
    }

    // optional .vmsg.CSMailRespond MailRespond = 16;
    if (has_mailrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailrespond());
    }

    // optional .vmsg.CSInfiniteRespond InfiniteRespond = 17;
    if (has_infiniterespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infiniterespond());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .vmsg.CSChatRespond ChatRespond = 18;
    if (has_chatrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatrespond());
    }

    // optional .vmsg.CSCVZRespond CVZRespond = 19;
    if (has_cvzrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cvzrespond());
    }

    // optional .vmsg.CSServerNotifyRespond ServerNotifyRespond = 20;
    if (has_servernotifyrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servernotifyrespond());
    }

    // optional .vmsg.CSDailyGiftRespond DailyGiftRespond = 21;
    if (has_dailygiftrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailygiftrespond());
    }

    // optional .vmsg.CSArenaRespond ArenaRespond = 22;
    if (has_arenarespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenarespond());
    }

    // optional .vmsg.CSStoreRespond StoreRespond = 23;
    if (has_storerespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storerespond());
    }

    // optional .vmsg.CSQiangHunRespond QiangHunRespond = 24;
    if (has_qianghunrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qianghunrespond());
    }

    // optional .vmsg.CSDebrisRespond DebrisRespond = 25;
    if (has_debrisrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->debrisrespond());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .vmsg.CSActRespond ActRespond = 26;
    if (has_actrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actrespond());
    }

    // optional .vmsg.CSDotaItemRespond DotaItemRespond = 27;
    if (has_dotaitemrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dotaitemrespond());
    }

    // optional .vmsg.CSCouponRespond CouponRespond = 28;
    if (has_couponrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->couponrespond());
    }

    // optional .vmsg.CSPanicBuyingStoreResponse PanicBuyingRespond = 29;
    if (has_panicbuyingrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->panicbuyingrespond());
    }

    // optional .vmsg.CSBossChallengeRsp BossChallengeRsp = 30;
    if (has_bosschallengersp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bosschallengersp());
    }

    // optional int32 CheckNick_Rsp = 99;
    if (has_checknick_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->checknick_rsp());
    }

    // optional .vmsg.CSHeartBeatRsp HeartBeat_Rsp = 100;
    if (has_heartbeat_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartbeat_rsp());
    }

    // optional .vmsg.CSAdminRespond AdminRespond = 101;
    if (has_adminrespond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adminrespond());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .vmsg.CSAccountRespond Account_Rsp = 102;
    if (has_account_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->account_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VLogicSvr2CliMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VLogicSvr2CliMsg*>(&from));
}

void VLogicSvr2CliMsg::MergeFrom(const VLogicSvr2CliMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_head()) {
      mutable_msg_head()->::vmsg::MsgHead::MergeFrom(from.msg_head());
    }
    if (from.has_errmsg()) {
      mutable_errmsg()->::vmsg::CSCommonErrMsg::MergeFrom(from.errmsg());
    }
    if (from.has_bagrespond()) {
      mutable_bagrespond()->::vmsg::CSBagRespond::MergeFrom(from.bagrespond());
    }
    if (from.has_playerrespond()) {
      mutable_playerrespond()->::vmsg::CSPlayerRespond::MergeFrom(from.playerrespond());
    }
    if (from.has_sceneosdrespond()) {
      mutable_sceneosdrespond()->::vmsg::CSSceneOSDRespond::MergeFrom(from.sceneosdrespond());
    }
    if (from.has_equiprespond()) {
      mutable_equiprespond()->::vmsg::CSEquipRespond::MergeFrom(from.equiprespond());
    }
    if (from.has_taskrespond()) {
      mutable_taskrespond()->::vmsg::CSTaskRespond::MergeFrom(from.taskrespond());
    }
    if (from.has_rankrespond()) {
      mutable_rankrespond()->::vmsg::CSRankRespond::MergeFrom(from.rankrespond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weaponrespond()) {
      mutable_weaponrespond()->::vmsg::CSWeaponRespond::MergeFrom(from.weaponrespond());
    }
    if (from.has_goldrespond()) {
      mutable_goldrespond()->::vmsg::CSGoldRespond::MergeFrom(from.goldrespond());
    }
    if (from.has_itemrespond()) {
      mutable_itemrespond()->::vmsg::CSItemRespond::MergeFrom(from.itemrespond());
    }
    if (from.has_warmaprespond()) {
      mutable_warmaprespond()->::vmsg::CSWarMapRespond::MergeFrom(from.warmaprespond());
    }
    if (from.has_friendrespond()) {
      mutable_friendrespond()->::vmsg::CSFriendRespond::MergeFrom(from.friendrespond());
    }
    if (from.has_guildrespond()) {
      mutable_guildrespond()->::vmsg::CSGuildRespond::MergeFrom(from.guildrespond());
    }
    if (from.has_mailrespond()) {
      mutable_mailrespond()->::vmsg::CSMailRespond::MergeFrom(from.mailrespond());
    }
    if (from.has_infiniterespond()) {
      mutable_infiniterespond()->::vmsg::CSInfiniteRespond::MergeFrom(from.infiniterespond());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_chatrespond()) {
      mutable_chatrespond()->::vmsg::CSChatRespond::MergeFrom(from.chatrespond());
    }
    if (from.has_cvzrespond()) {
      mutable_cvzrespond()->::vmsg::CSCVZRespond::MergeFrom(from.cvzrespond());
    }
    if (from.has_servernotifyrespond()) {
      mutable_servernotifyrespond()->::vmsg::CSServerNotifyRespond::MergeFrom(from.servernotifyrespond());
    }
    if (from.has_dailygiftrespond()) {
      mutable_dailygiftrespond()->::vmsg::CSDailyGiftRespond::MergeFrom(from.dailygiftrespond());
    }
    if (from.has_arenarespond()) {
      mutable_arenarespond()->::vmsg::CSArenaRespond::MergeFrom(from.arenarespond());
    }
    if (from.has_storerespond()) {
      mutable_storerespond()->::vmsg::CSStoreRespond::MergeFrom(from.storerespond());
    }
    if (from.has_qianghunrespond()) {
      mutable_qianghunrespond()->::vmsg::CSQiangHunRespond::MergeFrom(from.qianghunrespond());
    }
    if (from.has_debrisrespond()) {
      mutable_debrisrespond()->::vmsg::CSDebrisRespond::MergeFrom(from.debrisrespond());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_actrespond()) {
      mutable_actrespond()->::vmsg::CSActRespond::MergeFrom(from.actrespond());
    }
    if (from.has_dotaitemrespond()) {
      mutable_dotaitemrespond()->::vmsg::CSDotaItemRespond::MergeFrom(from.dotaitemrespond());
    }
    if (from.has_couponrespond()) {
      mutable_couponrespond()->::vmsg::CSCouponRespond::MergeFrom(from.couponrespond());
    }
    if (from.has_panicbuyingrespond()) {
      mutable_panicbuyingrespond()->::vmsg::CSPanicBuyingStoreResponse::MergeFrom(from.panicbuyingrespond());
    }
    if (from.has_bosschallengersp()) {
      mutable_bosschallengersp()->::vmsg::CSBossChallengeRsp::MergeFrom(from.bosschallengersp());
    }
    if (from.has_checknick_rsp()) {
      set_checknick_rsp(from.checknick_rsp());
    }
    if (from.has_heartbeat_rsp()) {
      mutable_heartbeat_rsp()->::vmsg::CSHeartBeatRsp::MergeFrom(from.heartbeat_rsp());
    }
    if (from.has_adminrespond()) {
      mutable_adminrespond()->::vmsg::CSAdminRespond::MergeFrom(from.adminrespond());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_account_rsp()) {
      mutable_account_rsp()->::vmsg::CSAccountRespond::MergeFrom(from.account_rsp());
    }
  }
}

void VLogicSvr2CliMsg::CopyFrom(const VLogicSvr2CliMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VLogicSvr2CliMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg_head()) {
    if (!this->msg_head().IsInitialized()) return false;
  }
  if (has_errmsg()) {
    if (!this->errmsg().IsInitialized()) return false;
  }
  if (has_bagrespond()) {
    if (!this->bagrespond().IsInitialized()) return false;
  }
  if (has_playerrespond()) {
    if (!this->playerrespond().IsInitialized()) return false;
  }
  if (has_sceneosdrespond()) {
    if (!this->sceneosdrespond().IsInitialized()) return false;
  }
  if (has_equiprespond()) {
    if (!this->equiprespond().IsInitialized()) return false;
  }
  if (has_taskrespond()) {
    if (!this->taskrespond().IsInitialized()) return false;
  }
  if (has_rankrespond()) {
    if (!this->rankrespond().IsInitialized()) return false;
  }
  if (has_weaponrespond()) {
    if (!this->weaponrespond().IsInitialized()) return false;
  }
  if (has_goldrespond()) {
    if (!this->goldrespond().IsInitialized()) return false;
  }
  if (has_itemrespond()) {
    if (!this->itemrespond().IsInitialized()) return false;
  }
  if (has_warmaprespond()) {
    if (!this->warmaprespond().IsInitialized()) return false;
  }
  if (has_friendrespond()) {
    if (!this->friendrespond().IsInitialized()) return false;
  }
  if (has_guildrespond()) {
    if (!this->guildrespond().IsInitialized()) return false;
  }
  if (has_mailrespond()) {
    if (!this->mailrespond().IsInitialized()) return false;
  }
  if (has_infiniterespond()) {
    if (!this->infiniterespond().IsInitialized()) return false;
  }
  if (has_chatrespond()) {
    if (!this->chatrespond().IsInitialized()) return false;
  }
  if (has_cvzrespond()) {
    if (!this->cvzrespond().IsInitialized()) return false;
  }
  if (has_servernotifyrespond()) {
    if (!this->servernotifyrespond().IsInitialized()) return false;
  }
  if (has_dailygiftrespond()) {
    if (!this->dailygiftrespond().IsInitialized()) return false;
  }
  if (has_arenarespond()) {
    if (!this->arenarespond().IsInitialized()) return false;
  }
  if (has_qianghunrespond()) {
    if (!this->qianghunrespond().IsInitialized()) return false;
  }
  if (has_debrisrespond()) {
    if (!this->debrisrespond().IsInitialized()) return false;
  }
  if (has_actrespond()) {
    if (!this->actrespond().IsInitialized()) return false;
  }
  if (has_dotaitemrespond()) {
    if (!this->dotaitemrespond().IsInitialized()) return false;
  }
  if (has_couponrespond()) {
    if (!this->couponrespond().IsInitialized()) return false;
  }
  if (has_panicbuyingrespond()) {
    if (!this->panicbuyingrespond().IsInitialized()) return false;
  }
  if (has_bosschallengersp()) {
    if (!this->bosschallengersp().IsInitialized()) return false;
  }
  if (has_heartbeat_rsp()) {
    if (!this->heartbeat_rsp().IsInitialized()) return false;
  }
  if (has_adminrespond()) {
    if (!this->adminrespond().IsInitialized()) return false;
  }
  if (has_account_rsp()) {
    if (!this->account_rsp().IsInitialized()) return false;
  }
  return true;
}

void VLogicSvr2CliMsg::Swap(VLogicSvr2CliMsg* other) {
  if (other != this) {
    std::swap(msg_head_, other->msg_head_);
    std::swap(errmsg_, other->errmsg_);
    std::swap(bagrespond_, other->bagrespond_);
    std::swap(playerrespond_, other->playerrespond_);
    std::swap(sceneosdrespond_, other->sceneosdrespond_);
    std::swap(equiprespond_, other->equiprespond_);
    std::swap(taskrespond_, other->taskrespond_);
    std::swap(rankrespond_, other->rankrespond_);
    std::swap(weaponrespond_, other->weaponrespond_);
    std::swap(goldrespond_, other->goldrespond_);
    std::swap(itemrespond_, other->itemrespond_);
    std::swap(warmaprespond_, other->warmaprespond_);
    std::swap(friendrespond_, other->friendrespond_);
    std::swap(guildrespond_, other->guildrespond_);
    std::swap(mailrespond_, other->mailrespond_);
    std::swap(infiniterespond_, other->infiniterespond_);
    std::swap(chatrespond_, other->chatrespond_);
    std::swap(cvzrespond_, other->cvzrespond_);
    std::swap(servernotifyrespond_, other->servernotifyrespond_);
    std::swap(dailygiftrespond_, other->dailygiftrespond_);
    std::swap(arenarespond_, other->arenarespond_);
    std::swap(storerespond_, other->storerespond_);
    std::swap(qianghunrespond_, other->qianghunrespond_);
    std::swap(debrisrespond_, other->debrisrespond_);
    std::swap(actrespond_, other->actrespond_);
    std::swap(dotaitemrespond_, other->dotaitemrespond_);
    std::swap(couponrespond_, other->couponrespond_);
    std::swap(panicbuyingrespond_, other->panicbuyingrespond_);
    std::swap(bosschallengersp_, other->bosschallengersp_);
    std::swap(checknick_rsp_, other->checknick_rsp_);
    std::swap(heartbeat_rsp_, other->heartbeat_rsp_);
    std::swap(adminrespond_, other->adminrespond_);
    std::swap(account_rsp_, other->account_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VLogicSvr2CliMsg::GetTypeName() const {
  return "vmsg.VLogicSvr2CliMsg";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
