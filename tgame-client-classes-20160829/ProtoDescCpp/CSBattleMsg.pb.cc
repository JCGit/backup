// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSBattleMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSBattleMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_CSBattleMsg_2eproto() {
  delete Armors::default_instance_;
  delete JinkSkill::default_instance_;
  delete BattlePlayerUnit::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSBattleMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSBattleMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Armors::default_instance_ = new Armors();
  JinkSkill::default_instance_ = new JinkSkill();
  BattlePlayerUnit::default_instance_ = new BattlePlayerUnit();
  Armors::default_instance_->InitAsDefaultInstance();
  JinkSkill::default_instance_->InitAsDefaultInstance();
  BattlePlayerUnit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSBattleMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSBattleMsg_2eproto_once_);
void protobuf_AddDesc_CSBattleMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSBattleMsg_2eproto_once_,
                 &protobuf_AddDesc_CSBattleMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSBattleMsg_2eproto {
  StaticDescriptorInitializer_CSBattleMsg_2eproto() {
    protobuf_AddDesc_CSBattleMsg_2eproto();
  }
} static_descriptor_initializer_CSBattleMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Armors::kArmorIDsFieldNumber;
#endif  // !_MSC_VER

Armors::Armors()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Armors::InitAsDefaultInstance() {
}

Armors::Armors(const Armors& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Armors::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Armors::~Armors() {
  SharedDtor();
}

void Armors::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Armors::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Armors& Armors::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBattleMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBattleMsg_2eproto();
#endif
  return *default_instance_;
}

Armors* Armors::default_instance_ = NULL;

Armors* Armors::New() const {
  return new Armors;
}

void Armors::Clear() {
  armorids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Armors::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ArmorIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArmorIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_armorids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_armorids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ArmorIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Armors::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 ArmorIDs = 1;
  for (int i = 0; i < this->armorids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->armorids(i), output);
  }

}

int Armors::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ArmorIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->armorids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->armorids(i));
    }
    total_size += 1 * this->armorids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Armors::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Armors*>(&from));
}

void Armors::MergeFrom(const Armors& from) {
  GOOGLE_CHECK_NE(&from, this);
  armorids_.MergeFrom(from.armorids_);
}

void Armors::CopyFrom(const Armors& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Armors::IsInitialized() const {

  return true;
}

void Armors::Swap(Armors* other) {
  if (other != this) {
    armorids_.Swap(&other->armorids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Armors::GetTypeName() const {
  return "com.cfg.vo.Armors";
}


// ===================================================================

#ifndef _MSC_VER
const int JinkSkill::kEffectSpanFieldNumber;
const int JinkSkill::kCDFieldNumber;
#endif  // !_MSC_VER

JinkSkill::JinkSkill()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void JinkSkill::InitAsDefaultInstance() {
}

JinkSkill::JinkSkill(const JinkSkill& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void JinkSkill::SharedCtor() {
  _cached_size_ = 0;
  effectspan_ = 0u;
  cd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JinkSkill::~JinkSkill() {
  SharedDtor();
}

void JinkSkill::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void JinkSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const JinkSkill& JinkSkill::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBattleMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBattleMsg_2eproto();
#endif
  return *default_instance_;
}

JinkSkill* JinkSkill::default_instance_ = NULL;

JinkSkill* JinkSkill::New() const {
  return new JinkSkill;
}

void JinkSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    effectspan_ = 0u;
    cd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool JinkSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EffectSpan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectspan_)));
          set_has_effectspan();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CD;
        break;
      }

      // required uint32 CD = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JinkSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EffectSpan = 1;
  if (has_effectspan()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->effectspan(), output);
  }

  // required uint32 CD = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cd(), output);
  }

}

int JinkSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EffectSpan = 1;
    if (has_effectspan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectspan());
    }

    // required uint32 CD = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JinkSkill::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const JinkSkill*>(&from));
}

void JinkSkill::MergeFrom(const JinkSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effectspan()) {
      set_effectspan(from.effectspan());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
}

void JinkSkill::CopyFrom(const JinkSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JinkSkill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void JinkSkill::Swap(JinkSkill* other) {
  if (other != this) {
    std::swap(effectspan_, other->effectspan_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string JinkSkill::GetTypeName() const {
  return "com.cfg.vo.JinkSkill";
}


// ===================================================================

#ifndef _MSC_VER
const int BattlePlayerUnit::kHPMaxFieldNumber;
const int BattlePlayerUnit::kHPFieldNumber;
const int BattlePlayerUnit::kEPMaxFieldNumber;
const int BattlePlayerUnit::kEPFieldNumber;
const int BattlePlayerUnit::kGunsFieldNumber;
const int BattlePlayerUnit::kArmedGunFieldNumber;
const int BattlePlayerUnit::kBasicAtkValFieldNumber;
const int BattlePlayerUnit::kBasicDefValFieldNumber;
const int BattlePlayerUnit::kArmorFieldNumber;
const int BattlePlayerUnit::kArmedArmorFieldNumber;
const int BattlePlayerUnit::kWalkSpeedFieldNumber;
const int BattlePlayerUnit::kDashSpeedFieldNumber;
const int BattlePlayerUnit::kBasicAtkSpeedFieldNumber;
const int BattlePlayerUnit::kJSkillFieldNumber;
#endif  // !_MSC_VER

BattlePlayerUnit::BattlePlayerUnit()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BattlePlayerUnit::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  jskill_ = const_cast< ::com::cfg::vo::JinkSkill*>(
      ::com::cfg::vo::JinkSkill::internal_default_instance());
#else
  jskill_ = const_cast< ::com::cfg::vo::JinkSkill*>(&::com::cfg::vo::JinkSkill::default_instance());
#endif
}

BattlePlayerUnit::BattlePlayerUnit(const BattlePlayerUnit& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BattlePlayerUnit::SharedCtor() {
  _cached_size_ = 0;
  hpmax_ = 0u;
  hp_ = 0u;
  epmax_ = 0u;
  ep_ = 0u;
  armedgun_ = GOOGLE_ULONGLONG(0);
  basicatkval_ = GOOGLE_ULONGLONG(0);
  basicdefval_ = GOOGLE_ULONGLONG(0);
  armedarmor_ = 0u;
  walkspeed_ = 0u;
  dashspeed_ = 0u;
  basicatkspeed_ = 0u;
  jskill_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattlePlayerUnit::~BattlePlayerUnit() {
  SharedDtor();
}

void BattlePlayerUnit::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete jskill_;
  }
}

void BattlePlayerUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BattlePlayerUnit& BattlePlayerUnit::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSBattleMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSBattleMsg_2eproto();
#endif
  return *default_instance_;
}

BattlePlayerUnit* BattlePlayerUnit::default_instance_ = NULL;

BattlePlayerUnit* BattlePlayerUnit::New() const {
  return new BattlePlayerUnit;
}

void BattlePlayerUnit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hpmax_ = 0u;
    hp_ = 0u;
    epmax_ = 0u;
    ep_ = 0u;
    armedgun_ = GOOGLE_ULONGLONG(0);
    basicatkval_ = GOOGLE_ULONGLONG(0);
    basicdefval_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    armedarmor_ = 0u;
    walkspeed_ = 0u;
    dashspeed_ = 0u;
    basicatkspeed_ = 0u;
    if (has_jskill()) {
      if (jskill_ != NULL) jskill_->::com::cfg::vo::JinkSkill::Clear();
    }
  }
  guns_.Clear();
  armor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BattlePlayerUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HPMax = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_HP;
        break;
      }

      // required uint32 HP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EPMax;
        break;
      }

      // required uint32 EPMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EPMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epmax_)));
          set_has_epmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EP;
        break;
      }

      // required uint32 EP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ep_)));
          set_has_ep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Guns;
        break;
      }

      // repeated uint64 Guns = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guns:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_guns())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guns())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Guns;
        if (input->ExpectTag(48)) goto parse_ArmedGun;
        break;
      }

      // required uint64 ArmedGun = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArmedGun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armedgun_)));
          set_has_armedgun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BasicAtkVal;
        break;
      }

      // required uint64 BasicAtkVal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BasicAtkVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &basicatkval_)));
          set_has_basicatkval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_BasicDefVal;
        break;
      }

      // required uint64 BasicDefVal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BasicDefVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &basicdefval_)));
          set_has_basicdefval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_armor;
        break;
      }

      // repeated .com.cfg.vo.Armors armor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_armor;
        if (input->ExpectTag(88)) goto parse_ArmedArmor;
        break;
      }

      // required uint32 ArmedArmor = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArmedArmor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &armedarmor_)));
          set_has_armedarmor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_WalkSpeed;
        break;
      }

      // required uint32 WalkSpeed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &walkspeed_)));
          set_has_walkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DashSpeed;
        break;
      }

      // required uint32 DashSpeed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DashSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dashspeed_)));
          set_has_dashspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_BasicAtkSpeed;
        break;
      }

      // required uint32 BasicAtkSpeed = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BasicAtkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &basicatkspeed_)));
          set_has_basicatkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_jSkill;
        break;
      }

      // required .com.cfg.vo.JinkSkill jSkill = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_jSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_jskill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattlePlayerUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HPMax = 1;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hpmax(), output);
  }

  // required uint32 HP = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  // required uint32 EPMax = 3;
  if (has_epmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->epmax(), output);
  }

  // required uint32 EP = 4;
  if (has_ep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ep(), output);
  }

  // repeated uint64 Guns = 5;
  for (int i = 0; i < this->guns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->guns(i), output);
  }

  // required uint64 ArmedGun = 6;
  if (has_armedgun()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->armedgun(), output);
  }

  // required uint64 BasicAtkVal = 8;
  if (has_basicatkval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->basicatkval(), output);
  }

  // required uint64 BasicDefVal = 9;
  if (has_basicdefval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->basicdefval(), output);
  }

  // repeated .com.cfg.vo.Armors armor = 10;
  for (int i = 0; i < this->armor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->armor(i), output);
  }

  // required uint32 ArmedArmor = 11;
  if (has_armedarmor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->armedarmor(), output);
  }

  // required uint32 WalkSpeed = 12;
  if (has_walkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->walkspeed(), output);
  }

  // required uint32 DashSpeed = 13;
  if (has_dashspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->dashspeed(), output);
  }

  // required uint32 BasicAtkSpeed = 14;
  if (has_basicatkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->basicatkspeed(), output);
  }

  // required .com.cfg.vo.JinkSkill jSkill = 15;
  if (has_jskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->jskill(), output);
  }

}

int BattlePlayerUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HPMax = 1;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpmax());
    }

    // required uint32 HP = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 EPMax = 3;
    if (has_epmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epmax());
    }

    // required uint32 EP = 4;
    if (has_ep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ep());
    }

    // required uint64 ArmedGun = 6;
    if (has_armedgun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armedgun());
    }

    // required uint64 BasicAtkVal = 8;
    if (has_basicatkval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->basicatkval());
    }

    // required uint64 BasicDefVal = 9;
    if (has_basicdefval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->basicdefval());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 ArmedArmor = 11;
    if (has_armedarmor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->armedarmor());
    }

    // required uint32 WalkSpeed = 12;
    if (has_walkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->walkspeed());
    }

    // required uint32 DashSpeed = 13;
    if (has_dashspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dashspeed());
    }

    // required uint32 BasicAtkSpeed = 14;
    if (has_basicatkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->basicatkspeed());
    }

    // required .com.cfg.vo.JinkSkill jSkill = 15;
    if (has_jskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->jskill());
    }

  }
  // repeated uint64 Guns = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->guns_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guns(i));
    }
    total_size += 1 * this->guns_size() + data_size;
  }

  // repeated .com.cfg.vo.Armors armor = 10;
  total_size += 1 * this->armor_size();
  for (int i = 0; i < this->armor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->armor(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattlePlayerUnit::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BattlePlayerUnit*>(&from));
}

void BattlePlayerUnit::MergeFrom(const BattlePlayerUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  guns_.MergeFrom(from.guns_);
  armor_.MergeFrom(from.armor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_epmax()) {
      set_epmax(from.epmax());
    }
    if (from.has_ep()) {
      set_ep(from.ep());
    }
    if (from.has_armedgun()) {
      set_armedgun(from.armedgun());
    }
    if (from.has_basicatkval()) {
      set_basicatkval(from.basicatkval());
    }
    if (from.has_basicdefval()) {
      set_basicdefval(from.basicdefval());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_armedarmor()) {
      set_armedarmor(from.armedarmor());
    }
    if (from.has_walkspeed()) {
      set_walkspeed(from.walkspeed());
    }
    if (from.has_dashspeed()) {
      set_dashspeed(from.dashspeed());
    }
    if (from.has_basicatkspeed()) {
      set_basicatkspeed(from.basicatkspeed());
    }
    if (from.has_jskill()) {
      mutable_jskill()->::com::cfg::vo::JinkSkill::MergeFrom(from.jskill());
    }
  }
}

void BattlePlayerUnit::CopyFrom(const BattlePlayerUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattlePlayerUnit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003eef) != 0x00003eef) return false;

  if (has_jskill()) {
    if (!this->jskill().IsInitialized()) return false;
  }
  return true;
}

void BattlePlayerUnit::Swap(BattlePlayerUnit* other) {
  if (other != this) {
    std::swap(hpmax_, other->hpmax_);
    std::swap(hp_, other->hp_);
    std::swap(epmax_, other->epmax_);
    std::swap(ep_, other->ep_);
    guns_.Swap(&other->guns_);
    std::swap(armedgun_, other->armedgun_);
    std::swap(basicatkval_, other->basicatkval_);
    std::swap(basicdefval_, other->basicdefval_);
    armor_.Swap(&other->armor_);
    std::swap(armedarmor_, other->armedarmor_);
    std::swap(walkspeed_, other->walkspeed_);
    std::swap(dashspeed_, other->dashspeed_);
    std::swap(basicatkspeed_, other->basicatkspeed_);
    std::swap(jskill_, other->jskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BattlePlayerUnit::GetTypeName() const {
  return "com.cfg.vo.BattlePlayerUnit";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
