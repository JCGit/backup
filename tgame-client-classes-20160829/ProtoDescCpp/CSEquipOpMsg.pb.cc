// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSEquipOpMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSEquipOpMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSEquipOpMsg_2eproto() {
  delete CSEquipRefineHero::default_instance_;
  delete CSEquipRefineBag::default_instance_;
  delete CSEquipRefineRqst::default_instance_;
  delete CSEquipRefineRsp::default_instance_;
  delete CSEquipTransRefineInfo::default_instance_;
  delete CSEquipTransRqst::default_instance_;
  delete CSEquipTransRsp::default_instance_;
  delete CSEquipLvUpConsume::default_instance_;
  delete CSEquipLvUpRqst::default_instance_;
  delete CSPlayerEquipInfo::default_instance_;
  delete CSEquipLvUpRsp::default_instance_;
  delete CSEquipStarStepRqst::default_instance_;
  delete CSEquipStarStepRsp::default_instance_;
  delete CSEquipRefitRqst::default_instance_;
  delete CSEquipRefitRsp::default_instance_;
  delete CSEquipRequest::default_instance_;
  delete CSEquipRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSEquipOpMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSEquipOpMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  CSEquipRefineHero::default_instance_ = new CSEquipRefineHero();
  CSEquipRefineBag::default_instance_ = new CSEquipRefineBag();
  CSEquipRefineRqst::default_instance_ = new CSEquipRefineRqst();
  CSEquipRefineRsp::default_instance_ = new CSEquipRefineRsp();
  CSEquipTransRefineInfo::default_instance_ = new CSEquipTransRefineInfo();
  CSEquipTransRqst::default_instance_ = new CSEquipTransRqst();
  CSEquipTransRsp::default_instance_ = new CSEquipTransRsp();
  CSEquipLvUpConsume::default_instance_ = new CSEquipLvUpConsume();
  CSEquipLvUpRqst::default_instance_ = new CSEquipLvUpRqst();
  CSPlayerEquipInfo::default_instance_ = new CSPlayerEquipInfo();
  CSEquipLvUpRsp::default_instance_ = new CSEquipLvUpRsp();
  CSEquipStarStepRqst::default_instance_ = new CSEquipStarStepRqst();
  CSEquipStarStepRsp::default_instance_ = new CSEquipStarStepRsp();
  CSEquipRefitRqst::default_instance_ = new CSEquipRefitRqst();
  CSEquipRefitRsp::default_instance_ = new CSEquipRefitRsp();
  CSEquipRequest::default_instance_ = new CSEquipRequest();
  CSEquipRespond::default_instance_ = new CSEquipRespond();
  CSEquipRefineHero::default_instance_->InitAsDefaultInstance();
  CSEquipRefineBag::default_instance_->InitAsDefaultInstance();
  CSEquipRefineRqst::default_instance_->InitAsDefaultInstance();
  CSEquipRefineRsp::default_instance_->InitAsDefaultInstance();
  CSEquipTransRefineInfo::default_instance_->InitAsDefaultInstance();
  CSEquipTransRqst::default_instance_->InitAsDefaultInstance();
  CSEquipTransRsp::default_instance_->InitAsDefaultInstance();
  CSEquipLvUpConsume::default_instance_->InitAsDefaultInstance();
  CSEquipLvUpRqst::default_instance_->InitAsDefaultInstance();
  CSPlayerEquipInfo::default_instance_->InitAsDefaultInstance();
  CSEquipLvUpRsp::default_instance_->InitAsDefaultInstance();
  CSEquipStarStepRqst::default_instance_->InitAsDefaultInstance();
  CSEquipStarStepRsp::default_instance_->InitAsDefaultInstance();
  CSEquipRefitRqst::default_instance_->InitAsDefaultInstance();
  CSEquipRefitRsp::default_instance_->InitAsDefaultInstance();
  CSEquipRequest::default_instance_->InitAsDefaultInstance();
  CSEquipRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSEquipOpMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSEquipOpMsg_2eproto_once_);
void protobuf_AddDesc_CSEquipOpMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSEquipOpMsg_2eproto_once_,
                 &protobuf_AddDesc_CSEquipOpMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSEquipOpMsg_2eproto {
  StaticDescriptorInitializer_CSEquipOpMsg_2eproto() {
    protobuf_AddDesc_CSEquipOpMsg_2eproto();
  }
} static_descriptor_initializer_CSEquipOpMsg_2eproto_;
#endif
bool REFINE_WHERE_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRefineHero::kEquipGUIDFieldNumber;
#endif  // !_MSC_VER

CSEquipRefineHero::CSEquipRefineHero()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRefineHero::InitAsDefaultInstance() {
}

CSEquipRefineHero::CSEquipRefineHero(const CSEquipRefineHero& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRefineHero::SharedCtor() {
  _cached_size_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRefineHero::~CSEquipRefineHero() {
  SharedDtor();
}

void CSEquipRefineHero::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipRefineHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRefineHero& CSEquipRefineHero::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRefineHero* CSEquipRefineHero::default_instance_ = NULL;

CSEquipRefineHero* CSEquipRefineHero::New() const {
  return new CSEquipRefineHero;
}

void CSEquipRefineHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRefineHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 EquipGUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRefineHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 EquipGUID = 1;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equipguid(), output);
  }

}

int CSEquipRefineHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 EquipGUID = 1;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRefineHero::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRefineHero*>(&from));
}

void CSEquipRefineHero::MergeFrom(const CSEquipRefineHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
  }
}

void CSEquipRefineHero::CopyFrom(const CSEquipRefineHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRefineHero::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSEquipRefineHero::Swap(CSEquipRefineHero* other) {
  if (other != this) {
    std::swap(equipguid_, other->equipguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRefineHero::GetTypeName() const {
  return "vmsg.CSEquipRefineHero";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRefineBag::kBagIdxFieldNumber;
const int CSEquipRefineBag::kEquipGUIDFieldNumber;
#endif  // !_MSC_VER

CSEquipRefineBag::CSEquipRefineBag()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRefineBag::InitAsDefaultInstance() {
}

CSEquipRefineBag::CSEquipRefineBag(const CSEquipRefineBag& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRefineBag::SharedCtor() {
  _cached_size_ = 0;
  bagidx_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRefineBag::~CSEquipRefineBag() {
  SharedDtor();
}

void CSEquipRefineBag::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipRefineBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRefineBag& CSEquipRefineBag::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRefineBag* CSEquipRefineBag::default_instance_ = NULL;

CSEquipRefineBag* CSEquipRefineBag::New() const {
  return new CSEquipRefineBag;
}

void CSEquipRefineBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagidx_ = 0;
    equipguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRefineBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BagIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagidx_)));
          set_has_bagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipGUID;
        break;
      }

      // required uint64 EquipGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRefineBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BagIdx = 1;
  if (has_bagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bagidx(), output);
  }

  // required uint64 EquipGUID = 2;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equipguid(), output);
  }

}

int CSEquipRefineBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BagIdx = 1;
    if (has_bagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagidx());
    }

    // required uint64 EquipGUID = 2;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRefineBag::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRefineBag*>(&from));
}

void CSEquipRefineBag::MergeFrom(const CSEquipRefineBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagidx()) {
      set_bagidx(from.bagidx());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
  }
}

void CSEquipRefineBag::CopyFrom(const CSEquipRefineBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRefineBag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSEquipRefineBag::Swap(CSEquipRefineBag* other) {
  if (other != this) {
    std::swap(bagidx_, other->bagidx_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRefineBag::GetTypeName() const {
  return "vmsg.CSEquipRefineBag";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRefineRqst::kTypeFieldNumber;
const int CSEquipRefineRqst::kEquipRefineHeroFieldNumber;
const int CSEquipRefineRqst::kEquipRefineBagFieldNumber;
const int CSEquipRefineRqst::kSelProtectFieldNumber;
#endif  // !_MSC_VER

CSEquipRefineRqst::CSEquipRefineRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRefineRqst::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprefinehero_ = const_cast< ::vmsg::CSEquipRefineHero*>(
      ::vmsg::CSEquipRefineHero::internal_default_instance());
#else
  equiprefinehero_ = const_cast< ::vmsg::CSEquipRefineHero*>(&::vmsg::CSEquipRefineHero::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprefinebag_ = const_cast< ::vmsg::CSEquipRefineBag*>(
      ::vmsg::CSEquipRefineBag::internal_default_instance());
#else
  equiprefinebag_ = const_cast< ::vmsg::CSEquipRefineBag*>(&::vmsg::CSEquipRefineBag::default_instance());
#endif
}

CSEquipRefineRqst::CSEquipRefineRqst(const CSEquipRefineRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRefineRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  equiprefinehero_ = NULL;
  equiprefinebag_ = NULL;
  selprotect_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRefineRqst::~CSEquipRefineRqst() {
  SharedDtor();
}

void CSEquipRefineRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equiprefinehero_;
    delete equiprefinebag_;
  }
}

void CSEquipRefineRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRefineRqst& CSEquipRefineRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRefineRqst* CSEquipRefineRqst::default_instance_ = NULL;

CSEquipRefineRqst* CSEquipRefineRqst::New() const {
  return new CSEquipRefineRqst;
}

void CSEquipRefineRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_equiprefinehero()) {
      if (equiprefinehero_ != NULL) equiprefinehero_->::vmsg::CSEquipRefineHero::Clear();
    }
    if (has_equiprefinebag()) {
      if (equiprefinebag_ != NULL) equiprefinebag_->::vmsg::CSEquipRefineBag::Clear();
    }
    selprotect_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRefineRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EquipRefineHero;
        break;
      }

      // optional .vmsg.CSEquipRefineHero EquipRefineHero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipRefineHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprefinehero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EquipRefineBag;
        break;
      }

      // optional .vmsg.CSEquipRefineBag EquipRefineBag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipRefineBag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprefinebag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_SelProtect;
        break;
      }

      // required uint32 SelProtect = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SelProtect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selprotect_)));
          set_has_selprotect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRefineRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional .vmsg.CSEquipRefineHero EquipRefineHero = 2;
  if (has_equiprefinehero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equiprefinehero(), output);
  }

  // optional .vmsg.CSEquipRefineBag EquipRefineBag = 3;
  if (has_equiprefinebag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equiprefinebag(), output);
  }

  // required uint32 SelProtect = 4;
  if (has_selprotect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->selprotect(), output);
  }

}

int CSEquipRefineRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional .vmsg.CSEquipRefineHero EquipRefineHero = 2;
    if (has_equiprefinehero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprefinehero());
    }

    // optional .vmsg.CSEquipRefineBag EquipRefineBag = 3;
    if (has_equiprefinebag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprefinebag());
    }

    // required uint32 SelProtect = 4;
    if (has_selprotect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selprotect());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRefineRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRefineRqst*>(&from));
}

void CSEquipRefineRqst::MergeFrom(const CSEquipRefineRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equiprefinehero()) {
      mutable_equiprefinehero()->::vmsg::CSEquipRefineHero::MergeFrom(from.equiprefinehero());
    }
    if (from.has_equiprefinebag()) {
      mutable_equiprefinebag()->::vmsg::CSEquipRefineBag::MergeFrom(from.equiprefinebag());
    }
    if (from.has_selprotect()) {
      set_selprotect(from.selprotect());
    }
  }
}

void CSEquipRefineRqst::CopyFrom(const CSEquipRefineRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRefineRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;

  if (has_equiprefinehero()) {
    if (!this->equiprefinehero().IsInitialized()) return false;
  }
  if (has_equiprefinebag()) {
    if (!this->equiprefinebag().IsInitialized()) return false;
  }
  return true;
}

void CSEquipRefineRqst::Swap(CSEquipRefineRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equiprefinehero_, other->equiprefinehero_);
    std::swap(equiprefinebag_, other->equiprefinebag_);
    std::swap(selprotect_, other->selprotect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRefineRqst::GetTypeName() const {
  return "vmsg.CSEquipRefineRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRefineRsp::kEquipGUIDFieldNumber;
const int CSEquipRefineRsp::kRefineLvFieldNumber;
#endif  // !_MSC_VER

CSEquipRefineRsp::CSEquipRefineRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRefineRsp::InitAsDefaultInstance() {
}

CSEquipRefineRsp::CSEquipRefineRsp(const CSEquipRefineRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRefineRsp::SharedCtor() {
  _cached_size_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  refinelv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRefineRsp::~CSEquipRefineRsp() {
  SharedDtor();
}

void CSEquipRefineRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipRefineRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRefineRsp& CSEquipRefineRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRefineRsp* CSEquipRefineRsp::default_instance_ = NULL;

CSEquipRefineRsp* CSEquipRefineRsp::New() const {
  return new CSEquipRefineRsp;
}

void CSEquipRefineRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipguid_ = GOOGLE_ULONGLONG(0);
    refinelv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRefineRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 EquipGUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RefineLv;
        break;
      }

      // required uint32 RefineLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRefineRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 EquipGUID = 1;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->equipguid(), output);
  }

  // required uint32 RefineLv = 2;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refinelv(), output);
  }

}

int CSEquipRefineRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 EquipGUID = 1;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

    // required uint32 RefineLv = 2;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRefineRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRefineRsp*>(&from));
}

void CSEquipRefineRsp::MergeFrom(const CSEquipRefineRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
  }
}

void CSEquipRefineRsp::CopyFrom(const CSEquipRefineRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRefineRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSEquipRefineRsp::Swap(CSEquipRefineRsp* other) {
  if (other != this) {
    std::swap(equipguid_, other->equipguid_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRefineRsp::GetTypeName() const {
  return "vmsg.CSEquipRefineRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipTransRefineInfo::kTypeFieldNumber;
const int CSEquipTransRefineInfo::kEquipGUIDFieldNumber;
const int CSEquipTransRefineInfo::kBagIdxFieldNumber;
#endif  // !_MSC_VER

CSEquipTransRefineInfo::CSEquipTransRefineInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipTransRefineInfo::InitAsDefaultInstance() {
}

CSEquipTransRefineInfo::CSEquipTransRefineInfo(const CSEquipTransRefineInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipTransRefineInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  equipguid_ = GOOGLE_ULONGLONG(0);
  bagidx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipTransRefineInfo::~CSEquipTransRefineInfo() {
  SharedDtor();
}

void CSEquipTransRefineInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipTransRefineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipTransRefineInfo& CSEquipTransRefineInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipTransRefineInfo* CSEquipTransRefineInfo::default_instance_ = NULL;

CSEquipTransRefineInfo* CSEquipTransRefineInfo::New() const {
  return new CSEquipTransRefineInfo;
}

void CSEquipTransRefineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    equipguid_ = GOOGLE_ULONGLONG(0);
    bagidx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipTransRefineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipGUID;
        break;
      }

      // required uint64 EquipGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BagIdx;
        break;
      }

      // optional int32 BagIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BagIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagidx_)));
          set_has_bagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipTransRefineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 EquipGUID = 2;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equipguid(), output);
  }

  // optional int32 BagIdx = 3;
  if (has_bagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bagidx(), output);
  }

}

int CSEquipTransRefineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 EquipGUID = 2;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

    // optional int32 BagIdx = 3;
    if (has_bagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagidx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipTransRefineInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipTransRefineInfo*>(&from));
}

void CSEquipTransRefineInfo::MergeFrom(const CSEquipTransRefineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_bagidx()) {
      set_bagidx(from.bagidx());
    }
  }
}

void CSEquipTransRefineInfo::CopyFrom(const CSEquipTransRefineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipTransRefineInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSEquipTransRefineInfo::Swap(CSEquipTransRefineInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(bagidx_, other->bagidx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipTransRefineInfo::GetTypeName() const {
  return "vmsg.CSEquipTransRefineInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipTransRqst::kFromEquipFieldNumber;
const int CSEquipTransRqst::kToEquipFieldNumber;
#endif  // !_MSC_VER

CSEquipTransRqst::CSEquipTransRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipTransRqst::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fromequip_ = const_cast< ::vmsg::CSEquipTransRefineInfo*>(
      ::vmsg::CSEquipTransRefineInfo::internal_default_instance());
#else
  fromequip_ = const_cast< ::vmsg::CSEquipTransRefineInfo*>(&::vmsg::CSEquipTransRefineInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  toequip_ = const_cast< ::vmsg::CSEquipTransRefineInfo*>(
      ::vmsg::CSEquipTransRefineInfo::internal_default_instance());
#else
  toequip_ = const_cast< ::vmsg::CSEquipTransRefineInfo*>(&::vmsg::CSEquipTransRefineInfo::default_instance());
#endif
}

CSEquipTransRqst::CSEquipTransRqst(const CSEquipTransRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipTransRqst::SharedCtor() {
  _cached_size_ = 0;
  fromequip_ = NULL;
  toequip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipTransRqst::~CSEquipTransRqst() {
  SharedDtor();
}

void CSEquipTransRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fromequip_;
    delete toequip_;
  }
}

void CSEquipTransRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipTransRqst& CSEquipTransRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipTransRqst* CSEquipTransRqst::default_instance_ = NULL;

CSEquipTransRqst* CSEquipTransRqst::New() const {
  return new CSEquipTransRqst;
}

void CSEquipTransRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_fromequip()) {
      if (fromequip_ != NULL) fromequip_->::vmsg::CSEquipTransRefineInfo::Clear();
    }
    if (has_toequip()) {
      if (toequip_ != NULL) toequip_->::vmsg::CSEquipTransRefineInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipTransRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSEquipTransRefineInfo FromEquip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ToEquip;
        break;
      }

      // required .vmsg.CSEquipTransRefineInfo ToEquip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ToEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_toequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipTransRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSEquipTransRefineInfo FromEquip = 1;
  if (has_fromequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fromequip(), output);
  }

  // required .vmsg.CSEquipTransRefineInfo ToEquip = 2;
  if (has_toequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->toequip(), output);
  }

}

int CSEquipTransRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSEquipTransRefineInfo FromEquip = 1;
    if (has_fromequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromequip());
    }

    // required .vmsg.CSEquipTransRefineInfo ToEquip = 2;
    if (has_toequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->toequip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipTransRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipTransRqst*>(&from));
}

void CSEquipTransRqst::MergeFrom(const CSEquipTransRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromequip()) {
      mutable_fromequip()->::vmsg::CSEquipTransRefineInfo::MergeFrom(from.fromequip());
    }
    if (from.has_toequip()) {
      mutable_toequip()->::vmsg::CSEquipTransRefineInfo::MergeFrom(from.toequip());
    }
  }
}

void CSEquipTransRqst::CopyFrom(const CSEquipTransRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipTransRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_fromequip()) {
    if (!this->fromequip().IsInitialized()) return false;
  }
  if (has_toequip()) {
    if (!this->toequip().IsInitialized()) return false;
  }
  return true;
}

void CSEquipTransRqst::Swap(CSEquipTransRqst* other) {
  if (other != this) {
    std::swap(fromequip_, other->fromequip_);
    std::swap(toequip_, other->toequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipTransRqst::GetTypeName() const {
  return "vmsg.CSEquipTransRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipTransRsp::kFromEquipGUIDFieldNumber;
const int CSEquipTransRsp::kFromRefineLvFieldNumber;
const int CSEquipTransRsp::kToEquipGUIDFieldNumber;
const int CSEquipTransRsp::kToRefineLvFieldNumber;
#endif  // !_MSC_VER

CSEquipTransRsp::CSEquipTransRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipTransRsp::InitAsDefaultInstance() {
}

CSEquipTransRsp::CSEquipTransRsp(const CSEquipTransRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipTransRsp::SharedCtor() {
  _cached_size_ = 0;
  fromequipguid_ = GOOGLE_ULONGLONG(0);
  fromrefinelv_ = 0u;
  toequipguid_ = GOOGLE_ULONGLONG(0);
  torefinelv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipTransRsp::~CSEquipTransRsp() {
  SharedDtor();
}

void CSEquipTransRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipTransRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipTransRsp& CSEquipTransRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipTransRsp* CSEquipTransRsp::default_instance_ = NULL;

CSEquipTransRsp* CSEquipTransRsp::New() const {
  return new CSEquipTransRsp;
}

void CSEquipTransRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromequipguid_ = GOOGLE_ULONGLONG(0);
    fromrefinelv_ = 0u;
    toequipguid_ = GOOGLE_ULONGLONG(0);
    torefinelv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipTransRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 FromEquipGUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromequipguid_)));
          set_has_fromequipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FromRefineLv;
        break;
      }

      // required uint32 FromRefineLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FromRefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrefinelv_)));
          set_has_fromrefinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ToEquipGUID;
        break;
      }

      // required uint64 ToEquipGUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToEquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &toequipguid_)));
          set_has_toequipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ToRefineLv;
        break;
      }

      // required uint32 ToRefineLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ToRefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &torefinelv_)));
          set_has_torefinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipTransRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 FromEquipGUID = 1;
  if (has_fromequipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fromequipguid(), output);
  }

  // required uint32 FromRefineLv = 2;
  if (has_fromrefinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fromrefinelv(), output);
  }

  // required uint64 ToEquipGUID = 3;
  if (has_toequipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->toequipguid(), output);
  }

  // required uint32 ToRefineLv = 4;
  if (has_torefinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->torefinelv(), output);
  }

}

int CSEquipTransRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 FromEquipGUID = 1;
    if (has_fromequipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromequipguid());
    }

    // required uint32 FromRefineLv = 2;
    if (has_fromrefinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrefinelv());
    }

    // required uint64 ToEquipGUID = 3;
    if (has_toequipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->toequipguid());
    }

    // required uint32 ToRefineLv = 4;
    if (has_torefinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->torefinelv());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipTransRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipTransRsp*>(&from));
}

void CSEquipTransRsp::MergeFrom(const CSEquipTransRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromequipguid()) {
      set_fromequipguid(from.fromequipguid());
    }
    if (from.has_fromrefinelv()) {
      set_fromrefinelv(from.fromrefinelv());
    }
    if (from.has_toequipguid()) {
      set_toequipguid(from.toequipguid());
    }
    if (from.has_torefinelv()) {
      set_torefinelv(from.torefinelv());
    }
  }
}

void CSEquipTransRsp::CopyFrom(const CSEquipTransRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipTransRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSEquipTransRsp::Swap(CSEquipTransRsp* other) {
  if (other != this) {
    std::swap(fromequipguid_, other->fromequipguid_);
    std::swap(fromrefinelv_, other->fromrefinelv_);
    std::swap(toequipguid_, other->toequipguid_);
    std::swap(torefinelv_, other->torefinelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipTransRsp::GetTypeName() const {
  return "vmsg.CSEquipTransRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipLvUpConsume::kTypeFieldNumber;
const int CSEquipLvUpConsume::kIDFieldNumber;
const int CSEquipLvUpConsume::kCntFieldNumber;
#endif  // !_MSC_VER

CSEquipLvUpConsume::CSEquipLvUpConsume()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipLvUpConsume::InitAsDefaultInstance() {
}

CSEquipLvUpConsume::CSEquipLvUpConsume(const CSEquipLvUpConsume& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipLvUpConsume::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  cnt_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipLvUpConsume::~CSEquipLvUpConsume() {
  SharedDtor();
}

void CSEquipLvUpConsume::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipLvUpConsume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipLvUpConsume& CSEquipLvUpConsume::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipLvUpConsume* CSEquipLvUpConsume::default_instance_ = NULL;

CSEquipLvUpConsume* CSEquipLvUpConsume::New() const {
  return new CSEquipLvUpConsume;
}

void CSEquipLvUpConsume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    cnt_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipLvUpConsume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }

      // required uint64 ID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Cnt;
        break;
      }

      // required uint64 Cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipLvUpConsume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint64 ID = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // required uint64 Cnt = 3;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cnt(), output);
  }

}

int CSEquipLvUpConsume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint64 ID = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint64 Cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipLvUpConsume::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipLvUpConsume*>(&from));
}

void CSEquipLvUpConsume::MergeFrom(const CSEquipLvUpConsume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
}

void CSEquipLvUpConsume::CopyFrom(const CSEquipLvUpConsume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipLvUpConsume::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSEquipLvUpConsume::Swap(CSEquipLvUpConsume* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipLvUpConsume::GetTypeName() const {
  return "vmsg.CSEquipLvUpConsume";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipLvUpRqst::kBagIdxFieldNumber;
const int CSEquipLvUpRqst::kEquipGUIDFieldNumber;
const int CSEquipLvUpRqst::kConsumesFieldNumber;
#endif  // !_MSC_VER

CSEquipLvUpRqst::CSEquipLvUpRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipLvUpRqst::InitAsDefaultInstance() {
}

CSEquipLvUpRqst::CSEquipLvUpRqst(const CSEquipLvUpRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipLvUpRqst::SharedCtor() {
  _cached_size_ = 0;
  bagidx_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipLvUpRqst::~CSEquipLvUpRqst() {
  SharedDtor();
}

void CSEquipLvUpRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipLvUpRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipLvUpRqst& CSEquipLvUpRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipLvUpRqst* CSEquipLvUpRqst::default_instance_ = NULL;

CSEquipLvUpRqst* CSEquipLvUpRqst::New() const {
  return new CSEquipLvUpRqst;
}

void CSEquipLvUpRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagidx_ = 0;
    equipguid_ = GOOGLE_ULONGLONG(0);
  }
  consumes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipLvUpRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BagIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagidx_)));
          set_has_bagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipGUID;
        break;
      }

      // required uint64 EquipGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Consumes;
        break;
      }

      // repeated .vmsg.CSEquipLvUpConsume Consumes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Consumes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_consumes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Consumes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipLvUpRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BagIdx = 1;
  if (has_bagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bagidx(), output);
  }

  // required uint64 EquipGUID = 2;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equipguid(), output);
  }

  // repeated .vmsg.CSEquipLvUpConsume Consumes = 3;
  for (int i = 0; i < this->consumes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->consumes(i), output);
  }

}

int CSEquipLvUpRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BagIdx = 1;
    if (has_bagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagidx());
    }

    // required uint64 EquipGUID = 2;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

  }
  // repeated .vmsg.CSEquipLvUpConsume Consumes = 3;
  total_size += 1 * this->consumes_size();
  for (int i = 0; i < this->consumes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->consumes(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipLvUpRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipLvUpRqst*>(&from));
}

void CSEquipLvUpRqst::MergeFrom(const CSEquipLvUpRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  consumes_.MergeFrom(from.consumes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagidx()) {
      set_bagidx(from.bagidx());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
  }
}

void CSEquipLvUpRqst::CopyFrom(const CSEquipLvUpRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipLvUpRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < consumes_size(); i++) {
    if (!this->consumes(i).IsInitialized()) return false;
  }
  return true;
}

void CSEquipLvUpRqst::Swap(CSEquipLvUpRqst* other) {
  if (other != this) {
    std::swap(bagidx_, other->bagidx_);
    std::swap(equipguid_, other->equipguid_);
    consumes_.Swap(&other->consumes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipLvUpRqst::GetTypeName() const {
  return "vmsg.CSEquipLvUpRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPlayerEquipInfo::kEquipLstFieldNumber;
const int CSPlayerEquipInfo::kSpareEquipFieldNumber;
#endif  // !_MSC_VER

CSPlayerEquipInfo::CSPlayerEquipInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPlayerEquipInfo::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  spareequip_ = const_cast< ::vmsg::CSEquipInfo*>(
      ::vmsg::CSEquipInfo::internal_default_instance());
#else
  spareequip_ = const_cast< ::vmsg::CSEquipInfo*>(&::vmsg::CSEquipInfo::default_instance());
#endif
}

CSPlayerEquipInfo::CSPlayerEquipInfo(const CSPlayerEquipInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPlayerEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  spareequip_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPlayerEquipInfo::~CSPlayerEquipInfo() {
  SharedDtor();
}

void CSPlayerEquipInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete spareequip_;
  }
}

void CSPlayerEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPlayerEquipInfo& CSPlayerEquipInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSPlayerEquipInfo* CSPlayerEquipInfo::default_instance_ = NULL;

CSPlayerEquipInfo* CSPlayerEquipInfo::New() const {
  return new CSPlayerEquipInfo;
}

void CSPlayerEquipInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_spareequip()) {
      if (spareequip_ != NULL) spareequip_->::vmsg::CSEquipInfo::Clear();
    }
  }
  equiplst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPlayerEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSEquipInfo EquipLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiplst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_EquipLst;
        if (input->ExpectTag(18)) goto parse_SpareEquip;
        break;
      }

      // required .vmsg.CSEquipInfo SpareEquip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SpareEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spareequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPlayerEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSEquipInfo EquipLst = 1;
  for (int i = 0; i < this->equiplst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equiplst(i), output);
  }

  // required .vmsg.CSEquipInfo SpareEquip = 2;
  if (has_spareequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->spareequip(), output);
  }

}

int CSPlayerEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required .vmsg.CSEquipInfo SpareEquip = 2;
    if (has_spareequip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spareequip());
    }

  }
  // repeated .vmsg.CSEquipInfo EquipLst = 1;
  total_size += 1 * this->equiplst_size();
  for (int i = 0; i < this->equiplst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiplst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPlayerEquipInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPlayerEquipInfo*>(&from));
}

void CSPlayerEquipInfo::MergeFrom(const CSPlayerEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiplst_.MergeFrom(from.equiplst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_spareequip()) {
      mutable_spareequip()->::vmsg::CSEquipInfo::MergeFrom(from.spareequip());
    }
  }
}

void CSPlayerEquipInfo::CopyFrom(const CSPlayerEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPlayerEquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < equiplst_size(); i++) {
    if (!this->equiplst(i).IsInitialized()) return false;
  }
  if (has_spareequip()) {
    if (!this->spareequip().IsInitialized()) return false;
  }
  return true;
}

void CSPlayerEquipInfo::Swap(CSPlayerEquipInfo* other) {
  if (other != this) {
    equiplst_.Swap(&other->equiplst_);
    std::swap(spareequip_, other->spareequip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPlayerEquipInfo::GetTypeName() const {
  return "vmsg.CSPlayerEquipInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipLvUpRsp::kBagInfoFieldNumber;
const int CSEquipLvUpRsp::kPlayerEquipInfoFieldNumber;
#endif  // !_MSC_VER

CSEquipLvUpRsp::CSEquipLvUpRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipLvUpRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerequipinfo_ = const_cast< ::vmsg::CSPlayerEquipInfo*>(
      ::vmsg::CSPlayerEquipInfo::internal_default_instance());
#else
  playerequipinfo_ = const_cast< ::vmsg::CSPlayerEquipInfo*>(&::vmsg::CSPlayerEquipInfo::default_instance());
#endif
}

CSEquipLvUpRsp::CSEquipLvUpRsp(const CSEquipLvUpRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipLvUpRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  playerequipinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipLvUpRsp::~CSEquipLvUpRsp() {
  SharedDtor();
}

void CSEquipLvUpRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
    delete playerequipinfo_;
  }
}

void CSEquipLvUpRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipLvUpRsp& CSEquipLvUpRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipLvUpRsp* CSEquipLvUpRsp::default_instance_ = NULL;

CSEquipLvUpRsp* CSEquipLvUpRsp::New() const {
  return new CSEquipLvUpRsp;
}

void CSEquipLvUpRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    if (has_playerequipinfo()) {
      if (playerequipinfo_ != NULL) playerequipinfo_->::vmsg::CSPlayerEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipLvUpRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerEquipInfo;
        break;
      }

      // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerequipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipLvUpRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
  if (has_playerequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playerequipinfo(), output);
  }

}

int CSEquipLvUpRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
    if (has_playerequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerequipinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipLvUpRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipLvUpRsp*>(&from));
}

void CSEquipLvUpRsp::MergeFrom(const CSEquipLvUpRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_playerequipinfo()) {
      mutable_playerequipinfo()->::vmsg::CSPlayerEquipInfo::MergeFrom(from.playerequipinfo());
    }
  }
}

void CSEquipLvUpRsp::CopyFrom(const CSEquipLvUpRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipLvUpRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  if (has_playerequipinfo()) {
    if (!this->playerequipinfo().IsInitialized()) return false;
  }
  return true;
}

void CSEquipLvUpRsp::Swap(CSEquipLvUpRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(playerequipinfo_, other->playerequipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipLvUpRsp::GetTypeName() const {
  return "vmsg.CSEquipLvUpRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipStarStepRqst::kBagIdxFieldNumber;
const int CSEquipStarStepRqst::kEquipGUIDFieldNumber;
const int CSEquipStarStepRqst::kNeedEquipGUIDsFieldNumber;
#endif  // !_MSC_VER

CSEquipStarStepRqst::CSEquipStarStepRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipStarStepRqst::InitAsDefaultInstance() {
}

CSEquipStarStepRqst::CSEquipStarStepRqst(const CSEquipStarStepRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipStarStepRqst::SharedCtor() {
  _cached_size_ = 0;
  bagidx_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipStarStepRqst::~CSEquipStarStepRqst() {
  SharedDtor();
}

void CSEquipStarStepRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipStarStepRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipStarStepRqst& CSEquipStarStepRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipStarStepRqst* CSEquipStarStepRqst::default_instance_ = NULL;

CSEquipStarStepRqst* CSEquipStarStepRqst::New() const {
  return new CSEquipStarStepRqst;
}

void CSEquipStarStepRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagidx_ = 0;
    equipguid_ = GOOGLE_ULONGLONG(0);
  }
  needequipguids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipStarStepRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BagIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagidx_)));
          set_has_bagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipGUID;
        break;
      }

      // required uint64 EquipGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_NeedEquipGUIDs;
        break;
      }

      // repeated uint64 NeedEquipGUIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedEquipGUIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_needequipguids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_needequipguids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_NeedEquipGUIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipStarStepRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BagIdx = 1;
  if (has_bagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bagidx(), output);
  }

  // required uint64 EquipGUID = 2;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equipguid(), output);
  }

  // repeated uint64 NeedEquipGUIDs = 3;
  for (int i = 0; i < this->needequipguids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->needequipguids(i), output);
  }

}

int CSEquipStarStepRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BagIdx = 1;
    if (has_bagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagidx());
    }

    // required uint64 EquipGUID = 2;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

  }
  // repeated uint64 NeedEquipGUIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->needequipguids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->needequipguids(i));
    }
    total_size += 1 * this->needequipguids_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipStarStepRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipStarStepRqst*>(&from));
}

void CSEquipStarStepRqst::MergeFrom(const CSEquipStarStepRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  needequipguids_.MergeFrom(from.needequipguids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagidx()) {
      set_bagidx(from.bagidx());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
  }
}

void CSEquipStarStepRqst::CopyFrom(const CSEquipStarStepRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipStarStepRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSEquipStarStepRqst::Swap(CSEquipStarStepRqst* other) {
  if (other != this) {
    std::swap(bagidx_, other->bagidx_);
    std::swap(equipguid_, other->equipguid_);
    needequipguids_.Swap(&other->needequipguids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipStarStepRqst::GetTypeName() const {
  return "vmsg.CSEquipStarStepRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipStarStepRsp::kBagInfoFieldNumber;
const int CSEquipStarStepRsp::kPlayerEquipInfoFieldNumber;
#endif  // !_MSC_VER

CSEquipStarStepRsp::CSEquipStarStepRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipStarStepRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerequipinfo_ = const_cast< ::vmsg::CSPlayerEquipInfo*>(
      ::vmsg::CSPlayerEquipInfo::internal_default_instance());
#else
  playerequipinfo_ = const_cast< ::vmsg::CSPlayerEquipInfo*>(&::vmsg::CSPlayerEquipInfo::default_instance());
#endif
}

CSEquipStarStepRsp::CSEquipStarStepRsp(const CSEquipStarStepRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipStarStepRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  playerequipinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipStarStepRsp::~CSEquipStarStepRsp() {
  SharedDtor();
}

void CSEquipStarStepRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
    delete playerequipinfo_;
  }
}

void CSEquipStarStepRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipStarStepRsp& CSEquipStarStepRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipStarStepRsp* CSEquipStarStepRsp::default_instance_ = NULL;

CSEquipStarStepRsp* CSEquipStarStepRsp::New() const {
  return new CSEquipStarStepRsp;
}

void CSEquipStarStepRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    if (has_playerequipinfo()) {
      if (playerequipinfo_ != NULL) playerequipinfo_->::vmsg::CSPlayerEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipStarStepRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerEquipInfo;
        break;
      }

      // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerequipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipStarStepRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
  if (has_playerequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playerequipinfo(), output);
  }

}

int CSEquipStarStepRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
    if (has_playerequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerequipinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipStarStepRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipStarStepRsp*>(&from));
}

void CSEquipStarStepRsp::MergeFrom(const CSEquipStarStepRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_playerequipinfo()) {
      mutable_playerequipinfo()->::vmsg::CSPlayerEquipInfo::MergeFrom(from.playerequipinfo());
    }
  }
}

void CSEquipStarStepRsp::CopyFrom(const CSEquipStarStepRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipStarStepRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  if (has_playerequipinfo()) {
    if (!this->playerequipinfo().IsInitialized()) return false;
  }
  return true;
}

void CSEquipStarStepRsp::Swap(CSEquipStarStepRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(playerequipinfo_, other->playerequipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipStarStepRsp::GetTypeName() const {
  return "vmsg.CSEquipStarStepRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRefitRqst::kBagIdxFieldNumber;
const int CSEquipRefitRqst::kEquipGUIDFieldNumber;
#endif  // !_MSC_VER

CSEquipRefitRqst::CSEquipRefitRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRefitRqst::InitAsDefaultInstance() {
}

CSEquipRefitRqst::CSEquipRefitRqst(const CSEquipRefitRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRefitRqst::SharedCtor() {
  _cached_size_ = 0;
  bagidx_ = 0;
  equipguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRefitRqst::~CSEquipRefitRqst() {
  SharedDtor();
}

void CSEquipRefitRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipRefitRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRefitRqst& CSEquipRefitRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRefitRqst* CSEquipRefitRqst::default_instance_ = NULL;

CSEquipRefitRqst* CSEquipRefitRqst::New() const {
  return new CSEquipRefitRqst;
}

void CSEquipRefitRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bagidx_ = 0;
    equipguid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRefitRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 BagIdx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagidx_)));
          set_has_bagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipGUID;
        break;
      }

      // required uint64 EquipGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRefitRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 BagIdx = 1;
  if (has_bagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bagidx(), output);
  }

  // required uint64 EquipGUID = 2;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equipguid(), output);
  }

}

int CSEquipRefitRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 BagIdx = 1;
    if (has_bagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagidx());
    }

    // required uint64 EquipGUID = 2;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRefitRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRefitRqst*>(&from));
}

void CSEquipRefitRqst::MergeFrom(const CSEquipRefitRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bagidx()) {
      set_bagidx(from.bagidx());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
  }
}

void CSEquipRefitRqst::CopyFrom(const CSEquipRefitRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRefitRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSEquipRefitRqst::Swap(CSEquipRefitRqst* other) {
  if (other != this) {
    std::swap(bagidx_, other->bagidx_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRefitRqst::GetTypeName() const {
  return "vmsg.CSEquipRefitRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRefitRsp::kBagInfoFieldNumber;
const int CSEquipRefitRsp::kPlayerEquipInfoFieldNumber;
#endif  // !_MSC_VER

CSEquipRefitRsp::CSEquipRefitRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRefitRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  playerequipinfo_ = const_cast< ::vmsg::CSPlayerEquipInfo*>(
      ::vmsg::CSPlayerEquipInfo::internal_default_instance());
#else
  playerequipinfo_ = const_cast< ::vmsg::CSPlayerEquipInfo*>(&::vmsg::CSPlayerEquipInfo::default_instance());
#endif
}

CSEquipRefitRsp::CSEquipRefitRsp(const CSEquipRefitRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRefitRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  playerequipinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRefitRsp::~CSEquipRefitRsp() {
  SharedDtor();
}

void CSEquipRefitRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
    delete playerequipinfo_;
  }
}

void CSEquipRefitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRefitRsp& CSEquipRefitRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRefitRsp* CSEquipRefitRsp::default_instance_ = NULL;

CSEquipRefitRsp* CSEquipRefitRsp::New() const {
  return new CSEquipRefitRsp;
}

void CSEquipRefitRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    if (has_playerequipinfo()) {
      if (playerequipinfo_ != NULL) playerequipinfo_->::vmsg::CSPlayerEquipInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRefitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PlayerEquipInfo;
        break;
      }

      // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerEquipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerequipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRefitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
  if (has_playerequipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->playerequipinfo(), output);
  }

}

int CSEquipRefitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required .vmsg.CSPlayerEquipInfo PlayerEquipInfo = 2;
    if (has_playerequipinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerequipinfo());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRefitRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRefitRsp*>(&from));
}

void CSEquipRefitRsp::MergeFrom(const CSEquipRefitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_playerequipinfo()) {
      mutable_playerequipinfo()->::vmsg::CSPlayerEquipInfo::MergeFrom(from.playerequipinfo());
    }
  }
}

void CSEquipRefitRsp::CopyFrom(const CSEquipRefitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRefitRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  if (has_playerequipinfo()) {
    if (!this->playerequipinfo().IsInitialized()) return false;
  }
  return true;
}

void CSEquipRefitRsp::Swap(CSEquipRefitRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(playerequipinfo_, other->playerequipinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRefitRsp::GetTypeName() const {
  return "vmsg.CSEquipRefitRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRequest::kEquipRefineRqstFieldNumber;
const int CSEquipRequest::kEquipTransRqstFieldNumber;
const int CSEquipRequest::kEquipLvUpRqstFieldNumber;
const int CSEquipRequest::kEquipStarStepRqstFieldNumber;
const int CSEquipRequest::kEquipRefitRqstFieldNumber;
#endif  // !_MSC_VER

CSEquipRequest::CSEquipRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprefine_rqst_ = const_cast< ::vmsg::CSEquipRefineRqst*>(
      ::vmsg::CSEquipRefineRqst::internal_default_instance());
#else
  equiprefine_rqst_ = const_cast< ::vmsg::CSEquipRefineRqst*>(&::vmsg::CSEquipRefineRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiptrans_rqst_ = const_cast< ::vmsg::CSEquipTransRqst*>(
      ::vmsg::CSEquipTransRqst::internal_default_instance());
#else
  equiptrans_rqst_ = const_cast< ::vmsg::CSEquipTransRqst*>(&::vmsg::CSEquipTransRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiplvup_rqst_ = const_cast< ::vmsg::CSEquipLvUpRqst*>(
      ::vmsg::CSEquipLvUpRqst::internal_default_instance());
#else
  equiplvup_rqst_ = const_cast< ::vmsg::CSEquipLvUpRqst*>(&::vmsg::CSEquipLvUpRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipstarstep_rqst_ = const_cast< ::vmsg::CSEquipStarStepRqst*>(
      ::vmsg::CSEquipStarStepRqst::internal_default_instance());
#else
  equipstarstep_rqst_ = const_cast< ::vmsg::CSEquipStarStepRqst*>(&::vmsg::CSEquipStarStepRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprefit_rqst_ = const_cast< ::vmsg::CSEquipRefitRqst*>(
      ::vmsg::CSEquipRefitRqst::internal_default_instance());
#else
  equiprefit_rqst_ = const_cast< ::vmsg::CSEquipRefitRqst*>(&::vmsg::CSEquipRefitRqst::default_instance());
#endif
}

CSEquipRequest::CSEquipRequest(const CSEquipRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRequest::SharedCtor() {
  _cached_size_ = 0;
  equiprefine_rqst_ = NULL;
  equiptrans_rqst_ = NULL;
  equiplvup_rqst_ = NULL;
  equipstarstep_rqst_ = NULL;
  equiprefit_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRequest::~CSEquipRequest() {
  SharedDtor();
}

void CSEquipRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equiprefine_rqst_;
    delete equiptrans_rqst_;
    delete equiplvup_rqst_;
    delete equipstarstep_rqst_;
    delete equiprefit_rqst_;
  }
}

void CSEquipRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRequest& CSEquipRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRequest* CSEquipRequest::default_instance_ = NULL;

CSEquipRequest* CSEquipRequest::New() const {
  return new CSEquipRequest;
}

void CSEquipRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equiprefine_rqst()) {
      if (equiprefine_rqst_ != NULL) equiprefine_rqst_->::vmsg::CSEquipRefineRqst::Clear();
    }
    if (has_equiptrans_rqst()) {
      if (equiptrans_rqst_ != NULL) equiptrans_rqst_->::vmsg::CSEquipTransRqst::Clear();
    }
    if (has_equiplvup_rqst()) {
      if (equiplvup_rqst_ != NULL) equiplvup_rqst_->::vmsg::CSEquipLvUpRqst::Clear();
    }
    if (has_equipstarstep_rqst()) {
      if (equipstarstep_rqst_ != NULL) equipstarstep_rqst_->::vmsg::CSEquipStarStepRqst::Clear();
    }
    if (has_equiprefit_rqst()) {
      if (equiprefit_rqst_ != NULL) equiprefit_rqst_->::vmsg::CSEquipRefitRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSEquipRefineRqst EquipRefine_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprefine_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EquipTrans_Rqst;
        break;
      }

      // optional .vmsg.CSEquipTransRqst EquipTrans_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipTrans_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiptrans_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EquipLvUp_Rqst;
        break;
      }

      // optional .vmsg.CSEquipLvUpRqst EquipLvUp_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipLvUp_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiplvup_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EquipStarStep_Rqst;
        break;
      }

      // optional .vmsg.CSEquipStarStepRqst EquipStarStep_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipStarStep_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipstarstep_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EquipRefit_Rqst;
        break;
      }

      // optional .vmsg.CSEquipRefitRqst EquipRefit_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipRefit_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprefit_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSEquipRefineRqst EquipRefine_Rqst = 1;
  if (has_equiprefine_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equiprefine_rqst(), output);
  }

  // optional .vmsg.CSEquipTransRqst EquipTrans_Rqst = 2;
  if (has_equiptrans_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equiptrans_rqst(), output);
  }

  // optional .vmsg.CSEquipLvUpRqst EquipLvUp_Rqst = 3;
  if (has_equiplvup_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equiplvup_rqst(), output);
  }

  // optional .vmsg.CSEquipStarStepRqst EquipStarStep_Rqst = 4;
  if (has_equipstarstep_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->equipstarstep_rqst(), output);
  }

  // optional .vmsg.CSEquipRefitRqst EquipRefit_Rqst = 5;
  if (has_equiprefit_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->equiprefit_rqst(), output);
  }

}

int CSEquipRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSEquipRefineRqst EquipRefine_Rqst = 1;
    if (has_equiprefine_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprefine_rqst());
    }

    // optional .vmsg.CSEquipTransRqst EquipTrans_Rqst = 2;
    if (has_equiptrans_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiptrans_rqst());
    }

    // optional .vmsg.CSEquipLvUpRqst EquipLvUp_Rqst = 3;
    if (has_equiplvup_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiplvup_rqst());
    }

    // optional .vmsg.CSEquipStarStepRqst EquipStarStep_Rqst = 4;
    if (has_equipstarstep_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipstarstep_rqst());
    }

    // optional .vmsg.CSEquipRefitRqst EquipRefit_Rqst = 5;
    if (has_equiprefit_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprefit_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRequest*>(&from));
}

void CSEquipRequest::MergeFrom(const CSEquipRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiprefine_rqst()) {
      mutable_equiprefine_rqst()->::vmsg::CSEquipRefineRqst::MergeFrom(from.equiprefine_rqst());
    }
    if (from.has_equiptrans_rqst()) {
      mutable_equiptrans_rqst()->::vmsg::CSEquipTransRqst::MergeFrom(from.equiptrans_rqst());
    }
    if (from.has_equiplvup_rqst()) {
      mutable_equiplvup_rqst()->::vmsg::CSEquipLvUpRqst::MergeFrom(from.equiplvup_rqst());
    }
    if (from.has_equipstarstep_rqst()) {
      mutable_equipstarstep_rqst()->::vmsg::CSEquipStarStepRqst::MergeFrom(from.equipstarstep_rqst());
    }
    if (from.has_equiprefit_rqst()) {
      mutable_equiprefit_rqst()->::vmsg::CSEquipRefitRqst::MergeFrom(from.equiprefit_rqst());
    }
  }
}

void CSEquipRequest::CopyFrom(const CSEquipRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRequest::IsInitialized() const {

  if (has_equiprefine_rqst()) {
    if (!this->equiprefine_rqst().IsInitialized()) return false;
  }
  if (has_equiptrans_rqst()) {
    if (!this->equiptrans_rqst().IsInitialized()) return false;
  }
  if (has_equiplvup_rqst()) {
    if (!this->equiplvup_rqst().IsInitialized()) return false;
  }
  if (has_equipstarstep_rqst()) {
    if (!this->equipstarstep_rqst().IsInitialized()) return false;
  }
  if (has_equiprefit_rqst()) {
    if (!this->equiprefit_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSEquipRequest::Swap(CSEquipRequest* other) {
  if (other != this) {
    std::swap(equiprefine_rqst_, other->equiprefine_rqst_);
    std::swap(equiptrans_rqst_, other->equiptrans_rqst_);
    std::swap(equiplvup_rqst_, other->equiplvup_rqst_);
    std::swap(equipstarstep_rqst_, other->equipstarstep_rqst_);
    std::swap(equiprefit_rqst_, other->equiprefit_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRequest::GetTypeName() const {
  return "vmsg.CSEquipRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSEquipRespond::kEquipRefineRspFieldNumber;
const int CSEquipRespond::kEquipTransRspFieldNumber;
const int CSEquipRespond::kEquipLvUpRspFieldNumber;
const int CSEquipRespond::kEquipStarStepRspFieldNumber;
const int CSEquipRespond::kEquipRefitRspFieldNumber;
#endif  // !_MSC_VER

CSEquipRespond::CSEquipRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprefine_rsp_ = const_cast< ::vmsg::CSEquipRefineRsp*>(
      ::vmsg::CSEquipRefineRsp::internal_default_instance());
#else
  equiprefine_rsp_ = const_cast< ::vmsg::CSEquipRefineRsp*>(&::vmsg::CSEquipRefineRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiptrans_rsp_ = const_cast< ::vmsg::CSEquipTransRsp*>(
      ::vmsg::CSEquipTransRsp::internal_default_instance());
#else
  equiptrans_rsp_ = const_cast< ::vmsg::CSEquipTransRsp*>(&::vmsg::CSEquipTransRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiplvup_rsp_ = const_cast< ::vmsg::CSEquipLvUpRsp*>(
      ::vmsg::CSEquipLvUpRsp::internal_default_instance());
#else
  equiplvup_rsp_ = const_cast< ::vmsg::CSEquipLvUpRsp*>(&::vmsg::CSEquipLvUpRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equipstarstep_rsp_ = const_cast< ::vmsg::CSEquipStarStepRsp*>(
      ::vmsg::CSEquipStarStepRsp::internal_default_instance());
#else
  equipstarstep_rsp_ = const_cast< ::vmsg::CSEquipStarStepRsp*>(&::vmsg::CSEquipStarStepRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  equiprefit_rsp_ = const_cast< ::vmsg::CSEquipRefitRsp*>(
      ::vmsg::CSEquipRefitRsp::internal_default_instance());
#else
  equiprefit_rsp_ = const_cast< ::vmsg::CSEquipRefitRsp*>(&::vmsg::CSEquipRefitRsp::default_instance());
#endif
}

CSEquipRespond::CSEquipRespond(const CSEquipRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipRespond::SharedCtor() {
  _cached_size_ = 0;
  equiprefine_rsp_ = NULL;
  equiptrans_rsp_ = NULL;
  equiplvup_rsp_ = NULL;
  equipstarstep_rsp_ = NULL;
  equiprefit_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipRespond::~CSEquipRespond() {
  SharedDtor();
}

void CSEquipRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete equiprefine_rsp_;
    delete equiptrans_rsp_;
    delete equiplvup_rsp_;
    delete equipstarstep_rsp_;
    delete equiprefit_rsp_;
  }
}

void CSEquipRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipRespond& CSEquipRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipOpMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipOpMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipRespond* CSEquipRespond::default_instance_ = NULL;

CSEquipRespond* CSEquipRespond::New() const {
  return new CSEquipRespond;
}

void CSEquipRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_equiprefine_rsp()) {
      if (equiprefine_rsp_ != NULL) equiprefine_rsp_->::vmsg::CSEquipRefineRsp::Clear();
    }
    if (has_equiptrans_rsp()) {
      if (equiptrans_rsp_ != NULL) equiptrans_rsp_->::vmsg::CSEquipTransRsp::Clear();
    }
    if (has_equiplvup_rsp()) {
      if (equiplvup_rsp_ != NULL) equiplvup_rsp_->::vmsg::CSEquipLvUpRsp::Clear();
    }
    if (has_equipstarstep_rsp()) {
      if (equipstarstep_rsp_ != NULL) equipstarstep_rsp_->::vmsg::CSEquipStarStepRsp::Clear();
    }
    if (has_equiprefit_rsp()) {
      if (equiprefit_rsp_ != NULL) equiprefit_rsp_->::vmsg::CSEquipRefitRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSEquipRefineRsp EquipRefine_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprefine_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EquipTrans_Rsp;
        break;
      }

      // optional .vmsg.CSEquipTransRsp EquipTrans_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipTrans_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiptrans_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EquipLvUp_Rsp;
        break;
      }

      // optional .vmsg.CSEquipLvUpRsp EquipLvUp_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipLvUp_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiplvup_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EquipStarStep_Rsp;
        break;
      }

      // optional .vmsg.CSEquipStarStepRsp EquipStarStep_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipStarStep_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipstarstep_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_EquipRefit_Rsp;
        break;
      }

      // optional .vmsg.CSEquipRefitRsp EquipRefit_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipRefit_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equiprefit_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSEquipRefineRsp EquipRefine_Rsp = 1;
  if (has_equiprefine_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equiprefine_rsp(), output);
  }

  // optional .vmsg.CSEquipTransRsp EquipTrans_Rsp = 2;
  if (has_equiptrans_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->equiptrans_rsp(), output);
  }

  // optional .vmsg.CSEquipLvUpRsp EquipLvUp_Rsp = 3;
  if (has_equiplvup_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->equiplvup_rsp(), output);
  }

  // optional .vmsg.CSEquipStarStepRsp EquipStarStep_Rsp = 4;
  if (has_equipstarstep_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->equipstarstep_rsp(), output);
  }

  // optional .vmsg.CSEquipRefitRsp EquipRefit_Rsp = 5;
  if (has_equiprefit_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->equiprefit_rsp(), output);
  }

}

int CSEquipRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSEquipRefineRsp EquipRefine_Rsp = 1;
    if (has_equiprefine_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprefine_rsp());
    }

    // optional .vmsg.CSEquipTransRsp EquipTrans_Rsp = 2;
    if (has_equiptrans_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiptrans_rsp());
    }

    // optional .vmsg.CSEquipLvUpRsp EquipLvUp_Rsp = 3;
    if (has_equiplvup_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiplvup_rsp());
    }

    // optional .vmsg.CSEquipStarStepRsp EquipStarStep_Rsp = 4;
    if (has_equipstarstep_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipstarstep_rsp());
    }

    // optional .vmsg.CSEquipRefitRsp EquipRefit_Rsp = 5;
    if (has_equiprefit_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equiprefit_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipRespond*>(&from));
}

void CSEquipRespond::MergeFrom(const CSEquipRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiprefine_rsp()) {
      mutable_equiprefine_rsp()->::vmsg::CSEquipRefineRsp::MergeFrom(from.equiprefine_rsp());
    }
    if (from.has_equiptrans_rsp()) {
      mutable_equiptrans_rsp()->::vmsg::CSEquipTransRsp::MergeFrom(from.equiptrans_rsp());
    }
    if (from.has_equiplvup_rsp()) {
      mutable_equiplvup_rsp()->::vmsg::CSEquipLvUpRsp::MergeFrom(from.equiplvup_rsp());
    }
    if (from.has_equipstarstep_rsp()) {
      mutable_equipstarstep_rsp()->::vmsg::CSEquipStarStepRsp::MergeFrom(from.equipstarstep_rsp());
    }
    if (from.has_equiprefit_rsp()) {
      mutable_equiprefit_rsp()->::vmsg::CSEquipRefitRsp::MergeFrom(from.equiprefit_rsp());
    }
  }
}

void CSEquipRespond::CopyFrom(const CSEquipRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipRespond::IsInitialized() const {

  if (has_equiprefine_rsp()) {
    if (!this->equiprefine_rsp().IsInitialized()) return false;
  }
  if (has_equiptrans_rsp()) {
    if (!this->equiptrans_rsp().IsInitialized()) return false;
  }
  if (has_equiplvup_rsp()) {
    if (!this->equiplvup_rsp().IsInitialized()) return false;
  }
  if (has_equipstarstep_rsp()) {
    if (!this->equipstarstep_rsp().IsInitialized()) return false;
  }
  if (has_equiprefit_rsp()) {
    if (!this->equiprefit_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSEquipRespond::Swap(CSEquipRespond* other) {
  if (other != this) {
    std::swap(equiprefine_rsp_, other->equiprefine_rsp_);
    std::swap(equiptrans_rsp_, other->equiptrans_rsp_);
    std::swap(equiplvup_rsp_, other->equiplvup_rsp_);
    std::swap(equipstarstep_rsp_, other->equipstarstep_rsp_);
    std::swap(equiprefit_rsp_, other->equiprefit_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipRespond::GetTypeName() const {
  return "vmsg.CSEquipRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
