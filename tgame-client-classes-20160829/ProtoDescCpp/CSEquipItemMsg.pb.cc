// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSEquipItemMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSEquipItemMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSEquipItemMsg_2eproto() {
  delete CSEquipInfo::default_instance_;
  delete CSItemInfo::default_instance_;
  delete CSAwardElement::default_instance_;
  delete CSWeapon::default_instance_;
  delete CSInbattleWeaponElmt::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSEquipItemMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSEquipItemMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  CSEquipInfo::default_instance_ = new CSEquipInfo();
  CSItemInfo::default_instance_ = new CSItemInfo();
  CSAwardElement::default_instance_ = new CSAwardElement();
  CSWeapon::default_instance_ = new CSWeapon();
  CSInbattleWeaponElmt::default_instance_ = new CSInbattleWeaponElmt();
  CSEquipInfo::default_instance_->InitAsDefaultInstance();
  CSItemInfo::default_instance_->InitAsDefaultInstance();
  CSAwardElement::default_instance_->InitAsDefaultInstance();
  CSWeapon::default_instance_->InitAsDefaultInstance();
  CSInbattleWeaponElmt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSEquipItemMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSEquipItemMsg_2eproto_once_);
void protobuf_AddDesc_CSEquipItemMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSEquipItemMsg_2eproto_once_,
                 &protobuf_AddDesc_CSEquipItemMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSEquipItemMsg_2eproto {
  StaticDescriptorInitializer_CSEquipItemMsg_2eproto() {
    protobuf_AddDesc_CSEquipItemMsg_2eproto();
  }
} static_descriptor_initializer_CSEquipItemMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSEquipInfo::kEquipIDFieldNumber;
const int CSEquipInfo::kEquipGUIDFieldNumber;
const int CSEquipInfo::kLevelFieldNumber;
const int CSEquipInfo::kQualityFieldNumber;
const int CSEquipInfo::kExpFieldNumber;
const int CSEquipInfo::kTotalExpFieldNumber;
#endif  // !_MSC_VER

CSEquipInfo::CSEquipInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSEquipInfo::InitAsDefaultInstance() {
}

CSEquipInfo::CSEquipInfo(const CSEquipInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  equipid_ = 0u;
  equipguid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  quality_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  totalexp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSEquipInfo::~CSEquipInfo() {
  SharedDtor();
}

void CSEquipInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSEquipInfo& CSEquipInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipItemMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipItemMsg_2eproto();
#endif
  return *default_instance_;
}

CSEquipInfo* CSEquipInfo::default_instance_ = NULL;

CSEquipInfo* CSEquipInfo::New() const {
  return new CSEquipInfo;
}

void CSEquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipid_ = 0u;
    equipguid_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    quality_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    totalexp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EquipID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipGUID;
        break;
      }

      // required uint64 EquipGUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipGUID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equipguid_)));
          set_has_equipguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // required uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Quality;
        break;
      }

      // required uint32 Quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // required uint64 Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TotalExp;
        break;
      }

      // required uint64 TotalExp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EquipID = 1;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipid(), output);
  }

  // required uint64 EquipGUID = 2;
  if (has_equipguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->equipguid(), output);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint32 Quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }

  // required uint64 Exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->exp(), output);
  }

  // required uint64 TotalExp = 6;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->totalexp(), output);
  }

}

int CSEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EquipID = 1;
    if (has_equipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // required uint64 EquipGUID = 2;
    if (has_equipguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equipguid());
    }

    // required uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 Quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint64 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint64 TotalExp = 6;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalexp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSEquipInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSEquipInfo*>(&from));
}

void CSEquipInfo::MergeFrom(const CSEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_equipguid()) {
      set_equipguid(from.equipguid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
  }
}

void CSEquipInfo::CopyFrom(const CSEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSEquipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CSEquipInfo::Swap(CSEquipInfo* other) {
  if (other != this) {
    std::swap(equipid_, other->equipid_);
    std::swap(equipguid_, other->equipguid_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(exp_, other->exp_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSEquipInfo::GetTypeName() const {
  return "vmsg.CSEquipInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSItemInfo::kItemCfgIDFieldNumber;
const int CSItemInfo::kItemCntFieldNumber;
#endif  // !_MSC_VER

CSItemInfo::CSItemInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSItemInfo::InitAsDefaultInstance() {
}

CSItemInfo::CSItemInfo(const CSItemInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemcfgid_ = 0u;
  itemcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSItemInfo::~CSItemInfo() {
  SharedDtor();
}

void CSItemInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSItemInfo& CSItemInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipItemMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipItemMsg_2eproto();
#endif
  return *default_instance_;
}

CSItemInfo* CSItemInfo::default_instance_ = NULL;

CSItemInfo* CSItemInfo::New() const {
  return new CSItemInfo;
}

void CSItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemcfgid_ = 0u;
    itemcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemCfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcfgid_)));
          set_has_itemcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemCnt;
        break;
      }

      // required uint32 ItemCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcnt_)));
          set_has_itemcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemCfgID = 1;
  if (has_itemcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemcfgid(), output);
  }

  // required uint32 ItemCnt = 2;
  if (has_itemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcnt(), output);
  }

}

int CSItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemCfgID = 1;
    if (has_itemcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcfgid());
    }

    // required uint32 ItemCnt = 2;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSItemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSItemInfo*>(&from));
}

void CSItemInfo::MergeFrom(const CSItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcfgid()) {
      set_itemcfgid(from.itemcfgid());
    }
    if (from.has_itemcnt()) {
      set_itemcnt(from.itemcnt());
    }
  }
}

void CSItemInfo::CopyFrom(const CSItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSItemInfo::Swap(CSItemInfo* other) {
  if (other != this) {
    std::swap(itemcfgid_, other->itemcfgid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSItemInfo::GetTypeName() const {
  return "vmsg.CSItemInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAwardElement::kElementTypeFieldNumber;
const int CSAwardElement::kElementIDFieldNumber;
const int CSAwardElement::kElementCntFieldNumber;
#endif  // !_MSC_VER

CSAwardElement::CSAwardElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAwardElement::InitAsDefaultInstance() {
}

CSAwardElement::CSAwardElement(const CSAwardElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAwardElement::SharedCtor() {
  _cached_size_ = 0;
  elementtype_ = 0u;
  elementid_ = 0u;
  elementcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAwardElement::~CSAwardElement() {
  SharedDtor();
}

void CSAwardElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAwardElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAwardElement& CSAwardElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipItemMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipItemMsg_2eproto();
#endif
  return *default_instance_;
}

CSAwardElement* CSAwardElement::default_instance_ = NULL;

CSAwardElement* CSAwardElement::New() const {
  return new CSAwardElement;
}

void CSAwardElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementtype_ = 0u;
    elementid_ = 0u;
    elementcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAwardElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementID;
        break;
      }

      // required uint32 ElementID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementCnt;
        break;
      }

      // required uint32 ElementCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcnt_)));
          set_has_elementcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAwardElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementtype(), output);
  }

  // required uint32 ElementID = 2;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementid(), output);
  }

  // required uint32 ElementCnt = 3;
  if (has_elementcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementcnt(), output);
  }

}

int CSAwardElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 ElementID = 2;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementCnt = 3;
    if (has_elementcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAwardElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAwardElement*>(&from));
}

void CSAwardElement::MergeFrom(const CSAwardElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementcnt()) {
      set_elementcnt(from.elementcnt());
    }
  }
}

void CSAwardElement::CopyFrom(const CSAwardElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAwardElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSAwardElement::Swap(CSAwardElement* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(elementid_, other->elementid_);
    std::swap(elementcnt_, other->elementcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAwardElement::GetTypeName() const {
  return "vmsg.CSAwardElement";
}


// ===================================================================

#ifndef _MSC_VER
const int CSWeapon::kWeaponGUIDFieldNumber;
const int CSWeapon::kCfgIDFieldNumber;
const int CSWeapon::kLevelFieldNumber;
const int CSWeapon::kExpFieldNumber;
const int CSWeapon::kTotalExpFieldNumber;
const int CSWeapon::kQualityFieldNumber;
const int CSWeapon::kStateFieldNumber;
#endif  // !_MSC_VER

CSWeapon::CSWeapon()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSWeapon::InitAsDefaultInstance() {
}

CSWeapon::CSWeapon(const CSWeapon& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSWeapon::SharedCtor() {
  _cached_size_ = 0;
  weaponguid_ = GOOGLE_ULONGLONG(0);
  cfgid_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  totalexp_ = GOOGLE_ULONGLONG(0);
  quality_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSWeapon::~CSWeapon() {
  SharedDtor();
}

void CSWeapon::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSWeapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSWeapon& CSWeapon::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipItemMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipItemMsg_2eproto();
#endif
  return *default_instance_;
}

CSWeapon* CSWeapon::default_instance_ = NULL;

CSWeapon* CSWeapon::New() const {
  return new CSWeapon;
}

void CSWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weaponguid_ = GOOGLE_ULONGLONG(0);
    cfgid_ = 0u;
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
    totalexp_ = GOOGLE_ULONGLONG(0);
    quality_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 WeaponGUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weaponguid_)));
          set_has_weaponguid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CfgID;
        break;
      }

      // required uint32 CfgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }

      // required uint32 Level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }

      // required uint64 Exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalExp;
        break;
      }

      // required uint64 TotalExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Quality;
        break;
      }

      // required uint32 Quality = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_State;
        break;
      }

      // required uint32 State = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 WeaponGUID = 1;
  if (has_weaponguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->weaponguid(), output);
  }

  // required uint32 CfgID = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  // required uint32 Level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required uint64 Exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->exp(), output);
  }

  // required uint64 TotalExp = 5;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->totalexp(), output);
  }

  // required uint32 Quality = 6;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->quality(), output);
  }

  // required uint32 State = 7;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state(), output);
  }

}

int CSWeapon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 WeaponGUID = 1;
    if (has_weaponguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weaponguid());
    }

    // required uint32 CfgID = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 Exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

    // required uint64 TotalExp = 5;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalexp());
    }

    // required uint32 Quality = 6;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // required uint32 State = 7;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSWeapon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSWeapon*>(&from));
}

void CSWeapon::MergeFrom(const CSWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponguid()) {
      set_weaponguid(from.weaponguid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void CSWeapon::CopyFrom(const CSWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSWeapon::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void CSWeapon::Swap(CSWeapon* other) {
  if (other != this) {
    std::swap(weaponguid_, other->weaponguid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(quality_, other->quality_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSWeapon::GetTypeName() const {
  return "vmsg.CSWeapon";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInbattleWeaponElmt::kWeaponFieldNumber;
const int CSInbattleWeaponElmt::kBagIdxFieldNumber;
const int CSInbattleWeaponElmt::kArrayIdxFieldNumber;
const int CSInbattleWeaponElmt::kStateFieldNumber;
#endif  // !_MSC_VER

CSInbattleWeaponElmt::CSInbattleWeaponElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInbattleWeaponElmt::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  weapon_ = const_cast< ::vmsg::CSWeapon*>(
      ::vmsg::CSWeapon::internal_default_instance());
#else
  weapon_ = const_cast< ::vmsg::CSWeapon*>(&::vmsg::CSWeapon::default_instance());
#endif
}

CSInbattleWeaponElmt::CSInbattleWeaponElmt(const CSInbattleWeaponElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInbattleWeaponElmt::SharedCtor() {
  _cached_size_ = 0;
  weapon_ = NULL;
  bagidx_ = 0;
  arrayidx_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInbattleWeaponElmt::~CSInbattleWeaponElmt() {
  SharedDtor();
}

void CSInbattleWeaponElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete weapon_;
  }
}

void CSInbattleWeaponElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInbattleWeaponElmt& CSInbattleWeaponElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSEquipItemMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSEquipItemMsg_2eproto();
#endif
  return *default_instance_;
}

CSInbattleWeaponElmt* CSInbattleWeaponElmt::default_instance_ = NULL;

CSInbattleWeaponElmt* CSInbattleWeaponElmt::New() const {
  return new CSInbattleWeaponElmt;
}

void CSInbattleWeaponElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_weapon()) {
      if (weapon_ != NULL) weapon_->::vmsg::CSWeapon::Clear();
    }
    bagidx_ = 0;
    arrayidx_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInbattleWeaponElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSWeapon Weapon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BagIdx;
        break;
      }

      // required int32 BagIdx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BagIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bagidx_)));
          set_has_bagidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ArrayIdx;
        break;
      }

      // required int32 ArrayIdx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArrayIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arrayidx_)));
          set_has_arrayidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_State;
        break;
      }

      // required int32 State = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInbattleWeaponElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSWeapon Weapon = 1;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->weapon(), output);
  }

  // required int32 BagIdx = 2;
  if (has_bagidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bagidx(), output);
  }

  // required int32 ArrayIdx = 3;
  if (has_arrayidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->arrayidx(), output);
  }

  // required int32 State = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state(), output);
  }

}

int CSInbattleWeaponElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSWeapon Weapon = 1;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon());
    }

    // required int32 BagIdx = 2;
    if (has_bagidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bagidx());
    }

    // required int32 ArrayIdx = 3;
    if (has_arrayidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->arrayidx());
    }

    // required int32 State = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInbattleWeaponElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInbattleWeaponElmt*>(&from));
}

void CSInbattleWeaponElmt::MergeFrom(const CSInbattleWeaponElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weapon()) {
      mutable_weapon()->::vmsg::CSWeapon::MergeFrom(from.weapon());
    }
    if (from.has_bagidx()) {
      set_bagidx(from.bagidx());
    }
    if (from.has_arrayidx()) {
      set_arrayidx(from.arrayidx());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
}

void CSInbattleWeaponElmt::CopyFrom(const CSInbattleWeaponElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInbattleWeaponElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_weapon()) {
    if (!this->weapon().IsInitialized()) return false;
  }
  return true;
}

void CSInbattleWeaponElmt::Swap(CSInbattleWeaponElmt* other) {
  if (other != this) {
    std::swap(weapon_, other->weapon_);
    std::swap(bagidx_, other->bagidx_);
    std::swap(arrayidx_, other->arrayidx_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInbattleWeaponElmt::GetTypeName() const {
  return "vmsg.CSInbattleWeaponElmt";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
