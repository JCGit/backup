// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSInfiniteMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSInfiniteMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSInfiniteMsg_2eproto() {
  delete CSInfiniteEndRqst::default_instance_;
  delete CSInfiniteBuyGenRqst::default_instance_;
  delete CSGen::default_instance_;
  delete CSInfiniteGenInfo::default_instance_;
  delete CSInfiniteEndRsp::default_instance_;
  delete CSNothingLandStartRqst::default_instance_;
  delete CSNothingLandEndRqst::default_instance_;
  delete CSNothingLandEndRsp::default_instance_;
  delete CSNothingLandHistoryRsp::default_instance_;
  delete CSInfiniteRequest::default_instance_;
  delete CSInfiniteRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSInfiniteMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSInfiniteMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  CSInfiniteEndRqst::default_instance_ = new CSInfiniteEndRqst();
  CSInfiniteBuyGenRqst::default_instance_ = new CSInfiniteBuyGenRqst();
  CSGen::default_instance_ = new CSGen();
  CSInfiniteGenInfo::default_instance_ = new CSInfiniteGenInfo();
  CSInfiniteEndRsp::default_instance_ = new CSInfiniteEndRsp();
  CSNothingLandStartRqst::default_instance_ = new CSNothingLandStartRqst();
  CSNothingLandEndRqst::default_instance_ = new CSNothingLandEndRqst();
  CSNothingLandEndRsp::default_instance_ = new CSNothingLandEndRsp();
  CSNothingLandHistoryRsp::default_instance_ = new CSNothingLandHistoryRsp();
  CSInfiniteRequest::default_instance_ = new CSInfiniteRequest();
  CSInfiniteRespond::default_instance_ = new CSInfiniteRespond();
  CSInfiniteEndRqst::default_instance_->InitAsDefaultInstance();
  CSInfiniteBuyGenRqst::default_instance_->InitAsDefaultInstance();
  CSGen::default_instance_->InitAsDefaultInstance();
  CSInfiniteGenInfo::default_instance_->InitAsDefaultInstance();
  CSInfiniteEndRsp::default_instance_->InitAsDefaultInstance();
  CSNothingLandStartRqst::default_instance_->InitAsDefaultInstance();
  CSNothingLandEndRqst::default_instance_->InitAsDefaultInstance();
  CSNothingLandEndRsp::default_instance_->InitAsDefaultInstance();
  CSNothingLandHistoryRsp::default_instance_->InitAsDefaultInstance();
  CSInfiniteRequest::default_instance_->InitAsDefaultInstance();
  CSInfiniteRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSInfiniteMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSInfiniteMsg_2eproto_once_);
void protobuf_AddDesc_CSInfiniteMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSInfiniteMsg_2eproto_once_,
                 &protobuf_AddDesc_CSInfiniteMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSInfiniteMsg_2eproto {
  StaticDescriptorInitializer_CSInfiniteMsg_2eproto() {
    protobuf_AddDesc_CSInfiniteMsg_2eproto();
  }
} static_descriptor_initializer_CSInfiniteMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSInfiniteEndRqst::kScoreFieldNumber;
const int CSInfiniteEndRqst::kPackageCntFieldNumber;
const int CSInfiniteEndRqst::kWaveCntFieldNumber;
const int CSInfiniteEndRqst::kMonsterCntFieldNumber;
const int CSInfiniteEndRqst::kCoinFieldNumber;
const int CSInfiniteEndRqst::kEvolutionCntFieldNumber;
#endif  // !_MSC_VER

CSInfiniteEndRqst::CSInfiniteEndRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInfiniteEndRqst::InitAsDefaultInstance() {
}

CSInfiniteEndRqst::CSInfiniteEndRqst(const CSInfiniteEndRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInfiniteEndRqst::SharedCtor() {
  _cached_size_ = 0;
  score_ = GOOGLE_ULONGLONG(0);
  packagecnt_ = 0u;
  wavecnt_ = 0u;
  coin_ = 0u;
  evolutioncnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInfiniteEndRqst::~CSInfiniteEndRqst() {
  SharedDtor();
}

void CSInfiniteEndRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInfiniteEndRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInfiniteEndRqst& CSInfiniteEndRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSInfiniteEndRqst* CSInfiniteEndRqst::default_instance_ = NULL;

CSInfiniteEndRqst* CSInfiniteEndRqst::New() const {
  return new CSInfiniteEndRqst;
}

void CSInfiniteEndRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = GOOGLE_ULONGLONG(0);
    packagecnt_ = 0u;
    wavecnt_ = 0u;
    coin_ = 0u;
    evolutioncnt_ = 0u;
  }
  monstercnt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInfiniteEndRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PackageCnt;
        break;
      }

      // required uint32 PackageCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PackageCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packagecnt_)));
          set_has_packagecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WaveCnt;
        break;
      }

      // required uint32 WaveCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WaveCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wavecnt_)));
          set_has_wavecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MonsterCnt;
        break;
      }

      // repeated uint32 MonsterCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_monstercnt())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_monstercnt())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MonsterCnt;
        if (input->ExpectTag(40)) goto parse_Coin;
        break;
      }

      // required uint32 Coin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_EvolutionCnt;
        break;
      }

      // required uint32 EvolutionCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutioncnt_)));
          set_has_evolutioncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInfiniteEndRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->score(), output);
  }

  // required uint32 PackageCnt = 2;
  if (has_packagecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->packagecnt(), output);
  }

  // required uint32 WaveCnt = 3;
  if (has_wavecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->wavecnt(), output);
  }

  // repeated uint32 MonsterCnt = 4;
  for (int i = 0; i < this->monstercnt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->monstercnt(i), output);
  }

  // required uint32 Coin = 5;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->coin(), output);
  }

  // required uint32 EvolutionCnt = 6;
  if (has_evolutioncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->evolutioncnt(), output);
  }

}

int CSInfiniteEndRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->score());
    }

    // required uint32 PackageCnt = 2;
    if (has_packagecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packagecnt());
    }

    // required uint32 WaveCnt = 3;
    if (has_wavecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wavecnt());
    }

    // required uint32 Coin = 5;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 EvolutionCnt = 6;
    if (has_evolutioncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutioncnt());
    }

  }
  // repeated uint32 MonsterCnt = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->monstercnt_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->monstercnt(i));
    }
    total_size += 1 * this->monstercnt_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInfiniteEndRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInfiniteEndRqst*>(&from));
}

void CSInfiniteEndRqst::MergeFrom(const CSInfiniteEndRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstercnt_.MergeFrom(from.monstercnt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_packagecnt()) {
      set_packagecnt(from.packagecnt());
    }
    if (from.has_wavecnt()) {
      set_wavecnt(from.wavecnt());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_evolutioncnt()) {
      set_evolutioncnt(from.evolutioncnt());
    }
  }
}

void CSInfiniteEndRqst::CopyFrom(const CSInfiniteEndRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInfiniteEndRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;

  return true;
}

void CSInfiniteEndRqst::Swap(CSInfiniteEndRqst* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(packagecnt_, other->packagecnt_);
    std::swap(wavecnt_, other->wavecnt_);
    monstercnt_.Swap(&other->monstercnt_);
    std::swap(coin_, other->coin_);
    std::swap(evolutioncnt_, other->evolutioncnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInfiniteEndRqst::GetTypeName() const {
  return "vmsg.CSInfiniteEndRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInfiniteBuyGenRqst::kIdxFieldNumber;
#endif  // !_MSC_VER

CSInfiniteBuyGenRqst::CSInfiniteBuyGenRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInfiniteBuyGenRqst::InitAsDefaultInstance() {
}

CSInfiniteBuyGenRqst::CSInfiniteBuyGenRqst(const CSInfiniteBuyGenRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInfiniteBuyGenRqst::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInfiniteBuyGenRqst::~CSInfiniteBuyGenRqst() {
  SharedDtor();
}

void CSInfiniteBuyGenRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInfiniteBuyGenRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInfiniteBuyGenRqst& CSInfiniteBuyGenRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSInfiniteBuyGenRqst* CSInfiniteBuyGenRqst::default_instance_ = NULL;

CSInfiniteBuyGenRqst* CSInfiniteBuyGenRqst::New() const {
  return new CSInfiniteBuyGenRqst;
}

void CSInfiniteBuyGenRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInfiniteBuyGenRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInfiniteBuyGenRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

}

int CSInfiniteBuyGenRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInfiniteBuyGenRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInfiniteBuyGenRqst*>(&from));
}

void CSInfiniteBuyGenRqst::MergeFrom(const CSInfiniteBuyGenRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
}

void CSInfiniteBuyGenRqst::CopyFrom(const CSInfiniteBuyGenRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInfiniteBuyGenRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSInfiniteBuyGenRqst::Swap(CSInfiniteBuyGenRqst* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInfiniteBuyGenRqst::GetTypeName() const {
  return "vmsg.CSInfiniteBuyGenRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGen::kTypeFieldNumber;
const int CSGen::kParam1FieldNumber;
const int CSGen::kParam2FieldNumber;
const int CSGen::kCntFieldNumber;
const int CSGen::kCostCoinFieldNumber;
#endif  // !_MSC_VER

CSGen::CSGen()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGen::InitAsDefaultInstance() {
}

CSGen::CSGen(const CSGen& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGen::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  param1_ = 0u;
  param2_ = 0u;
  cnt_ = 0u;
  costcoin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGen::~CSGen() {
  SharedDtor();
}

void CSGen::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGen& CSGen::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSGen* CSGen::default_instance_ = NULL;

CSGen* CSGen::New() const {
  return new CSGen;
}

void CSGen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    param1_ = 0u;
    param2_ = 0u;
    cnt_ = 0u;
    costcoin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Param1;
        break;
      }

      // required uint32 Param1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Param2;
        break;
      }

      // required uint32 Param2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Cnt;
        break;
      }

      // required uint32 Cnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CostCoin;
        break;
      }

      // required uint32 CostCoin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcoin_)));
          set_has_costcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Param1 = 3;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->param1(), output);
  }

  // required uint32 Param2 = 4;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->param2(), output);
  }

  // required uint32 Cnt = 5;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cnt(), output);
  }

  // required uint32 CostCoin = 6;
  if (has_costcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->costcoin(), output);
  }

}

int CSGen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Param1 = 3;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param1());
    }

    // required uint32 Param2 = 4;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->param2());
    }

    // required uint32 Cnt = 5;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

    // required uint32 CostCoin = 6;
    if (has_costcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcoin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGen*>(&from));
}

void CSGen::MergeFrom(const CSGen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
    if (from.has_costcoin()) {
      set_costcoin(from.costcoin());
    }
  }
}

void CSGen::CopyFrom(const CSGen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGen::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSGen::Swap(CSGen* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(cnt_, other->cnt_);
    std::swap(costcoin_, other->costcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGen::GetTypeName() const {
  return "vmsg.CSGen";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInfiniteGenInfo::kGenlistFieldNumber;
#endif  // !_MSC_VER

CSInfiniteGenInfo::CSInfiniteGenInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInfiniteGenInfo::InitAsDefaultInstance() {
}

CSInfiniteGenInfo::CSInfiniteGenInfo(const CSInfiniteGenInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInfiniteGenInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInfiniteGenInfo::~CSInfiniteGenInfo() {
  SharedDtor();
}

void CSInfiniteGenInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInfiniteGenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInfiniteGenInfo& CSInfiniteGenInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSInfiniteGenInfo* CSInfiniteGenInfo::default_instance_ = NULL;

CSInfiniteGenInfo* CSInfiniteGenInfo::New() const {
  return new CSInfiniteGenInfo;
}

void CSInfiniteGenInfo::Clear() {
  genlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInfiniteGenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSGen Genlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Genlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_genlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Genlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInfiniteGenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSGen Genlist = 1;
  for (int i = 0; i < this->genlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->genlist(i), output);
  }

}

int CSInfiniteGenInfo::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSGen Genlist = 1;
  total_size += 1 * this->genlist_size();
  for (int i = 0; i < this->genlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInfiniteGenInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInfiniteGenInfo*>(&from));
}

void CSInfiniteGenInfo::MergeFrom(const CSInfiniteGenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  genlist_.MergeFrom(from.genlist_);
}

void CSInfiniteGenInfo::CopyFrom(const CSInfiniteGenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInfiniteGenInfo::IsInitialized() const {

  for (int i = 0; i < genlist_size(); i++) {
    if (!this->genlist(i).IsInitialized()) return false;
  }
  return true;
}

void CSInfiniteGenInfo::Swap(CSInfiniteGenInfo* other) {
  if (other != this) {
    genlist_.Swap(&other->genlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInfiniteGenInfo::GetTypeName() const {
  return "vmsg.CSInfiniteGenInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInfiniteEndRsp::kMaxScoreFieldNumber;
const int CSInfiniteEndRsp::kAwardListFieldNumber;
#endif  // !_MSC_VER

CSInfiniteEndRsp::CSInfiniteEndRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInfiniteEndRsp::InitAsDefaultInstance() {
}

CSInfiniteEndRsp::CSInfiniteEndRsp(const CSInfiniteEndRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInfiniteEndRsp::SharedCtor() {
  _cached_size_ = 0;
  maxscore_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInfiniteEndRsp::~CSInfiniteEndRsp() {
  SharedDtor();
}

void CSInfiniteEndRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSInfiniteEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInfiniteEndRsp& CSInfiniteEndRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSInfiniteEndRsp* CSInfiniteEndRsp::default_instance_ = NULL;

CSInfiniteEndRsp* CSInfiniteEndRsp::New() const {
  return new CSInfiniteEndRsp;
}

void CSInfiniteEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxscore_ = GOOGLE_ULONGLONG(0);
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInfiniteEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MaxScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardList;
        break;
      }

      // repeated .vmsg.CSAwardElement AwardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInfiniteEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MaxScore = 1;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->maxscore(), output);
  }

  // repeated .vmsg.CSAwardElement AwardList = 2;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardlist(i), output);
  }

}

int CSInfiniteEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MaxScore = 1;
    if (has_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxscore());
    }

  }
  // repeated .vmsg.CSAwardElement AwardList = 2;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInfiniteEndRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInfiniteEndRsp*>(&from));
}

void CSInfiniteEndRsp::MergeFrom(const CSInfiniteEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
  }
}

void CSInfiniteEndRsp::CopyFrom(const CSInfiniteEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInfiniteEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awardlist_size(); i++) {
    if (!this->awardlist(i).IsInitialized()) return false;
  }
  return true;
}

void CSInfiniteEndRsp::Swap(CSInfiniteEndRsp* other) {
  if (other != this) {
    std::swap(maxscore_, other->maxscore_);
    awardlist_.Swap(&other->awardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInfiniteEndRsp::GetTypeName() const {
  return "vmsg.CSInfiniteEndRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSNothingLandStartRqst::kIsContinueFieldNumber;
#endif  // !_MSC_VER

CSNothingLandStartRqst::CSNothingLandStartRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSNothingLandStartRqst::InitAsDefaultInstance() {
}

CSNothingLandStartRqst::CSNothingLandStartRqst(const CSNothingLandStartRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSNothingLandStartRqst::SharedCtor() {
  _cached_size_ = 0;
  iscontinue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNothingLandStartRqst::~CSNothingLandStartRqst() {
  SharedDtor();
}

void CSNothingLandStartRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSNothingLandStartRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSNothingLandStartRqst& CSNothingLandStartRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSNothingLandStartRqst* CSNothingLandStartRqst::default_instance_ = NULL;

CSNothingLandStartRqst* CSNothingLandStartRqst::New() const {
  return new CSNothingLandStartRqst;
}

void CSNothingLandStartRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iscontinue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSNothingLandStartRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IsContinue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iscontinue_)));
          set_has_iscontinue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNothingLandStartRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IsContinue = 1;
  if (has_iscontinue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iscontinue(), output);
  }

}

int CSNothingLandStartRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IsContinue = 1;
    if (has_iscontinue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iscontinue());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNothingLandStartRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSNothingLandStartRqst*>(&from));
}

void CSNothingLandStartRqst::MergeFrom(const CSNothingLandStartRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscontinue()) {
      set_iscontinue(from.iscontinue());
    }
  }
}

void CSNothingLandStartRqst::CopyFrom(const CSNothingLandStartRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNothingLandStartRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSNothingLandStartRqst::Swap(CSNothingLandStartRqst* other) {
  if (other != this) {
    std::swap(iscontinue_, other->iscontinue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSNothingLandStartRqst::GetTypeName() const {
  return "vmsg.CSNothingLandStartRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSNothingLandEndRqst::kCoinFieldNumber;
const int CSNothingLandEndRqst::kAwardFloorFieldNumber;
const int CSNothingLandEndRqst::kFloorFieldNumber;
const int CSNothingLandEndRqst::kScoreFieldNumber;
const int CSNothingLandEndRqst::kEvolutionCntFieldNumber;
const int CSNothingLandEndRqst::kFloorScoreFieldNumber;
#endif  // !_MSC_VER

CSNothingLandEndRqst::CSNothingLandEndRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSNothingLandEndRqst::InitAsDefaultInstance() {
}

CSNothingLandEndRqst::CSNothingLandEndRqst(const CSNothingLandEndRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSNothingLandEndRqst::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  floor_ = 0u;
  score_ = 0u;
  evolutioncnt_ = 0u;
  floorscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNothingLandEndRqst::~CSNothingLandEndRqst() {
  SharedDtor();
}

void CSNothingLandEndRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSNothingLandEndRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSNothingLandEndRqst& CSNothingLandEndRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSNothingLandEndRqst* CSNothingLandEndRqst::default_instance_ = NULL;

CSNothingLandEndRqst* CSNothingLandEndRqst::New() const {
  return new CSNothingLandEndRqst;
}

void CSNothingLandEndRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    floor_ = 0u;
    score_ = 0u;
    evolutioncnt_ = 0u;
    floorscore_ = 0u;
  }
  awardfloor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSNothingLandEndRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardFloor;
        break;
      }

      // repeated uint32 AwardFloor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_awardfloor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awardfloor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardFloor;
        if (input->ExpectTag(24)) goto parse_Floor;
        break;
      }

      // required uint32 Floor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // required uint32 Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EvolutionCnt;
        break;
      }

      // required uint32 EvolutionCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutioncnt_)));
          set_has_evolutioncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FloorScore;
        break;
      }

      // required uint32 FloorScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FloorScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floorscore_)));
          set_has_floorscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNothingLandEndRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // repeated uint32 AwardFloor = 2;
  for (int i = 0; i < this->awardfloor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->awardfloor(i), output);
  }

  // required uint32 Floor = 3;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->floor(), output);
  }

  // required uint32 Score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // required uint32 EvolutionCnt = 5;
  if (has_evolutioncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evolutioncnt(), output);
  }

  // required uint32 FloorScore = 6;
  if (has_floorscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->floorscore(), output);
  }

}

int CSNothingLandEndRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Floor = 3;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor());
    }

    // required uint32 Score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 EvolutionCnt = 5;
    if (has_evolutioncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutioncnt());
    }

    // required uint32 FloorScore = 6;
    if (has_floorscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floorscore());
    }

  }
  // repeated uint32 AwardFloor = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardfloor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awardfloor(i));
    }
    total_size += 1 * this->awardfloor_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNothingLandEndRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSNothingLandEndRqst*>(&from));
}

void CSNothingLandEndRqst::MergeFrom(const CSNothingLandEndRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardfloor_.MergeFrom(from.awardfloor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_evolutioncnt()) {
      set_evolutioncnt(from.evolutioncnt());
    }
    if (from.has_floorscore()) {
      set_floorscore(from.floorscore());
    }
  }
}

void CSNothingLandEndRqst::CopyFrom(const CSNothingLandEndRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNothingLandEndRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003d) != 0x0000003d) return false;

  return true;
}

void CSNothingLandEndRqst::Swap(CSNothingLandEndRqst* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    awardfloor_.Swap(&other->awardfloor_);
    std::swap(floor_, other->floor_);
    std::swap(score_, other->score_);
    std::swap(evolutioncnt_, other->evolutioncnt_);
    std::swap(floorscore_, other->floorscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSNothingLandEndRqst::GetTypeName() const {
  return "vmsg.CSNothingLandEndRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSNothingLandEndRsp::kAwardListFieldNumber;
const int CSNothingLandEndRsp::kMaxFloorFieldNumber;
const int CSNothingLandEndRsp::kMaxScoreFieldNumber;
const int CSNothingLandEndRsp::kMaxFloorScoreFieldNumber;
#endif  // !_MSC_VER

CSNothingLandEndRsp::CSNothingLandEndRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSNothingLandEndRsp::InitAsDefaultInstance() {
}

CSNothingLandEndRsp::CSNothingLandEndRsp(const CSNothingLandEndRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSNothingLandEndRsp::SharedCtor() {
  _cached_size_ = 0;
  maxfloor_ = 0u;
  maxscore_ = 0u;
  maxfloorscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNothingLandEndRsp::~CSNothingLandEndRsp() {
  SharedDtor();
}

void CSNothingLandEndRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSNothingLandEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSNothingLandEndRsp& CSNothingLandEndRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSNothingLandEndRsp* CSNothingLandEndRsp::default_instance_ = NULL;

CSNothingLandEndRsp* CSNothingLandEndRsp::New() const {
  return new CSNothingLandEndRsp;
}

void CSNothingLandEndRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    maxfloor_ = 0u;
    maxscore_ = 0u;
    maxfloorscore_ = 0u;
  }
  awardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSNothingLandEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSAwardElement AwardList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AwardList;
        if (input->ExpectTag(16)) goto parse_MaxFloor;
        break;
      }

      // required uint32 MaxFloor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfloor_)));
          set_has_maxfloor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MaxScore;
        break;
      }

      // required uint32 MaxScore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_MaxFloorScore;
        break;
      }

      // required uint32 MaxFloorScore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxFloorScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxfloorscore_)));
          set_has_maxfloorscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNothingLandEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSAwardElement AwardList = 1;
  for (int i = 0; i < this->awardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->awardlist(i), output);
  }

  // required uint32 MaxFloor = 2;
  if (has_maxfloor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxfloor(), output);
  }

  // required uint32 MaxScore = 3;
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxscore(), output);
  }

  // required uint32 MaxFloorScore = 4;
  if (has_maxfloorscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxfloorscore(), output);
  }

}

int CSNothingLandEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 MaxFloor = 2;
    if (has_maxfloor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfloor());
    }

    // required uint32 MaxScore = 3;
    if (has_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxscore());
    }

    // required uint32 MaxFloorScore = 4;
    if (has_maxfloorscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxfloorscore());
    }

  }
  // repeated .vmsg.CSAwardElement AwardList = 1;
  total_size += 1 * this->awardlist_size();
  for (int i = 0; i < this->awardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNothingLandEndRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSNothingLandEndRsp*>(&from));
}

void CSNothingLandEndRsp::MergeFrom(const CSNothingLandEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlist_.MergeFrom(from.awardlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_maxfloor()) {
      set_maxfloor(from.maxfloor());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
    if (from.has_maxfloorscore()) {
      set_maxfloorscore(from.maxfloorscore());
    }
  }
}

void CSNothingLandEndRsp::CopyFrom(const CSNothingLandEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNothingLandEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;

  for (int i = 0; i < awardlist_size(); i++) {
    if (!this->awardlist(i).IsInitialized()) return false;
  }
  return true;
}

void CSNothingLandEndRsp::Swap(CSNothingLandEndRsp* other) {
  if (other != this) {
    awardlist_.Swap(&other->awardlist_);
    std::swap(maxfloor_, other->maxfloor_);
    std::swap(maxscore_, other->maxscore_);
    std::swap(maxfloorscore_, other->maxfloorscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSNothingLandEndRsp::GetTypeName() const {
  return "vmsg.CSNothingLandEndRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSNothingLandHistoryRsp::kCoinFieldNumber;
const int CSNothingLandHistoryRsp::kAwardFloorFieldNumber;
const int CSNothingLandHistoryRsp::kFloorFieldNumber;
const int CSNothingLandHistoryRsp::kScoreFieldNumber;
const int CSNothingLandHistoryRsp::kEvolutionCntFieldNumber;
const int CSNothingLandHistoryRsp::kFloorScoreFieldNumber;
const int CSNothingLandHistoryRsp::kBuyBulletCntFieldNumber;
const int CSNothingLandHistoryRsp::kReliveCntFieldNumber;
#endif  // !_MSC_VER

CSNothingLandHistoryRsp::CSNothingLandHistoryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSNothingLandHistoryRsp::InitAsDefaultInstance() {
}

CSNothingLandHistoryRsp::CSNothingLandHistoryRsp(const CSNothingLandHistoryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSNothingLandHistoryRsp::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  floor_ = 0u;
  score_ = 0u;
  evolutioncnt_ = 0u;
  floorscore_ = 0u;
  buybulletcnt_ = 0u;
  relivecnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSNothingLandHistoryRsp::~CSNothingLandHistoryRsp() {
  SharedDtor();
}

void CSNothingLandHistoryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSNothingLandHistoryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSNothingLandHistoryRsp& CSNothingLandHistoryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSNothingLandHistoryRsp* CSNothingLandHistoryRsp::default_instance_ = NULL;

CSNothingLandHistoryRsp* CSNothingLandHistoryRsp::New() const {
  return new CSNothingLandHistoryRsp;
}

void CSNothingLandHistoryRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    floor_ = 0u;
    score_ = 0u;
    evolutioncnt_ = 0u;
    floorscore_ = 0u;
    buybulletcnt_ = 0u;
    relivecnt_ = 0u;
  }
  awardfloor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSNothingLandHistoryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardFloor;
        break;
      }

      // repeated uint32 AwardFloor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardFloor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_awardfloor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awardfloor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardFloor;
        if (input->ExpectTag(24)) goto parse_Floor;
        break;
      }

      // required uint32 Floor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Floor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floor_)));
          set_has_floor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // required uint32 Score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EvolutionCnt;
        break;
      }

      // required uint32 EvolutionCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutioncnt_)));
          set_has_evolutioncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_FloorScore;
        break;
      }

      // required uint32 FloorScore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FloorScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floorscore_)));
          set_has_floorscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_BuyBulletCnt;
        break;
      }

      // required uint32 BuyBulletCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyBulletCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buybulletcnt_)));
          set_has_buybulletcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ReliveCnt;
        break;
      }

      // required uint32 ReliveCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliveCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivecnt_)));
          set_has_relivecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSNothingLandHistoryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // repeated uint32 AwardFloor = 2;
  for (int i = 0; i < this->awardfloor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->awardfloor(i), output);
  }

  // required uint32 Floor = 3;
  if (has_floor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->floor(), output);
  }

  // required uint32 Score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // required uint32 EvolutionCnt = 5;
  if (has_evolutioncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evolutioncnt(), output);
  }

  // required uint32 FloorScore = 6;
  if (has_floorscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->floorscore(), output);
  }

  // required uint32 BuyBulletCnt = 7;
  if (has_buybulletcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buybulletcnt(), output);
  }

  // required uint32 ReliveCnt = 8;
  if (has_relivecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->relivecnt(), output);
  }

}

int CSNothingLandHistoryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Floor = 3;
    if (has_floor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floor());
    }

    // required uint32 Score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required uint32 EvolutionCnt = 5;
    if (has_evolutioncnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutioncnt());
    }

    // required uint32 FloorScore = 6;
    if (has_floorscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floorscore());
    }

    // required uint32 BuyBulletCnt = 7;
    if (has_buybulletcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buybulletcnt());
    }

    // required uint32 ReliveCnt = 8;
    if (has_relivecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivecnt());
    }

  }
  // repeated uint32 AwardFloor = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->awardfloor_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awardfloor(i));
    }
    total_size += 1 * this->awardfloor_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSNothingLandHistoryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSNothingLandHistoryRsp*>(&from));
}

void CSNothingLandHistoryRsp::MergeFrom(const CSNothingLandHistoryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardfloor_.MergeFrom(from.awardfloor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_floor()) {
      set_floor(from.floor());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_evolutioncnt()) {
      set_evolutioncnt(from.evolutioncnt());
    }
    if (from.has_floorscore()) {
      set_floorscore(from.floorscore());
    }
    if (from.has_buybulletcnt()) {
      set_buybulletcnt(from.buybulletcnt());
    }
    if (from.has_relivecnt()) {
      set_relivecnt(from.relivecnt());
    }
  }
}

void CSNothingLandHistoryRsp::CopyFrom(const CSNothingLandHistoryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSNothingLandHistoryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000fd) != 0x000000fd) return false;

  return true;
}

void CSNothingLandHistoryRsp::Swap(CSNothingLandHistoryRsp* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    awardfloor_.Swap(&other->awardfloor_);
    std::swap(floor_, other->floor_);
    std::swap(score_, other->score_);
    std::swap(evolutioncnt_, other->evolutioncnt_);
    std::swap(floorscore_, other->floorscore_);
    std::swap(buybulletcnt_, other->buybulletcnt_);
    std::swap(relivecnt_, other->relivecnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSNothingLandHistoryRsp::GetTypeName() const {
  return "vmsg.CSNothingLandHistoryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInfiniteRequest::kInfiniteEndRqstFieldNumber;
const int CSInfiniteRequest::kBuyGenRqstFieldNumber;
const int CSInfiniteRequest::kNothingLandStartRqstFieldNumber;
const int CSInfiniteRequest::kNothingLandEndRqstFieldNumber;
const int CSInfiniteRequest::kNothingLandMissionReportFieldNumber;
#endif  // !_MSC_VER

CSInfiniteRequest::CSInfiniteRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInfiniteRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  infiniteend_rqst_ = const_cast< ::vmsg::CSInfiniteEndRqst*>(
      ::vmsg::CSInfiniteEndRqst::internal_default_instance());
#else
  infiniteend_rqst_ = const_cast< ::vmsg::CSInfiniteEndRqst*>(&::vmsg::CSInfiniteEndRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buygen_rqst_ = const_cast< ::vmsg::CSInfiniteBuyGenRqst*>(
      ::vmsg::CSInfiniteBuyGenRqst::internal_default_instance());
#else
  buygen_rqst_ = const_cast< ::vmsg::CSInfiniteBuyGenRqst*>(&::vmsg::CSInfiniteBuyGenRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nothinglandstart_rqst_ = const_cast< ::vmsg::CSNothingLandStartRqst*>(
      ::vmsg::CSNothingLandStartRqst::internal_default_instance());
#else
  nothinglandstart_rqst_ = const_cast< ::vmsg::CSNothingLandStartRqst*>(&::vmsg::CSNothingLandStartRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nothinglandend_rqst_ = const_cast< ::vmsg::CSNothingLandEndRqst*>(
      ::vmsg::CSNothingLandEndRqst::internal_default_instance());
#else
  nothinglandend_rqst_ = const_cast< ::vmsg::CSNothingLandEndRqst*>(&::vmsg::CSNothingLandEndRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nothinglandmission_report_ = const_cast< ::vmsg::CSNothingLandEndRqst*>(
      ::vmsg::CSNothingLandEndRqst::internal_default_instance());
#else
  nothinglandmission_report_ = const_cast< ::vmsg::CSNothingLandEndRqst*>(&::vmsg::CSNothingLandEndRqst::default_instance());
#endif
}

CSInfiniteRequest::CSInfiniteRequest(const CSInfiniteRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInfiniteRequest::SharedCtor() {
  _cached_size_ = 0;
  infiniteend_rqst_ = NULL;
  buygen_rqst_ = NULL;
  nothinglandstart_rqst_ = NULL;
  nothinglandend_rqst_ = NULL;
  nothinglandmission_report_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInfiniteRequest::~CSInfiniteRequest() {
  SharedDtor();
}

void CSInfiniteRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete infiniteend_rqst_;
    delete buygen_rqst_;
    delete nothinglandstart_rqst_;
    delete nothinglandend_rqst_;
    delete nothinglandmission_report_;
  }
}

void CSInfiniteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInfiniteRequest& CSInfiniteRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSInfiniteRequest* CSInfiniteRequest::default_instance_ = NULL;

CSInfiniteRequest* CSInfiniteRequest::New() const {
  return new CSInfiniteRequest;
}

void CSInfiniteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infiniteend_rqst()) {
      if (infiniteend_rqst_ != NULL) infiniteend_rqst_->::vmsg::CSInfiniteEndRqst::Clear();
    }
    if (has_buygen_rqst()) {
      if (buygen_rqst_ != NULL) buygen_rqst_->::vmsg::CSInfiniteBuyGenRqst::Clear();
    }
    if (has_nothinglandstart_rqst()) {
      if (nothinglandstart_rqst_ != NULL) nothinglandstart_rqst_->::vmsg::CSNothingLandStartRqst::Clear();
    }
    if (has_nothinglandend_rqst()) {
      if (nothinglandend_rqst_ != NULL) nothinglandend_rqst_->::vmsg::CSNothingLandEndRqst::Clear();
    }
    if (has_nothinglandmission_report()) {
      if (nothinglandmission_report_ != NULL) nothinglandmission_report_->::vmsg::CSNothingLandEndRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInfiniteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSInfiniteEndRqst InfiniteEnd_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infiniteend_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BuyGen_Rqst;
        break;
      }

      // optional .vmsg.CSInfiniteBuyGenRqst BuyGen_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyGen_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buygen_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NothingLandStart_Rqst;
        break;
      }

      // optional .vmsg.CSNothingLandStartRqst NothingLandStart_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NothingLandStart_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nothinglandstart_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NothingLandEnd_Rqst;
        break;
      }

      // optional .vmsg.CSNothingLandEndRqst NothingLandEnd_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NothingLandEnd_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nothinglandend_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_NothingLandMission_Report;
        break;
      }

      // optional .vmsg.CSNothingLandEndRqst NothingLandMission_Report = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NothingLandMission_Report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nothinglandmission_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInfiniteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSInfiniteEndRqst InfiniteEnd_Rqst = 1;
  if (has_infiniteend_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->infiniteend_rqst(), output);
  }

  // optional .vmsg.CSInfiniteBuyGenRqst BuyGen_Rqst = 2;
  if (has_buygen_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->buygen_rqst(), output);
  }

  // optional .vmsg.CSNothingLandStartRqst NothingLandStart_Rqst = 3;
  if (has_nothinglandstart_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->nothinglandstart_rqst(), output);
  }

  // optional .vmsg.CSNothingLandEndRqst NothingLandEnd_Rqst = 4;
  if (has_nothinglandend_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->nothinglandend_rqst(), output);
  }

  // optional .vmsg.CSNothingLandEndRqst NothingLandMission_Report = 5;
  if (has_nothinglandmission_report()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->nothinglandmission_report(), output);
  }

}

int CSInfiniteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSInfiniteEndRqst InfiniteEnd_Rqst = 1;
    if (has_infiniteend_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infiniteend_rqst());
    }

    // optional .vmsg.CSInfiniteBuyGenRqst BuyGen_Rqst = 2;
    if (has_buygen_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buygen_rqst());
    }

    // optional .vmsg.CSNothingLandStartRqst NothingLandStart_Rqst = 3;
    if (has_nothinglandstart_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nothinglandstart_rqst());
    }

    // optional .vmsg.CSNothingLandEndRqst NothingLandEnd_Rqst = 4;
    if (has_nothinglandend_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nothinglandend_rqst());
    }

    // optional .vmsg.CSNothingLandEndRqst NothingLandMission_Report = 5;
    if (has_nothinglandmission_report()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nothinglandmission_report());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInfiniteRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInfiniteRequest*>(&from));
}

void CSInfiniteRequest::MergeFrom(const CSInfiniteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infiniteend_rqst()) {
      mutable_infiniteend_rqst()->::vmsg::CSInfiniteEndRqst::MergeFrom(from.infiniteend_rqst());
    }
    if (from.has_buygen_rqst()) {
      mutable_buygen_rqst()->::vmsg::CSInfiniteBuyGenRqst::MergeFrom(from.buygen_rqst());
    }
    if (from.has_nothinglandstart_rqst()) {
      mutable_nothinglandstart_rqst()->::vmsg::CSNothingLandStartRqst::MergeFrom(from.nothinglandstart_rqst());
    }
    if (from.has_nothinglandend_rqst()) {
      mutable_nothinglandend_rqst()->::vmsg::CSNothingLandEndRqst::MergeFrom(from.nothinglandend_rqst());
    }
    if (from.has_nothinglandmission_report()) {
      mutable_nothinglandmission_report()->::vmsg::CSNothingLandEndRqst::MergeFrom(from.nothinglandmission_report());
    }
  }
}

void CSInfiniteRequest::CopyFrom(const CSInfiniteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInfiniteRequest::IsInitialized() const {

  if (has_infiniteend_rqst()) {
    if (!this->infiniteend_rqst().IsInitialized()) return false;
  }
  if (has_buygen_rqst()) {
    if (!this->buygen_rqst().IsInitialized()) return false;
  }
  if (has_nothinglandstart_rqst()) {
    if (!this->nothinglandstart_rqst().IsInitialized()) return false;
  }
  if (has_nothinglandend_rqst()) {
    if (!this->nothinglandend_rqst().IsInitialized()) return false;
  }
  if (has_nothinglandmission_report()) {
    if (!this->nothinglandmission_report().IsInitialized()) return false;
  }
  return true;
}

void CSInfiniteRequest::Swap(CSInfiniteRequest* other) {
  if (other != this) {
    std::swap(infiniteend_rqst_, other->infiniteend_rqst_);
    std::swap(buygen_rqst_, other->buygen_rqst_);
    std::swap(nothinglandstart_rqst_, other->nothinglandstart_rqst_);
    std::swap(nothinglandend_rqst_, other->nothinglandend_rqst_);
    std::swap(nothinglandmission_report_, other->nothinglandmission_report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInfiniteRequest::GetTypeName() const {
  return "vmsg.CSInfiniteRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSInfiniteRespond::kInfiniteEndRspFieldNumber;
const int CSInfiniteRespond::kBuyGenRspFieldNumber;
const int CSInfiniteRespond::kInfiniteGenInfoRspFieldNumber;
const int CSInfiniteRespond::kNothingLandEndRspFieldNumber;
const int CSInfiniteRespond::kNothingLandHistoryRspFieldNumber;
#endif  // !_MSC_VER

CSInfiniteRespond::CSInfiniteRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSInfiniteRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  infiniteend_rsp_ = const_cast< ::vmsg::CSInfiniteEndRsp*>(
      ::vmsg::CSInfiniteEndRsp::internal_default_instance());
#else
  infiniteend_rsp_ = const_cast< ::vmsg::CSInfiniteEndRsp*>(&::vmsg::CSInfiniteEndRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buygen_rsp_ = const_cast< ::vmsg::CSInfiniteGenInfo*>(
      ::vmsg::CSInfiniteGenInfo::internal_default_instance());
#else
  buygen_rsp_ = const_cast< ::vmsg::CSInfiniteGenInfo*>(&::vmsg::CSInfiniteGenInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  infinitegeninfo_rsp_ = const_cast< ::vmsg::CSInfiniteGenInfo*>(
      ::vmsg::CSInfiniteGenInfo::internal_default_instance());
#else
  infinitegeninfo_rsp_ = const_cast< ::vmsg::CSInfiniteGenInfo*>(&::vmsg::CSInfiniteGenInfo::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nothinglandend_rsp_ = const_cast< ::vmsg::CSNothingLandEndRsp*>(
      ::vmsg::CSNothingLandEndRsp::internal_default_instance());
#else
  nothinglandend_rsp_ = const_cast< ::vmsg::CSNothingLandEndRsp*>(&::vmsg::CSNothingLandEndRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nothinglandhistory_rsp_ = const_cast< ::vmsg::CSNothingLandHistoryRsp*>(
      ::vmsg::CSNothingLandHistoryRsp::internal_default_instance());
#else
  nothinglandhistory_rsp_ = const_cast< ::vmsg::CSNothingLandHistoryRsp*>(&::vmsg::CSNothingLandHistoryRsp::default_instance());
#endif
}

CSInfiniteRespond::CSInfiniteRespond(const CSInfiniteRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSInfiniteRespond::SharedCtor() {
  _cached_size_ = 0;
  infiniteend_rsp_ = NULL;
  buygen_rsp_ = NULL;
  infinitegeninfo_rsp_ = NULL;
  nothinglandend_rsp_ = NULL;
  nothinglandhistory_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSInfiniteRespond::~CSInfiniteRespond() {
  SharedDtor();
}

void CSInfiniteRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete infiniteend_rsp_;
    delete buygen_rsp_;
    delete infinitegeninfo_rsp_;
    delete nothinglandend_rsp_;
    delete nothinglandhistory_rsp_;
  }
}

void CSInfiniteRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSInfiniteRespond& CSInfiniteRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSInfiniteMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSInfiniteMsg_2eproto();
#endif
  return *default_instance_;
}

CSInfiniteRespond* CSInfiniteRespond::default_instance_ = NULL;

CSInfiniteRespond* CSInfiniteRespond::New() const {
  return new CSInfiniteRespond;
}

void CSInfiniteRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infiniteend_rsp()) {
      if (infiniteend_rsp_ != NULL) infiniteend_rsp_->::vmsg::CSInfiniteEndRsp::Clear();
    }
    if (has_buygen_rsp()) {
      if (buygen_rsp_ != NULL) buygen_rsp_->::vmsg::CSInfiniteGenInfo::Clear();
    }
    if (has_infinitegeninfo_rsp()) {
      if (infinitegeninfo_rsp_ != NULL) infinitegeninfo_rsp_->::vmsg::CSInfiniteGenInfo::Clear();
    }
    if (has_nothinglandend_rsp()) {
      if (nothinglandend_rsp_ != NULL) nothinglandend_rsp_->::vmsg::CSNothingLandEndRsp::Clear();
    }
    if (has_nothinglandhistory_rsp()) {
      if (nothinglandhistory_rsp_ != NULL) nothinglandhistory_rsp_->::vmsg::CSNothingLandHistoryRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSInfiniteRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSInfiniteEndRsp InfiniteEnd_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infiniteend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BuyGen_Rsp;
        break;
      }

      // optional .vmsg.CSInfiniteGenInfo BuyGen_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuyGen_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buygen_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InfiniteGenInfo_Rsp;
        break;
      }

      // optional .vmsg.CSInfiniteGenInfo InfiniteGenInfo_Rsp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InfiniteGenInfo_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infinitegeninfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_NothingLandEnd_Rsp;
        break;
      }

      // optional .vmsg.CSNothingLandEndRsp NothingLandEnd_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NothingLandEnd_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nothinglandend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_NothingLandHistory_Rsp;
        break;
      }

      // optional .vmsg.CSNothingLandHistoryRsp NothingLandHistory_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NothingLandHistory_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nothinglandhistory_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSInfiniteRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSInfiniteEndRsp InfiniteEnd_Rsp = 1;
  if (has_infiniteend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->infiniteend_rsp(), output);
  }

  // optional .vmsg.CSInfiniteGenInfo BuyGen_Rsp = 2;
  if (has_buygen_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->buygen_rsp(), output);
  }

  // optional .vmsg.CSInfiniteGenInfo InfiniteGenInfo_Rsp = 3;
  if (has_infinitegeninfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->infinitegeninfo_rsp(), output);
  }

  // optional .vmsg.CSNothingLandEndRsp NothingLandEnd_Rsp = 4;
  if (has_nothinglandend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->nothinglandend_rsp(), output);
  }

  // optional .vmsg.CSNothingLandHistoryRsp NothingLandHistory_Rsp = 5;
  if (has_nothinglandhistory_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->nothinglandhistory_rsp(), output);
  }

}

int CSInfiniteRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSInfiniteEndRsp InfiniteEnd_Rsp = 1;
    if (has_infiniteend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infiniteend_rsp());
    }

    // optional .vmsg.CSInfiniteGenInfo BuyGen_Rsp = 2;
    if (has_buygen_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buygen_rsp());
    }

    // optional .vmsg.CSInfiniteGenInfo InfiniteGenInfo_Rsp = 3;
    if (has_infinitegeninfo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infinitegeninfo_rsp());
    }

    // optional .vmsg.CSNothingLandEndRsp NothingLandEnd_Rsp = 4;
    if (has_nothinglandend_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nothinglandend_rsp());
    }

    // optional .vmsg.CSNothingLandHistoryRsp NothingLandHistory_Rsp = 5;
    if (has_nothinglandhistory_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nothinglandhistory_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSInfiniteRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSInfiniteRespond*>(&from));
}

void CSInfiniteRespond::MergeFrom(const CSInfiniteRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infiniteend_rsp()) {
      mutable_infiniteend_rsp()->::vmsg::CSInfiniteEndRsp::MergeFrom(from.infiniteend_rsp());
    }
    if (from.has_buygen_rsp()) {
      mutable_buygen_rsp()->::vmsg::CSInfiniteGenInfo::MergeFrom(from.buygen_rsp());
    }
    if (from.has_infinitegeninfo_rsp()) {
      mutable_infinitegeninfo_rsp()->::vmsg::CSInfiniteGenInfo::MergeFrom(from.infinitegeninfo_rsp());
    }
    if (from.has_nothinglandend_rsp()) {
      mutable_nothinglandend_rsp()->::vmsg::CSNothingLandEndRsp::MergeFrom(from.nothinglandend_rsp());
    }
    if (from.has_nothinglandhistory_rsp()) {
      mutable_nothinglandhistory_rsp()->::vmsg::CSNothingLandHistoryRsp::MergeFrom(from.nothinglandhistory_rsp());
    }
  }
}

void CSInfiniteRespond::CopyFrom(const CSInfiniteRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSInfiniteRespond::IsInitialized() const {

  if (has_infiniteend_rsp()) {
    if (!this->infiniteend_rsp().IsInitialized()) return false;
  }
  if (has_buygen_rsp()) {
    if (!this->buygen_rsp().IsInitialized()) return false;
  }
  if (has_infinitegeninfo_rsp()) {
    if (!this->infinitegeninfo_rsp().IsInitialized()) return false;
  }
  if (has_nothinglandend_rsp()) {
    if (!this->nothinglandend_rsp().IsInitialized()) return false;
  }
  if (has_nothinglandhistory_rsp()) {
    if (!this->nothinglandhistory_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSInfiniteRespond::Swap(CSInfiniteRespond* other) {
  if (other != this) {
    std::swap(infiniteend_rsp_, other->infiniteend_rsp_);
    std::swap(buygen_rsp_, other->buygen_rsp_);
    std::swap(infinitegeninfo_rsp_, other->infinitegeninfo_rsp_);
    std::swap(nothinglandend_rsp_, other->nothinglandend_rsp_);
    std::swap(nothinglandhistory_rsp_, other->nothinglandhistory_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSInfiniteRespond::GetTypeName() const {
  return "vmsg.CSInfiniteRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
