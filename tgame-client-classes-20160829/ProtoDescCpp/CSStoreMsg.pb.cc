// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSStoreMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSStoreMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSStoreMsg_2eproto() {
  delete CSStoreBuyRqst::default_instance_;
  delete CSStoreRequest::default_instance_;
  delete CSStoreRespond::default_instance_;
  delete CSPanicBuyingStoreItem::default_instance_;
  delete CSPanicBuyingStoreQueryRsp::default_instance_;
  delete CSPanicBuyingStoreBuyRqst::default_instance_;
  delete CSPanicBuyingStoreBuyRsp::default_instance_;
  delete CSPanicBuyingStoreRequest::default_instance_;
  delete CSPanicBuyingStoreResponse::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSStoreMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSStoreMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSStoreBuyRqst::default_instance_ = new CSStoreBuyRqst();
  CSStoreRequest::default_instance_ = new CSStoreRequest();
  CSStoreRespond::default_instance_ = new CSStoreRespond();
  CSPanicBuyingStoreItem::default_instance_ = new CSPanicBuyingStoreItem();
  CSPanicBuyingStoreQueryRsp::default_instance_ = new CSPanicBuyingStoreQueryRsp();
  CSPanicBuyingStoreBuyRqst::default_instance_ = new CSPanicBuyingStoreBuyRqst();
  CSPanicBuyingStoreBuyRsp::default_instance_ = new CSPanicBuyingStoreBuyRsp();
  CSPanicBuyingStoreRequest::default_instance_ = new CSPanicBuyingStoreRequest();
  CSPanicBuyingStoreResponse::default_instance_ = new CSPanicBuyingStoreResponse();
  CSStoreBuyRqst::default_instance_->InitAsDefaultInstance();
  CSStoreRequest::default_instance_->InitAsDefaultInstance();
  CSStoreRespond::default_instance_->InitAsDefaultInstance();
  CSPanicBuyingStoreItem::default_instance_->InitAsDefaultInstance();
  CSPanicBuyingStoreQueryRsp::default_instance_->InitAsDefaultInstance();
  CSPanicBuyingStoreBuyRqst::default_instance_->InitAsDefaultInstance();
  CSPanicBuyingStoreBuyRsp::default_instance_->InitAsDefaultInstance();
  CSPanicBuyingStoreRequest::default_instance_->InitAsDefaultInstance();
  CSPanicBuyingStoreResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSStoreMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSStoreMsg_2eproto_once_);
void protobuf_AddDesc_CSStoreMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSStoreMsg_2eproto_once_,
                 &protobuf_AddDesc_CSStoreMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSStoreMsg_2eproto {
  StaticDescriptorInitializer_CSStoreMsg_2eproto() {
    protobuf_AddDesc_CSStoreMsg_2eproto();
  }
} static_descriptor_initializer_CSStoreMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSStoreBuyRqst::kTypeFieldNumber;
const int CSStoreBuyRqst::kCfgIDFieldNumber;
const int CSStoreBuyRqst::kCntFieldNumber;
#endif  // !_MSC_VER

CSStoreBuyRqst::CSStoreBuyRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSStoreBuyRqst::InitAsDefaultInstance() {
}

CSStoreBuyRqst::CSStoreBuyRqst(const CSStoreBuyRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSStoreBuyRqst::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  cfgid_ = 0u;
  cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStoreBuyRqst::~CSStoreBuyRqst() {
  SharedDtor();
}

void CSStoreBuyRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSStoreBuyRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSStoreBuyRqst& CSStoreBuyRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSStoreBuyRqst* CSStoreBuyRqst::default_instance_ = NULL;

CSStoreBuyRqst* CSStoreBuyRqst::New() const {
  return new CSStoreBuyRqst;
}

void CSStoreBuyRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    cfgid_ = 0u;
    cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSStoreBuyRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CfgID;
        break;
      }

      // required uint32 CfgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Cnt;
        break;
      }

      // required uint32 Cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStoreBuyRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 CfgID = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cfgid(), output);
  }

  // required uint32 Cnt = 3;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cnt(), output);
  }

}

int CSStoreBuyRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 CfgID = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStoreBuyRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSStoreBuyRqst*>(&from));
}

void CSStoreBuyRqst::MergeFrom(const CSStoreBuyRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
}

void CSStoreBuyRqst::CopyFrom(const CSStoreBuyRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStoreBuyRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSStoreBuyRqst::Swap(CSStoreBuyRqst* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSStoreBuyRqst::GetTypeName() const {
  return "vmsg.CSStoreBuyRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSStoreRequest::kStoreBuyRqstFieldNumber;
#endif  // !_MSC_VER

CSStoreRequest::CSStoreRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSStoreRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  storebuy_rqst_ = const_cast< ::vmsg::CSStoreBuyRqst*>(
      ::vmsg::CSStoreBuyRqst::internal_default_instance());
#else
  storebuy_rqst_ = const_cast< ::vmsg::CSStoreBuyRqst*>(&::vmsg::CSStoreBuyRqst::default_instance());
#endif
}

CSStoreRequest::CSStoreRequest(const CSStoreRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  storebuy_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStoreRequest::~CSStoreRequest() {
  SharedDtor();
}

void CSStoreRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete storebuy_rqst_;
  }
}

void CSStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSStoreRequest& CSStoreRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSStoreRequest* CSStoreRequest::default_instance_ = NULL;

CSStoreRequest* CSStoreRequest::New() const {
  return new CSStoreRequest;
}

void CSStoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_storebuy_rqst()) {
      if (storebuy_rqst_ != NULL) storebuy_rqst_->::vmsg::CSStoreBuyRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSStoreBuyRqst StoreBuy_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storebuy_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSStoreBuyRqst StoreBuy_Rqst = 1;
  if (has_storebuy_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->storebuy_rqst(), output);
  }

}

int CSStoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSStoreBuyRqst StoreBuy_Rqst = 1;
    if (has_storebuy_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storebuy_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStoreRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSStoreRequest*>(&from));
}

void CSStoreRequest::MergeFrom(const CSStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storebuy_rqst()) {
      mutable_storebuy_rqst()->::vmsg::CSStoreBuyRqst::MergeFrom(from.storebuy_rqst());
    }
  }
}

void CSStoreRequest::CopyFrom(const CSStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStoreRequest::IsInitialized() const {

  if (has_storebuy_rqst()) {
    if (!this->storebuy_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSStoreRequest::Swap(CSStoreRequest* other) {
  if (other != this) {
    std::swap(storebuy_rqst_, other->storebuy_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSStoreRequest::GetTypeName() const {
  return "vmsg.CSStoreRequest";
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSStoreRespond::CSStoreRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSStoreRespond::InitAsDefaultInstance() {
}

CSStoreRespond::CSStoreRespond(const CSStoreRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSStoreRespond::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSStoreRespond::~CSStoreRespond() {
  SharedDtor();
}

void CSStoreRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSStoreRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSStoreRespond& CSStoreRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSStoreRespond* CSStoreRespond::default_instance_ = NULL;

CSStoreRespond* CSStoreRespond::New() const {
  return new CSStoreRespond;
}

void CSStoreRespond::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSStoreRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
  return true;
#undef DO_
}

void CSStoreRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
}

int CSStoreRespond::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSStoreRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSStoreRespond*>(&from));
}

void CSStoreRespond::MergeFrom(const CSStoreRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
}

void CSStoreRespond::CopyFrom(const CSStoreRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSStoreRespond::IsInitialized() const {

  return true;
}

void CSStoreRespond::Swap(CSStoreRespond* other) {
  if (other != this) {
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSStoreRespond::GetTypeName() const {
  return "vmsg.CSStoreRespond";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPanicBuyingStoreItem::kCfgIDFieldNumber;
const int CSPanicBuyingStoreItem::kTypeFieldNumber;
const int CSPanicBuyingStoreItem::kEachBuyingCntFieldNumber;
const int CSPanicBuyingStoreItem::kTotalBuyCntFieldNumber;
const int CSPanicBuyingStoreItem::kTotalBoughtCntFieldNumber;
const int CSPanicBuyingStoreItem::kConsumingTypeFieldNumber;
const int CSPanicBuyingStoreItem::kPriceFieldNumber;
const int CSPanicBuyingStoreItem::kMyBuyingStatusFieldNumber;
#endif  // !_MSC_VER

CSPanicBuyingStoreItem::CSPanicBuyingStoreItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPanicBuyingStoreItem::InitAsDefaultInstance() {
}

CSPanicBuyingStoreItem::CSPanicBuyingStoreItem(const CSPanicBuyingStoreItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPanicBuyingStoreItem::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  type_ = 0u;
  eachbuyingcnt_ = 0u;
  totalbuycnt_ = 0u;
  totalboughtcnt_ = 0u;
  consumingtype_ = 0u;
  price_ = 0u;
  mybuyingstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPanicBuyingStoreItem::~CSPanicBuyingStoreItem() {
  SharedDtor();
}

void CSPanicBuyingStoreItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPanicBuyingStoreItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPanicBuyingStoreItem& CSPanicBuyingStoreItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSPanicBuyingStoreItem* CSPanicBuyingStoreItem::default_instance_ = NULL;

CSPanicBuyingStoreItem* CSPanicBuyingStoreItem::New() const {
  return new CSPanicBuyingStoreItem;
}

void CSPanicBuyingStoreItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    type_ = 0u;
    eachbuyingcnt_ = 0u;
    totalbuycnt_ = 0u;
    totalboughtcnt_ = 0u;
    consumingtype_ = 0u;
    price_ = 0u;
    mybuyingstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPanicBuyingStoreItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EachBuyingCnt;
        break;
      }

      // required uint32 EachBuyingCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EachBuyingCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eachbuyingcnt_)));
          set_has_eachbuyingcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TotalBuyCnt;
        break;
      }

      // required uint32 TotalBuyCnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalBuyCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalbuycnt_)));
          set_has_totalbuycnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalBoughtCnt;
        break;
      }

      // required uint32 TotalBoughtCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalBoughtCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalboughtcnt_)));
          set_has_totalboughtcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ConsumingType;
        break;
      }

      // required uint32 ConsumingType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ConsumingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consumingtype_)));
          set_has_consumingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Price;
        break;
      }

      // required uint32 Price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_MyBuyingStatus;
        break;
      }

      // required uint32 MyBuyingStatus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyBuyingStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mybuyingstatus_)));
          set_has_mybuyingstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPanicBuyingStoreItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CfgID = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 EachBuyingCnt = 3;
  if (has_eachbuyingcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eachbuyingcnt(), output);
  }

  // required uint32 TotalBuyCnt = 4;
  if (has_totalbuycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalbuycnt(), output);
  }

  // required uint32 TotalBoughtCnt = 5;
  if (has_totalboughtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->totalboughtcnt(), output);
  }

  // required uint32 ConsumingType = 6;
  if (has_consumingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->consumingtype(), output);
  }

  // required uint32 Price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->price(), output);
  }

  // required uint32 MyBuyingStatus = 8;
  if (has_mybuyingstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->mybuyingstatus(), output);
  }

}

int CSPanicBuyingStoreItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CfgID = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 EachBuyingCnt = 3;
    if (has_eachbuyingcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eachbuyingcnt());
    }

    // required uint32 TotalBuyCnt = 4;
    if (has_totalbuycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalbuycnt());
    }

    // required uint32 TotalBoughtCnt = 5;
    if (has_totalboughtcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalboughtcnt());
    }

    // required uint32 ConsumingType = 6;
    if (has_consumingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consumingtype());
    }

    // required uint32 Price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price());
    }

    // required uint32 MyBuyingStatus = 8;
    if (has_mybuyingstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mybuyingstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPanicBuyingStoreItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPanicBuyingStoreItem*>(&from));
}

void CSPanicBuyingStoreItem::MergeFrom(const CSPanicBuyingStoreItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_eachbuyingcnt()) {
      set_eachbuyingcnt(from.eachbuyingcnt());
    }
    if (from.has_totalbuycnt()) {
      set_totalbuycnt(from.totalbuycnt());
    }
    if (from.has_totalboughtcnt()) {
      set_totalboughtcnt(from.totalboughtcnt());
    }
    if (from.has_consumingtype()) {
      set_consumingtype(from.consumingtype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_mybuyingstatus()) {
      set_mybuyingstatus(from.mybuyingstatus());
    }
  }
}

void CSPanicBuyingStoreItem::CopyFrom(const CSPanicBuyingStoreItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPanicBuyingStoreItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CSPanicBuyingStoreItem::Swap(CSPanicBuyingStoreItem* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(type_, other->type_);
    std::swap(eachbuyingcnt_, other->eachbuyingcnt_);
    std::swap(totalbuycnt_, other->totalbuycnt_);
    std::swap(totalboughtcnt_, other->totalboughtcnt_);
    std::swap(consumingtype_, other->consumingtype_);
    std::swap(price_, other->price_);
    std::swap(mybuyingstatus_, other->mybuyingstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPanicBuyingStoreItem::GetTypeName() const {
  return "vmsg.CSPanicBuyingStoreItem";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPanicBuyingStoreQueryRsp::kItemsFieldNumber;
const int CSPanicBuyingStoreQueryRsp::kNextRefreshTimeFieldNumber;
#endif  // !_MSC_VER

CSPanicBuyingStoreQueryRsp::CSPanicBuyingStoreQueryRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPanicBuyingStoreQueryRsp::InitAsDefaultInstance() {
}

CSPanicBuyingStoreQueryRsp::CSPanicBuyingStoreQueryRsp(const CSPanicBuyingStoreQueryRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPanicBuyingStoreQueryRsp::SharedCtor() {
  _cached_size_ = 0;
  nextrefreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPanicBuyingStoreQueryRsp::~CSPanicBuyingStoreQueryRsp() {
  SharedDtor();
}

void CSPanicBuyingStoreQueryRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPanicBuyingStoreQueryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPanicBuyingStoreQueryRsp& CSPanicBuyingStoreQueryRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSPanicBuyingStoreQueryRsp* CSPanicBuyingStoreQueryRsp::default_instance_ = NULL;

CSPanicBuyingStoreQueryRsp* CSPanicBuyingStoreQueryRsp::New() const {
  return new CSPanicBuyingStoreQueryRsp;
}

void CSPanicBuyingStoreQueryRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    nextrefreshtime_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPanicBuyingStoreQueryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSPanicBuyingStoreItem Items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Items;
        if (input->ExpectTag(16)) goto parse_NextRefreshTime;
        break;
      }

      // required uint32 NextRefreshTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextrefreshtime_)));
          set_has_nextrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPanicBuyingStoreQueryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSPanicBuyingStoreItem Items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->items(i), output);
  }

  // required uint32 NextRefreshTime = 2;
  if (has_nextrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nextrefreshtime(), output);
  }

}

int CSPanicBuyingStoreQueryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 NextRefreshTime = 2;
    if (has_nextrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextrefreshtime());
    }

  }
  // repeated .vmsg.CSPanicBuyingStoreItem Items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPanicBuyingStoreQueryRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPanicBuyingStoreQueryRsp*>(&from));
}

void CSPanicBuyingStoreQueryRsp::MergeFrom(const CSPanicBuyingStoreQueryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_nextrefreshtime()) {
      set_nextrefreshtime(from.nextrefreshtime());
    }
  }
}

void CSPanicBuyingStoreQueryRsp::CopyFrom(const CSPanicBuyingStoreQueryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPanicBuyingStoreQueryRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void CSPanicBuyingStoreQueryRsp::Swap(CSPanicBuyingStoreQueryRsp* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(nextrefreshtime_, other->nextrefreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPanicBuyingStoreQueryRsp::GetTypeName() const {
  return "vmsg.CSPanicBuyingStoreQueryRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPanicBuyingStoreBuyRqst::kIdxFieldNumber;
#endif  // !_MSC_VER

CSPanicBuyingStoreBuyRqst::CSPanicBuyingStoreBuyRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPanicBuyingStoreBuyRqst::InitAsDefaultInstance() {
}

CSPanicBuyingStoreBuyRqst::CSPanicBuyingStoreBuyRqst(const CSPanicBuyingStoreBuyRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPanicBuyingStoreBuyRqst::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPanicBuyingStoreBuyRqst::~CSPanicBuyingStoreBuyRqst() {
  SharedDtor();
}

void CSPanicBuyingStoreBuyRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSPanicBuyingStoreBuyRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPanicBuyingStoreBuyRqst& CSPanicBuyingStoreBuyRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSPanicBuyingStoreBuyRqst* CSPanicBuyingStoreBuyRqst::default_instance_ = NULL;

CSPanicBuyingStoreBuyRqst* CSPanicBuyingStoreBuyRqst::New() const {
  return new CSPanicBuyingStoreBuyRqst;
}

void CSPanicBuyingStoreBuyRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPanicBuyingStoreBuyRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPanicBuyingStoreBuyRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

}

int CSPanicBuyingStoreBuyRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPanicBuyingStoreBuyRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPanicBuyingStoreBuyRqst*>(&from));
}

void CSPanicBuyingStoreBuyRqst::MergeFrom(const CSPanicBuyingStoreBuyRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
  }
}

void CSPanicBuyingStoreBuyRqst::CopyFrom(const CSPanicBuyingStoreBuyRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPanicBuyingStoreBuyRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSPanicBuyingStoreBuyRqst::Swap(CSPanicBuyingStoreBuyRqst* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPanicBuyingStoreBuyRqst::GetTypeName() const {
  return "vmsg.CSPanicBuyingStoreBuyRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPanicBuyingStoreBuyRsp::kCfgIDFieldNumber;
const int CSPanicBuyingStoreBuyRsp::kTypeFieldNumber;
const int CSPanicBuyingStoreBuyRsp::kCntFieldNumber;
const int CSPanicBuyingStoreBuyRsp::kCurStatusFieldNumber;
#endif  // !_MSC_VER

CSPanicBuyingStoreBuyRsp::CSPanicBuyingStoreBuyRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPanicBuyingStoreBuyRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  curstatus_ = const_cast< ::vmsg::CSPanicBuyingStoreQueryRsp*>(
      ::vmsg::CSPanicBuyingStoreQueryRsp::internal_default_instance());
#else
  curstatus_ = const_cast< ::vmsg::CSPanicBuyingStoreQueryRsp*>(&::vmsg::CSPanicBuyingStoreQueryRsp::default_instance());
#endif
}

CSPanicBuyingStoreBuyRsp::CSPanicBuyingStoreBuyRsp(const CSPanicBuyingStoreBuyRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPanicBuyingStoreBuyRsp::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  type_ = 0u;
  cnt_ = 0u;
  curstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPanicBuyingStoreBuyRsp::~CSPanicBuyingStoreBuyRsp() {
  SharedDtor();
}

void CSPanicBuyingStoreBuyRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete curstatus_;
  }
}

void CSPanicBuyingStoreBuyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPanicBuyingStoreBuyRsp& CSPanicBuyingStoreBuyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSPanicBuyingStoreBuyRsp* CSPanicBuyingStoreBuyRsp::default_instance_ = NULL;

CSPanicBuyingStoreBuyRsp* CSPanicBuyingStoreBuyRsp::New() const {
  return new CSPanicBuyingStoreBuyRsp;
}

void CSPanicBuyingStoreBuyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    type_ = 0u;
    cnt_ = 0u;
    if (has_curstatus()) {
      if (curstatus_ != NULL) curstatus_->::vmsg::CSPanicBuyingStoreQueryRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPanicBuyingStoreBuyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Cnt;
        break;
      }

      // required uint32 Cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CurStatus;
        break;
      }

      // required .vmsg.CSPanicBuyingStoreQueryRsp CurStatus = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPanicBuyingStoreBuyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CfgID = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Cnt = 3;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cnt(), output);
  }

  // required .vmsg.CSPanicBuyingStoreQueryRsp CurStatus = 4;
  if (has_curstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->curstatus(), output);
  }

}

int CSPanicBuyingStoreBuyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CfgID = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

    // required .vmsg.CSPanicBuyingStoreQueryRsp CurStatus = 4;
    if (has_curstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPanicBuyingStoreBuyRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPanicBuyingStoreBuyRsp*>(&from));
}

void CSPanicBuyingStoreBuyRsp::MergeFrom(const CSPanicBuyingStoreBuyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
    if (from.has_curstatus()) {
      mutable_curstatus()->::vmsg::CSPanicBuyingStoreQueryRsp::MergeFrom(from.curstatus());
    }
  }
}

void CSPanicBuyingStoreBuyRsp::CopyFrom(const CSPanicBuyingStoreBuyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPanicBuyingStoreBuyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_curstatus()) {
    if (!this->curstatus().IsInitialized()) return false;
  }
  return true;
}

void CSPanicBuyingStoreBuyRsp::Swap(CSPanicBuyingStoreBuyRsp* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(type_, other->type_);
    std::swap(cnt_, other->cnt_);
    std::swap(curstatus_, other->curstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPanicBuyingStoreBuyRsp::GetTypeName() const {
  return "vmsg.CSPanicBuyingStoreBuyRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPanicBuyingStoreRequest::kBuyingRequestFieldNumber;
#endif  // !_MSC_VER

CSPanicBuyingStoreRequest::CSPanicBuyingStoreRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPanicBuyingStoreRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buying_request_ = const_cast< ::vmsg::CSPanicBuyingStoreBuyRqst*>(
      ::vmsg::CSPanicBuyingStoreBuyRqst::internal_default_instance());
#else
  buying_request_ = const_cast< ::vmsg::CSPanicBuyingStoreBuyRqst*>(&::vmsg::CSPanicBuyingStoreBuyRqst::default_instance());
#endif
}

CSPanicBuyingStoreRequest::CSPanicBuyingStoreRequest(const CSPanicBuyingStoreRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPanicBuyingStoreRequest::SharedCtor() {
  _cached_size_ = 0;
  buying_request_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPanicBuyingStoreRequest::~CSPanicBuyingStoreRequest() {
  SharedDtor();
}

void CSPanicBuyingStoreRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete buying_request_;
  }
}

void CSPanicBuyingStoreRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPanicBuyingStoreRequest& CSPanicBuyingStoreRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSPanicBuyingStoreRequest* CSPanicBuyingStoreRequest::default_instance_ = NULL;

CSPanicBuyingStoreRequest* CSPanicBuyingStoreRequest::New() const {
  return new CSPanicBuyingStoreRequest;
}

void CSPanicBuyingStoreRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_buying_request()) {
      if (buying_request_ != NULL) buying_request_->::vmsg::CSPanicBuyingStoreBuyRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPanicBuyingStoreRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSPanicBuyingStoreBuyRqst Buying_Request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buying_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPanicBuyingStoreRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSPanicBuyingStoreBuyRqst Buying_Request = 1;
  if (has_buying_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->buying_request(), output);
  }

}

int CSPanicBuyingStoreRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSPanicBuyingStoreBuyRqst Buying_Request = 1;
    if (has_buying_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buying_request());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPanicBuyingStoreRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPanicBuyingStoreRequest*>(&from));
}

void CSPanicBuyingStoreRequest::MergeFrom(const CSPanicBuyingStoreRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buying_request()) {
      mutable_buying_request()->::vmsg::CSPanicBuyingStoreBuyRqst::MergeFrom(from.buying_request());
    }
  }
}

void CSPanicBuyingStoreRequest::CopyFrom(const CSPanicBuyingStoreRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPanicBuyingStoreRequest::IsInitialized() const {

  if (has_buying_request()) {
    if (!this->buying_request().IsInitialized()) return false;
  }
  return true;
}

void CSPanicBuyingStoreRequest::Swap(CSPanicBuyingStoreRequest* other) {
  if (other != this) {
    std::swap(buying_request_, other->buying_request_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPanicBuyingStoreRequest::GetTypeName() const {
  return "vmsg.CSPanicBuyingStoreRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSPanicBuyingStoreResponse::kStatusQueryResponseFieldNumber;
const int CSPanicBuyingStoreResponse::kBuyingResponseFieldNumber;
#endif  // !_MSC_VER

CSPanicBuyingStoreResponse::CSPanicBuyingStoreResponse()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSPanicBuyingStoreResponse::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  status_query_response_ = const_cast< ::vmsg::CSPanicBuyingStoreQueryRsp*>(
      ::vmsg::CSPanicBuyingStoreQueryRsp::internal_default_instance());
#else
  status_query_response_ = const_cast< ::vmsg::CSPanicBuyingStoreQueryRsp*>(&::vmsg::CSPanicBuyingStoreQueryRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buying_response_ = const_cast< ::vmsg::CSPanicBuyingStoreBuyRsp*>(
      ::vmsg::CSPanicBuyingStoreBuyRsp::internal_default_instance());
#else
  buying_response_ = const_cast< ::vmsg::CSPanicBuyingStoreBuyRsp*>(&::vmsg::CSPanicBuyingStoreBuyRsp::default_instance());
#endif
}

CSPanicBuyingStoreResponse::CSPanicBuyingStoreResponse(const CSPanicBuyingStoreResponse& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSPanicBuyingStoreResponse::SharedCtor() {
  _cached_size_ = 0;
  status_query_response_ = NULL;
  buying_response_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSPanicBuyingStoreResponse::~CSPanicBuyingStoreResponse() {
  SharedDtor();
}

void CSPanicBuyingStoreResponse::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete status_query_response_;
    delete buying_response_;
  }
}

void CSPanicBuyingStoreResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSPanicBuyingStoreResponse& CSPanicBuyingStoreResponse::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSStoreMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSStoreMsg_2eproto();
#endif
  return *default_instance_;
}

CSPanicBuyingStoreResponse* CSPanicBuyingStoreResponse::default_instance_ = NULL;

CSPanicBuyingStoreResponse* CSPanicBuyingStoreResponse::New() const {
  return new CSPanicBuyingStoreResponse;
}

void CSPanicBuyingStoreResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_status_query_response()) {
      if (status_query_response_ != NULL) status_query_response_->::vmsg::CSPanicBuyingStoreQueryRsp::Clear();
    }
    if (has_buying_response()) {
      if (buying_response_ != NULL) buying_response_->::vmsg::CSPanicBuyingStoreBuyRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSPanicBuyingStoreResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSPanicBuyingStoreQueryRsp Status_Query_Response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status_query_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Buying_Response;
        break;
      }

      // optional .vmsg.CSPanicBuyingStoreBuyRsp Buying_Response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Buying_Response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buying_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSPanicBuyingStoreResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSPanicBuyingStoreQueryRsp Status_Query_Response = 1;
  if (has_status_query_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->status_query_response(), output);
  }

  // optional .vmsg.CSPanicBuyingStoreBuyRsp Buying_Response = 2;
  if (has_buying_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->buying_response(), output);
  }

}

int CSPanicBuyingStoreResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSPanicBuyingStoreQueryRsp Status_Query_Response = 1;
    if (has_status_query_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status_query_response());
    }

    // optional .vmsg.CSPanicBuyingStoreBuyRsp Buying_Response = 2;
    if (has_buying_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buying_response());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSPanicBuyingStoreResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSPanicBuyingStoreResponse*>(&from));
}

void CSPanicBuyingStoreResponse::MergeFrom(const CSPanicBuyingStoreResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status_query_response()) {
      mutable_status_query_response()->::vmsg::CSPanicBuyingStoreQueryRsp::MergeFrom(from.status_query_response());
    }
    if (from.has_buying_response()) {
      mutable_buying_response()->::vmsg::CSPanicBuyingStoreBuyRsp::MergeFrom(from.buying_response());
    }
  }
}

void CSPanicBuyingStoreResponse::CopyFrom(const CSPanicBuyingStoreResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSPanicBuyingStoreResponse::IsInitialized() const {

  if (has_status_query_response()) {
    if (!this->status_query_response().IsInitialized()) return false;
  }
  if (has_buying_response()) {
    if (!this->buying_response().IsInitialized()) return false;
  }
  return true;
}

void CSPanicBuyingStoreResponse::Swap(CSPanicBuyingStoreResponse* other) {
  if (other != this) {
    std::swap(status_query_response_, other->status_query_response_);
    std::swap(buying_response_, other->buying_response_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSPanicBuyingStoreResponse::GetTypeName() const {
  return "vmsg.CSPanicBuyingStoreResponse";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
