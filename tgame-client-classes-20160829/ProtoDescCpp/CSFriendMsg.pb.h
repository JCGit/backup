// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSFriendMsg.proto

#ifndef PROTOBUF_CSFriendMsg_2eproto__INCLUDED
#define PROTOBUF_CSFriendMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "MsgBase.pb.h"
#include "ShareByClient.pb.h"
#include "CSPlayerMsg.pb.h"
// @@protoc_insertion_point(includes)

namespace vmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSFriendMsg_2eproto();
void protobuf_AssignDesc_CSFriendMsg_2eproto();
void protobuf_ShutdownFile_CSFriendMsg_2eproto();

class CSOneFriend;
class CSFriendQueryRsp;
class CSProposeFriendRsp;
class CSSendManualRsp;
class CSBatchAddUinLst;
class CSInviteFriendFightRqst;
class CSInviteFriendFightRsp;
class CSRecvManualRsp;
class CSFriendRequest;
class CSFriendRespond;

// ===================================================================

class CSOneFriend : public ::google::protobuf::MessageLite {
 public:
  CSOneFriend();
  virtual ~CSOneFriend();

  CSOneFriend(const CSOneFriend& from);

  inline CSOneFriend& operator=(const CSOneFriend& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSOneFriend& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSOneFriend* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSOneFriend* other);

  // implements Message ----------------------------------------------

  CSOneFriend* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSOneFriend& from);
  void MergeFrom(const CSOneFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 Uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint64 uin() const;
  inline void set_uin(::google::protobuf::uint64 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 FightPower = 3;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 3;
  inline ::google::protobuf::uint32 fightpower() const;
  inline void set_fightpower(::google::protobuf::uint32 value);

  // required uint32 IsOnline = 4;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsOnlineFieldNumber = 4;
  inline ::google::protobuf::uint32 isonline() const;
  inline void set_isonline(::google::protobuf::uint32 value);

  // required uint32 Level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 InviteCostCoin = 7;
  inline bool has_invitecostcoin() const;
  inline void clear_invitecostcoin();
  static const int kInviteCostCoinFieldNumber = 7;
  inline ::google::protobuf::uint32 invitecostcoin() const;
  inline void set_invitecostcoin(::google::protobuf::uint32 value);

  // optional uint32 FightCnt = 8;
  inline bool has_fightcnt() const;
  inline void clear_fightcnt();
  static const int kFightCntFieldNumber = 8;
  inline ::google::protobuf::uint32 fightcnt() const;
  inline void set_fightcnt(::google::protobuf::uint32 value);

  // optional uint32 ShowID = 9;
  inline bool has_showid() const;
  inline void clear_showid();
  static const int kShowIDFieldNumber = 9;
  inline ::google::protobuf::uint32 showid() const;
  inline void set_showid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSOneFriend)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_invitecostcoin();
  inline void clear_has_invitecostcoin();
  inline void set_has_fightcnt();
  inline void clear_has_fightcnt();
  inline void set_has_showid();
  inline void clear_has_showid();

  ::google::protobuf::uint64 uin_;
  ::std::string* name_;
  ::google::protobuf::uint32 fightpower_;
  ::google::protobuf::uint32 isonline_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 invitecostcoin_;
  ::google::protobuf::uint32 fightcnt_;
  ::google::protobuf::uint32 showid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSOneFriend* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendQueryRsp : public ::google::protobuf::MessageLite {
 public:
  CSFriendQueryRsp();
  virtual ~CSFriendQueryRsp();

  CSFriendQueryRsp(const CSFriendQueryRsp& from);

  inline CSFriendQueryRsp& operator=(const CSFriendQueryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSFriendQueryRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendQueryRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendQueryRsp* other);

  // implements Message ----------------------------------------------

  CSFriendQueryRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendQueryRsp& from);
  void MergeFrom(const CSFriendQueryRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vmsg.CSOneFriend FriendLst = 1;
  inline int friendlst_size() const;
  inline void clear_friendlst();
  static const int kFriendLstFieldNumber = 1;
  inline const ::vmsg::CSOneFriend& friendlst(int index) const;
  inline ::vmsg::CSOneFriend* mutable_friendlst(int index);
  inline ::vmsg::CSOneFriend* add_friendlst();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
      friendlst() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
      mutable_friendlst();

  // repeated .vmsg.CSOneFriend BlackLst = 2;
  inline int blacklst_size() const;
  inline void clear_blacklst();
  static const int kBlackLstFieldNumber = 2;
  inline const ::vmsg::CSOneFriend& blacklst(int index) const;
  inline ::vmsg::CSOneFriend* mutable_blacklst(int index);
  inline ::vmsg::CSOneFriend* add_blacklst();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
      blacklst() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
      mutable_blacklst();

  // repeated .vmsg.CSOneFriend AdminReqLst = 3;
  inline int adminreqlst_size() const;
  inline void clear_adminreqlst();
  static const int kAdminReqLstFieldNumber = 3;
  inline const ::vmsg::CSOneFriend& adminreqlst(int index) const;
  inline ::vmsg::CSOneFriend* mutable_adminreqlst(int index);
  inline ::vmsg::CSOneFriend* add_adminreqlst();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
      adminreqlst() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
      mutable_adminreqlst();

  // repeated uint64 SendManualUinLst = 4;
  inline int sendmanualuinlst_size() const;
  inline void clear_sendmanualuinlst();
  static const int kSendManualUinLstFieldNumber = 4;
  inline ::google::protobuf::uint64 sendmanualuinlst(int index) const;
  inline void set_sendmanualuinlst(int index, ::google::protobuf::uint64 value);
  inline void add_sendmanualuinlst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      sendmanualuinlst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_sendmanualuinlst();

  // repeated uint64 RecvManualUinLst = 5;
  inline int recvmanualuinlst_size() const;
  inline void clear_recvmanualuinlst();
  static const int kRecvManualUinLstFieldNumber = 5;
  inline ::google::protobuf::uint64 recvmanualuinlst(int index) const;
  inline void set_recvmanualuinlst(int index, ::google::protobuf::uint64 value);
  inline void add_recvmanualuinlst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      recvmanualuinlst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_recvmanualuinlst();

  // required uint32 RecvManualCnt = 6;
  inline bool has_recvmanualcnt() const;
  inline void clear_recvmanualcnt();
  static const int kRecvManualCntFieldNumber = 6;
  inline ::google::protobuf::uint32 recvmanualcnt() const;
  inline void set_recvmanualcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSFriendQueryRsp)
 private:
  inline void set_has_recvmanualcnt();
  inline void clear_has_recvmanualcnt();

  ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend > friendlst_;
  ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend > blacklst_;
  ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend > adminreqlst_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > sendmanualuinlst_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > recvmanualuinlst_;
  ::google::protobuf::uint32 recvmanualcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSFriendQueryRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSProposeFriendRsp : public ::google::protobuf::MessageLite {
 public:
  CSProposeFriendRsp();
  virtual ~CSProposeFriendRsp();

  CSProposeFriendRsp(const CSProposeFriendRsp& from);

  inline CSProposeFriendRsp& operator=(const CSProposeFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSProposeFriendRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSProposeFriendRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSProposeFriendRsp* other);

  // implements Message ----------------------------------------------

  CSProposeFriendRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSProposeFriendRsp& from);
  void MergeFrom(const CSProposeFriendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vmsg.CSOneFriend FriendLst = 1;
  inline int friendlst_size() const;
  inline void clear_friendlst();
  static const int kFriendLstFieldNumber = 1;
  inline const ::vmsg::CSOneFriend& friendlst(int index) const;
  inline ::vmsg::CSOneFriend* mutable_friendlst(int index);
  inline ::vmsg::CSOneFriend* add_friendlst();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
      friendlst() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
      mutable_friendlst();

  // @@protoc_insertion_point(class_scope:vmsg.CSProposeFriendRsp)
 private:

  ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend > friendlst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSProposeFriendRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSSendManualRsp : public ::google::protobuf::MessageLite {
 public:
  CSSendManualRsp();
  virtual ~CSSendManualRsp();

  CSSendManualRsp(const CSSendManualRsp& from);

  inline CSSendManualRsp& operator=(const CSSendManualRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSSendManualRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSSendManualRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSSendManualRsp* other);

  // implements Message ----------------------------------------------

  CSSendManualRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSSendManualRsp& from);
  void MergeFrom(const CSSendManualRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 SendManualUinLst = 1;
  inline int sendmanualuinlst_size() const;
  inline void clear_sendmanualuinlst();
  static const int kSendManualUinLstFieldNumber = 1;
  inline ::google::protobuf::uint64 sendmanualuinlst(int index) const;
  inline void set_sendmanualuinlst(int index, ::google::protobuf::uint64 value);
  inline void add_sendmanualuinlst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      sendmanualuinlst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_sendmanualuinlst();

  // @@protoc_insertion_point(class_scope:vmsg.CSSendManualRsp)
 private:

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > sendmanualuinlst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSSendManualRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSBatchAddUinLst : public ::google::protobuf::MessageLite {
 public:
  CSBatchAddUinLst();
  virtual ~CSBatchAddUinLst();

  CSBatchAddUinLst(const CSBatchAddUinLst& from);

  inline CSBatchAddUinLst& operator=(const CSBatchAddUinLst& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSBatchAddUinLst& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSBatchAddUinLst* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSBatchAddUinLst* other);

  // implements Message ----------------------------------------------

  CSBatchAddUinLst* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSBatchAddUinLst& from);
  void MergeFrom(const CSBatchAddUinLst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 UinLst = 1;
  inline int uinlst_size() const;
  inline void clear_uinlst();
  static const int kUinLstFieldNumber = 1;
  inline ::google::protobuf::uint64 uinlst(int index) const;
  inline void set_uinlst(int index, ::google::protobuf::uint64 value);
  inline void add_uinlst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uinlst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uinlst();

  // @@protoc_insertion_point(class_scope:vmsg.CSBatchAddUinLst)
 private:

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uinlst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSBatchAddUinLst* default_instance_;
};
// -------------------------------------------------------------------

class CSInviteFriendFightRqst : public ::google::protobuf::MessageLite {
 public:
  CSInviteFriendFightRqst();
  virtual ~CSInviteFriendFightRqst();

  CSInviteFriendFightRqst(const CSInviteFriendFightRqst& from);

  inline CSInviteFriendFightRqst& operator=(const CSInviteFriendFightRqst& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSInviteFriendFightRqst& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSInviteFriendFightRqst* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSInviteFriendFightRqst* other);

  // implements Message ----------------------------------------------

  CSInviteFriendFightRqst* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSInviteFriendFightRqst& from);
  void MergeFrom(const CSInviteFriendFightRqst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 FriendUin = 1;
  inline bool has_frienduin() const;
  inline void clear_frienduin();
  static const int kFriendUinFieldNumber = 1;
  inline ::google::protobuf::uint64 frienduin() const;
  inline void set_frienduin(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSInviteFriendFightRqst)
 private:
  inline void set_has_frienduin();
  inline void clear_has_frienduin();

  ::google::protobuf::uint64 frienduin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSInviteFriendFightRqst* default_instance_;
};
// -------------------------------------------------------------------

class CSInviteFriendFightRsp : public ::google::protobuf::MessageLite {
 public:
  CSInviteFriendFightRsp();
  virtual ~CSInviteFriendFightRsp();

  CSInviteFriendFightRsp(const CSInviteFriendFightRsp& from);

  inline CSInviteFriendFightRsp& operator=(const CSInviteFriendFightRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSInviteFriendFightRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSInviteFriendFightRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSInviteFriendFightRsp* other);

  // implements Message ----------------------------------------------

  CSInviteFriendFightRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSInviteFriendFightRsp& from);
  void MergeFrom(const CSInviteFriendFightRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vmsg.CSPlayerDetailInfo FriendFightInfo = 1;
  inline bool has_friendfightinfo() const;
  inline void clear_friendfightinfo();
  static const int kFriendFightInfoFieldNumber = 1;
  inline const ::vmsg::CSPlayerDetailInfo& friendfightinfo() const;
  inline ::vmsg::CSPlayerDetailInfo* mutable_friendfightinfo();
  inline ::vmsg::CSPlayerDetailInfo* release_friendfightinfo();
  inline void set_allocated_friendfightinfo(::vmsg::CSPlayerDetailInfo* friendfightinfo);

  // @@protoc_insertion_point(class_scope:vmsg.CSInviteFriendFightRsp)
 private:
  inline void set_has_friendfightinfo();
  inline void clear_has_friendfightinfo();

  ::vmsg::CSPlayerDetailInfo* friendfightinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSInviteFriendFightRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSRecvManualRsp : public ::google::protobuf::MessageLite {
 public:
  CSRecvManualRsp();
  virtual ~CSRecvManualRsp();

  CSRecvManualRsp(const CSRecvManualRsp& from);

  inline CSRecvManualRsp& operator=(const CSRecvManualRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSRecvManualRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSRecvManualRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSRecvManualRsp* other);

  // implements Message ----------------------------------------------

  CSRecvManualRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSRecvManualRsp& from);
  void MergeFrom(const CSRecvManualRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 RecvManualCnt = 1;
  inline bool has_recvmanualcnt() const;
  inline void clear_recvmanualcnt();
  static const int kRecvManualCntFieldNumber = 1;
  inline ::google::protobuf::uint32 recvmanualcnt() const;
  inline void set_recvmanualcnt(::google::protobuf::uint32 value);

  // repeated uint64 RecvManualUinLst = 2;
  inline int recvmanualuinlst_size() const;
  inline void clear_recvmanualuinlst();
  static const int kRecvManualUinLstFieldNumber = 2;
  inline ::google::protobuf::uint64 recvmanualuinlst(int index) const;
  inline void set_recvmanualuinlst(int index, ::google::protobuf::uint64 value);
  inline void add_recvmanualuinlst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      recvmanualuinlst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_recvmanualuinlst();

  // @@protoc_insertion_point(class_scope:vmsg.CSRecvManualRsp)
 private:
  inline void set_has_recvmanualcnt();
  inline void clear_has_recvmanualcnt();

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > recvmanualuinlst_;
  ::google::protobuf::uint32 recvmanualcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSRecvManualRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRequest : public ::google::protobuf::MessageLite {
 public:
  CSFriendRequest();
  virtual ~CSFriendRequest();

  CSFriendRequest(const CSFriendRequest& from);

  inline CSFriendRequest& operator=(const CSFriendRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSFriendRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRequest* other);

  // implements Message ----------------------------------------------

  CSFriendRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRequest& from);
  void MergeFrom(const CSFriendRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string FriendAdd_Rqst = 1;
  inline bool has_friendadd_rqst() const;
  inline void clear_friendadd_rqst();
  static const int kFriendAddRqstFieldNumber = 1;
  inline const ::std::string& friendadd_rqst() const;
  inline void set_friendadd_rqst(const ::std::string& value);
  inline void set_friendadd_rqst(const char* value);
  inline void set_friendadd_rqst(const char* value, size_t size);
  inline ::std::string* mutable_friendadd_rqst();
  inline ::std::string* release_friendadd_rqst();
  inline void set_allocated_friendadd_rqst(::std::string* friendadd_rqst);

  // optional uint64 FriendDel_Rqst = 2;
  inline bool has_frienddel_rqst() const;
  inline void clear_frienddel_rqst();
  static const int kFriendDelRqstFieldNumber = 2;
  inline ::google::protobuf::uint64 frienddel_rqst() const;
  inline void set_frienddel_rqst(::google::protobuf::uint64 value);

  // optional uint64 AddBlack_Rqst = 3;
  inline bool has_addblack_rqst() const;
  inline void clear_addblack_rqst();
  static const int kAddBlackRqstFieldNumber = 3;
  inline ::google::protobuf::uint64 addblack_rqst() const;
  inline void set_addblack_rqst(::google::protobuf::uint64 value);

  // optional uint64 AdminAddFriendUin = 5;
  inline bool has_adminaddfrienduin() const;
  inline void clear_adminaddfrienduin();
  static const int kAdminAddFriendUinFieldNumber = 5;
  inline ::google::protobuf::uint64 adminaddfrienduin() const;
  inline void set_adminaddfrienduin(::google::protobuf::uint64 value);

  // optional uint64 AdminRefuseUin = 6;
  inline bool has_adminrefuseuin() const;
  inline void clear_adminrefuseuin();
  static const int kAdminRefuseUinFieldNumber = 6;
  inline ::google::protobuf::uint64 adminrefuseuin() const;
  inline void set_adminrefuseuin(::google::protobuf::uint64 value);

  // optional uint64 SendManualUin = 7;
  inline bool has_sendmanualuin() const;
  inline void clear_sendmanualuin();
  static const int kSendManualUinFieldNumber = 7;
  inline ::google::protobuf::uint64 sendmanualuin() const;
  inline void set_sendmanualuin(::google::protobuf::uint64 value);

  // optional uint64 RecvManualUin = 8;
  inline bool has_recvmanualuin() const;
  inline void clear_recvmanualuin();
  static const int kRecvManualUinFieldNumber = 8;
  inline ::google::protobuf::uint64 recvmanualuin() const;
  inline void set_recvmanualuin(::google::protobuf::uint64 value);

  // optional .vmsg.CSBatchAddUinLst BatchAdd_Rqst = 9;
  inline bool has_batchadd_rqst() const;
  inline void clear_batchadd_rqst();
  static const int kBatchAddRqstFieldNumber = 9;
  inline const ::vmsg::CSBatchAddUinLst& batchadd_rqst() const;
  inline ::vmsg::CSBatchAddUinLst* mutable_batchadd_rqst();
  inline ::vmsg::CSBatchAddUinLst* release_batchadd_rqst();
  inline void set_allocated_batchadd_rqst(::vmsg::CSBatchAddUinLst* batchadd_rqst);

  // optional .vmsg.CSInviteFriendFightRqst InviteFight_Rqst = 10;
  inline bool has_invitefight_rqst() const;
  inline void clear_invitefight_rqst();
  static const int kInviteFightRqstFieldNumber = 10;
  inline const ::vmsg::CSInviteFriendFightRqst& invitefight_rqst() const;
  inline ::vmsg::CSInviteFriendFightRqst* mutable_invitefight_rqst();
  inline ::vmsg::CSInviteFriendFightRqst* release_invitefight_rqst();
  inline void set_allocated_invitefight_rqst(::vmsg::CSInviteFriendFightRqst* invitefight_rqst);

  // @@protoc_insertion_point(class_scope:vmsg.CSFriendRequest)
 private:
  inline void set_has_friendadd_rqst();
  inline void clear_has_friendadd_rqst();
  inline void set_has_frienddel_rqst();
  inline void clear_has_frienddel_rqst();
  inline void set_has_addblack_rqst();
  inline void clear_has_addblack_rqst();
  inline void set_has_adminaddfrienduin();
  inline void clear_has_adminaddfrienduin();
  inline void set_has_adminrefuseuin();
  inline void clear_has_adminrefuseuin();
  inline void set_has_sendmanualuin();
  inline void clear_has_sendmanualuin();
  inline void set_has_recvmanualuin();
  inline void clear_has_recvmanualuin();
  inline void set_has_batchadd_rqst();
  inline void clear_has_batchadd_rqst();
  inline void set_has_invitefight_rqst();
  inline void clear_has_invitefight_rqst();

  ::std::string* friendadd_rqst_;
  ::google::protobuf::uint64 frienddel_rqst_;
  ::google::protobuf::uint64 addblack_rqst_;
  ::google::protobuf::uint64 adminaddfrienduin_;
  ::google::protobuf::uint64 adminrefuseuin_;
  ::google::protobuf::uint64 sendmanualuin_;
  ::google::protobuf::uint64 recvmanualuin_;
  ::vmsg::CSBatchAddUinLst* batchadd_rqst_;
  ::vmsg::CSInviteFriendFightRqst* invitefight_rqst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRequest* default_instance_;
};
// -------------------------------------------------------------------

class CSFriendRespond : public ::google::protobuf::MessageLite {
 public:
  CSFriendRespond();
  virtual ~CSFriendRespond();

  CSFriendRespond(const CSFriendRespond& from);

  inline CSFriendRespond& operator=(const CSFriendRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSFriendRespond& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSFriendRespond* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSFriendRespond* other);

  // implements Message ----------------------------------------------

  CSFriendRespond* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSFriendRespond& from);
  void MergeFrom(const CSFriendRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vmsg.CSFriendQueryRsp FriendQuery_Rsp = 1;
  inline bool has_friendquery_rsp() const;
  inline void clear_friendquery_rsp();
  static const int kFriendQueryRspFieldNumber = 1;
  inline const ::vmsg::CSFriendQueryRsp& friendquery_rsp() const;
  inline ::vmsg::CSFriendQueryRsp* mutable_friendquery_rsp();
  inline ::vmsg::CSFriendQueryRsp* release_friendquery_rsp();
  inline void set_allocated_friendquery_rsp(::vmsg::CSFriendQueryRsp* friendquery_rsp);

  // optional .vmsg.CSOneFriend AdminAdd_Rsp = 2;
  inline bool has_adminadd_rsp() const;
  inline void clear_adminadd_rsp();
  static const int kAdminAddRspFieldNumber = 2;
  inline const ::vmsg::CSOneFriend& adminadd_rsp() const;
  inline ::vmsg::CSOneFriend* mutable_adminadd_rsp();
  inline ::vmsg::CSOneFriend* release_adminadd_rsp();
  inline void set_allocated_adminadd_rsp(::vmsg::CSOneFriend* adminadd_rsp);

  // optional uint64 FriendDel_Rsp = 3;
  inline bool has_frienddel_rsp() const;
  inline void clear_frienddel_rsp();
  static const int kFriendDelRspFieldNumber = 3;
  inline ::google::protobuf::uint64 frienddel_rsp() const;
  inline void set_frienddel_rsp(::google::protobuf::uint64 value);

  // optional .vmsg.CSOneFriend AddBlack_Rsp = 4;
  inline bool has_addblack_rsp() const;
  inline void clear_addblack_rsp();
  static const int kAddBlackRspFieldNumber = 4;
  inline const ::vmsg::CSOneFriend& addblack_rsp() const;
  inline ::vmsg::CSOneFriend* mutable_addblack_rsp();
  inline ::vmsg::CSOneFriend* release_addblack_rsp();
  inline void set_allocated_addblack_rsp(::vmsg::CSOneFriend* addblack_rsp);

  // optional .vmsg.CSProposeFriendRsp ProposeFriend_Rsp = 5;
  inline bool has_proposefriend_rsp() const;
  inline void clear_proposefriend_rsp();
  static const int kProposeFriendRspFieldNumber = 5;
  inline const ::vmsg::CSProposeFriendRsp& proposefriend_rsp() const;
  inline ::vmsg::CSProposeFriendRsp* mutable_proposefriend_rsp();
  inline ::vmsg::CSProposeFriendRsp* release_proposefriend_rsp();
  inline void set_allocated_proposefriend_rsp(::vmsg::CSProposeFriendRsp* proposefriend_rsp);

  // optional uint64 AddReqUin_Rsp = 6;
  inline bool has_addrequin_rsp() const;
  inline void clear_addrequin_rsp();
  static const int kAddReqUinRspFieldNumber = 6;
  inline ::google::protobuf::uint64 addrequin_rsp() const;
  inline void set_addrequin_rsp(::google::protobuf::uint64 value);

  // optional uint64 AdminRefuseUin = 7;
  inline bool has_adminrefuseuin() const;
  inline void clear_adminrefuseuin();
  static const int kAdminRefuseUinFieldNumber = 7;
  inline ::google::protobuf::uint64 adminrefuseuin() const;
  inline void set_adminrefuseuin(::google::protobuf::uint64 value);

  // optional .vmsg.CSSendManualRsp SendManual_Rsp = 8;
  inline bool has_sendmanual_rsp() const;
  inline void clear_sendmanual_rsp();
  static const int kSendManualRspFieldNumber = 8;
  inline const ::vmsg::CSSendManualRsp& sendmanual_rsp() const;
  inline ::vmsg::CSSendManualRsp* mutable_sendmanual_rsp();
  inline ::vmsg::CSSendManualRsp* release_sendmanual_rsp();
  inline void set_allocated_sendmanual_rsp(::vmsg::CSSendManualRsp* sendmanual_rsp);

  // optional .vmsg.CSBatchAddUinLst BatchAdd_Rsp = 10;
  inline bool has_batchadd_rsp() const;
  inline void clear_batchadd_rsp();
  static const int kBatchAddRspFieldNumber = 10;
  inline const ::vmsg::CSBatchAddUinLst& batchadd_rsp() const;
  inline ::vmsg::CSBatchAddUinLst* mutable_batchadd_rsp();
  inline ::vmsg::CSBatchAddUinLst* release_batchadd_rsp();
  inline void set_allocated_batchadd_rsp(::vmsg::CSBatchAddUinLst* batchadd_rsp);

  // optional .vmsg.CSInviteFriendFightRsp InviteFriend_Rsp = 11;
  inline bool has_invitefriend_rsp() const;
  inline void clear_invitefriend_rsp();
  static const int kInviteFriendRspFieldNumber = 11;
  inline const ::vmsg::CSInviteFriendFightRsp& invitefriend_rsp() const;
  inline ::vmsg::CSInviteFriendFightRsp* mutable_invitefriend_rsp();
  inline ::vmsg::CSInviteFriendFightRsp* release_invitefriend_rsp();
  inline void set_allocated_invitefriend_rsp(::vmsg::CSInviteFriendFightRsp* invitefriend_rsp);

  // optional uint32 ReqNumNotify_Rsp = 12;
  inline bool has_reqnumnotify_rsp() const;
  inline void clear_reqnumnotify_rsp();
  static const int kReqNumNotifyRspFieldNumber = 12;
  inline ::google::protobuf::uint32 reqnumnotify_rsp() const;
  inline void set_reqnumnotify_rsp(::google::protobuf::uint32 value);

  // optional .vmsg.CSRecvManualRsp RecvManual_Rsp = 13;
  inline bool has_recvmanual_rsp() const;
  inline void clear_recvmanual_rsp();
  static const int kRecvManualRspFieldNumber = 13;
  inline const ::vmsg::CSRecvManualRsp& recvmanual_rsp() const;
  inline ::vmsg::CSRecvManualRsp* mutable_recvmanual_rsp();
  inline ::vmsg::CSRecvManualRsp* release_recvmanual_rsp();
  inline void set_allocated_recvmanual_rsp(::vmsg::CSRecvManualRsp* recvmanual_rsp);

  // @@protoc_insertion_point(class_scope:vmsg.CSFriendRespond)
 private:
  inline void set_has_friendquery_rsp();
  inline void clear_has_friendquery_rsp();
  inline void set_has_adminadd_rsp();
  inline void clear_has_adminadd_rsp();
  inline void set_has_frienddel_rsp();
  inline void clear_has_frienddel_rsp();
  inline void set_has_addblack_rsp();
  inline void clear_has_addblack_rsp();
  inline void set_has_proposefriend_rsp();
  inline void clear_has_proposefriend_rsp();
  inline void set_has_addrequin_rsp();
  inline void clear_has_addrequin_rsp();
  inline void set_has_adminrefuseuin();
  inline void clear_has_adminrefuseuin();
  inline void set_has_sendmanual_rsp();
  inline void clear_has_sendmanual_rsp();
  inline void set_has_batchadd_rsp();
  inline void clear_has_batchadd_rsp();
  inline void set_has_invitefriend_rsp();
  inline void clear_has_invitefriend_rsp();
  inline void set_has_reqnumnotify_rsp();
  inline void clear_has_reqnumnotify_rsp();
  inline void set_has_recvmanual_rsp();
  inline void clear_has_recvmanual_rsp();

  ::vmsg::CSFriendQueryRsp* friendquery_rsp_;
  ::vmsg::CSOneFriend* adminadd_rsp_;
  ::google::protobuf::uint64 frienddel_rsp_;
  ::vmsg::CSOneFriend* addblack_rsp_;
  ::vmsg::CSProposeFriendRsp* proposefriend_rsp_;
  ::google::protobuf::uint64 addrequin_rsp_;
  ::google::protobuf::uint64 adminrefuseuin_;
  ::vmsg::CSSendManualRsp* sendmanual_rsp_;
  ::vmsg::CSBatchAddUinLst* batchadd_rsp_;
  ::vmsg::CSInviteFriendFightRsp* invitefriend_rsp_;
  ::vmsg::CSRecvManualRsp* recvmanual_rsp_;
  ::google::protobuf::uint32 reqnumnotify_rsp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSFriendMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSFriendMsg_2eproto();
  friend void protobuf_ShutdownFile_CSFriendMsg_2eproto();

  void InitAsDefaultInstance();
  static CSFriendRespond* default_instance_;
};
// ===================================================================


// ===================================================================

// CSOneFriend

// required uint64 Uin = 1;
inline bool CSOneFriend::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSOneFriend::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSOneFriend::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSOneFriend::clear_uin() {
  uin_ = GOOGLE_ULONGLONG(0);
  clear_has_uin();
}
inline ::google::protobuf::uint64 CSOneFriend::uin() const {
  return uin_;
}
inline void CSOneFriend::set_uin(::google::protobuf::uint64 value) {
  set_has_uin();
  uin_ = value;
}

// required string Name = 2;
inline bool CSOneFriend::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSOneFriend::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSOneFriend::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSOneFriend::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSOneFriend::name() const {
  return *name_;
}
inline void CSOneFriend::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSOneFriend::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSOneFriend::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSOneFriend::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSOneFriend::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSOneFriend::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 FightPower = 3;
inline bool CSOneFriend::has_fightpower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSOneFriend::set_has_fightpower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSOneFriend::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSOneFriend::clear_fightpower() {
  fightpower_ = 0u;
  clear_has_fightpower();
}
inline ::google::protobuf::uint32 CSOneFriend::fightpower() const {
  return fightpower_;
}
inline void CSOneFriend::set_fightpower(::google::protobuf::uint32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// required uint32 IsOnline = 4;
inline bool CSOneFriend::has_isonline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSOneFriend::set_has_isonline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSOneFriend::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSOneFriend::clear_isonline() {
  isonline_ = 0u;
  clear_has_isonline();
}
inline ::google::protobuf::uint32 CSOneFriend::isonline() const {
  return isonline_;
}
inline void CSOneFriend::set_isonline(::google::protobuf::uint32 value) {
  set_has_isonline();
  isonline_ = value;
}

// required uint32 Level = 6;
inline bool CSOneFriend::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSOneFriend::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSOneFriend::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSOneFriend::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CSOneFriend::level() const {
  return level_;
}
inline void CSOneFriend::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 InviteCostCoin = 7;
inline bool CSOneFriend::has_invitecostcoin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSOneFriend::set_has_invitecostcoin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSOneFriend::clear_has_invitecostcoin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSOneFriend::clear_invitecostcoin() {
  invitecostcoin_ = 0u;
  clear_has_invitecostcoin();
}
inline ::google::protobuf::uint32 CSOneFriend::invitecostcoin() const {
  return invitecostcoin_;
}
inline void CSOneFriend::set_invitecostcoin(::google::protobuf::uint32 value) {
  set_has_invitecostcoin();
  invitecostcoin_ = value;
}

// optional uint32 FightCnt = 8;
inline bool CSOneFriend::has_fightcnt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSOneFriend::set_has_fightcnt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSOneFriend::clear_has_fightcnt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSOneFriend::clear_fightcnt() {
  fightcnt_ = 0u;
  clear_has_fightcnt();
}
inline ::google::protobuf::uint32 CSOneFriend::fightcnt() const {
  return fightcnt_;
}
inline void CSOneFriend::set_fightcnt(::google::protobuf::uint32 value) {
  set_has_fightcnt();
  fightcnt_ = value;
}

// optional uint32 ShowID = 9;
inline bool CSOneFriend::has_showid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSOneFriend::set_has_showid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSOneFriend::clear_has_showid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSOneFriend::clear_showid() {
  showid_ = 0u;
  clear_has_showid();
}
inline ::google::protobuf::uint32 CSOneFriend::showid() const {
  return showid_;
}
inline void CSOneFriend::set_showid(::google::protobuf::uint32 value) {
  set_has_showid();
  showid_ = value;
}

// -------------------------------------------------------------------

// CSFriendQueryRsp

// repeated .vmsg.CSOneFriend FriendLst = 1;
inline int CSFriendQueryRsp::friendlst_size() const {
  return friendlst_.size();
}
inline void CSFriendQueryRsp::clear_friendlst() {
  friendlst_.Clear();
}
inline const ::vmsg::CSOneFriend& CSFriendQueryRsp::friendlst(int index) const {
  return friendlst_.Get(index);
}
inline ::vmsg::CSOneFriend* CSFriendQueryRsp::mutable_friendlst(int index) {
  return friendlst_.Mutable(index);
}
inline ::vmsg::CSOneFriend* CSFriendQueryRsp::add_friendlst() {
  return friendlst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
CSFriendQueryRsp::friendlst() const {
  return friendlst_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
CSFriendQueryRsp::mutable_friendlst() {
  return &friendlst_;
}

// repeated .vmsg.CSOneFriend BlackLst = 2;
inline int CSFriendQueryRsp::blacklst_size() const {
  return blacklst_.size();
}
inline void CSFriendQueryRsp::clear_blacklst() {
  blacklst_.Clear();
}
inline const ::vmsg::CSOneFriend& CSFriendQueryRsp::blacklst(int index) const {
  return blacklst_.Get(index);
}
inline ::vmsg::CSOneFriend* CSFriendQueryRsp::mutable_blacklst(int index) {
  return blacklst_.Mutable(index);
}
inline ::vmsg::CSOneFriend* CSFriendQueryRsp::add_blacklst() {
  return blacklst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
CSFriendQueryRsp::blacklst() const {
  return blacklst_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
CSFriendQueryRsp::mutable_blacklst() {
  return &blacklst_;
}

// repeated .vmsg.CSOneFriend AdminReqLst = 3;
inline int CSFriendQueryRsp::adminreqlst_size() const {
  return adminreqlst_.size();
}
inline void CSFriendQueryRsp::clear_adminreqlst() {
  adminreqlst_.Clear();
}
inline const ::vmsg::CSOneFriend& CSFriendQueryRsp::adminreqlst(int index) const {
  return adminreqlst_.Get(index);
}
inline ::vmsg::CSOneFriend* CSFriendQueryRsp::mutable_adminreqlst(int index) {
  return adminreqlst_.Mutable(index);
}
inline ::vmsg::CSOneFriend* CSFriendQueryRsp::add_adminreqlst() {
  return adminreqlst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
CSFriendQueryRsp::adminreqlst() const {
  return adminreqlst_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
CSFriendQueryRsp::mutable_adminreqlst() {
  return &adminreqlst_;
}

// repeated uint64 SendManualUinLst = 4;
inline int CSFriendQueryRsp::sendmanualuinlst_size() const {
  return sendmanualuinlst_.size();
}
inline void CSFriendQueryRsp::clear_sendmanualuinlst() {
  sendmanualuinlst_.Clear();
}
inline ::google::protobuf::uint64 CSFriendQueryRsp::sendmanualuinlst(int index) const {
  return sendmanualuinlst_.Get(index);
}
inline void CSFriendQueryRsp::set_sendmanualuinlst(int index, ::google::protobuf::uint64 value) {
  sendmanualuinlst_.Set(index, value);
}
inline void CSFriendQueryRsp::add_sendmanualuinlst(::google::protobuf::uint64 value) {
  sendmanualuinlst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSFriendQueryRsp::sendmanualuinlst() const {
  return sendmanualuinlst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSFriendQueryRsp::mutable_sendmanualuinlst() {
  return &sendmanualuinlst_;
}

// repeated uint64 RecvManualUinLst = 5;
inline int CSFriendQueryRsp::recvmanualuinlst_size() const {
  return recvmanualuinlst_.size();
}
inline void CSFriendQueryRsp::clear_recvmanualuinlst() {
  recvmanualuinlst_.Clear();
}
inline ::google::protobuf::uint64 CSFriendQueryRsp::recvmanualuinlst(int index) const {
  return recvmanualuinlst_.Get(index);
}
inline void CSFriendQueryRsp::set_recvmanualuinlst(int index, ::google::protobuf::uint64 value) {
  recvmanualuinlst_.Set(index, value);
}
inline void CSFriendQueryRsp::add_recvmanualuinlst(::google::protobuf::uint64 value) {
  recvmanualuinlst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSFriendQueryRsp::recvmanualuinlst() const {
  return recvmanualuinlst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSFriendQueryRsp::mutable_recvmanualuinlst() {
  return &recvmanualuinlst_;
}

// required uint32 RecvManualCnt = 6;
inline bool CSFriendQueryRsp::has_recvmanualcnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSFriendQueryRsp::set_has_recvmanualcnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSFriendQueryRsp::clear_has_recvmanualcnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSFriendQueryRsp::clear_recvmanualcnt() {
  recvmanualcnt_ = 0u;
  clear_has_recvmanualcnt();
}
inline ::google::protobuf::uint32 CSFriendQueryRsp::recvmanualcnt() const {
  return recvmanualcnt_;
}
inline void CSFriendQueryRsp::set_recvmanualcnt(::google::protobuf::uint32 value) {
  set_has_recvmanualcnt();
  recvmanualcnt_ = value;
}

// -------------------------------------------------------------------

// CSProposeFriendRsp

// repeated .vmsg.CSOneFriend FriendLst = 1;
inline int CSProposeFriendRsp::friendlst_size() const {
  return friendlst_.size();
}
inline void CSProposeFriendRsp::clear_friendlst() {
  friendlst_.Clear();
}
inline const ::vmsg::CSOneFriend& CSProposeFriendRsp::friendlst(int index) const {
  return friendlst_.Get(index);
}
inline ::vmsg::CSOneFriend* CSProposeFriendRsp::mutable_friendlst(int index) {
  return friendlst_.Mutable(index);
}
inline ::vmsg::CSOneFriend* CSProposeFriendRsp::add_friendlst() {
  return friendlst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >&
CSProposeFriendRsp::friendlst() const {
  return friendlst_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSOneFriend >*
CSProposeFriendRsp::mutable_friendlst() {
  return &friendlst_;
}

// -------------------------------------------------------------------

// CSSendManualRsp

// repeated uint64 SendManualUinLst = 1;
inline int CSSendManualRsp::sendmanualuinlst_size() const {
  return sendmanualuinlst_.size();
}
inline void CSSendManualRsp::clear_sendmanualuinlst() {
  sendmanualuinlst_.Clear();
}
inline ::google::protobuf::uint64 CSSendManualRsp::sendmanualuinlst(int index) const {
  return sendmanualuinlst_.Get(index);
}
inline void CSSendManualRsp::set_sendmanualuinlst(int index, ::google::protobuf::uint64 value) {
  sendmanualuinlst_.Set(index, value);
}
inline void CSSendManualRsp::add_sendmanualuinlst(::google::protobuf::uint64 value) {
  sendmanualuinlst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSSendManualRsp::sendmanualuinlst() const {
  return sendmanualuinlst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSSendManualRsp::mutable_sendmanualuinlst() {
  return &sendmanualuinlst_;
}

// -------------------------------------------------------------------

// CSBatchAddUinLst

// repeated uint64 UinLst = 1;
inline int CSBatchAddUinLst::uinlst_size() const {
  return uinlst_.size();
}
inline void CSBatchAddUinLst::clear_uinlst() {
  uinlst_.Clear();
}
inline ::google::protobuf::uint64 CSBatchAddUinLst::uinlst(int index) const {
  return uinlst_.Get(index);
}
inline void CSBatchAddUinLst::set_uinlst(int index, ::google::protobuf::uint64 value) {
  uinlst_.Set(index, value);
}
inline void CSBatchAddUinLst::add_uinlst(::google::protobuf::uint64 value) {
  uinlst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSBatchAddUinLst::uinlst() const {
  return uinlst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSBatchAddUinLst::mutable_uinlst() {
  return &uinlst_;
}

// -------------------------------------------------------------------

// CSInviteFriendFightRqst

// required uint64 FriendUin = 1;
inline bool CSInviteFriendFightRqst::has_frienduin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSInviteFriendFightRqst::set_has_frienduin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSInviteFriendFightRqst::clear_has_frienduin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSInviteFriendFightRqst::clear_frienduin() {
  frienduin_ = GOOGLE_ULONGLONG(0);
  clear_has_frienduin();
}
inline ::google::protobuf::uint64 CSInviteFriendFightRqst::frienduin() const {
  return frienduin_;
}
inline void CSInviteFriendFightRqst::set_frienduin(::google::protobuf::uint64 value) {
  set_has_frienduin();
  frienduin_ = value;
}

// -------------------------------------------------------------------

// CSInviteFriendFightRsp

// required .vmsg.CSPlayerDetailInfo FriendFightInfo = 1;
inline bool CSInviteFriendFightRsp::has_friendfightinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSInviteFriendFightRsp::set_has_friendfightinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSInviteFriendFightRsp::clear_has_friendfightinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSInviteFriendFightRsp::clear_friendfightinfo() {
  if (friendfightinfo_ != NULL) friendfightinfo_->::vmsg::CSPlayerDetailInfo::Clear();
  clear_has_friendfightinfo();
}
inline const ::vmsg::CSPlayerDetailInfo& CSInviteFriendFightRsp::friendfightinfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendfightinfo_ != NULL ? *friendfightinfo_ : *default_instance().friendfightinfo_;
#else
  return friendfightinfo_ != NULL ? *friendfightinfo_ : *default_instance_->friendfightinfo_;
#endif
}
inline ::vmsg::CSPlayerDetailInfo* CSInviteFriendFightRsp::mutable_friendfightinfo() {
  set_has_friendfightinfo();
  if (friendfightinfo_ == NULL) friendfightinfo_ = new ::vmsg::CSPlayerDetailInfo;
  return friendfightinfo_;
}
inline ::vmsg::CSPlayerDetailInfo* CSInviteFriendFightRsp::release_friendfightinfo() {
  clear_has_friendfightinfo();
  ::vmsg::CSPlayerDetailInfo* temp = friendfightinfo_;
  friendfightinfo_ = NULL;
  return temp;
}
inline void CSInviteFriendFightRsp::set_allocated_friendfightinfo(::vmsg::CSPlayerDetailInfo* friendfightinfo) {
  delete friendfightinfo_;
  friendfightinfo_ = friendfightinfo;
  if (friendfightinfo) {
    set_has_friendfightinfo();
  } else {
    clear_has_friendfightinfo();
  }
}

// -------------------------------------------------------------------

// CSRecvManualRsp

// required uint32 RecvManualCnt = 1;
inline bool CSRecvManualRsp::has_recvmanualcnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSRecvManualRsp::set_has_recvmanualcnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSRecvManualRsp::clear_has_recvmanualcnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSRecvManualRsp::clear_recvmanualcnt() {
  recvmanualcnt_ = 0u;
  clear_has_recvmanualcnt();
}
inline ::google::protobuf::uint32 CSRecvManualRsp::recvmanualcnt() const {
  return recvmanualcnt_;
}
inline void CSRecvManualRsp::set_recvmanualcnt(::google::protobuf::uint32 value) {
  set_has_recvmanualcnt();
  recvmanualcnt_ = value;
}

// repeated uint64 RecvManualUinLst = 2;
inline int CSRecvManualRsp::recvmanualuinlst_size() const {
  return recvmanualuinlst_.size();
}
inline void CSRecvManualRsp::clear_recvmanualuinlst() {
  recvmanualuinlst_.Clear();
}
inline ::google::protobuf::uint64 CSRecvManualRsp::recvmanualuinlst(int index) const {
  return recvmanualuinlst_.Get(index);
}
inline void CSRecvManualRsp::set_recvmanualuinlst(int index, ::google::protobuf::uint64 value) {
  recvmanualuinlst_.Set(index, value);
}
inline void CSRecvManualRsp::add_recvmanualuinlst(::google::protobuf::uint64 value) {
  recvmanualuinlst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
CSRecvManualRsp::recvmanualuinlst() const {
  return recvmanualuinlst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
CSRecvManualRsp::mutable_recvmanualuinlst() {
  return &recvmanualuinlst_;
}

// -------------------------------------------------------------------

// CSFriendRequest

// optional string FriendAdd_Rqst = 1;
inline bool CSFriendRequest::has_friendadd_rqst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRequest::set_has_friendadd_rqst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRequest::clear_has_friendadd_rqst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRequest::clear_friendadd_rqst() {
  if (friendadd_rqst_ != &::google::protobuf::internal::kEmptyString) {
    friendadd_rqst_->clear();
  }
  clear_has_friendadd_rqst();
}
inline const ::std::string& CSFriendRequest::friendadd_rqst() const {
  return *friendadd_rqst_;
}
inline void CSFriendRequest::set_friendadd_rqst(const ::std::string& value) {
  set_has_friendadd_rqst();
  if (friendadd_rqst_ == &::google::protobuf::internal::kEmptyString) {
    friendadd_rqst_ = new ::std::string;
  }
  friendadd_rqst_->assign(value);
}
inline void CSFriendRequest::set_friendadd_rqst(const char* value) {
  set_has_friendadd_rqst();
  if (friendadd_rqst_ == &::google::protobuf::internal::kEmptyString) {
    friendadd_rqst_ = new ::std::string;
  }
  friendadd_rqst_->assign(value);
}
inline void CSFriendRequest::set_friendadd_rqst(const char* value, size_t size) {
  set_has_friendadd_rqst();
  if (friendadd_rqst_ == &::google::protobuf::internal::kEmptyString) {
    friendadd_rqst_ = new ::std::string;
  }
  friendadd_rqst_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSFriendRequest::mutable_friendadd_rqst() {
  set_has_friendadd_rqst();
  if (friendadd_rqst_ == &::google::protobuf::internal::kEmptyString) {
    friendadd_rqst_ = new ::std::string;
  }
  return friendadd_rqst_;
}
inline ::std::string* CSFriendRequest::release_friendadd_rqst() {
  clear_has_friendadd_rqst();
  if (friendadd_rqst_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = friendadd_rqst_;
    friendadd_rqst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSFriendRequest::set_allocated_friendadd_rqst(::std::string* friendadd_rqst) {
  if (friendadd_rqst_ != &::google::protobuf::internal::kEmptyString) {
    delete friendadd_rqst_;
  }
  if (friendadd_rqst) {
    set_has_friendadd_rqst();
    friendadd_rqst_ = friendadd_rqst;
  } else {
    clear_has_friendadd_rqst();
    friendadd_rqst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 FriendDel_Rqst = 2;
inline bool CSFriendRequest::has_frienddel_rqst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendRequest::set_has_frienddel_rqst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendRequest::clear_has_frienddel_rqst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendRequest::clear_frienddel_rqst() {
  frienddel_rqst_ = GOOGLE_ULONGLONG(0);
  clear_has_frienddel_rqst();
}
inline ::google::protobuf::uint64 CSFriendRequest::frienddel_rqst() const {
  return frienddel_rqst_;
}
inline void CSFriendRequest::set_frienddel_rqst(::google::protobuf::uint64 value) {
  set_has_frienddel_rqst();
  frienddel_rqst_ = value;
}

// optional uint64 AddBlack_Rqst = 3;
inline bool CSFriendRequest::has_addblack_rqst() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSFriendRequest::set_has_addblack_rqst() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSFriendRequest::clear_has_addblack_rqst() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSFriendRequest::clear_addblack_rqst() {
  addblack_rqst_ = GOOGLE_ULONGLONG(0);
  clear_has_addblack_rqst();
}
inline ::google::protobuf::uint64 CSFriendRequest::addblack_rqst() const {
  return addblack_rqst_;
}
inline void CSFriendRequest::set_addblack_rqst(::google::protobuf::uint64 value) {
  set_has_addblack_rqst();
  addblack_rqst_ = value;
}

// optional uint64 AdminAddFriendUin = 5;
inline bool CSFriendRequest::has_adminaddfrienduin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSFriendRequest::set_has_adminaddfrienduin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSFriendRequest::clear_has_adminaddfrienduin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSFriendRequest::clear_adminaddfrienduin() {
  adminaddfrienduin_ = GOOGLE_ULONGLONG(0);
  clear_has_adminaddfrienduin();
}
inline ::google::protobuf::uint64 CSFriendRequest::adminaddfrienduin() const {
  return adminaddfrienduin_;
}
inline void CSFriendRequest::set_adminaddfrienduin(::google::protobuf::uint64 value) {
  set_has_adminaddfrienduin();
  adminaddfrienduin_ = value;
}

// optional uint64 AdminRefuseUin = 6;
inline bool CSFriendRequest::has_adminrefuseuin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSFriendRequest::set_has_adminrefuseuin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSFriendRequest::clear_has_adminrefuseuin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSFriendRequest::clear_adminrefuseuin() {
  adminrefuseuin_ = GOOGLE_ULONGLONG(0);
  clear_has_adminrefuseuin();
}
inline ::google::protobuf::uint64 CSFriendRequest::adminrefuseuin() const {
  return adminrefuseuin_;
}
inline void CSFriendRequest::set_adminrefuseuin(::google::protobuf::uint64 value) {
  set_has_adminrefuseuin();
  adminrefuseuin_ = value;
}

// optional uint64 SendManualUin = 7;
inline bool CSFriendRequest::has_sendmanualuin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSFriendRequest::set_has_sendmanualuin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSFriendRequest::clear_has_sendmanualuin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSFriendRequest::clear_sendmanualuin() {
  sendmanualuin_ = GOOGLE_ULONGLONG(0);
  clear_has_sendmanualuin();
}
inline ::google::protobuf::uint64 CSFriendRequest::sendmanualuin() const {
  return sendmanualuin_;
}
inline void CSFriendRequest::set_sendmanualuin(::google::protobuf::uint64 value) {
  set_has_sendmanualuin();
  sendmanualuin_ = value;
}

// optional uint64 RecvManualUin = 8;
inline bool CSFriendRequest::has_recvmanualuin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSFriendRequest::set_has_recvmanualuin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSFriendRequest::clear_has_recvmanualuin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSFriendRequest::clear_recvmanualuin() {
  recvmanualuin_ = GOOGLE_ULONGLONG(0);
  clear_has_recvmanualuin();
}
inline ::google::protobuf::uint64 CSFriendRequest::recvmanualuin() const {
  return recvmanualuin_;
}
inline void CSFriendRequest::set_recvmanualuin(::google::protobuf::uint64 value) {
  set_has_recvmanualuin();
  recvmanualuin_ = value;
}

// optional .vmsg.CSBatchAddUinLst BatchAdd_Rqst = 9;
inline bool CSFriendRequest::has_batchadd_rqst() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSFriendRequest::set_has_batchadd_rqst() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSFriendRequest::clear_has_batchadd_rqst() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSFriendRequest::clear_batchadd_rqst() {
  if (batchadd_rqst_ != NULL) batchadd_rqst_->::vmsg::CSBatchAddUinLst::Clear();
  clear_has_batchadd_rqst();
}
inline const ::vmsg::CSBatchAddUinLst& CSFriendRequest::batchadd_rqst() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return batchadd_rqst_ != NULL ? *batchadd_rqst_ : *default_instance().batchadd_rqst_;
#else
  return batchadd_rqst_ != NULL ? *batchadd_rqst_ : *default_instance_->batchadd_rqst_;
#endif
}
inline ::vmsg::CSBatchAddUinLst* CSFriendRequest::mutable_batchadd_rqst() {
  set_has_batchadd_rqst();
  if (batchadd_rqst_ == NULL) batchadd_rqst_ = new ::vmsg::CSBatchAddUinLst;
  return batchadd_rqst_;
}
inline ::vmsg::CSBatchAddUinLst* CSFriendRequest::release_batchadd_rqst() {
  clear_has_batchadd_rqst();
  ::vmsg::CSBatchAddUinLst* temp = batchadd_rqst_;
  batchadd_rqst_ = NULL;
  return temp;
}
inline void CSFriendRequest::set_allocated_batchadd_rqst(::vmsg::CSBatchAddUinLst* batchadd_rqst) {
  delete batchadd_rqst_;
  batchadd_rqst_ = batchadd_rqst;
  if (batchadd_rqst) {
    set_has_batchadd_rqst();
  } else {
    clear_has_batchadd_rqst();
  }
}

// optional .vmsg.CSInviteFriendFightRqst InviteFight_Rqst = 10;
inline bool CSFriendRequest::has_invitefight_rqst() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSFriendRequest::set_has_invitefight_rqst() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSFriendRequest::clear_has_invitefight_rqst() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSFriendRequest::clear_invitefight_rqst() {
  if (invitefight_rqst_ != NULL) invitefight_rqst_->::vmsg::CSInviteFriendFightRqst::Clear();
  clear_has_invitefight_rqst();
}
inline const ::vmsg::CSInviteFriendFightRqst& CSFriendRequest::invitefight_rqst() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return invitefight_rqst_ != NULL ? *invitefight_rqst_ : *default_instance().invitefight_rqst_;
#else
  return invitefight_rqst_ != NULL ? *invitefight_rqst_ : *default_instance_->invitefight_rqst_;
#endif
}
inline ::vmsg::CSInviteFriendFightRqst* CSFriendRequest::mutable_invitefight_rqst() {
  set_has_invitefight_rqst();
  if (invitefight_rqst_ == NULL) invitefight_rqst_ = new ::vmsg::CSInviteFriendFightRqst;
  return invitefight_rqst_;
}
inline ::vmsg::CSInviteFriendFightRqst* CSFriendRequest::release_invitefight_rqst() {
  clear_has_invitefight_rqst();
  ::vmsg::CSInviteFriendFightRqst* temp = invitefight_rqst_;
  invitefight_rqst_ = NULL;
  return temp;
}
inline void CSFriendRequest::set_allocated_invitefight_rqst(::vmsg::CSInviteFriendFightRqst* invitefight_rqst) {
  delete invitefight_rqst_;
  invitefight_rqst_ = invitefight_rqst;
  if (invitefight_rqst) {
    set_has_invitefight_rqst();
  } else {
    clear_has_invitefight_rqst();
  }
}

// -------------------------------------------------------------------

// CSFriendRespond

// optional .vmsg.CSFriendQueryRsp FriendQuery_Rsp = 1;
inline bool CSFriendRespond::has_friendquery_rsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSFriendRespond::set_has_friendquery_rsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSFriendRespond::clear_has_friendquery_rsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSFriendRespond::clear_friendquery_rsp() {
  if (friendquery_rsp_ != NULL) friendquery_rsp_->::vmsg::CSFriendQueryRsp::Clear();
  clear_has_friendquery_rsp();
}
inline const ::vmsg::CSFriendQueryRsp& CSFriendRespond::friendquery_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return friendquery_rsp_ != NULL ? *friendquery_rsp_ : *default_instance().friendquery_rsp_;
#else
  return friendquery_rsp_ != NULL ? *friendquery_rsp_ : *default_instance_->friendquery_rsp_;
#endif
}
inline ::vmsg::CSFriendQueryRsp* CSFriendRespond::mutable_friendquery_rsp() {
  set_has_friendquery_rsp();
  if (friendquery_rsp_ == NULL) friendquery_rsp_ = new ::vmsg::CSFriendQueryRsp;
  return friendquery_rsp_;
}
inline ::vmsg::CSFriendQueryRsp* CSFriendRespond::release_friendquery_rsp() {
  clear_has_friendquery_rsp();
  ::vmsg::CSFriendQueryRsp* temp = friendquery_rsp_;
  friendquery_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_friendquery_rsp(::vmsg::CSFriendQueryRsp* friendquery_rsp) {
  delete friendquery_rsp_;
  friendquery_rsp_ = friendquery_rsp;
  if (friendquery_rsp) {
    set_has_friendquery_rsp();
  } else {
    clear_has_friendquery_rsp();
  }
}

// optional .vmsg.CSOneFriend AdminAdd_Rsp = 2;
inline bool CSFriendRespond::has_adminadd_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSFriendRespond::set_has_adminadd_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSFriendRespond::clear_has_adminadd_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSFriendRespond::clear_adminadd_rsp() {
  if (adminadd_rsp_ != NULL) adminadd_rsp_->::vmsg::CSOneFriend::Clear();
  clear_has_adminadd_rsp();
}
inline const ::vmsg::CSOneFriend& CSFriendRespond::adminadd_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return adminadd_rsp_ != NULL ? *adminadd_rsp_ : *default_instance().adminadd_rsp_;
#else
  return adminadd_rsp_ != NULL ? *adminadd_rsp_ : *default_instance_->adminadd_rsp_;
#endif
}
inline ::vmsg::CSOneFriend* CSFriendRespond::mutable_adminadd_rsp() {
  set_has_adminadd_rsp();
  if (adminadd_rsp_ == NULL) adminadd_rsp_ = new ::vmsg::CSOneFriend;
  return adminadd_rsp_;
}
inline ::vmsg::CSOneFriend* CSFriendRespond::release_adminadd_rsp() {
  clear_has_adminadd_rsp();
  ::vmsg::CSOneFriend* temp = adminadd_rsp_;
  adminadd_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_adminadd_rsp(::vmsg::CSOneFriend* adminadd_rsp) {
  delete adminadd_rsp_;
  adminadd_rsp_ = adminadd_rsp;
  if (adminadd_rsp) {
    set_has_adminadd_rsp();
  } else {
    clear_has_adminadd_rsp();
  }
}

// optional uint64 FriendDel_Rsp = 3;
inline bool CSFriendRespond::has_frienddel_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSFriendRespond::set_has_frienddel_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSFriendRespond::clear_has_frienddel_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSFriendRespond::clear_frienddel_rsp() {
  frienddel_rsp_ = GOOGLE_ULONGLONG(0);
  clear_has_frienddel_rsp();
}
inline ::google::protobuf::uint64 CSFriendRespond::frienddel_rsp() const {
  return frienddel_rsp_;
}
inline void CSFriendRespond::set_frienddel_rsp(::google::protobuf::uint64 value) {
  set_has_frienddel_rsp();
  frienddel_rsp_ = value;
}

// optional .vmsg.CSOneFriend AddBlack_Rsp = 4;
inline bool CSFriendRespond::has_addblack_rsp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSFriendRespond::set_has_addblack_rsp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSFriendRespond::clear_has_addblack_rsp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSFriendRespond::clear_addblack_rsp() {
  if (addblack_rsp_ != NULL) addblack_rsp_->::vmsg::CSOneFriend::Clear();
  clear_has_addblack_rsp();
}
inline const ::vmsg::CSOneFriend& CSFriendRespond::addblack_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return addblack_rsp_ != NULL ? *addblack_rsp_ : *default_instance().addblack_rsp_;
#else
  return addblack_rsp_ != NULL ? *addblack_rsp_ : *default_instance_->addblack_rsp_;
#endif
}
inline ::vmsg::CSOneFriend* CSFriendRespond::mutable_addblack_rsp() {
  set_has_addblack_rsp();
  if (addblack_rsp_ == NULL) addblack_rsp_ = new ::vmsg::CSOneFriend;
  return addblack_rsp_;
}
inline ::vmsg::CSOneFriend* CSFriendRespond::release_addblack_rsp() {
  clear_has_addblack_rsp();
  ::vmsg::CSOneFriend* temp = addblack_rsp_;
  addblack_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_addblack_rsp(::vmsg::CSOneFriend* addblack_rsp) {
  delete addblack_rsp_;
  addblack_rsp_ = addblack_rsp;
  if (addblack_rsp) {
    set_has_addblack_rsp();
  } else {
    clear_has_addblack_rsp();
  }
}

// optional .vmsg.CSProposeFriendRsp ProposeFriend_Rsp = 5;
inline bool CSFriendRespond::has_proposefriend_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSFriendRespond::set_has_proposefriend_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSFriendRespond::clear_has_proposefriend_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSFriendRespond::clear_proposefriend_rsp() {
  if (proposefriend_rsp_ != NULL) proposefriend_rsp_->::vmsg::CSProposeFriendRsp::Clear();
  clear_has_proposefriend_rsp();
}
inline const ::vmsg::CSProposeFriendRsp& CSFriendRespond::proposefriend_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return proposefriend_rsp_ != NULL ? *proposefriend_rsp_ : *default_instance().proposefriend_rsp_;
#else
  return proposefriend_rsp_ != NULL ? *proposefriend_rsp_ : *default_instance_->proposefriend_rsp_;
#endif
}
inline ::vmsg::CSProposeFriendRsp* CSFriendRespond::mutable_proposefriend_rsp() {
  set_has_proposefriend_rsp();
  if (proposefriend_rsp_ == NULL) proposefriend_rsp_ = new ::vmsg::CSProposeFriendRsp;
  return proposefriend_rsp_;
}
inline ::vmsg::CSProposeFriendRsp* CSFriendRespond::release_proposefriend_rsp() {
  clear_has_proposefriend_rsp();
  ::vmsg::CSProposeFriendRsp* temp = proposefriend_rsp_;
  proposefriend_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_proposefriend_rsp(::vmsg::CSProposeFriendRsp* proposefriend_rsp) {
  delete proposefriend_rsp_;
  proposefriend_rsp_ = proposefriend_rsp;
  if (proposefriend_rsp) {
    set_has_proposefriend_rsp();
  } else {
    clear_has_proposefriend_rsp();
  }
}

// optional uint64 AddReqUin_Rsp = 6;
inline bool CSFriendRespond::has_addrequin_rsp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSFriendRespond::set_has_addrequin_rsp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSFriendRespond::clear_has_addrequin_rsp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSFriendRespond::clear_addrequin_rsp() {
  addrequin_rsp_ = GOOGLE_ULONGLONG(0);
  clear_has_addrequin_rsp();
}
inline ::google::protobuf::uint64 CSFriendRespond::addrequin_rsp() const {
  return addrequin_rsp_;
}
inline void CSFriendRespond::set_addrequin_rsp(::google::protobuf::uint64 value) {
  set_has_addrequin_rsp();
  addrequin_rsp_ = value;
}

// optional uint64 AdminRefuseUin = 7;
inline bool CSFriendRespond::has_adminrefuseuin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSFriendRespond::set_has_adminrefuseuin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSFriendRespond::clear_has_adminrefuseuin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSFriendRespond::clear_adminrefuseuin() {
  adminrefuseuin_ = GOOGLE_ULONGLONG(0);
  clear_has_adminrefuseuin();
}
inline ::google::protobuf::uint64 CSFriendRespond::adminrefuseuin() const {
  return adminrefuseuin_;
}
inline void CSFriendRespond::set_adminrefuseuin(::google::protobuf::uint64 value) {
  set_has_adminrefuseuin();
  adminrefuseuin_ = value;
}

// optional .vmsg.CSSendManualRsp SendManual_Rsp = 8;
inline bool CSFriendRespond::has_sendmanual_rsp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSFriendRespond::set_has_sendmanual_rsp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSFriendRespond::clear_has_sendmanual_rsp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSFriendRespond::clear_sendmanual_rsp() {
  if (sendmanual_rsp_ != NULL) sendmanual_rsp_->::vmsg::CSSendManualRsp::Clear();
  clear_has_sendmanual_rsp();
}
inline const ::vmsg::CSSendManualRsp& CSFriendRespond::sendmanual_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return sendmanual_rsp_ != NULL ? *sendmanual_rsp_ : *default_instance().sendmanual_rsp_;
#else
  return sendmanual_rsp_ != NULL ? *sendmanual_rsp_ : *default_instance_->sendmanual_rsp_;
#endif
}
inline ::vmsg::CSSendManualRsp* CSFriendRespond::mutable_sendmanual_rsp() {
  set_has_sendmanual_rsp();
  if (sendmanual_rsp_ == NULL) sendmanual_rsp_ = new ::vmsg::CSSendManualRsp;
  return sendmanual_rsp_;
}
inline ::vmsg::CSSendManualRsp* CSFriendRespond::release_sendmanual_rsp() {
  clear_has_sendmanual_rsp();
  ::vmsg::CSSendManualRsp* temp = sendmanual_rsp_;
  sendmanual_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_sendmanual_rsp(::vmsg::CSSendManualRsp* sendmanual_rsp) {
  delete sendmanual_rsp_;
  sendmanual_rsp_ = sendmanual_rsp;
  if (sendmanual_rsp) {
    set_has_sendmanual_rsp();
  } else {
    clear_has_sendmanual_rsp();
  }
}

// optional .vmsg.CSBatchAddUinLst BatchAdd_Rsp = 10;
inline bool CSFriendRespond::has_batchadd_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSFriendRespond::set_has_batchadd_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSFriendRespond::clear_has_batchadd_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSFriendRespond::clear_batchadd_rsp() {
  if (batchadd_rsp_ != NULL) batchadd_rsp_->::vmsg::CSBatchAddUinLst::Clear();
  clear_has_batchadd_rsp();
}
inline const ::vmsg::CSBatchAddUinLst& CSFriendRespond::batchadd_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return batchadd_rsp_ != NULL ? *batchadd_rsp_ : *default_instance().batchadd_rsp_;
#else
  return batchadd_rsp_ != NULL ? *batchadd_rsp_ : *default_instance_->batchadd_rsp_;
#endif
}
inline ::vmsg::CSBatchAddUinLst* CSFriendRespond::mutable_batchadd_rsp() {
  set_has_batchadd_rsp();
  if (batchadd_rsp_ == NULL) batchadd_rsp_ = new ::vmsg::CSBatchAddUinLst;
  return batchadd_rsp_;
}
inline ::vmsg::CSBatchAddUinLst* CSFriendRespond::release_batchadd_rsp() {
  clear_has_batchadd_rsp();
  ::vmsg::CSBatchAddUinLst* temp = batchadd_rsp_;
  batchadd_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_batchadd_rsp(::vmsg::CSBatchAddUinLst* batchadd_rsp) {
  delete batchadd_rsp_;
  batchadd_rsp_ = batchadd_rsp;
  if (batchadd_rsp) {
    set_has_batchadd_rsp();
  } else {
    clear_has_batchadd_rsp();
  }
}

// optional .vmsg.CSInviteFriendFightRsp InviteFriend_Rsp = 11;
inline bool CSFriendRespond::has_invitefriend_rsp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSFriendRespond::set_has_invitefriend_rsp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSFriendRespond::clear_has_invitefriend_rsp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSFriendRespond::clear_invitefriend_rsp() {
  if (invitefriend_rsp_ != NULL) invitefriend_rsp_->::vmsg::CSInviteFriendFightRsp::Clear();
  clear_has_invitefriend_rsp();
}
inline const ::vmsg::CSInviteFriendFightRsp& CSFriendRespond::invitefriend_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return invitefriend_rsp_ != NULL ? *invitefriend_rsp_ : *default_instance().invitefriend_rsp_;
#else
  return invitefriend_rsp_ != NULL ? *invitefriend_rsp_ : *default_instance_->invitefriend_rsp_;
#endif
}
inline ::vmsg::CSInviteFriendFightRsp* CSFriendRespond::mutable_invitefriend_rsp() {
  set_has_invitefriend_rsp();
  if (invitefriend_rsp_ == NULL) invitefriend_rsp_ = new ::vmsg::CSInviteFriendFightRsp;
  return invitefriend_rsp_;
}
inline ::vmsg::CSInviteFriendFightRsp* CSFriendRespond::release_invitefriend_rsp() {
  clear_has_invitefriend_rsp();
  ::vmsg::CSInviteFriendFightRsp* temp = invitefriend_rsp_;
  invitefriend_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_invitefriend_rsp(::vmsg::CSInviteFriendFightRsp* invitefriend_rsp) {
  delete invitefriend_rsp_;
  invitefriend_rsp_ = invitefriend_rsp;
  if (invitefriend_rsp) {
    set_has_invitefriend_rsp();
  } else {
    clear_has_invitefriend_rsp();
  }
}

// optional uint32 ReqNumNotify_Rsp = 12;
inline bool CSFriendRespond::has_reqnumnotify_rsp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSFriendRespond::set_has_reqnumnotify_rsp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSFriendRespond::clear_has_reqnumnotify_rsp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSFriendRespond::clear_reqnumnotify_rsp() {
  reqnumnotify_rsp_ = 0u;
  clear_has_reqnumnotify_rsp();
}
inline ::google::protobuf::uint32 CSFriendRespond::reqnumnotify_rsp() const {
  return reqnumnotify_rsp_;
}
inline void CSFriendRespond::set_reqnumnotify_rsp(::google::protobuf::uint32 value) {
  set_has_reqnumnotify_rsp();
  reqnumnotify_rsp_ = value;
}

// optional .vmsg.CSRecvManualRsp RecvManual_Rsp = 13;
inline bool CSFriendRespond::has_recvmanual_rsp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSFriendRespond::set_has_recvmanual_rsp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSFriendRespond::clear_has_recvmanual_rsp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSFriendRespond::clear_recvmanual_rsp() {
  if (recvmanual_rsp_ != NULL) recvmanual_rsp_->::vmsg::CSRecvManualRsp::Clear();
  clear_has_recvmanual_rsp();
}
inline const ::vmsg::CSRecvManualRsp& CSFriendRespond::recvmanual_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return recvmanual_rsp_ != NULL ? *recvmanual_rsp_ : *default_instance().recvmanual_rsp_;
#else
  return recvmanual_rsp_ != NULL ? *recvmanual_rsp_ : *default_instance_->recvmanual_rsp_;
#endif
}
inline ::vmsg::CSRecvManualRsp* CSFriendRespond::mutable_recvmanual_rsp() {
  set_has_recvmanual_rsp();
  if (recvmanual_rsp_ == NULL) recvmanual_rsp_ = new ::vmsg::CSRecvManualRsp;
  return recvmanual_rsp_;
}
inline ::vmsg::CSRecvManualRsp* CSFriendRespond::release_recvmanual_rsp() {
  clear_has_recvmanual_rsp();
  ::vmsg::CSRecvManualRsp* temp = recvmanual_rsp_;
  recvmanual_rsp_ = NULL;
  return temp;
}
inline void CSFriendRespond::set_allocated_recvmanual_rsp(::vmsg::CSRecvManualRsp* recvmanual_rsp) {
  delete recvmanual_rsp_;
  recvmanual_rsp_ = recvmanual_rsp;
  if (recvmanual_rsp) {
    set_has_recvmanual_rsp();
  } else {
    clear_has_recvmanual_rsp();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSFriendMsg_2eproto__INCLUDED
