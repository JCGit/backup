// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSDailyGiftMsg.proto

#ifndef PROTOBUF_CSDailyGiftMsg_2eproto__INCLUDED
#define PROTOBUF_CSDailyGiftMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "MsgBase.pb.h"
#include "ShareByClient.pb.h"
#include "CSEquipItemMsg.pb.h"
#include "CSBagMsg.pb.h"
// @@protoc_insertion_point(includes)

namespace vmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

class CSModuleGiftNextTime;
class CSQueryDailyGiftRsp;
class CSAwardDailyGiftRqst;
class CSAwardVipDailyGift;
class CSAwardDailyGiftRsp;
class CSClaimVipDailyAwardRsp;
class CSDailyGiftRequest;
class CSDailyGiftRespond;

enum DAILY_GIFT_MODULE_TYPE {
  DAILY_GIFT_MODULE_VIP = 1
};
bool DAILY_GIFT_MODULE_TYPE_IsValid(int value);
const DAILY_GIFT_MODULE_TYPE DAILY_GIFT_MODULE_TYPE_MIN = DAILY_GIFT_MODULE_VIP;
const DAILY_GIFT_MODULE_TYPE DAILY_GIFT_MODULE_TYPE_MAX = DAILY_GIFT_MODULE_VIP;
const int DAILY_GIFT_MODULE_TYPE_ARRAYSIZE = DAILY_GIFT_MODULE_TYPE_MAX + 1;

// ===================================================================

class CSModuleGiftNextTime : public ::google::protobuf::MessageLite {
 public:
  CSModuleGiftNextTime();
  virtual ~CSModuleGiftNextTime();

  CSModuleGiftNextTime(const CSModuleGiftNextTime& from);

  inline CSModuleGiftNextTime& operator=(const CSModuleGiftNextTime& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSModuleGiftNextTime& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSModuleGiftNextTime* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSModuleGiftNextTime* other);

  // implements Message ----------------------------------------------

  CSModuleGiftNextTime* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSModuleGiftNextTime& from);
  void MergeFrom(const CSModuleGiftNextTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ModuleID = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);

  // required int32 NextGiftTime = 2;
  inline bool has_nextgifttime() const;
  inline void clear_nextgifttime();
  static const int kNextGiftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nextgifttime() const;
  inline void set_nextgifttime(::google::protobuf::int32 value);

  // optional uint32 EventID = 3;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIDFieldNumber = 3;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 4;
  inline bool has_vipdailygift() const;
  inline void clear_vipdailygift();
  static const int kVipDailyGiftFieldNumber = 4;
  inline const ::vmsg::CSAwardVipDailyGift& vipdailygift() const;
  inline ::vmsg::CSAwardVipDailyGift* mutable_vipdailygift();
  inline ::vmsg::CSAwardVipDailyGift* release_vipdailygift();
  inline void set_allocated_vipdailygift(::vmsg::CSAwardVipDailyGift* vipdailygift);

  // @@protoc_insertion_point(class_scope:vmsg.CSModuleGiftNextTime)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_nextgifttime();
  inline void clear_has_nextgifttime();
  inline void set_has_eventid();
  inline void clear_has_eventid();
  inline void set_has_vipdailygift();
  inline void clear_has_vipdailygift();

  ::google::protobuf::uint32 moduleid_;
  ::google::protobuf::int32 nextgifttime_;
  ::vmsg::CSAwardVipDailyGift* vipdailygift_;
  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSModuleGiftNextTime* default_instance_;
};
// -------------------------------------------------------------------

class CSQueryDailyGiftRsp : public ::google::protobuf::MessageLite {
 public:
  CSQueryDailyGiftRsp();
  virtual ~CSQueryDailyGiftRsp();

  CSQueryDailyGiftRsp(const CSQueryDailyGiftRsp& from);

  inline CSQueryDailyGiftRsp& operator=(const CSQueryDailyGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSQueryDailyGiftRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSQueryDailyGiftRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSQueryDailyGiftRsp* other);

  // implements Message ----------------------------------------------

  CSQueryDailyGiftRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSQueryDailyGiftRsp& from);
  void MergeFrom(const CSQueryDailyGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vmsg.CSModuleGiftNextTime TimeLst = 1;
  inline int timelst_size() const;
  inline void clear_timelst();
  static const int kTimeLstFieldNumber = 1;
  inline const ::vmsg::CSModuleGiftNextTime& timelst(int index) const;
  inline ::vmsg::CSModuleGiftNextTime* mutable_timelst(int index);
  inline ::vmsg::CSModuleGiftNextTime* add_timelst();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSModuleGiftNextTime >&
      timelst() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSModuleGiftNextTime >*
      mutable_timelst();

  // @@protoc_insertion_point(class_scope:vmsg.CSQueryDailyGiftRsp)
 private:

  ::google::protobuf::RepeatedPtrField< ::vmsg::CSModuleGiftNextTime > timelst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSQueryDailyGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSAwardDailyGiftRqst : public ::google::protobuf::MessageLite {
 public:
  CSAwardDailyGiftRqst();
  virtual ~CSAwardDailyGiftRqst();

  CSAwardDailyGiftRqst(const CSAwardDailyGiftRqst& from);

  inline CSAwardDailyGiftRqst& operator=(const CSAwardDailyGiftRqst& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSAwardDailyGiftRqst& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSAwardDailyGiftRqst* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSAwardDailyGiftRqst* other);

  // implements Message ----------------------------------------------

  CSAwardDailyGiftRqst* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSAwardDailyGiftRqst& from);
  void MergeFrom(const CSAwardDailyGiftRqst& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ModuleID = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);

  // optional uint32 EventID = 2;
  inline bool has_eventid() const;
  inline void clear_eventid();
  static const int kEventIDFieldNumber = 2;
  inline ::google::protobuf::uint32 eventid() const;
  inline void set_eventid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSAwardDailyGiftRqst)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_eventid();
  inline void clear_has_eventid();

  ::google::protobuf::uint32 moduleid_;
  ::google::protobuf::uint32 eventid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAwardDailyGiftRqst* default_instance_;
};
// -------------------------------------------------------------------

class CSAwardVipDailyGift : public ::google::protobuf::MessageLite {
 public:
  CSAwardVipDailyGift();
  virtual ~CSAwardVipDailyGift();

  CSAwardVipDailyGift(const CSAwardVipDailyGift& from);

  inline CSAwardVipDailyGift& operator=(const CSAwardVipDailyGift& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSAwardVipDailyGift& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSAwardVipDailyGift* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSAwardVipDailyGift* other);

  // implements Message ----------------------------------------------

  CSAwardVipDailyGift* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSAwardVipDailyGift& from);
  void MergeFrom(const CSAwardVipDailyGift& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 VIPLevel = 1;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVIPLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // required uint32 GoldAward = 2;
  inline bool has_goldaward() const;
  inline void clear_goldaward();
  static const int kGoldAwardFieldNumber = 2;
  inline ::google::protobuf::uint32 goldaward() const;
  inline void set_goldaward(::google::protobuf::uint32 value);

  // required uint32 CoinAward = 3;
  inline bool has_coinaward() const;
  inline void clear_coinaward();
  static const int kCoinAwardFieldNumber = 3;
  inline ::google::protobuf::uint32 coinaward() const;
  inline void set_coinaward(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSAwardVipDailyGift)
 private:
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_goldaward();
  inline void clear_has_goldaward();
  inline void set_has_coinaward();
  inline void clear_has_coinaward();

  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 goldaward_;
  ::google::protobuf::uint32 coinaward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAwardVipDailyGift* default_instance_;
};
// -------------------------------------------------------------------

class CSAwardDailyGiftRsp : public ::google::protobuf::MessageLite {
 public:
  CSAwardDailyGiftRsp();
  virtual ~CSAwardDailyGiftRsp();

  CSAwardDailyGiftRsp(const CSAwardDailyGiftRsp& from);

  inline CSAwardDailyGiftRsp& operator=(const CSAwardDailyGiftRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSAwardDailyGiftRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSAwardDailyGiftRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSAwardDailyGiftRsp* other);

  // implements Message ----------------------------------------------

  CSAwardDailyGiftRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSAwardDailyGiftRsp& from);
  void MergeFrom(const CSAwardDailyGiftRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ModuleID = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);

  // required int32 NextGiftTime = 2;
  inline bool has_nextgifttime() const;
  inline void clear_nextgifttime();
  static const int kNextGiftTimeFieldNumber = 2;
  inline ::google::protobuf::int32 nextgifttime() const;
  inline void set_nextgifttime(::google::protobuf::int32 value);

  // optional .vmsg.CSAwardVipDailyGift VipDailyGift = 3;
  inline bool has_vipdailygift() const;
  inline void clear_vipdailygift();
  static const int kVipDailyGiftFieldNumber = 3;
  inline const ::vmsg::CSAwardVipDailyGift& vipdailygift() const;
  inline ::vmsg::CSAwardVipDailyGift* mutable_vipdailygift();
  inline ::vmsg::CSAwardVipDailyGift* release_vipdailygift();
  inline void set_allocated_vipdailygift(::vmsg::CSAwardVipDailyGift* vipdailygift);

  // @@protoc_insertion_point(class_scope:vmsg.CSAwardDailyGiftRsp)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_nextgifttime();
  inline void clear_has_nextgifttime();
  inline void set_has_vipdailygift();
  inline void clear_has_vipdailygift();

  ::google::protobuf::uint32 moduleid_;
  ::google::protobuf::int32 nextgifttime_;
  ::vmsg::CSAwardVipDailyGift* vipdailygift_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSAwardDailyGiftRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSClaimVipDailyAwardRsp : public ::google::protobuf::MessageLite {
 public:
  CSClaimVipDailyAwardRsp();
  virtual ~CSClaimVipDailyAwardRsp();

  CSClaimVipDailyAwardRsp(const CSClaimVipDailyAwardRsp& from);

  inline CSClaimVipDailyAwardRsp& operator=(const CSClaimVipDailyAwardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSClaimVipDailyAwardRsp& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSClaimVipDailyAwardRsp* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSClaimVipDailyAwardRsp* other);

  // implements Message ----------------------------------------------

  CSClaimVipDailyAwardRsp* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSClaimVipDailyAwardRsp& from);
  void MergeFrom(const CSClaimVipDailyAwardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .vmsg.CSBagInfo BagInfo = 1;
  inline bool has_baginfo() const;
  inline void clear_baginfo();
  static const int kBagInfoFieldNumber = 1;
  inline const ::vmsg::CSBagInfo& baginfo() const;
  inline ::vmsg::CSBagInfo* mutable_baginfo();
  inline ::vmsg::CSBagInfo* release_baginfo();
  inline void set_allocated_baginfo(::vmsg::CSBagInfo* baginfo);

  // repeated .vmsg.CSAwardElement AwardLst = 2;
  inline int awardlst_size() const;
  inline void clear_awardlst();
  static const int kAwardLstFieldNumber = 2;
  inline const ::vmsg::CSAwardElement& awardlst(int index) const;
  inline ::vmsg::CSAwardElement* mutable_awardlst(int index);
  inline ::vmsg::CSAwardElement* add_awardlst();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSAwardElement >&
      awardlst() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSAwardElement >*
      mutable_awardlst();

  // @@protoc_insertion_point(class_scope:vmsg.CSClaimVipDailyAwardRsp)
 private:
  inline void set_has_baginfo();
  inline void clear_has_baginfo();

  ::vmsg::CSBagInfo* baginfo_;
  ::google::protobuf::RepeatedPtrField< ::vmsg::CSAwardElement > awardlst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSClaimVipDailyAwardRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSDailyGiftRequest : public ::google::protobuf::MessageLite {
 public:
  CSDailyGiftRequest();
  virtual ~CSDailyGiftRequest();

  CSDailyGiftRequest(const CSDailyGiftRequest& from);

  inline CSDailyGiftRequest& operator=(const CSDailyGiftRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSDailyGiftRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSDailyGiftRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSDailyGiftRequest* other);

  // implements Message ----------------------------------------------

  CSDailyGiftRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSDailyGiftRequest& from);
  void MergeFrom(const CSDailyGiftRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vmsg.CSAwardDailyGiftRqst AwardDailyGift_Rqst = 1;
  inline bool has_awarddailygift_rqst() const;
  inline void clear_awarddailygift_rqst();
  static const int kAwardDailyGiftRqstFieldNumber = 1;
  inline const ::vmsg::CSAwardDailyGiftRqst& awarddailygift_rqst() const;
  inline ::vmsg::CSAwardDailyGiftRqst* mutable_awarddailygift_rqst();
  inline ::vmsg::CSAwardDailyGiftRqst* release_awarddailygift_rqst();
  inline void set_allocated_awarddailygift_rqst(::vmsg::CSAwardDailyGiftRqst* awarddailygift_rqst);

  // @@protoc_insertion_point(class_scope:vmsg.CSDailyGiftRequest)
 private:
  inline void set_has_awarddailygift_rqst();
  inline void clear_has_awarddailygift_rqst();

  ::vmsg::CSAwardDailyGiftRqst* awarddailygift_rqst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSDailyGiftRequest* default_instance_;
};
// -------------------------------------------------------------------

class CSDailyGiftRespond : public ::google::protobuf::MessageLite {
 public:
  CSDailyGiftRespond();
  virtual ~CSDailyGiftRespond();

  CSDailyGiftRespond(const CSDailyGiftRespond& from);

  inline CSDailyGiftRespond& operator=(const CSDailyGiftRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSDailyGiftRespond& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSDailyGiftRespond* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSDailyGiftRespond* other);

  // implements Message ----------------------------------------------

  CSDailyGiftRespond* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSDailyGiftRespond& from);
  void MergeFrom(const CSDailyGiftRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vmsg.CSQueryDailyGiftRsp QueryDailyGift_Rsp = 1;
  inline bool has_querydailygift_rsp() const;
  inline void clear_querydailygift_rsp();
  static const int kQueryDailyGiftRspFieldNumber = 1;
  inline const ::vmsg::CSQueryDailyGiftRsp& querydailygift_rsp() const;
  inline ::vmsg::CSQueryDailyGiftRsp* mutable_querydailygift_rsp();
  inline ::vmsg::CSQueryDailyGiftRsp* release_querydailygift_rsp();
  inline void set_allocated_querydailygift_rsp(::vmsg::CSQueryDailyGiftRsp* querydailygift_rsp);

  // optional .vmsg.CSAwardDailyGiftRsp AwardDailyGift_Rsp = 2;
  inline bool has_awarddailygift_rsp() const;
  inline void clear_awarddailygift_rsp();
  static const int kAwardDailyGiftRspFieldNumber = 2;
  inline const ::vmsg::CSAwardDailyGiftRsp& awarddailygift_rsp() const;
  inline ::vmsg::CSAwardDailyGiftRsp* mutable_awarddailygift_rsp();
  inline ::vmsg::CSAwardDailyGiftRsp* release_awarddailygift_rsp();
  inline void set_allocated_awarddailygift_rsp(::vmsg::CSAwardDailyGiftRsp* awarddailygift_rsp);

  // optional .vmsg.CSClaimVipDailyAwardRsp ClaimVipDailyAward_Rsp = 3;
  inline bool has_claimvipdailyaward_rsp() const;
  inline void clear_claimvipdailyaward_rsp();
  static const int kClaimVipDailyAwardRspFieldNumber = 3;
  inline const ::vmsg::CSClaimVipDailyAwardRsp& claimvipdailyaward_rsp() const;
  inline ::vmsg::CSClaimVipDailyAwardRsp* mutable_claimvipdailyaward_rsp();
  inline ::vmsg::CSClaimVipDailyAwardRsp* release_claimvipdailyaward_rsp();
  inline void set_allocated_claimvipdailyaward_rsp(::vmsg::CSClaimVipDailyAwardRsp* claimvipdailyaward_rsp);

  // @@protoc_insertion_point(class_scope:vmsg.CSDailyGiftRespond)
 private:
  inline void set_has_querydailygift_rsp();
  inline void clear_has_querydailygift_rsp();
  inline void set_has_awarddailygift_rsp();
  inline void clear_has_awarddailygift_rsp();
  inline void set_has_claimvipdailyaward_rsp();
  inline void clear_has_claimvipdailyaward_rsp();

  ::vmsg::CSQueryDailyGiftRsp* querydailygift_rsp_;
  ::vmsg::CSAwardDailyGiftRsp* awarddailygift_rsp_;
  ::vmsg::CSClaimVipDailyAwardRsp* claimvipdailyaward_rsp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSDailyGiftMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSDailyGiftMsg_2eproto();
  friend void protobuf_ShutdownFile_CSDailyGiftMsg_2eproto();

  void InitAsDefaultInstance();
  static CSDailyGiftRespond* default_instance_;
};
// ===================================================================


// ===================================================================

// CSModuleGiftNextTime

// required uint32 ModuleID = 1;
inline bool CSModuleGiftNextTime::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSModuleGiftNextTime::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSModuleGiftNextTime::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSModuleGiftNextTime::clear_moduleid() {
  moduleid_ = 0u;
  clear_has_moduleid();
}
inline ::google::protobuf::uint32 CSModuleGiftNextTime::moduleid() const {
  return moduleid_;
}
inline void CSModuleGiftNextTime::set_moduleid(::google::protobuf::uint32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// required int32 NextGiftTime = 2;
inline bool CSModuleGiftNextTime::has_nextgifttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSModuleGiftNextTime::set_has_nextgifttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSModuleGiftNextTime::clear_has_nextgifttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSModuleGiftNextTime::clear_nextgifttime() {
  nextgifttime_ = 0;
  clear_has_nextgifttime();
}
inline ::google::protobuf::int32 CSModuleGiftNextTime::nextgifttime() const {
  return nextgifttime_;
}
inline void CSModuleGiftNextTime::set_nextgifttime(::google::protobuf::int32 value) {
  set_has_nextgifttime();
  nextgifttime_ = value;
}

// optional uint32 EventID = 3;
inline bool CSModuleGiftNextTime::has_eventid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSModuleGiftNextTime::set_has_eventid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSModuleGiftNextTime::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSModuleGiftNextTime::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 CSModuleGiftNextTime::eventid() const {
  return eventid_;
}
inline void CSModuleGiftNextTime::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// optional .vmsg.CSAwardVipDailyGift VipDailyGift = 4;
inline bool CSModuleGiftNextTime::has_vipdailygift() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSModuleGiftNextTime::set_has_vipdailygift() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSModuleGiftNextTime::clear_has_vipdailygift() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSModuleGiftNextTime::clear_vipdailygift() {
  if (vipdailygift_ != NULL) vipdailygift_->::vmsg::CSAwardVipDailyGift::Clear();
  clear_has_vipdailygift();
}
inline const ::vmsg::CSAwardVipDailyGift& CSModuleGiftNextTime::vipdailygift() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return vipdailygift_ != NULL ? *vipdailygift_ : *default_instance().vipdailygift_;
#else
  return vipdailygift_ != NULL ? *vipdailygift_ : *default_instance_->vipdailygift_;
#endif
}
inline ::vmsg::CSAwardVipDailyGift* CSModuleGiftNextTime::mutable_vipdailygift() {
  set_has_vipdailygift();
  if (vipdailygift_ == NULL) vipdailygift_ = new ::vmsg::CSAwardVipDailyGift;
  return vipdailygift_;
}
inline ::vmsg::CSAwardVipDailyGift* CSModuleGiftNextTime::release_vipdailygift() {
  clear_has_vipdailygift();
  ::vmsg::CSAwardVipDailyGift* temp = vipdailygift_;
  vipdailygift_ = NULL;
  return temp;
}
inline void CSModuleGiftNextTime::set_allocated_vipdailygift(::vmsg::CSAwardVipDailyGift* vipdailygift) {
  delete vipdailygift_;
  vipdailygift_ = vipdailygift;
  if (vipdailygift) {
    set_has_vipdailygift();
  } else {
    clear_has_vipdailygift();
  }
}

// -------------------------------------------------------------------

// CSQueryDailyGiftRsp

// repeated .vmsg.CSModuleGiftNextTime TimeLst = 1;
inline int CSQueryDailyGiftRsp::timelst_size() const {
  return timelst_.size();
}
inline void CSQueryDailyGiftRsp::clear_timelst() {
  timelst_.Clear();
}
inline const ::vmsg::CSModuleGiftNextTime& CSQueryDailyGiftRsp::timelst(int index) const {
  return timelst_.Get(index);
}
inline ::vmsg::CSModuleGiftNextTime* CSQueryDailyGiftRsp::mutable_timelst(int index) {
  return timelst_.Mutable(index);
}
inline ::vmsg::CSModuleGiftNextTime* CSQueryDailyGiftRsp::add_timelst() {
  return timelst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSModuleGiftNextTime >&
CSQueryDailyGiftRsp::timelst() const {
  return timelst_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSModuleGiftNextTime >*
CSQueryDailyGiftRsp::mutable_timelst() {
  return &timelst_;
}

// -------------------------------------------------------------------

// CSAwardDailyGiftRqst

// required uint32 ModuleID = 1;
inline bool CSAwardDailyGiftRqst::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAwardDailyGiftRqst::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAwardDailyGiftRqst::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAwardDailyGiftRqst::clear_moduleid() {
  moduleid_ = 0u;
  clear_has_moduleid();
}
inline ::google::protobuf::uint32 CSAwardDailyGiftRqst::moduleid() const {
  return moduleid_;
}
inline void CSAwardDailyGiftRqst::set_moduleid(::google::protobuf::uint32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// optional uint32 EventID = 2;
inline bool CSAwardDailyGiftRqst::has_eventid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAwardDailyGiftRqst::set_has_eventid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAwardDailyGiftRqst::clear_has_eventid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAwardDailyGiftRqst::clear_eventid() {
  eventid_ = 0u;
  clear_has_eventid();
}
inline ::google::protobuf::uint32 CSAwardDailyGiftRqst::eventid() const {
  return eventid_;
}
inline void CSAwardDailyGiftRqst::set_eventid(::google::protobuf::uint32 value) {
  set_has_eventid();
  eventid_ = value;
}

// -------------------------------------------------------------------

// CSAwardVipDailyGift

// required uint32 VIPLevel = 1;
inline bool CSAwardVipDailyGift::has_viplevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAwardVipDailyGift::set_has_viplevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAwardVipDailyGift::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAwardVipDailyGift::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 CSAwardVipDailyGift::viplevel() const {
  return viplevel_;
}
inline void CSAwardVipDailyGift::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// required uint32 GoldAward = 2;
inline bool CSAwardVipDailyGift::has_goldaward() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAwardVipDailyGift::set_has_goldaward() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAwardVipDailyGift::clear_has_goldaward() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAwardVipDailyGift::clear_goldaward() {
  goldaward_ = 0u;
  clear_has_goldaward();
}
inline ::google::protobuf::uint32 CSAwardVipDailyGift::goldaward() const {
  return goldaward_;
}
inline void CSAwardVipDailyGift::set_goldaward(::google::protobuf::uint32 value) {
  set_has_goldaward();
  goldaward_ = value;
}

// required uint32 CoinAward = 3;
inline bool CSAwardVipDailyGift::has_coinaward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSAwardVipDailyGift::set_has_coinaward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSAwardVipDailyGift::clear_has_coinaward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSAwardVipDailyGift::clear_coinaward() {
  coinaward_ = 0u;
  clear_has_coinaward();
}
inline ::google::protobuf::uint32 CSAwardVipDailyGift::coinaward() const {
  return coinaward_;
}
inline void CSAwardVipDailyGift::set_coinaward(::google::protobuf::uint32 value) {
  set_has_coinaward();
  coinaward_ = value;
}

// -------------------------------------------------------------------

// CSAwardDailyGiftRsp

// required uint32 ModuleID = 1;
inline bool CSAwardDailyGiftRsp::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSAwardDailyGiftRsp::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSAwardDailyGiftRsp::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSAwardDailyGiftRsp::clear_moduleid() {
  moduleid_ = 0u;
  clear_has_moduleid();
}
inline ::google::protobuf::uint32 CSAwardDailyGiftRsp::moduleid() const {
  return moduleid_;
}
inline void CSAwardDailyGiftRsp::set_moduleid(::google::protobuf::uint32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// required int32 NextGiftTime = 2;
inline bool CSAwardDailyGiftRsp::has_nextgifttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSAwardDailyGiftRsp::set_has_nextgifttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSAwardDailyGiftRsp::clear_has_nextgifttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSAwardDailyGiftRsp::clear_nextgifttime() {
  nextgifttime_ = 0;
  clear_has_nextgifttime();
}
inline ::google::protobuf::int32 CSAwardDailyGiftRsp::nextgifttime() const {
  return nextgifttime_;
}
inline void CSAwardDailyGiftRsp::set_nextgifttime(::google::protobuf::int32 value) {
  set_has_nextgifttime();
  nextgifttime_ = value;
}

// optional .vmsg.CSAwardVipDailyGift VipDailyGift = 3;
inline bool CSAwardDailyGiftRsp::has_vipdailygift() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSAwardDailyGiftRsp::set_has_vipdailygift() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSAwardDailyGiftRsp::clear_has_vipdailygift() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSAwardDailyGiftRsp::clear_vipdailygift() {
  if (vipdailygift_ != NULL) vipdailygift_->::vmsg::CSAwardVipDailyGift::Clear();
  clear_has_vipdailygift();
}
inline const ::vmsg::CSAwardVipDailyGift& CSAwardDailyGiftRsp::vipdailygift() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return vipdailygift_ != NULL ? *vipdailygift_ : *default_instance().vipdailygift_;
#else
  return vipdailygift_ != NULL ? *vipdailygift_ : *default_instance_->vipdailygift_;
#endif
}
inline ::vmsg::CSAwardVipDailyGift* CSAwardDailyGiftRsp::mutable_vipdailygift() {
  set_has_vipdailygift();
  if (vipdailygift_ == NULL) vipdailygift_ = new ::vmsg::CSAwardVipDailyGift;
  return vipdailygift_;
}
inline ::vmsg::CSAwardVipDailyGift* CSAwardDailyGiftRsp::release_vipdailygift() {
  clear_has_vipdailygift();
  ::vmsg::CSAwardVipDailyGift* temp = vipdailygift_;
  vipdailygift_ = NULL;
  return temp;
}
inline void CSAwardDailyGiftRsp::set_allocated_vipdailygift(::vmsg::CSAwardVipDailyGift* vipdailygift) {
  delete vipdailygift_;
  vipdailygift_ = vipdailygift;
  if (vipdailygift) {
    set_has_vipdailygift();
  } else {
    clear_has_vipdailygift();
  }
}

// -------------------------------------------------------------------

// CSClaimVipDailyAwardRsp

// required .vmsg.CSBagInfo BagInfo = 1;
inline bool CSClaimVipDailyAwardRsp::has_baginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSClaimVipDailyAwardRsp::set_has_baginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSClaimVipDailyAwardRsp::clear_has_baginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSClaimVipDailyAwardRsp::clear_baginfo() {
  if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
  clear_has_baginfo();
}
inline const ::vmsg::CSBagInfo& CSClaimVipDailyAwardRsp::baginfo() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return baginfo_ != NULL ? *baginfo_ : *default_instance().baginfo_;
#else
  return baginfo_ != NULL ? *baginfo_ : *default_instance_->baginfo_;
#endif
}
inline ::vmsg::CSBagInfo* CSClaimVipDailyAwardRsp::mutable_baginfo() {
  set_has_baginfo();
  if (baginfo_ == NULL) baginfo_ = new ::vmsg::CSBagInfo;
  return baginfo_;
}
inline ::vmsg::CSBagInfo* CSClaimVipDailyAwardRsp::release_baginfo() {
  clear_has_baginfo();
  ::vmsg::CSBagInfo* temp = baginfo_;
  baginfo_ = NULL;
  return temp;
}
inline void CSClaimVipDailyAwardRsp::set_allocated_baginfo(::vmsg::CSBagInfo* baginfo) {
  delete baginfo_;
  baginfo_ = baginfo;
  if (baginfo) {
    set_has_baginfo();
  } else {
    clear_has_baginfo();
  }
}

// repeated .vmsg.CSAwardElement AwardLst = 2;
inline int CSClaimVipDailyAwardRsp::awardlst_size() const {
  return awardlst_.size();
}
inline void CSClaimVipDailyAwardRsp::clear_awardlst() {
  awardlst_.Clear();
}
inline const ::vmsg::CSAwardElement& CSClaimVipDailyAwardRsp::awardlst(int index) const {
  return awardlst_.Get(index);
}
inline ::vmsg::CSAwardElement* CSClaimVipDailyAwardRsp::mutable_awardlst(int index) {
  return awardlst_.Mutable(index);
}
inline ::vmsg::CSAwardElement* CSClaimVipDailyAwardRsp::add_awardlst() {
  return awardlst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSAwardElement >&
CSClaimVipDailyAwardRsp::awardlst() const {
  return awardlst_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSAwardElement >*
CSClaimVipDailyAwardRsp::mutable_awardlst() {
  return &awardlst_;
}

// -------------------------------------------------------------------

// CSDailyGiftRequest

// optional .vmsg.CSAwardDailyGiftRqst AwardDailyGift_Rqst = 1;
inline bool CSDailyGiftRequest::has_awarddailygift_rqst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSDailyGiftRequest::set_has_awarddailygift_rqst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSDailyGiftRequest::clear_has_awarddailygift_rqst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSDailyGiftRequest::clear_awarddailygift_rqst() {
  if (awarddailygift_rqst_ != NULL) awarddailygift_rqst_->::vmsg::CSAwardDailyGiftRqst::Clear();
  clear_has_awarddailygift_rqst();
}
inline const ::vmsg::CSAwardDailyGiftRqst& CSDailyGiftRequest::awarddailygift_rqst() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return awarddailygift_rqst_ != NULL ? *awarddailygift_rqst_ : *default_instance().awarddailygift_rqst_;
#else
  return awarddailygift_rqst_ != NULL ? *awarddailygift_rqst_ : *default_instance_->awarddailygift_rqst_;
#endif
}
inline ::vmsg::CSAwardDailyGiftRqst* CSDailyGiftRequest::mutable_awarddailygift_rqst() {
  set_has_awarddailygift_rqst();
  if (awarddailygift_rqst_ == NULL) awarddailygift_rqst_ = new ::vmsg::CSAwardDailyGiftRqst;
  return awarddailygift_rqst_;
}
inline ::vmsg::CSAwardDailyGiftRqst* CSDailyGiftRequest::release_awarddailygift_rqst() {
  clear_has_awarddailygift_rqst();
  ::vmsg::CSAwardDailyGiftRqst* temp = awarddailygift_rqst_;
  awarddailygift_rqst_ = NULL;
  return temp;
}
inline void CSDailyGiftRequest::set_allocated_awarddailygift_rqst(::vmsg::CSAwardDailyGiftRqst* awarddailygift_rqst) {
  delete awarddailygift_rqst_;
  awarddailygift_rqst_ = awarddailygift_rqst;
  if (awarddailygift_rqst) {
    set_has_awarddailygift_rqst();
  } else {
    clear_has_awarddailygift_rqst();
  }
}

// -------------------------------------------------------------------

// CSDailyGiftRespond

// optional .vmsg.CSQueryDailyGiftRsp QueryDailyGift_Rsp = 1;
inline bool CSDailyGiftRespond::has_querydailygift_rsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSDailyGiftRespond::set_has_querydailygift_rsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSDailyGiftRespond::clear_has_querydailygift_rsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSDailyGiftRespond::clear_querydailygift_rsp() {
  if (querydailygift_rsp_ != NULL) querydailygift_rsp_->::vmsg::CSQueryDailyGiftRsp::Clear();
  clear_has_querydailygift_rsp();
}
inline const ::vmsg::CSQueryDailyGiftRsp& CSDailyGiftRespond::querydailygift_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return querydailygift_rsp_ != NULL ? *querydailygift_rsp_ : *default_instance().querydailygift_rsp_;
#else
  return querydailygift_rsp_ != NULL ? *querydailygift_rsp_ : *default_instance_->querydailygift_rsp_;
#endif
}
inline ::vmsg::CSQueryDailyGiftRsp* CSDailyGiftRespond::mutable_querydailygift_rsp() {
  set_has_querydailygift_rsp();
  if (querydailygift_rsp_ == NULL) querydailygift_rsp_ = new ::vmsg::CSQueryDailyGiftRsp;
  return querydailygift_rsp_;
}
inline ::vmsg::CSQueryDailyGiftRsp* CSDailyGiftRespond::release_querydailygift_rsp() {
  clear_has_querydailygift_rsp();
  ::vmsg::CSQueryDailyGiftRsp* temp = querydailygift_rsp_;
  querydailygift_rsp_ = NULL;
  return temp;
}
inline void CSDailyGiftRespond::set_allocated_querydailygift_rsp(::vmsg::CSQueryDailyGiftRsp* querydailygift_rsp) {
  delete querydailygift_rsp_;
  querydailygift_rsp_ = querydailygift_rsp;
  if (querydailygift_rsp) {
    set_has_querydailygift_rsp();
  } else {
    clear_has_querydailygift_rsp();
  }
}

// optional .vmsg.CSAwardDailyGiftRsp AwardDailyGift_Rsp = 2;
inline bool CSDailyGiftRespond::has_awarddailygift_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSDailyGiftRespond::set_has_awarddailygift_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSDailyGiftRespond::clear_has_awarddailygift_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSDailyGiftRespond::clear_awarddailygift_rsp() {
  if (awarddailygift_rsp_ != NULL) awarddailygift_rsp_->::vmsg::CSAwardDailyGiftRsp::Clear();
  clear_has_awarddailygift_rsp();
}
inline const ::vmsg::CSAwardDailyGiftRsp& CSDailyGiftRespond::awarddailygift_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return awarddailygift_rsp_ != NULL ? *awarddailygift_rsp_ : *default_instance().awarddailygift_rsp_;
#else
  return awarddailygift_rsp_ != NULL ? *awarddailygift_rsp_ : *default_instance_->awarddailygift_rsp_;
#endif
}
inline ::vmsg::CSAwardDailyGiftRsp* CSDailyGiftRespond::mutable_awarddailygift_rsp() {
  set_has_awarddailygift_rsp();
  if (awarddailygift_rsp_ == NULL) awarddailygift_rsp_ = new ::vmsg::CSAwardDailyGiftRsp;
  return awarddailygift_rsp_;
}
inline ::vmsg::CSAwardDailyGiftRsp* CSDailyGiftRespond::release_awarddailygift_rsp() {
  clear_has_awarddailygift_rsp();
  ::vmsg::CSAwardDailyGiftRsp* temp = awarddailygift_rsp_;
  awarddailygift_rsp_ = NULL;
  return temp;
}
inline void CSDailyGiftRespond::set_allocated_awarddailygift_rsp(::vmsg::CSAwardDailyGiftRsp* awarddailygift_rsp) {
  delete awarddailygift_rsp_;
  awarddailygift_rsp_ = awarddailygift_rsp;
  if (awarddailygift_rsp) {
    set_has_awarddailygift_rsp();
  } else {
    clear_has_awarddailygift_rsp();
  }
}

// optional .vmsg.CSClaimVipDailyAwardRsp ClaimVipDailyAward_Rsp = 3;
inline bool CSDailyGiftRespond::has_claimvipdailyaward_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSDailyGiftRespond::set_has_claimvipdailyaward_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSDailyGiftRespond::clear_has_claimvipdailyaward_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSDailyGiftRespond::clear_claimvipdailyaward_rsp() {
  if (claimvipdailyaward_rsp_ != NULL) claimvipdailyaward_rsp_->::vmsg::CSClaimVipDailyAwardRsp::Clear();
  clear_has_claimvipdailyaward_rsp();
}
inline const ::vmsg::CSClaimVipDailyAwardRsp& CSDailyGiftRespond::claimvipdailyaward_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return claimvipdailyaward_rsp_ != NULL ? *claimvipdailyaward_rsp_ : *default_instance().claimvipdailyaward_rsp_;
#else
  return claimvipdailyaward_rsp_ != NULL ? *claimvipdailyaward_rsp_ : *default_instance_->claimvipdailyaward_rsp_;
#endif
}
inline ::vmsg::CSClaimVipDailyAwardRsp* CSDailyGiftRespond::mutable_claimvipdailyaward_rsp() {
  set_has_claimvipdailyaward_rsp();
  if (claimvipdailyaward_rsp_ == NULL) claimvipdailyaward_rsp_ = new ::vmsg::CSClaimVipDailyAwardRsp;
  return claimvipdailyaward_rsp_;
}
inline ::vmsg::CSClaimVipDailyAwardRsp* CSDailyGiftRespond::release_claimvipdailyaward_rsp() {
  clear_has_claimvipdailyaward_rsp();
  ::vmsg::CSClaimVipDailyAwardRsp* temp = claimvipdailyaward_rsp_;
  claimvipdailyaward_rsp_ = NULL;
  return temp;
}
inline void CSDailyGiftRespond::set_allocated_claimvipdailyaward_rsp(::vmsg::CSClaimVipDailyAwardRsp* claimvipdailyaward_rsp) {
  delete claimvipdailyaward_rsp_;
  claimvipdailyaward_rsp_ = claimvipdailyaward_rsp;
  if (claimvipdailyaward_rsp) {
    set_has_claimvipdailyaward_rsp();
  } else {
    clear_has_claimvipdailyaward_rsp();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSDailyGiftMsg_2eproto__INCLUDED
