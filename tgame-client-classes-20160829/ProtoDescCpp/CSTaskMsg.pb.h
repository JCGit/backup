// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSTaskMsg.proto

#ifndef PROTOBUF_CSTaskMsg_2eproto__INCLUDED
#define PROTOBUF_CSTaskMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "MsgBase.pb.h"
#include "ShareByClient.pb.h"
#include "CSEquipItemMsg.pb.h"
// @@protoc_insertion_point(includes)

namespace vmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSTaskMsg_2eproto();
void protobuf_AssignDesc_CSTaskMsg_2eproto();
void protobuf_ShutdownFile_CSTaskMsg_2eproto();

class CSTask;
class CSDailyTaskInfo;
class CSMilestoneInfo;
class CSTaskRequest;
class CSTaskRespond;

// ===================================================================

class CSTask : public ::google::protobuf::MessageLite {
 public:
  CSTask();
  virtual ~CSTask();

  CSTask(const CSTask& from);

  inline CSTask& operator=(const CSTask& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSTask& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSTask* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSTask* other);

  // implements Message ----------------------------------------------

  CSTask* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSTask& from);
  void MergeFrom(const CSTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 TaskStat = 2;
  inline bool has_taskstat() const;
  inline void clear_taskstat();
  static const int kTaskStatFieldNumber = 2;
  inline ::google::protobuf::uint32 taskstat() const;
  inline void set_taskstat(::google::protobuf::uint32 value);

  // required uint32 R1 = 3;
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 3;
  inline ::google::protobuf::uint32 r1() const;
  inline void set_r1(::google::protobuf::uint32 value);

  // required uint32 R2 = 4;
  inline bool has_r2() const;
  inline void clear_r2();
  static const int kR2FieldNumber = 4;
  inline ::google::protobuf::uint32 r2() const;
  inline void set_r2(::google::protobuf::uint32 value);

  // required uint32 R3 = 5;
  inline bool has_r3() const;
  inline void clear_r3();
  static const int kR3FieldNumber = 5;
  inline ::google::protobuf::uint32 r3() const;
  inline void set_r3(::google::protobuf::uint32 value);

  // required uint32 R4 = 6;
  inline bool has_r4() const;
  inline void clear_r4();
  static const int kR4FieldNumber = 6;
  inline ::google::protobuf::uint32 r4() const;
  inline void set_r4(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSTask)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskstat();
  inline void clear_has_taskstat();
  inline void set_has_r1();
  inline void clear_has_r1();
  inline void set_has_r2();
  inline void clear_has_r2();
  inline void set_has_r3();
  inline void clear_has_r3();
  inline void set_has_r4();
  inline void clear_has_r4();

  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 taskstat_;
  ::google::protobuf::uint32 r1_;
  ::google::protobuf::uint32 r2_;
  ::google::protobuf::uint32 r3_;
  ::google::protobuf::uint32 r4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSTaskMsg_2eproto();
  friend void protobuf_ShutdownFile_CSTaskMsg_2eproto();

  void InitAsDefaultInstance();
  static CSTask* default_instance_;
};
// -------------------------------------------------------------------

class CSDailyTaskInfo : public ::google::protobuf::MessageLite {
 public:
  CSDailyTaskInfo();
  virtual ~CSDailyTaskInfo();

  CSDailyTaskInfo(const CSDailyTaskInfo& from);

  inline CSDailyTaskInfo& operator=(const CSDailyTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSDailyTaskInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSDailyTaskInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSDailyTaskInfo* other);

  // implements Message ----------------------------------------------

  CSDailyTaskInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSDailyTaskInfo& from);
  void MergeFrom(const CSDailyTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vmsg.CSTask DailyTasks = 1;
  inline int dailytasks_size() const;
  inline void clear_dailytasks();
  static const int kDailyTasksFieldNumber = 1;
  inline const ::vmsg::CSTask& dailytasks(int index) const;
  inline ::vmsg::CSTask* mutable_dailytasks(int index);
  inline ::vmsg::CSTask* add_dailytasks();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >&
      dailytasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >*
      mutable_dailytasks();

  // required uint32 RemainReflashCnt = 2;
  inline bool has_remainreflashcnt() const;
  inline void clear_remainreflashcnt();
  static const int kRemainReflashCntFieldNumber = 2;
  inline ::google::protobuf::uint32 remainreflashcnt() const;
  inline void set_remainreflashcnt(::google::protobuf::uint32 value);

  // required uint32 ReflashGoldCost = 3;
  inline bool has_reflashgoldcost() const;
  inline void clear_reflashgoldcost();
  static const int kReflashGoldCostFieldNumber = 3;
  inline ::google::protobuf::uint32 reflashgoldcost() const;
  inline void set_reflashgoldcost(::google::protobuf::uint32 value);

  // optional uint32 Coin = 4;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 4;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // optional uint32 Exp = 5;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 5;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 Gold = 6;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 6;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // optional .vmsg.CSAwardElement Award = 7;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 7;
  inline const ::vmsg::CSAwardElement& award() const;
  inline ::vmsg::CSAwardElement* mutable_award();
  inline ::vmsg::CSAwardElement* release_award();
  inline void set_allocated_award(::vmsg::CSAwardElement* award);

  // @@protoc_insertion_point(class_scope:vmsg.CSDailyTaskInfo)
 private:
  inline void set_has_remainreflashcnt();
  inline void clear_has_remainreflashcnt();
  inline void set_has_reflashgoldcost();
  inline void clear_has_reflashgoldcost();
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_award();
  inline void clear_has_award();

  ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask > dailytasks_;
  ::google::protobuf::uint32 remainreflashcnt_;
  ::google::protobuf::uint32 reflashgoldcost_;
  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 exp_;
  ::vmsg::CSAwardElement* award_;
  ::google::protobuf::uint32 gold_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSTaskMsg_2eproto();
  friend void protobuf_ShutdownFile_CSTaskMsg_2eproto();

  void InitAsDefaultInstance();
  static CSDailyTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSMilestoneInfo : public ::google::protobuf::MessageLite {
 public:
  CSMilestoneInfo();
  virtual ~CSMilestoneInfo();

  CSMilestoneInfo(const CSMilestoneInfo& from);

  inline CSMilestoneInfo& operator=(const CSMilestoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSMilestoneInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSMilestoneInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSMilestoneInfo* other);

  // implements Message ----------------------------------------------

  CSMilestoneInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSMilestoneInfo& from);
  void MergeFrom(const CSMilestoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .vmsg.CSTask Milestones = 1;
  inline int milestones_size() const;
  inline void clear_milestones();
  static const int kMilestonesFieldNumber = 1;
  inline const ::vmsg::CSTask& milestones(int index) const;
  inline ::vmsg::CSTask* mutable_milestones(int index);
  inline ::vmsg::CSTask* add_milestones();
  inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >&
      milestones() const;
  inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >*
      mutable_milestones();

  // @@protoc_insertion_point(class_scope:vmsg.CSMilestoneInfo)
 private:

  ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask > milestones_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSTaskMsg_2eproto();
  friend void protobuf_ShutdownFile_CSTaskMsg_2eproto();

  void InitAsDefaultInstance();
  static CSMilestoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class CSTaskRequest : public ::google::protobuf::MessageLite {
 public:
  CSTaskRequest();
  virtual ~CSTaskRequest();

  CSTaskRequest(const CSTaskRequest& from);

  inline CSTaskRequest& operator=(const CSTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSTaskRequest& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSTaskRequest* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSTaskRequest* other);

  // implements Message ----------------------------------------------

  CSTaskRequest* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSTaskRequest& from);
  void MergeFrom(const CSTaskRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CommitDailyTask_Rqst = 1;
  inline bool has_commitdailytask_rqst() const;
  inline void clear_commitdailytask_rqst();
  static const int kCommitDailyTaskRqstFieldNumber = 1;
  inline ::google::protobuf::uint32 commitdailytask_rqst() const;
  inline void set_commitdailytask_rqst(::google::protobuf::uint32 value);

  // optional uint32 CommitMilestone_Rqst = 2;
  inline bool has_commitmilestone_rqst() const;
  inline void clear_commitmilestone_rqst();
  static const int kCommitMilestoneRqstFieldNumber = 2;
  inline ::google::protobuf::uint32 commitmilestone_rqst() const;
  inline void set_commitmilestone_rqst(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:vmsg.CSTaskRequest)
 private:
  inline void set_has_commitdailytask_rqst();
  inline void clear_has_commitdailytask_rqst();
  inline void set_has_commitmilestone_rqst();
  inline void clear_has_commitmilestone_rqst();

  ::google::protobuf::uint32 commitdailytask_rqst_;
  ::google::protobuf::uint32 commitmilestone_rqst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSTaskMsg_2eproto();
  friend void protobuf_ShutdownFile_CSTaskMsg_2eproto();

  void InitAsDefaultInstance();
  static CSTaskRequest* default_instance_;
};
// -------------------------------------------------------------------

class CSTaskRespond : public ::google::protobuf::MessageLite {
 public:
  CSTaskRespond();
  virtual ~CSTaskRespond();

  CSTaskRespond(const CSTaskRespond& from);

  inline CSTaskRespond& operator=(const CSTaskRespond& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSTaskRespond& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSTaskRespond* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSTaskRespond* other);

  // implements Message ----------------------------------------------

  CSTaskRespond* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSTaskRespond& from);
  void MergeFrom(const CSTaskRespond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .vmsg.CSTask ReceiveTask_Rsp = 1;
  inline bool has_receivetask_rsp() const;
  inline void clear_receivetask_rsp();
  static const int kReceiveTaskRspFieldNumber = 1;
  inline const ::vmsg::CSTask& receivetask_rsp() const;
  inline ::vmsg::CSTask* mutable_receivetask_rsp();
  inline ::vmsg::CSTask* release_receivetask_rsp();
  inline void set_allocated_receivetask_rsp(::vmsg::CSTask* receivetask_rsp);

  // optional .vmsg.CSTask CommitTask_Rsp = 2;
  inline bool has_committask_rsp() const;
  inline void clear_committask_rsp();
  static const int kCommitTaskRspFieldNumber = 2;
  inline const ::vmsg::CSTask& committask_rsp() const;
  inline ::vmsg::CSTask* mutable_committask_rsp();
  inline ::vmsg::CSTask* release_committask_rsp();
  inline void set_allocated_committask_rsp(::vmsg::CSTask* committask_rsp);

  // optional .vmsg.CSTask QueryTask_Rsp = 3;
  inline bool has_querytask_rsp() const;
  inline void clear_querytask_rsp();
  static const int kQueryTaskRspFieldNumber = 3;
  inline const ::vmsg::CSTask& querytask_rsp() const;
  inline ::vmsg::CSTask* mutable_querytask_rsp();
  inline ::vmsg::CSTask* release_querytask_rsp();
  inline void set_allocated_querytask_rsp(::vmsg::CSTask* querytask_rsp);

  // optional .vmsg.CSTask TaskStat_Notify = 4;
  inline bool has_taskstat_notify() const;
  inline void clear_taskstat_notify();
  static const int kTaskStatNotifyFieldNumber = 4;
  inline const ::vmsg::CSTask& taskstat_notify() const;
  inline ::vmsg::CSTask* mutable_taskstat_notify();
  inline ::vmsg::CSTask* release_taskstat_notify();
  inline void set_allocated_taskstat_notify(::vmsg::CSTask* taskstat_notify);

  // optional .vmsg.CSDailyTaskInfo QueryDailyTask_Rsp = 5;
  inline bool has_querydailytask_rsp() const;
  inline void clear_querydailytask_rsp();
  static const int kQueryDailyTaskRspFieldNumber = 5;
  inline const ::vmsg::CSDailyTaskInfo& querydailytask_rsp() const;
  inline ::vmsg::CSDailyTaskInfo* mutable_querydailytask_rsp();
  inline ::vmsg::CSDailyTaskInfo* release_querydailytask_rsp();
  inline void set_allocated_querydailytask_rsp(::vmsg::CSDailyTaskInfo* querydailytask_rsp);

  // optional .vmsg.CSDailyTaskInfo ReflashDailyTask_Rsp = 6;
  inline bool has_reflashdailytask_rsp() const;
  inline void clear_reflashdailytask_rsp();
  static const int kReflashDailyTaskRspFieldNumber = 6;
  inline const ::vmsg::CSDailyTaskInfo& reflashdailytask_rsp() const;
  inline ::vmsg::CSDailyTaskInfo* mutable_reflashdailytask_rsp();
  inline ::vmsg::CSDailyTaskInfo* release_reflashdailytask_rsp();
  inline void set_allocated_reflashdailytask_rsp(::vmsg::CSDailyTaskInfo* reflashdailytask_rsp);

  // optional .vmsg.CSDailyTaskInfo CommitDailyTask_Rsp = 7;
  inline bool has_commitdailytask_rsp() const;
  inline void clear_commitdailytask_rsp();
  static const int kCommitDailyTaskRspFieldNumber = 7;
  inline const ::vmsg::CSDailyTaskInfo& commitdailytask_rsp() const;
  inline ::vmsg::CSDailyTaskInfo* mutable_commitdailytask_rsp();
  inline ::vmsg::CSDailyTaskInfo* release_commitdailytask_rsp();
  inline void set_allocated_commitdailytask_rsp(::vmsg::CSDailyTaskInfo* commitdailytask_rsp);

  // optional .vmsg.CSDailyTaskInfo DailyTaskStat_Notify = 8;
  inline bool has_dailytaskstat_notify() const;
  inline void clear_dailytaskstat_notify();
  static const int kDailyTaskStatNotifyFieldNumber = 8;
  inline const ::vmsg::CSDailyTaskInfo& dailytaskstat_notify() const;
  inline ::vmsg::CSDailyTaskInfo* mutable_dailytaskstat_notify();
  inline ::vmsg::CSDailyTaskInfo* release_dailytaskstat_notify();
  inline void set_allocated_dailytaskstat_notify(::vmsg::CSDailyTaskInfo* dailytaskstat_notify);

  // optional .vmsg.CSMilestoneInfo QueryMilestone_Rsp = 9;
  inline bool has_querymilestone_rsp() const;
  inline void clear_querymilestone_rsp();
  static const int kQueryMilestoneRspFieldNumber = 9;
  inline const ::vmsg::CSMilestoneInfo& querymilestone_rsp() const;
  inline ::vmsg::CSMilestoneInfo* mutable_querymilestone_rsp();
  inline ::vmsg::CSMilestoneInfo* release_querymilestone_rsp();
  inline void set_allocated_querymilestone_rsp(::vmsg::CSMilestoneInfo* querymilestone_rsp);

  // optional .vmsg.CSMilestoneInfo CommitMilestone_Rsp = 10;
  inline bool has_commitmilestone_rsp() const;
  inline void clear_commitmilestone_rsp();
  static const int kCommitMilestoneRspFieldNumber = 10;
  inline const ::vmsg::CSMilestoneInfo& commitmilestone_rsp() const;
  inline ::vmsg::CSMilestoneInfo* mutable_commitmilestone_rsp();
  inline ::vmsg::CSMilestoneInfo* release_commitmilestone_rsp();
  inline void set_allocated_commitmilestone_rsp(::vmsg::CSMilestoneInfo* commitmilestone_rsp);

  // optional .vmsg.CSMilestoneInfo MilestoneStat_Notify = 11;
  inline bool has_milestonestat_notify() const;
  inline void clear_milestonestat_notify();
  static const int kMilestoneStatNotifyFieldNumber = 11;
  inline const ::vmsg::CSMilestoneInfo& milestonestat_notify() const;
  inline ::vmsg::CSMilestoneInfo* mutable_milestonestat_notify();
  inline ::vmsg::CSMilestoneInfo* release_milestonestat_notify();
  inline void set_allocated_milestonestat_notify(::vmsg::CSMilestoneInfo* milestonestat_notify);

  // @@protoc_insertion_point(class_scope:vmsg.CSTaskRespond)
 private:
  inline void set_has_receivetask_rsp();
  inline void clear_has_receivetask_rsp();
  inline void set_has_committask_rsp();
  inline void clear_has_committask_rsp();
  inline void set_has_querytask_rsp();
  inline void clear_has_querytask_rsp();
  inline void set_has_taskstat_notify();
  inline void clear_has_taskstat_notify();
  inline void set_has_querydailytask_rsp();
  inline void clear_has_querydailytask_rsp();
  inline void set_has_reflashdailytask_rsp();
  inline void clear_has_reflashdailytask_rsp();
  inline void set_has_commitdailytask_rsp();
  inline void clear_has_commitdailytask_rsp();
  inline void set_has_dailytaskstat_notify();
  inline void clear_has_dailytaskstat_notify();
  inline void set_has_querymilestone_rsp();
  inline void clear_has_querymilestone_rsp();
  inline void set_has_commitmilestone_rsp();
  inline void clear_has_commitmilestone_rsp();
  inline void set_has_milestonestat_notify();
  inline void clear_has_milestonestat_notify();

  ::vmsg::CSTask* receivetask_rsp_;
  ::vmsg::CSTask* committask_rsp_;
  ::vmsg::CSTask* querytask_rsp_;
  ::vmsg::CSTask* taskstat_notify_;
  ::vmsg::CSDailyTaskInfo* querydailytask_rsp_;
  ::vmsg::CSDailyTaskInfo* reflashdailytask_rsp_;
  ::vmsg::CSDailyTaskInfo* commitdailytask_rsp_;
  ::vmsg::CSDailyTaskInfo* dailytaskstat_notify_;
  ::vmsg::CSMilestoneInfo* querymilestone_rsp_;
  ::vmsg::CSMilestoneInfo* commitmilestone_rsp_;
  ::vmsg::CSMilestoneInfo* milestonestat_notify_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSTaskMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSTaskMsg_2eproto();
  friend void protobuf_ShutdownFile_CSTaskMsg_2eproto();

  void InitAsDefaultInstance();
  static CSTaskRespond* default_instance_;
};
// ===================================================================


// ===================================================================

// CSTask

// required uint32 TaskID = 1;
inline bool CSTask::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSTask::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSTask::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSTask::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 CSTask::taskid() const {
  return taskid_;
}
inline void CSTask::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 TaskStat = 2;
inline bool CSTask::has_taskstat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSTask::set_has_taskstat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSTask::clear_has_taskstat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSTask::clear_taskstat() {
  taskstat_ = 0u;
  clear_has_taskstat();
}
inline ::google::protobuf::uint32 CSTask::taskstat() const {
  return taskstat_;
}
inline void CSTask::set_taskstat(::google::protobuf::uint32 value) {
  set_has_taskstat();
  taskstat_ = value;
}

// required uint32 R1 = 3;
inline bool CSTask::has_r1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSTask::set_has_r1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSTask::clear_has_r1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSTask::clear_r1() {
  r1_ = 0u;
  clear_has_r1();
}
inline ::google::protobuf::uint32 CSTask::r1() const {
  return r1_;
}
inline void CSTask::set_r1(::google::protobuf::uint32 value) {
  set_has_r1();
  r1_ = value;
}

// required uint32 R2 = 4;
inline bool CSTask::has_r2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSTask::set_has_r2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSTask::clear_has_r2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSTask::clear_r2() {
  r2_ = 0u;
  clear_has_r2();
}
inline ::google::protobuf::uint32 CSTask::r2() const {
  return r2_;
}
inline void CSTask::set_r2(::google::protobuf::uint32 value) {
  set_has_r2();
  r2_ = value;
}

// required uint32 R3 = 5;
inline bool CSTask::has_r3() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSTask::set_has_r3() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSTask::clear_has_r3() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSTask::clear_r3() {
  r3_ = 0u;
  clear_has_r3();
}
inline ::google::protobuf::uint32 CSTask::r3() const {
  return r3_;
}
inline void CSTask::set_r3(::google::protobuf::uint32 value) {
  set_has_r3();
  r3_ = value;
}

// required uint32 R4 = 6;
inline bool CSTask::has_r4() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSTask::set_has_r4() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSTask::clear_has_r4() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSTask::clear_r4() {
  r4_ = 0u;
  clear_has_r4();
}
inline ::google::protobuf::uint32 CSTask::r4() const {
  return r4_;
}
inline void CSTask::set_r4(::google::protobuf::uint32 value) {
  set_has_r4();
  r4_ = value;
}

// -------------------------------------------------------------------

// CSDailyTaskInfo

// repeated .vmsg.CSTask DailyTasks = 1;
inline int CSDailyTaskInfo::dailytasks_size() const {
  return dailytasks_.size();
}
inline void CSDailyTaskInfo::clear_dailytasks() {
  dailytasks_.Clear();
}
inline const ::vmsg::CSTask& CSDailyTaskInfo::dailytasks(int index) const {
  return dailytasks_.Get(index);
}
inline ::vmsg::CSTask* CSDailyTaskInfo::mutable_dailytasks(int index) {
  return dailytasks_.Mutable(index);
}
inline ::vmsg::CSTask* CSDailyTaskInfo::add_dailytasks() {
  return dailytasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >&
CSDailyTaskInfo::dailytasks() const {
  return dailytasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >*
CSDailyTaskInfo::mutable_dailytasks() {
  return &dailytasks_;
}

// required uint32 RemainReflashCnt = 2;
inline bool CSDailyTaskInfo::has_remainreflashcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSDailyTaskInfo::set_has_remainreflashcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSDailyTaskInfo::clear_has_remainreflashcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSDailyTaskInfo::clear_remainreflashcnt() {
  remainreflashcnt_ = 0u;
  clear_has_remainreflashcnt();
}
inline ::google::protobuf::uint32 CSDailyTaskInfo::remainreflashcnt() const {
  return remainreflashcnt_;
}
inline void CSDailyTaskInfo::set_remainreflashcnt(::google::protobuf::uint32 value) {
  set_has_remainreflashcnt();
  remainreflashcnt_ = value;
}

// required uint32 ReflashGoldCost = 3;
inline bool CSDailyTaskInfo::has_reflashgoldcost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSDailyTaskInfo::set_has_reflashgoldcost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSDailyTaskInfo::clear_has_reflashgoldcost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSDailyTaskInfo::clear_reflashgoldcost() {
  reflashgoldcost_ = 0u;
  clear_has_reflashgoldcost();
}
inline ::google::protobuf::uint32 CSDailyTaskInfo::reflashgoldcost() const {
  return reflashgoldcost_;
}
inline void CSDailyTaskInfo::set_reflashgoldcost(::google::protobuf::uint32 value) {
  set_has_reflashgoldcost();
  reflashgoldcost_ = value;
}

// optional uint32 Coin = 4;
inline bool CSDailyTaskInfo::has_coin() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSDailyTaskInfo::set_has_coin() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSDailyTaskInfo::clear_has_coin() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSDailyTaskInfo::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 CSDailyTaskInfo::coin() const {
  return coin_;
}
inline void CSDailyTaskInfo::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// optional uint32 Exp = 5;
inline bool CSDailyTaskInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSDailyTaskInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSDailyTaskInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSDailyTaskInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 CSDailyTaskInfo::exp() const {
  return exp_;
}
inline void CSDailyTaskInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 Gold = 6;
inline bool CSDailyTaskInfo::has_gold() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSDailyTaskInfo::set_has_gold() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSDailyTaskInfo::clear_has_gold() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSDailyTaskInfo::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 CSDailyTaskInfo::gold() const {
  return gold_;
}
inline void CSDailyTaskInfo::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// optional .vmsg.CSAwardElement Award = 7;
inline bool CSDailyTaskInfo::has_award() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSDailyTaskInfo::set_has_award() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSDailyTaskInfo::clear_has_award() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSDailyTaskInfo::clear_award() {
  if (award_ != NULL) award_->::vmsg::CSAwardElement::Clear();
  clear_has_award();
}
inline const ::vmsg::CSAwardElement& CSDailyTaskInfo::award() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return award_ != NULL ? *award_ : *default_instance().award_;
#else
  return award_ != NULL ? *award_ : *default_instance_->award_;
#endif
}
inline ::vmsg::CSAwardElement* CSDailyTaskInfo::mutable_award() {
  set_has_award();
  if (award_ == NULL) award_ = new ::vmsg::CSAwardElement;
  return award_;
}
inline ::vmsg::CSAwardElement* CSDailyTaskInfo::release_award() {
  clear_has_award();
  ::vmsg::CSAwardElement* temp = award_;
  award_ = NULL;
  return temp;
}
inline void CSDailyTaskInfo::set_allocated_award(::vmsg::CSAwardElement* award) {
  delete award_;
  award_ = award;
  if (award) {
    set_has_award();
  } else {
    clear_has_award();
  }
}

// -------------------------------------------------------------------

// CSMilestoneInfo

// repeated .vmsg.CSTask Milestones = 1;
inline int CSMilestoneInfo::milestones_size() const {
  return milestones_.size();
}
inline void CSMilestoneInfo::clear_milestones() {
  milestones_.Clear();
}
inline const ::vmsg::CSTask& CSMilestoneInfo::milestones(int index) const {
  return milestones_.Get(index);
}
inline ::vmsg::CSTask* CSMilestoneInfo::mutable_milestones(int index) {
  return milestones_.Mutable(index);
}
inline ::vmsg::CSTask* CSMilestoneInfo::add_milestones() {
  return milestones_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >&
CSMilestoneInfo::milestones() const {
  return milestones_;
}
inline ::google::protobuf::RepeatedPtrField< ::vmsg::CSTask >*
CSMilestoneInfo::mutable_milestones() {
  return &milestones_;
}

// -------------------------------------------------------------------

// CSTaskRequest

// optional uint32 CommitDailyTask_Rqst = 1;
inline bool CSTaskRequest::has_commitdailytask_rqst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSTaskRequest::set_has_commitdailytask_rqst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSTaskRequest::clear_has_commitdailytask_rqst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSTaskRequest::clear_commitdailytask_rqst() {
  commitdailytask_rqst_ = 0u;
  clear_has_commitdailytask_rqst();
}
inline ::google::protobuf::uint32 CSTaskRequest::commitdailytask_rqst() const {
  return commitdailytask_rqst_;
}
inline void CSTaskRequest::set_commitdailytask_rqst(::google::protobuf::uint32 value) {
  set_has_commitdailytask_rqst();
  commitdailytask_rqst_ = value;
}

// optional uint32 CommitMilestone_Rqst = 2;
inline bool CSTaskRequest::has_commitmilestone_rqst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSTaskRequest::set_has_commitmilestone_rqst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSTaskRequest::clear_has_commitmilestone_rqst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSTaskRequest::clear_commitmilestone_rqst() {
  commitmilestone_rqst_ = 0u;
  clear_has_commitmilestone_rqst();
}
inline ::google::protobuf::uint32 CSTaskRequest::commitmilestone_rqst() const {
  return commitmilestone_rqst_;
}
inline void CSTaskRequest::set_commitmilestone_rqst(::google::protobuf::uint32 value) {
  set_has_commitmilestone_rqst();
  commitmilestone_rqst_ = value;
}

// -------------------------------------------------------------------

// CSTaskRespond

// optional .vmsg.CSTask ReceiveTask_Rsp = 1;
inline bool CSTaskRespond::has_receivetask_rsp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSTaskRespond::set_has_receivetask_rsp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSTaskRespond::clear_has_receivetask_rsp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSTaskRespond::clear_receivetask_rsp() {
  if (receivetask_rsp_ != NULL) receivetask_rsp_->::vmsg::CSTask::Clear();
  clear_has_receivetask_rsp();
}
inline const ::vmsg::CSTask& CSTaskRespond::receivetask_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return receivetask_rsp_ != NULL ? *receivetask_rsp_ : *default_instance().receivetask_rsp_;
#else
  return receivetask_rsp_ != NULL ? *receivetask_rsp_ : *default_instance_->receivetask_rsp_;
#endif
}
inline ::vmsg::CSTask* CSTaskRespond::mutable_receivetask_rsp() {
  set_has_receivetask_rsp();
  if (receivetask_rsp_ == NULL) receivetask_rsp_ = new ::vmsg::CSTask;
  return receivetask_rsp_;
}
inline ::vmsg::CSTask* CSTaskRespond::release_receivetask_rsp() {
  clear_has_receivetask_rsp();
  ::vmsg::CSTask* temp = receivetask_rsp_;
  receivetask_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_receivetask_rsp(::vmsg::CSTask* receivetask_rsp) {
  delete receivetask_rsp_;
  receivetask_rsp_ = receivetask_rsp;
  if (receivetask_rsp) {
    set_has_receivetask_rsp();
  } else {
    clear_has_receivetask_rsp();
  }
}

// optional .vmsg.CSTask CommitTask_Rsp = 2;
inline bool CSTaskRespond::has_committask_rsp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSTaskRespond::set_has_committask_rsp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSTaskRespond::clear_has_committask_rsp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSTaskRespond::clear_committask_rsp() {
  if (committask_rsp_ != NULL) committask_rsp_->::vmsg::CSTask::Clear();
  clear_has_committask_rsp();
}
inline const ::vmsg::CSTask& CSTaskRespond::committask_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return committask_rsp_ != NULL ? *committask_rsp_ : *default_instance().committask_rsp_;
#else
  return committask_rsp_ != NULL ? *committask_rsp_ : *default_instance_->committask_rsp_;
#endif
}
inline ::vmsg::CSTask* CSTaskRespond::mutable_committask_rsp() {
  set_has_committask_rsp();
  if (committask_rsp_ == NULL) committask_rsp_ = new ::vmsg::CSTask;
  return committask_rsp_;
}
inline ::vmsg::CSTask* CSTaskRespond::release_committask_rsp() {
  clear_has_committask_rsp();
  ::vmsg::CSTask* temp = committask_rsp_;
  committask_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_committask_rsp(::vmsg::CSTask* committask_rsp) {
  delete committask_rsp_;
  committask_rsp_ = committask_rsp;
  if (committask_rsp) {
    set_has_committask_rsp();
  } else {
    clear_has_committask_rsp();
  }
}

// optional .vmsg.CSTask QueryTask_Rsp = 3;
inline bool CSTaskRespond::has_querytask_rsp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSTaskRespond::set_has_querytask_rsp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSTaskRespond::clear_has_querytask_rsp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSTaskRespond::clear_querytask_rsp() {
  if (querytask_rsp_ != NULL) querytask_rsp_->::vmsg::CSTask::Clear();
  clear_has_querytask_rsp();
}
inline const ::vmsg::CSTask& CSTaskRespond::querytask_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return querytask_rsp_ != NULL ? *querytask_rsp_ : *default_instance().querytask_rsp_;
#else
  return querytask_rsp_ != NULL ? *querytask_rsp_ : *default_instance_->querytask_rsp_;
#endif
}
inline ::vmsg::CSTask* CSTaskRespond::mutable_querytask_rsp() {
  set_has_querytask_rsp();
  if (querytask_rsp_ == NULL) querytask_rsp_ = new ::vmsg::CSTask;
  return querytask_rsp_;
}
inline ::vmsg::CSTask* CSTaskRespond::release_querytask_rsp() {
  clear_has_querytask_rsp();
  ::vmsg::CSTask* temp = querytask_rsp_;
  querytask_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_querytask_rsp(::vmsg::CSTask* querytask_rsp) {
  delete querytask_rsp_;
  querytask_rsp_ = querytask_rsp;
  if (querytask_rsp) {
    set_has_querytask_rsp();
  } else {
    clear_has_querytask_rsp();
  }
}

// optional .vmsg.CSTask TaskStat_Notify = 4;
inline bool CSTaskRespond::has_taskstat_notify() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSTaskRespond::set_has_taskstat_notify() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSTaskRespond::clear_has_taskstat_notify() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSTaskRespond::clear_taskstat_notify() {
  if (taskstat_notify_ != NULL) taskstat_notify_->::vmsg::CSTask::Clear();
  clear_has_taskstat_notify();
}
inline const ::vmsg::CSTask& CSTaskRespond::taskstat_notify() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return taskstat_notify_ != NULL ? *taskstat_notify_ : *default_instance().taskstat_notify_;
#else
  return taskstat_notify_ != NULL ? *taskstat_notify_ : *default_instance_->taskstat_notify_;
#endif
}
inline ::vmsg::CSTask* CSTaskRespond::mutable_taskstat_notify() {
  set_has_taskstat_notify();
  if (taskstat_notify_ == NULL) taskstat_notify_ = new ::vmsg::CSTask;
  return taskstat_notify_;
}
inline ::vmsg::CSTask* CSTaskRespond::release_taskstat_notify() {
  clear_has_taskstat_notify();
  ::vmsg::CSTask* temp = taskstat_notify_;
  taskstat_notify_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_taskstat_notify(::vmsg::CSTask* taskstat_notify) {
  delete taskstat_notify_;
  taskstat_notify_ = taskstat_notify;
  if (taskstat_notify) {
    set_has_taskstat_notify();
  } else {
    clear_has_taskstat_notify();
  }
}

// optional .vmsg.CSDailyTaskInfo QueryDailyTask_Rsp = 5;
inline bool CSTaskRespond::has_querydailytask_rsp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSTaskRespond::set_has_querydailytask_rsp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSTaskRespond::clear_has_querydailytask_rsp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSTaskRespond::clear_querydailytask_rsp() {
  if (querydailytask_rsp_ != NULL) querydailytask_rsp_->::vmsg::CSDailyTaskInfo::Clear();
  clear_has_querydailytask_rsp();
}
inline const ::vmsg::CSDailyTaskInfo& CSTaskRespond::querydailytask_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return querydailytask_rsp_ != NULL ? *querydailytask_rsp_ : *default_instance().querydailytask_rsp_;
#else
  return querydailytask_rsp_ != NULL ? *querydailytask_rsp_ : *default_instance_->querydailytask_rsp_;
#endif
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::mutable_querydailytask_rsp() {
  set_has_querydailytask_rsp();
  if (querydailytask_rsp_ == NULL) querydailytask_rsp_ = new ::vmsg::CSDailyTaskInfo;
  return querydailytask_rsp_;
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::release_querydailytask_rsp() {
  clear_has_querydailytask_rsp();
  ::vmsg::CSDailyTaskInfo* temp = querydailytask_rsp_;
  querydailytask_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_querydailytask_rsp(::vmsg::CSDailyTaskInfo* querydailytask_rsp) {
  delete querydailytask_rsp_;
  querydailytask_rsp_ = querydailytask_rsp;
  if (querydailytask_rsp) {
    set_has_querydailytask_rsp();
  } else {
    clear_has_querydailytask_rsp();
  }
}

// optional .vmsg.CSDailyTaskInfo ReflashDailyTask_Rsp = 6;
inline bool CSTaskRespond::has_reflashdailytask_rsp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSTaskRespond::set_has_reflashdailytask_rsp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSTaskRespond::clear_has_reflashdailytask_rsp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSTaskRespond::clear_reflashdailytask_rsp() {
  if (reflashdailytask_rsp_ != NULL) reflashdailytask_rsp_->::vmsg::CSDailyTaskInfo::Clear();
  clear_has_reflashdailytask_rsp();
}
inline const ::vmsg::CSDailyTaskInfo& CSTaskRespond::reflashdailytask_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return reflashdailytask_rsp_ != NULL ? *reflashdailytask_rsp_ : *default_instance().reflashdailytask_rsp_;
#else
  return reflashdailytask_rsp_ != NULL ? *reflashdailytask_rsp_ : *default_instance_->reflashdailytask_rsp_;
#endif
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::mutable_reflashdailytask_rsp() {
  set_has_reflashdailytask_rsp();
  if (reflashdailytask_rsp_ == NULL) reflashdailytask_rsp_ = new ::vmsg::CSDailyTaskInfo;
  return reflashdailytask_rsp_;
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::release_reflashdailytask_rsp() {
  clear_has_reflashdailytask_rsp();
  ::vmsg::CSDailyTaskInfo* temp = reflashdailytask_rsp_;
  reflashdailytask_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_reflashdailytask_rsp(::vmsg::CSDailyTaskInfo* reflashdailytask_rsp) {
  delete reflashdailytask_rsp_;
  reflashdailytask_rsp_ = reflashdailytask_rsp;
  if (reflashdailytask_rsp) {
    set_has_reflashdailytask_rsp();
  } else {
    clear_has_reflashdailytask_rsp();
  }
}

// optional .vmsg.CSDailyTaskInfo CommitDailyTask_Rsp = 7;
inline bool CSTaskRespond::has_commitdailytask_rsp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSTaskRespond::set_has_commitdailytask_rsp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSTaskRespond::clear_has_commitdailytask_rsp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSTaskRespond::clear_commitdailytask_rsp() {
  if (commitdailytask_rsp_ != NULL) commitdailytask_rsp_->::vmsg::CSDailyTaskInfo::Clear();
  clear_has_commitdailytask_rsp();
}
inline const ::vmsg::CSDailyTaskInfo& CSTaskRespond::commitdailytask_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return commitdailytask_rsp_ != NULL ? *commitdailytask_rsp_ : *default_instance().commitdailytask_rsp_;
#else
  return commitdailytask_rsp_ != NULL ? *commitdailytask_rsp_ : *default_instance_->commitdailytask_rsp_;
#endif
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::mutable_commitdailytask_rsp() {
  set_has_commitdailytask_rsp();
  if (commitdailytask_rsp_ == NULL) commitdailytask_rsp_ = new ::vmsg::CSDailyTaskInfo;
  return commitdailytask_rsp_;
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::release_commitdailytask_rsp() {
  clear_has_commitdailytask_rsp();
  ::vmsg::CSDailyTaskInfo* temp = commitdailytask_rsp_;
  commitdailytask_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_commitdailytask_rsp(::vmsg::CSDailyTaskInfo* commitdailytask_rsp) {
  delete commitdailytask_rsp_;
  commitdailytask_rsp_ = commitdailytask_rsp;
  if (commitdailytask_rsp) {
    set_has_commitdailytask_rsp();
  } else {
    clear_has_commitdailytask_rsp();
  }
}

// optional .vmsg.CSDailyTaskInfo DailyTaskStat_Notify = 8;
inline bool CSTaskRespond::has_dailytaskstat_notify() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSTaskRespond::set_has_dailytaskstat_notify() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSTaskRespond::clear_has_dailytaskstat_notify() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSTaskRespond::clear_dailytaskstat_notify() {
  if (dailytaskstat_notify_ != NULL) dailytaskstat_notify_->::vmsg::CSDailyTaskInfo::Clear();
  clear_has_dailytaskstat_notify();
}
inline const ::vmsg::CSDailyTaskInfo& CSTaskRespond::dailytaskstat_notify() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return dailytaskstat_notify_ != NULL ? *dailytaskstat_notify_ : *default_instance().dailytaskstat_notify_;
#else
  return dailytaskstat_notify_ != NULL ? *dailytaskstat_notify_ : *default_instance_->dailytaskstat_notify_;
#endif
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::mutable_dailytaskstat_notify() {
  set_has_dailytaskstat_notify();
  if (dailytaskstat_notify_ == NULL) dailytaskstat_notify_ = new ::vmsg::CSDailyTaskInfo;
  return dailytaskstat_notify_;
}
inline ::vmsg::CSDailyTaskInfo* CSTaskRespond::release_dailytaskstat_notify() {
  clear_has_dailytaskstat_notify();
  ::vmsg::CSDailyTaskInfo* temp = dailytaskstat_notify_;
  dailytaskstat_notify_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_dailytaskstat_notify(::vmsg::CSDailyTaskInfo* dailytaskstat_notify) {
  delete dailytaskstat_notify_;
  dailytaskstat_notify_ = dailytaskstat_notify;
  if (dailytaskstat_notify) {
    set_has_dailytaskstat_notify();
  } else {
    clear_has_dailytaskstat_notify();
  }
}

// optional .vmsg.CSMilestoneInfo QueryMilestone_Rsp = 9;
inline bool CSTaskRespond::has_querymilestone_rsp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSTaskRespond::set_has_querymilestone_rsp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSTaskRespond::clear_has_querymilestone_rsp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSTaskRespond::clear_querymilestone_rsp() {
  if (querymilestone_rsp_ != NULL) querymilestone_rsp_->::vmsg::CSMilestoneInfo::Clear();
  clear_has_querymilestone_rsp();
}
inline const ::vmsg::CSMilestoneInfo& CSTaskRespond::querymilestone_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return querymilestone_rsp_ != NULL ? *querymilestone_rsp_ : *default_instance().querymilestone_rsp_;
#else
  return querymilestone_rsp_ != NULL ? *querymilestone_rsp_ : *default_instance_->querymilestone_rsp_;
#endif
}
inline ::vmsg::CSMilestoneInfo* CSTaskRespond::mutable_querymilestone_rsp() {
  set_has_querymilestone_rsp();
  if (querymilestone_rsp_ == NULL) querymilestone_rsp_ = new ::vmsg::CSMilestoneInfo;
  return querymilestone_rsp_;
}
inline ::vmsg::CSMilestoneInfo* CSTaskRespond::release_querymilestone_rsp() {
  clear_has_querymilestone_rsp();
  ::vmsg::CSMilestoneInfo* temp = querymilestone_rsp_;
  querymilestone_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_querymilestone_rsp(::vmsg::CSMilestoneInfo* querymilestone_rsp) {
  delete querymilestone_rsp_;
  querymilestone_rsp_ = querymilestone_rsp;
  if (querymilestone_rsp) {
    set_has_querymilestone_rsp();
  } else {
    clear_has_querymilestone_rsp();
  }
}

// optional .vmsg.CSMilestoneInfo CommitMilestone_Rsp = 10;
inline bool CSTaskRespond::has_commitmilestone_rsp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSTaskRespond::set_has_commitmilestone_rsp() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSTaskRespond::clear_has_commitmilestone_rsp() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSTaskRespond::clear_commitmilestone_rsp() {
  if (commitmilestone_rsp_ != NULL) commitmilestone_rsp_->::vmsg::CSMilestoneInfo::Clear();
  clear_has_commitmilestone_rsp();
}
inline const ::vmsg::CSMilestoneInfo& CSTaskRespond::commitmilestone_rsp() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return commitmilestone_rsp_ != NULL ? *commitmilestone_rsp_ : *default_instance().commitmilestone_rsp_;
#else
  return commitmilestone_rsp_ != NULL ? *commitmilestone_rsp_ : *default_instance_->commitmilestone_rsp_;
#endif
}
inline ::vmsg::CSMilestoneInfo* CSTaskRespond::mutable_commitmilestone_rsp() {
  set_has_commitmilestone_rsp();
  if (commitmilestone_rsp_ == NULL) commitmilestone_rsp_ = new ::vmsg::CSMilestoneInfo;
  return commitmilestone_rsp_;
}
inline ::vmsg::CSMilestoneInfo* CSTaskRespond::release_commitmilestone_rsp() {
  clear_has_commitmilestone_rsp();
  ::vmsg::CSMilestoneInfo* temp = commitmilestone_rsp_;
  commitmilestone_rsp_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_commitmilestone_rsp(::vmsg::CSMilestoneInfo* commitmilestone_rsp) {
  delete commitmilestone_rsp_;
  commitmilestone_rsp_ = commitmilestone_rsp;
  if (commitmilestone_rsp) {
    set_has_commitmilestone_rsp();
  } else {
    clear_has_commitmilestone_rsp();
  }
}

// optional .vmsg.CSMilestoneInfo MilestoneStat_Notify = 11;
inline bool CSTaskRespond::has_milestonestat_notify() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSTaskRespond::set_has_milestonestat_notify() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSTaskRespond::clear_has_milestonestat_notify() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSTaskRespond::clear_milestonestat_notify() {
  if (milestonestat_notify_ != NULL) milestonestat_notify_->::vmsg::CSMilestoneInfo::Clear();
  clear_has_milestonestat_notify();
}
inline const ::vmsg::CSMilestoneInfo& CSTaskRespond::milestonestat_notify() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return milestonestat_notify_ != NULL ? *milestonestat_notify_ : *default_instance().milestonestat_notify_;
#else
  return milestonestat_notify_ != NULL ? *milestonestat_notify_ : *default_instance_->milestonestat_notify_;
#endif
}
inline ::vmsg::CSMilestoneInfo* CSTaskRespond::mutable_milestonestat_notify() {
  set_has_milestonestat_notify();
  if (milestonestat_notify_ == NULL) milestonestat_notify_ = new ::vmsg::CSMilestoneInfo;
  return milestonestat_notify_;
}
inline ::vmsg::CSMilestoneInfo* CSTaskRespond::release_milestonestat_notify() {
  clear_has_milestonestat_notify();
  ::vmsg::CSMilestoneInfo* temp = milestonestat_notify_;
  milestonestat_notify_ = NULL;
  return temp;
}
inline void CSTaskRespond::set_allocated_milestonestat_notify(::vmsg::CSMilestoneInfo* milestonestat_notify) {
  delete milestonestat_notify_;
  milestonestat_notify_ = milestonestat_notify;
  if (milestonestat_notify) {
    set_has_milestonestat_notify();
  } else {
    clear_has_milestonestat_notify();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSTaskMsg_2eproto__INCLUDED
