// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSPushMsg.proto

#ifndef PROTOBUF_CSPushMsg_2eproto__INCLUDED
#define PROTOBUF_CSPushMsg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include "MsgBase.pb.h"
#include "ShareByClient.pb.h"
#include "CSBagMsg.pb.h"
// @@protoc_insertion_point(includes)

namespace vmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CSPushMsg_2eproto();
void protobuf_AssignDesc_CSPushMsg_2eproto();
void protobuf_ShutdownFile_CSPushMsg_2eproto();

class CSUMemDeviceTokenReport;

// ===================================================================

class CSUMemDeviceTokenReport : public ::google::protobuf::MessageLite {
 public:
  CSUMemDeviceTokenReport();
  virtual ~CSUMemDeviceTokenReport();

  CSUMemDeviceTokenReport(const CSUMemDeviceTokenReport& from);

  inline CSUMemDeviceTokenReport& operator=(const CSUMemDeviceTokenReport& from) {
    CopyFrom(from);
    return *this;
  }

  static const CSUMemDeviceTokenReport& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CSUMemDeviceTokenReport* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CSUMemDeviceTokenReport* other);

  // implements Message ----------------------------------------------

  CSUMemDeviceTokenReport* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CSUMemDeviceTokenReport& from);
  void MergeFrom(const CSUMemDeviceTokenReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Token = 1;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 1;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:vmsg.CSUMemDeviceTokenReport)
 private:
  inline void set_has_token();
  inline void clear_has_token();

  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CSPushMsg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CSPushMsg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CSPushMsg_2eproto();
  friend void protobuf_ShutdownFile_CSPushMsg_2eproto();

  void InitAsDefaultInstance();
  static CSUMemDeviceTokenReport* default_instance_;
};
// ===================================================================


// ===================================================================

// CSUMemDeviceTokenReport

// optional string Token = 1;
inline bool CSUMemDeviceTokenReport::has_token() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSUMemDeviceTokenReport::set_has_token() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSUMemDeviceTokenReport::clear_has_token() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSUMemDeviceTokenReport::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CSUMemDeviceTokenReport::token() const {
  return *token_;
}
inline void CSUMemDeviceTokenReport::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CSUMemDeviceTokenReport::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CSUMemDeviceTokenReport::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSUMemDeviceTokenReport::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* CSUMemDeviceTokenReport::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSUMemDeviceTokenReport::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CSPushMsg_2eproto__INCLUDED
