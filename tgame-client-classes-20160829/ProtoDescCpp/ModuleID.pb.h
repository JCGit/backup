// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModuleID.proto

#ifndef PROTOBUF_ModuleID_2eproto__INCLUDED
#define PROTOBUF_ModuleID_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ModuleID_2eproto();
void protobuf_AssignDesc_ModuleID_2eproto();
void protobuf_ShutdownFile_ModuleID_2eproto();


enum ModuleID {
  MODULE_ID_EVOLUTIONSKILL = 1,
  MODULE_ID_BAG = 2,
  MODULE_ID_EQUIP_REFINE = 3,
  MODULE_ID_LOTTERY = 4,
  MODULE_ID_WEAPON_LVUP = 5,
  MODULE_ID_WEAPON_STARSTEP = 6,
  MODULE_ID_DAILYTASK = 7,
  MODULE_ID_RANK = 8,
  MODULE_ID_FRIEND = 9,
  MODULE_ID_GUILD = 10,
  MODULE_ID_EVOLUTION = 11,
  MODULE_ID_ATTRSTRENGTHEN = 12,
  MODULE_ID_ARENA = 13,
  MODULE_ID_CVZ = 14,
  MODULE_ID_INFINIT = 15,
  MODULE_ID_MAIL = 16,
  MODULE_ID_MILESTONE = 17,
  MODULE_ID_WEAPONLIB = 18,
  MODULE_ID_QIANGHUN = 19,
  MODULE_ID_EQUIPLVUP = 20,
  MODULE_ID_EQUIPREFIT = 21,
  MODULE_ID_EQUIPSTARSTEP = 22,
  MODULE_ID_NOTHINGLAND = 23,
  MODULE_ID_ELITEWARMAP = 24,
  MODULE_ID_BLACKMARKET = 25,
  MODULE_ID_DEBRIS = 26,
  MODULE_ID_BUYCOIN = 27,
  MODULE_ID_MONTHCARD = 28,
  MODULE_ID_SIGNIN = 29,
  MODULE_ID_DOTAITEM = 30,
  MODULE_ID_PANIC_BUYING_STORE = 31,
  MODULE_ID_COUPON = 32,
  MODULE_ID_STORE_BUY = 33,
  MODULE_ID_RELIVE = 34,
  MODULE_ID_BUY_BULLET = 35,
  MODULE_ID_WEAPON_ARRAY = 36,
  MODULE_ID_BUY_INSTANCE = 37,
  MODULE_ID_FIRST_CHARGE_PKG = 38,
  MODULE_ID_SHOP = 39,
  MODULE_ID_PLAYER_ENFORCE = 40,
  MODULE_ID_VIP = 100,
  MODULE_ID_TASK = 101,
  MODULE_ID_WARMAP = 102,
  MODULE_ID_SWEEP = 103,
  MODULE_ID_LEVELUP = 104,
  MODULE_ID_WORLD_BOSS_CHALLENGE = 105,
  MODULE_ID_SPRING_ACT = 106,
  MODULE_ID_DAILY_INSTANCE = 107,
  MODULE_ID_ADMIN = 10000,
  MODULE_ID_PLATACT = 20000
};
bool ModuleID_IsValid(int value);
const ModuleID ModuleID_MIN = MODULE_ID_EVOLUTIONSKILL;
const ModuleID ModuleID_MAX = MODULE_ID_PLATACT;
const int ModuleID_ARRAYSIZE = ModuleID_MAX + 1;

enum GuildEventID {
  GUILD_EVENT_CREATE = 9
};
bool GuildEventID_IsValid(int value);
const GuildEventID GuildEventID_MIN = GUILD_EVENT_CREATE;
const GuildEventID GuildEventID_MAX = GUILD_EVENT_CREATE;
const int GuildEventID_ARRAYSIZE = GuildEventID_MAX + 1;

enum ArenaEventID {
  ARENA_EVENT_CHALLENGER_AWARD = 1,
  ARENA_EVENT_CHALLENGE_RANK_AWARD = 2,
  ARENA_EVENT_BUY_CHALLENGE_TIME = 3,
  ARENA_EVENT_MATCH_COST = 4,
  ARENA_EVENT_REFRESH_COST = 5,
  ARENA_EVENT_STORE_BUY_ITEM = 6,
  ARENA_EVENT_OPP_LOSE = 7
};
bool ArenaEventID_IsValid(int value);
const ArenaEventID ArenaEventID_MIN = ARENA_EVENT_CHALLENGER_AWARD;
const ArenaEventID ArenaEventID_MAX = ARENA_EVENT_OPP_LOSE;
const int ArenaEventID_ARRAYSIZE = ArenaEventID_MAX + 1;

enum EquipRefineEventID {
  EQUIPREFINE_EVENT_REFINE = 1,
  EQUIPREFINE_EVENT_TRANS = 2
};
bool EquipRefineEventID_IsValid(int value);
const EquipRefineEventID EquipRefineEventID_MIN = EQUIPREFINE_EVENT_REFINE;
const EquipRefineEventID EquipRefineEventID_MAX = EQUIPREFINE_EVENT_TRANS;
const int EquipRefineEventID_ARRAYSIZE = EquipRefineEventID_MAX + 1;

enum BagEventID {
  BAG_EVENT_ENLARGE = 1,
  BAG_EVENT_USE = 2,
  BAG_EVENT_DISCARD = 3,
  BAG_EVENT_SELL = 4
};
bool BagEventID_IsValid(int value);
const BagEventID BagEventID_MIN = BAG_EVENT_ENLARGE;
const BagEventID BagEventID_MAX = BAG_EVENT_SELL;
const int BagEventID_ARRAYSIZE = BagEventID_MAX + 1;

enum TaskEventID {
  TASK_EVENT_RECEIVE = 1,
  TASK_EVENT_COMMIT = 2
};
bool TaskEventID_IsValid(int value);
const TaskEventID TaskEventID_MIN = TASK_EVENT_RECEIVE;
const TaskEventID TaskEventID_MAX = TASK_EVENT_COMMIT;
const int TaskEventID_ARRAYSIZE = TaskEventID_MAX + 1;

enum MileStoneEventID {
  MILESTONE_EVENT_COMMIT = 1
};
bool MileStoneEventID_IsValid(int value);
const MileStoneEventID MileStoneEventID_MIN = MILESTONE_EVENT_COMMIT;
const MileStoneEventID MileStoneEventID_MAX = MILESTONE_EVENT_COMMIT;
const int MileStoneEventID_ARRAYSIZE = MileStoneEventID_MAX + 1;

enum DailyTaskEventID {
  DAILYTASK_EVENT_COMMIT = 1
};
bool DailyTaskEventID_IsValid(int value);
const DailyTaskEventID DailyTaskEventID_MIN = DAILYTASK_EVENT_COMMIT;
const DailyTaskEventID DailyTaskEventID_MAX = DAILYTASK_EVENT_COMMIT;
const int DailyTaskEventID_ARRAYSIZE = DailyTaskEventID_MAX + 1;

enum MailEventID {
  MAIL_EVENT_GET_ATTACH = 1
};
bool MailEventID_IsValid(int value);
const MailEventID MailEventID_MIN = MAIL_EVENT_GET_ATTACH;
const MailEventID MailEventID_MAX = MAIL_EVENT_GET_ATTACH;
const int MailEventID_ARRAYSIZE = MailEventID_MAX + 1;

enum VIPEventID {
  VIP_EVENT_DAILYAWARD = 1
};
bool VIPEventID_IsValid(int value);
const VIPEventID VIPEventID_MIN = VIP_EVENT_DAILYAWARD;
const VIPEventID VIPEventID_MAX = VIP_EVENT_DAILYAWARD;
const int VIPEventID_ARRAYSIZE = VIPEventID_MAX + 1;

enum QianghunEventID {
  QIANGHUN_EVENT_FLOP = 1
};
bool QianghunEventID_IsValid(int value);
const QianghunEventID QianghunEventID_MIN = QIANGHUN_EVENT_FLOP;
const QianghunEventID QianghunEventID_MAX = QIANGHUN_EVENT_FLOP;
const int QianghunEventID_ARRAYSIZE = QianghunEventID_MAX + 1;

enum WarMapEventID {
  WARMAP_EVENT_CARD = 1
};
bool WarMapEventID_IsValid(int value);
const WarMapEventID WarMapEventID_MIN = WARMAP_EVENT_CARD;
const WarMapEventID WarMapEventID_MAX = WARMAP_EVENT_CARD;
const int WarMapEventID_ARRAYSIZE = WarMapEventID_MAX + 1;

enum EliteWarMapEventID {
  ELITEWARMAP_EVENT_AWARD = 1
};
bool EliteWarMapEventID_IsValid(int value);
const EliteWarMapEventID EliteWarMapEventID_MIN = ELITEWARMAP_EVENT_AWARD;
const EliteWarMapEventID EliteWarMapEventID_MAX = ELITEWARMAP_EVENT_AWARD;
const int EliteWarMapEventID_ARRAYSIZE = EliteWarMapEventID_MAX + 1;

enum WeaponEventID {
  WEAPON_EVENT_LVUP = 1,
  WEAPON_EVENT_STARSTEP = 2,
  WEAPON_EVENT_REFIT = 3
};
bool WeaponEventID_IsValid(int value);
const WeaponEventID WeaponEventID_MIN = WEAPON_EVENT_LVUP;
const WeaponEventID WeaponEventID_MAX = WEAPON_EVENT_REFIT;
const int WeaponEventID_ARRAYSIZE = WeaponEventID_MAX + 1;

enum EquipEventID {
  EQUIP_EVENT_LVUP = 1,
  EQUIP_EVENT_REFIT = 2,
  EQUIP_EVENT_STARSTEP = 3
};
bool EquipEventID_IsValid(int value);
const EquipEventID EquipEventID_MIN = EQUIP_EVENT_LVUP;
const EquipEventID EquipEventID_MAX = EQUIP_EVENT_STARSTEP;
const int EquipEventID_ARRAYSIZE = EquipEventID_MAX + 1;

enum AdminEventID {
  ADMIN_EVENT_IGNORE = 0,
  ADMIN_EVENT_ID_ADMIN = 1,
  ADMIN_EVENT_PAY_ACT = 2,
  ADMIN_EVENT_NEWBEE_PACKAGE = 3,
  ADMIN_EVENT_ID_RMB = 4
};
bool AdminEventID_IsValid(int value);
const AdminEventID AdminEventID_MIN = ADMIN_EVENT_IGNORE;
const AdminEventID AdminEventID_MAX = ADMIN_EVENT_ID_RMB;
const int AdminEventID_ARRAYSIZE = AdminEventID_MAX + 1;

enum WeaponLotteryEventID {
  WEAPON_LOT_EVENT_AWARD = 1
};
bool WeaponLotteryEventID_IsValid(int value);
const WeaponLotteryEventID WeaponLotteryEventID_MIN = WEAPON_LOT_EVENT_AWARD;
const WeaponLotteryEventID WeaponLotteryEventID_MAX = WEAPON_LOT_EVENT_AWARD;
const int WeaponLotteryEventID_ARRAYSIZE = WeaponLotteryEventID_MAX + 1;

enum NothingLandEventID {
  NOTHINGLAND_EVENT_RUSH = 1,
  NOTHINGLAND_EVENT_END = 2
};
bool NothingLandEventID_IsValid(int value);
const NothingLandEventID NothingLandEventID_MIN = NOTHINGLAND_EVENT_RUSH;
const NothingLandEventID NothingLandEventID_MAX = NOTHINGLAND_EVENT_END;
const int NothingLandEventID_ARRAYSIZE = NothingLandEventID_MAX + 1;

enum BlackMarketEventID {
  BLACKMARKET_EVENT_RESET = 1,
  BLACKMARKET_EVENT_BUY = 2
};
bool BlackMarketEventID_IsValid(int value);
const BlackMarketEventID BlackMarketEventID_MIN = BLACKMARKET_EVENT_RESET;
const BlackMarketEventID BlackMarketEventID_MAX = BLACKMARKET_EVENT_BUY;
const int BlackMarketEventID_ARRAYSIZE = BlackMarketEventID_MAX + 1;

enum DebrisEventID {
  DEBRIS_EVENT_COMPOSE = 1
};
bool DebrisEventID_IsValid(int value);
const DebrisEventID DebrisEventID_MIN = DEBRIS_EVENT_COMPOSE;
const DebrisEventID DebrisEventID_MAX = DEBRIS_EVENT_COMPOSE;
const int DebrisEventID_ARRAYSIZE = DebrisEventID_MAX + 1;

enum BuyCoinEventID {
  BUYCOIN_EVENT_BUY = 1
};
bool BuyCoinEventID_IsValid(int value);
const BuyCoinEventID BuyCoinEventID_MIN = BUYCOIN_EVENT_BUY;
const BuyCoinEventID BuyCoinEventID_MAX = BUYCOIN_EVENT_BUY;
const int BuyCoinEventID_ARRAYSIZE = BuyCoinEventID_MAX + 1;

enum MonthCardEventID {
  MONTHCARD_EVENT_AWARD = 1
};
bool MonthCardEventID_IsValid(int value);
const MonthCardEventID MonthCardEventID_MIN = MONTHCARD_EVENT_AWARD;
const MonthCardEventID MonthCardEventID_MAX = MONTHCARD_EVENT_AWARD;
const int MonthCardEventID_ARRAYSIZE = MonthCardEventID_MAX + 1;

enum DotaItemEventID {
  DOTAITEM_COMPOSE = 1
};
bool DotaItemEventID_IsValid(int value);
const DotaItemEventID DotaItemEventID_MIN = DOTAITEM_COMPOSE;
const DotaItemEventID DotaItemEventID_MAX = DOTAITEM_COMPOSE;
const int DotaItemEventID_ARRAYSIZE = DotaItemEventID_MAX + 1;

enum PanicBuyingEventID {
  PANIC_BUYING = 1
};
bool PanicBuyingEventID_IsValid(int value);
const PanicBuyingEventID PanicBuyingEventID_MIN = PANIC_BUYING;
const PanicBuyingEventID PanicBuyingEventID_MAX = PANIC_BUYING;
const int PanicBuyingEventID_ARRAYSIZE = PanicBuyingEventID_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ModuleID_2eproto__INCLUDED
