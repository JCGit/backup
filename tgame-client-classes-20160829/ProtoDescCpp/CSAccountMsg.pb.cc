// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSAccountMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSAccountMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSAccountMsg_2eproto() {
  delete CSRegAccountRqst::default_instance_;
  delete CSRegAccountRsp::default_instance_;
  delete CSAccountAuthRqst::default_instance_;
  delete CSChangePasswordRqst::default_instance_;
  delete CSAccountRquest::default_instance_;
  delete CSAccountRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSAccountMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSAccountMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  CSRegAccountRqst::default_instance_ = new CSRegAccountRqst();
  CSRegAccountRsp::default_instance_ = new CSRegAccountRsp();
  CSAccountAuthRqst::default_instance_ = new CSAccountAuthRqst();
  CSChangePasswordRqst::default_instance_ = new CSChangePasswordRqst();
  CSAccountRquest::default_instance_ = new CSAccountRquest();
  CSAccountRespond::default_instance_ = new CSAccountRespond();
  CSRegAccountRqst::default_instance_->InitAsDefaultInstance();
  CSRegAccountRsp::default_instance_->InitAsDefaultInstance();
  CSAccountAuthRqst::default_instance_->InitAsDefaultInstance();
  CSChangePasswordRqst::default_instance_->InitAsDefaultInstance();
  CSAccountRquest::default_instance_->InitAsDefaultInstance();
  CSAccountRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSAccountMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSAccountMsg_2eproto_once_);
void protobuf_AddDesc_CSAccountMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSAccountMsg_2eproto_once_,
                 &protobuf_AddDesc_CSAccountMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSAccountMsg_2eproto {
  StaticDescriptorInitializer_CSAccountMsg_2eproto() {
    protobuf_AddDesc_CSAccountMsg_2eproto();
  }
} static_descriptor_initializer_CSAccountMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSRegAccountRqst::kEmailFieldNumber;
const int CSRegAccountRqst::kPasswordFieldNumber;
#endif  // !_MSC_VER

CSRegAccountRqst::CSRegAccountRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRegAccountRqst::InitAsDefaultInstance() {
}

CSRegAccountRqst::CSRegAccountRqst(const CSRegAccountRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegAccountRqst::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegAccountRqst::~CSRegAccountRqst() {
  SharedDtor();
}

void CSRegAccountRqst::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRegAccountRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRegAccountRqst& CSRegAccountRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSAccountMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSAccountMsg_2eproto();
#endif
  return *default_instance_;
}

CSRegAccountRqst* CSRegAccountRqst::default_instance_ = NULL;

CSRegAccountRqst* CSRegAccountRqst::New() const {
  return new CSRegAccountRqst;
}

void CSRegAccountRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRegAccountRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Password;
        break;
      }

      // required string Password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegAccountRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }

  // required string Password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

}

int CSRegAccountRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string Password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegAccountRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRegAccountRqst*>(&from));
}

void CSRegAccountRqst::MergeFrom(const CSRegAccountRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
}

void CSRegAccountRqst::CopyFrom(const CSRegAccountRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegAccountRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSRegAccountRqst::Swap(CSRegAccountRqst* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRegAccountRqst::GetTypeName() const {
  return "vmsg.CSRegAccountRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSRegAccountRsp::kUidFieldNumber;
#endif  // !_MSC_VER

CSRegAccountRsp::CSRegAccountRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSRegAccountRsp::InitAsDefaultInstance() {
}

CSRegAccountRsp::CSRegAccountRsp(const CSRegAccountRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSRegAccountRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSRegAccountRsp::~CSRegAccountRsp() {
  SharedDtor();
}

void CSRegAccountRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSRegAccountRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSRegAccountRsp& CSRegAccountRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSAccountMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSAccountMsg_2eproto();
#endif
  return *default_instance_;
}

CSRegAccountRsp* CSRegAccountRsp::default_instance_ = NULL;

CSRegAccountRsp* CSRegAccountRsp::New() const {
  return new CSRegAccountRsp;
}

void CSRegAccountRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSRegAccountRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSRegAccountRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uid(), output);
  }

}

int CSRegAccountRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSRegAccountRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSRegAccountRsp*>(&from));
}

void CSRegAccountRsp::MergeFrom(const CSRegAccountRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
}

void CSRegAccountRsp::CopyFrom(const CSRegAccountRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSRegAccountRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSRegAccountRsp::Swap(CSRegAccountRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSRegAccountRsp::GetTypeName() const {
  return "vmsg.CSRegAccountRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccountAuthRqst::kEmailFieldNumber;
const int CSAccountAuthRqst::kSignFieldNumber;
#endif  // !_MSC_VER

CSAccountAuthRqst::CSAccountAuthRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAccountAuthRqst::InitAsDefaultInstance() {
}

CSAccountAuthRqst::CSAccountAuthRqst(const CSAccountAuthRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAccountAuthRqst::SharedCtor() {
  _cached_size_ = 0;
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccountAuthRqst::~CSAccountAuthRqst() {
  SharedDtor();
}

void CSAccountAuthRqst::SharedDtor() {
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAccountAuthRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAccountAuthRqst& CSAccountAuthRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSAccountMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSAccountMsg_2eproto();
#endif
  return *default_instance_;
}

CSAccountAuthRqst* CSAccountAuthRqst::default_instance_ = NULL;

CSAccountAuthRqst* CSAccountAuthRqst::New() const {
  return new CSAccountAuthRqst;
}

void CSAccountAuthRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAccountAuthRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Email = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Sign;
        break;
      }

      // required string Sign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAccountAuthRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Email = 1;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->email(), output);
  }

  // required string Sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sign(), output);
  }

}

int CSAccountAuthRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Email = 1;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string Sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccountAuthRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAccountAuthRqst*>(&from));
}

void CSAccountAuthRqst::MergeFrom(const CSAccountAuthRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
}

void CSAccountAuthRqst::CopyFrom(const CSAccountAuthRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccountAuthRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSAccountAuthRqst::Swap(CSAccountAuthRqst* other) {
  if (other != this) {
    std::swap(email_, other->email_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAccountAuthRqst::GetTypeName() const {
  return "vmsg.CSAccountAuthRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSChangePasswordRqst::kAdminKeyFieldNumber;
const int CSChangePasswordRqst::kEmailFieldNumber;
const int CSChangePasswordRqst::kNewPassordFieldNumber;
#endif  // !_MSC_VER

CSChangePasswordRqst::CSChangePasswordRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSChangePasswordRqst::InitAsDefaultInstance() {
}

CSChangePasswordRqst::CSChangePasswordRqst(const CSChangePasswordRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSChangePasswordRqst::SharedCtor() {
  _cached_size_ = 0;
  adminkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  email_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  newpassord_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSChangePasswordRqst::~CSChangePasswordRqst() {
  SharedDtor();
}

void CSChangePasswordRqst::SharedDtor() {
  if (adminkey_ != &::google::protobuf::internal::kEmptyString) {
    delete adminkey_;
  }
  if (email_ != &::google::protobuf::internal::kEmptyString) {
    delete email_;
  }
  if (newpassord_ != &::google::protobuf::internal::kEmptyString) {
    delete newpassord_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSChangePasswordRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSChangePasswordRqst& CSChangePasswordRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSAccountMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSAccountMsg_2eproto();
#endif
  return *default_instance_;
}

CSChangePasswordRqst* CSChangePasswordRqst::default_instance_ = NULL;

CSChangePasswordRqst* CSChangePasswordRqst::New() const {
  return new CSChangePasswordRqst;
}

void CSChangePasswordRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_adminkey()) {
      if (adminkey_ != &::google::protobuf::internal::kEmptyString) {
        adminkey_->clear();
      }
    }
    if (has_email()) {
      if (email_ != &::google::protobuf::internal::kEmptyString) {
        email_->clear();
      }
    }
    if (has_newpassord()) {
      if (newpassord_ != &::google::protobuf::internal::kEmptyString) {
        newpassord_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSChangePasswordRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string AdminKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adminkey()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Email;
        break;
      }

      // required string Email = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NewPassord;
        break;
      }

      // required string NewPassord = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NewPassord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newpassord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSChangePasswordRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string AdminKey = 1;
  if (has_adminkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->adminkey(), output);
  }

  // required string Email = 2;
  if (has_email()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->email(), output);
  }

  // required string NewPassord = 3;
  if (has_newpassord()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->newpassord(), output);
  }

}

int CSChangePasswordRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string AdminKey = 1;
    if (has_adminkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->adminkey());
    }

    // required string Email = 2;
    if (has_email()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email());
    }

    // required string NewPassord = 3;
    if (has_newpassord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newpassord());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSChangePasswordRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSChangePasswordRqst*>(&from));
}

void CSChangePasswordRqst::MergeFrom(const CSChangePasswordRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adminkey()) {
      set_adminkey(from.adminkey());
    }
    if (from.has_email()) {
      set_email(from.email());
    }
    if (from.has_newpassord()) {
      set_newpassord(from.newpassord());
    }
  }
}

void CSChangePasswordRqst::CopyFrom(const CSChangePasswordRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSChangePasswordRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSChangePasswordRqst::Swap(CSChangePasswordRqst* other) {
  if (other != this) {
    std::swap(adminkey_, other->adminkey_);
    std::swap(email_, other->email_);
    std::swap(newpassord_, other->newpassord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSChangePasswordRqst::GetTypeName() const {
  return "vmsg.CSChangePasswordRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccountRquest::kRegAccountRqstFieldNumber;
const int CSAccountRquest::kAuthAccountRqstFieldNumber;
const int CSAccountRquest::kChangePasswordRqstFieldNumber;
#endif  // !_MSC_VER

CSAccountRquest::CSAccountRquest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAccountRquest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  regaccount_rqst_ = const_cast< ::vmsg::CSRegAccountRqst*>(
      ::vmsg::CSRegAccountRqst::internal_default_instance());
#else
  regaccount_rqst_ = const_cast< ::vmsg::CSRegAccountRqst*>(&::vmsg::CSRegAccountRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  authaccount_rqst_ = const_cast< ::vmsg::CSAccountAuthRqst*>(
      ::vmsg::CSAccountAuthRqst::internal_default_instance());
#else
  authaccount_rqst_ = const_cast< ::vmsg::CSAccountAuthRqst*>(&::vmsg::CSAccountAuthRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  changepassword_rqst_ = const_cast< ::vmsg::CSChangePasswordRqst*>(
      ::vmsg::CSChangePasswordRqst::internal_default_instance());
#else
  changepassword_rqst_ = const_cast< ::vmsg::CSChangePasswordRqst*>(&::vmsg::CSChangePasswordRqst::default_instance());
#endif
}

CSAccountRquest::CSAccountRquest(const CSAccountRquest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAccountRquest::SharedCtor() {
  _cached_size_ = 0;
  regaccount_rqst_ = NULL;
  authaccount_rqst_ = NULL;
  changepassword_rqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccountRquest::~CSAccountRquest() {
  SharedDtor();
}

void CSAccountRquest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete regaccount_rqst_;
    delete authaccount_rqst_;
    delete changepassword_rqst_;
  }
}

void CSAccountRquest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAccountRquest& CSAccountRquest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSAccountMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSAccountMsg_2eproto();
#endif
  return *default_instance_;
}

CSAccountRquest* CSAccountRquest::default_instance_ = NULL;

CSAccountRquest* CSAccountRquest::New() const {
  return new CSAccountRquest;
}

void CSAccountRquest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regaccount_rqst()) {
      if (regaccount_rqst_ != NULL) regaccount_rqst_->::vmsg::CSRegAccountRqst::Clear();
    }
    if (has_authaccount_rqst()) {
      if (authaccount_rqst_ != NULL) authaccount_rqst_->::vmsg::CSAccountAuthRqst::Clear();
    }
    if (has_changepassword_rqst()) {
      if (changepassword_rqst_ != NULL) changepassword_rqst_->::vmsg::CSChangePasswordRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAccountRquest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSRegAccountRqst RegAccount_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regaccount_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AuthAccount_Rqst;
        break;
      }

      // optional .vmsg.CSAccountAuthRqst AuthAccount_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AuthAccount_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authaccount_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ChangePassword_Rqst;
        break;
      }

      // optional .vmsg.CSChangePasswordRqst ChangePassword_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChangePassword_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_changepassword_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAccountRquest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSRegAccountRqst RegAccount_Rqst = 1;
  if (has_regaccount_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->regaccount_rqst(), output);
  }

  // optional .vmsg.CSAccountAuthRqst AuthAccount_Rqst = 2;
  if (has_authaccount_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->authaccount_rqst(), output);
  }

  // optional .vmsg.CSChangePasswordRqst ChangePassword_Rqst = 3;
  if (has_changepassword_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->changepassword_rqst(), output);
  }

}

int CSAccountRquest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSRegAccountRqst RegAccount_Rqst = 1;
    if (has_regaccount_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regaccount_rqst());
    }

    // optional .vmsg.CSAccountAuthRqst AuthAccount_Rqst = 2;
    if (has_authaccount_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authaccount_rqst());
    }

    // optional .vmsg.CSChangePasswordRqst ChangePassword_Rqst = 3;
    if (has_changepassword_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->changepassword_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccountRquest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAccountRquest*>(&from));
}

void CSAccountRquest::MergeFrom(const CSAccountRquest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regaccount_rqst()) {
      mutable_regaccount_rqst()->::vmsg::CSRegAccountRqst::MergeFrom(from.regaccount_rqst());
    }
    if (from.has_authaccount_rqst()) {
      mutable_authaccount_rqst()->::vmsg::CSAccountAuthRqst::MergeFrom(from.authaccount_rqst());
    }
    if (from.has_changepassword_rqst()) {
      mutable_changepassword_rqst()->::vmsg::CSChangePasswordRqst::MergeFrom(from.changepassword_rqst());
    }
  }
}

void CSAccountRquest::CopyFrom(const CSAccountRquest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccountRquest::IsInitialized() const {

  if (has_regaccount_rqst()) {
    if (!this->regaccount_rqst().IsInitialized()) return false;
  }
  if (has_authaccount_rqst()) {
    if (!this->authaccount_rqst().IsInitialized()) return false;
  }
  if (has_changepassword_rqst()) {
    if (!this->changepassword_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSAccountRquest::Swap(CSAccountRquest* other) {
  if (other != this) {
    std::swap(regaccount_rqst_, other->regaccount_rqst_);
    std::swap(authaccount_rqst_, other->authaccount_rqst_);
    std::swap(changepassword_rqst_, other->changepassword_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAccountRquest::GetTypeName() const {
  return "vmsg.CSAccountRquest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAccountRespond::kRegAccountRspFieldNumber;
#endif  // !_MSC_VER

CSAccountRespond::CSAccountRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAccountRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  regaccount_rsp_ = const_cast< ::vmsg::CSRegAccountRsp*>(
      ::vmsg::CSRegAccountRsp::internal_default_instance());
#else
  regaccount_rsp_ = const_cast< ::vmsg::CSRegAccountRsp*>(&::vmsg::CSRegAccountRsp::default_instance());
#endif
}

CSAccountRespond::CSAccountRespond(const CSAccountRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAccountRespond::SharedCtor() {
  _cached_size_ = 0;
  regaccount_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAccountRespond::~CSAccountRespond() {
  SharedDtor();
}

void CSAccountRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete regaccount_rsp_;
  }
}

void CSAccountRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAccountRespond& CSAccountRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSAccountMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSAccountMsg_2eproto();
#endif
  return *default_instance_;
}

CSAccountRespond* CSAccountRespond::default_instance_ = NULL;

CSAccountRespond* CSAccountRespond::New() const {
  return new CSAccountRespond;
}

void CSAccountRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_regaccount_rsp()) {
      if (regaccount_rsp_ != NULL) regaccount_rsp_->::vmsg::CSRegAccountRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAccountRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSRegAccountRsp RegAccount_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_regaccount_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAccountRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSRegAccountRsp RegAccount_Rsp = 1;
  if (has_regaccount_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->regaccount_rsp(), output);
  }

}

int CSAccountRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSRegAccountRsp RegAccount_Rsp = 1;
    if (has_regaccount_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->regaccount_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAccountRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAccountRespond*>(&from));
}

void CSAccountRespond::MergeFrom(const CSAccountRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_regaccount_rsp()) {
      mutable_regaccount_rsp()->::vmsg::CSRegAccountRsp::MergeFrom(from.regaccount_rsp());
    }
  }
}

void CSAccountRespond::CopyFrom(const CSAccountRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAccountRespond::IsInitialized() const {

  if (has_regaccount_rsp()) {
    if (!this->regaccount_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSAccountRespond::Swap(CSAccountRespond* other) {
  if (other != this) {
    std::swap(regaccount_rsp_, other->regaccount_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAccountRespond::GetTypeName() const {
  return "vmsg.CSAccountRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
