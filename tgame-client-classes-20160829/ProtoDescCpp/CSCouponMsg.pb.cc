// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSCouponMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSCouponMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSCouponMsg_2eproto() {
  delete CSClaimCouponRqst::default_instance_;
  delete CSClaimCouponRsp::default_instance_;
  delete CSClaimFirstChargePkgRsp::default_instance_;
  delete CSSpring7DayPkgStatus::default_instance_;
  delete SumChargePkgStatus::default_instance_;
  delete DailyChargePkgStatus::default_instance_;
  delete DailyLoginPkgStatus::default_instance_;
  delete GradeGeekPkgStatus::default_instance_;
  delete FightGeekPkgStatus::default_instance_;
  delete VipGiftPkgStatus::default_instance_;
  delete DailyConsumePkgStatus::default_instance_;
  delete SumConsumePkgStatus::default_instance_;
  delete OnlinePkgStatus::default_instance_;
  delete NextDayPkgStatus::default_instance_;
  delete SumChargePkgRqst::default_instance_;
  delete DailyChargePkgRqst::default_instance_;
  delete DailyLoginPkgRqst::default_instance_;
  delete GradeGeekPkgRqst::default_instance_;
  delete FightGeekPkgRqst::default_instance_;
  delete VipGiftPkgRqst::default_instance_;
  delete DailyConsumePkgRqst::default_instance_;
  delete SumConsumePkgRqst::default_instance_;
  delete OnlinePkgRqst::default_instance_;
  delete NextDayPkgRqst::default_instance_;
  delete AwardInfo::default_instance_;
  delete SumChargePkgPkgRsp::default_instance_;
  delete DailyChargePkgRsp::default_instance_;
  delete DailyLoginPkgRsp::default_instance_;
  delete GradeGeekPkgRsp::default_instance_;
  delete FightGeekPkgRsp::default_instance_;
  delete VipGiftPkgRsp::default_instance_;
  delete DailyConsumePkgRsp::default_instance_;
  delete SumConsumePkgRsp::default_instance_;
  delete OnlinePkgRsp::default_instance_;
  delete NextDayPkgRsp::default_instance_;
  delete CSCouponActStatusItem::default_instance_;
  delete CSClaimSpringPkgRqst::default_instance_;
  delete CSClaimSpringPkgRsp::default_instance_;
  delete CSQueryAllPkgStatusRsp::default_instance_;
  delete CSCouponRequest::default_instance_;
  delete CSCouponRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSCouponMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSCouponMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSEquipItemMsg_2eproto();
  ::vmsg::protobuf_AddDesc_CSBagMsg_2eproto();
  CSClaimCouponRqst::default_instance_ = new CSClaimCouponRqst();
  CSClaimCouponRsp::default_instance_ = new CSClaimCouponRsp();
  CSClaimFirstChargePkgRsp::default_instance_ = new CSClaimFirstChargePkgRsp();
  CSSpring7DayPkgStatus::default_instance_ = new CSSpring7DayPkgStatus();
  SumChargePkgStatus::default_instance_ = new SumChargePkgStatus();
  DailyChargePkgStatus::default_instance_ = new DailyChargePkgStatus();
  DailyLoginPkgStatus::default_instance_ = new DailyLoginPkgStatus();
  GradeGeekPkgStatus::default_instance_ = new GradeGeekPkgStatus();
  FightGeekPkgStatus::default_instance_ = new FightGeekPkgStatus();
  VipGiftPkgStatus::default_instance_ = new VipGiftPkgStatus();
  DailyConsumePkgStatus::default_instance_ = new DailyConsumePkgStatus();
  SumConsumePkgStatus::default_instance_ = new SumConsumePkgStatus();
  OnlinePkgStatus::default_instance_ = new OnlinePkgStatus();
  NextDayPkgStatus::default_instance_ = new NextDayPkgStatus();
  SumChargePkgRqst::default_instance_ = new SumChargePkgRqst();
  DailyChargePkgRqst::default_instance_ = new DailyChargePkgRqst();
  DailyLoginPkgRqst::default_instance_ = new DailyLoginPkgRqst();
  GradeGeekPkgRqst::default_instance_ = new GradeGeekPkgRqst();
  FightGeekPkgRqst::default_instance_ = new FightGeekPkgRqst();
  VipGiftPkgRqst::default_instance_ = new VipGiftPkgRqst();
  DailyConsumePkgRqst::default_instance_ = new DailyConsumePkgRqst();
  SumConsumePkgRqst::default_instance_ = new SumConsumePkgRqst();
  OnlinePkgRqst::default_instance_ = new OnlinePkgRqst();
  NextDayPkgRqst::default_instance_ = new NextDayPkgRqst();
  AwardInfo::default_instance_ = new AwardInfo();
  SumChargePkgPkgRsp::default_instance_ = new SumChargePkgPkgRsp();
  DailyChargePkgRsp::default_instance_ = new DailyChargePkgRsp();
  DailyLoginPkgRsp::default_instance_ = new DailyLoginPkgRsp();
  GradeGeekPkgRsp::default_instance_ = new GradeGeekPkgRsp();
  FightGeekPkgRsp::default_instance_ = new FightGeekPkgRsp();
  VipGiftPkgRsp::default_instance_ = new VipGiftPkgRsp();
  DailyConsumePkgRsp::default_instance_ = new DailyConsumePkgRsp();
  SumConsumePkgRsp::default_instance_ = new SumConsumePkgRsp();
  OnlinePkgRsp::default_instance_ = new OnlinePkgRsp();
  NextDayPkgRsp::default_instance_ = new NextDayPkgRsp();
  CSCouponActStatusItem::default_instance_ = new CSCouponActStatusItem();
  CSClaimSpringPkgRqst::default_instance_ = new CSClaimSpringPkgRqst();
  CSClaimSpringPkgRsp::default_instance_ = new CSClaimSpringPkgRsp();
  CSQueryAllPkgStatusRsp::default_instance_ = new CSQueryAllPkgStatusRsp();
  CSCouponRequest::default_instance_ = new CSCouponRequest();
  CSCouponRespond::default_instance_ = new CSCouponRespond();
  CSClaimCouponRqst::default_instance_->InitAsDefaultInstance();
  CSClaimCouponRsp::default_instance_->InitAsDefaultInstance();
  CSClaimFirstChargePkgRsp::default_instance_->InitAsDefaultInstance();
  CSSpring7DayPkgStatus::default_instance_->InitAsDefaultInstance();
  SumChargePkgStatus::default_instance_->InitAsDefaultInstance();
  DailyChargePkgStatus::default_instance_->InitAsDefaultInstance();
  DailyLoginPkgStatus::default_instance_->InitAsDefaultInstance();
  GradeGeekPkgStatus::default_instance_->InitAsDefaultInstance();
  FightGeekPkgStatus::default_instance_->InitAsDefaultInstance();
  VipGiftPkgStatus::default_instance_->InitAsDefaultInstance();
  DailyConsumePkgStatus::default_instance_->InitAsDefaultInstance();
  SumConsumePkgStatus::default_instance_->InitAsDefaultInstance();
  OnlinePkgStatus::default_instance_->InitAsDefaultInstance();
  NextDayPkgStatus::default_instance_->InitAsDefaultInstance();
  SumChargePkgRqst::default_instance_->InitAsDefaultInstance();
  DailyChargePkgRqst::default_instance_->InitAsDefaultInstance();
  DailyLoginPkgRqst::default_instance_->InitAsDefaultInstance();
  GradeGeekPkgRqst::default_instance_->InitAsDefaultInstance();
  FightGeekPkgRqst::default_instance_->InitAsDefaultInstance();
  VipGiftPkgRqst::default_instance_->InitAsDefaultInstance();
  DailyConsumePkgRqst::default_instance_->InitAsDefaultInstance();
  SumConsumePkgRqst::default_instance_->InitAsDefaultInstance();
  OnlinePkgRqst::default_instance_->InitAsDefaultInstance();
  NextDayPkgRqst::default_instance_->InitAsDefaultInstance();
  AwardInfo::default_instance_->InitAsDefaultInstance();
  SumChargePkgPkgRsp::default_instance_->InitAsDefaultInstance();
  DailyChargePkgRsp::default_instance_->InitAsDefaultInstance();
  DailyLoginPkgRsp::default_instance_->InitAsDefaultInstance();
  GradeGeekPkgRsp::default_instance_->InitAsDefaultInstance();
  FightGeekPkgRsp::default_instance_->InitAsDefaultInstance();
  VipGiftPkgRsp::default_instance_->InitAsDefaultInstance();
  DailyConsumePkgRsp::default_instance_->InitAsDefaultInstance();
  SumConsumePkgRsp::default_instance_->InitAsDefaultInstance();
  OnlinePkgRsp::default_instance_->InitAsDefaultInstance();
  NextDayPkgRsp::default_instance_->InitAsDefaultInstance();
  CSCouponActStatusItem::default_instance_->InitAsDefaultInstance();
  CSClaimSpringPkgRqst::default_instance_->InitAsDefaultInstance();
  CSClaimSpringPkgRsp::default_instance_->InitAsDefaultInstance();
  CSQueryAllPkgStatusRsp::default_instance_->InitAsDefaultInstance();
  CSCouponRequest::default_instance_->InitAsDefaultInstance();
  CSCouponRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSCouponMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSCouponMsg_2eproto_once_);
void protobuf_AddDesc_CSCouponMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSCouponMsg_2eproto_once_,
                 &protobuf_AddDesc_CSCouponMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSCouponMsg_2eproto {
  StaticDescriptorInitializer_CSCouponMsg_2eproto() {
    protobuf_AddDesc_CSCouponMsg_2eproto();
  }
} static_descriptor_initializer_CSCouponMsg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSClaimCouponRqst::kCouponIDFieldNumber;
#endif  // !_MSC_VER

CSClaimCouponRqst::CSClaimCouponRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSClaimCouponRqst::InitAsDefaultInstance() {
}

CSClaimCouponRqst::CSClaimCouponRqst(const CSClaimCouponRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSClaimCouponRqst::SharedCtor() {
  _cached_size_ = 0;
  couponid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClaimCouponRqst::~CSClaimCouponRqst() {
  SharedDtor();
}

void CSClaimCouponRqst::SharedDtor() {
  if (couponid_ != &::google::protobuf::internal::kEmptyString) {
    delete couponid_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSClaimCouponRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSClaimCouponRqst& CSClaimCouponRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSClaimCouponRqst* CSClaimCouponRqst::default_instance_ = NULL;

CSClaimCouponRqst* CSClaimCouponRqst::New() const {
  return new CSClaimCouponRqst;
}

void CSClaimCouponRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_couponid()) {
      if (couponid_ != &::google::protobuf::internal::kEmptyString) {
        couponid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSClaimCouponRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string CouponID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_couponid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClaimCouponRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string CouponID = 1;
  if (has_couponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->couponid(), output);
  }

}

int CSClaimCouponRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string CouponID = 1;
    if (has_couponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->couponid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClaimCouponRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSClaimCouponRqst*>(&from));
}

void CSClaimCouponRqst::MergeFrom(const CSClaimCouponRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_couponid()) {
      set_couponid(from.couponid());
    }
  }
}

void CSClaimCouponRqst::CopyFrom(const CSClaimCouponRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClaimCouponRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSClaimCouponRqst::Swap(CSClaimCouponRqst* other) {
  if (other != this) {
    std::swap(couponid_, other->couponid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSClaimCouponRqst::GetTypeName() const {
  return "vmsg.CSClaimCouponRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSClaimCouponRsp::kBagInfoFieldNumber;
const int CSClaimCouponRsp::kPkgIDFieldNumber;
const int CSClaimCouponRsp::kAllActsFieldNumber;
#endif  // !_MSC_VER

CSClaimCouponRsp::CSClaimCouponRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSClaimCouponRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSClaimCouponRsp::CSClaimCouponRsp(const CSClaimCouponRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSClaimCouponRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  pkgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClaimCouponRsp::~CSClaimCouponRsp() {
  SharedDtor();
}

void CSClaimCouponRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSClaimCouponRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSClaimCouponRsp& CSClaimCouponRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSClaimCouponRsp* CSClaimCouponRsp::default_instance_ = NULL;

CSClaimCouponRsp* CSClaimCouponRsp::New() const {
  return new CSClaimCouponRsp;
}

void CSClaimCouponRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    pkgid_ = 0u;
  }
  allacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSClaimCouponRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PkgID;
        break;
      }

      // required uint32 PkgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PkgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkgid_)));
          set_has_pkgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AllActs;
        break;
      }

      // repeated .vmsg.CSCouponActStatusItem AllActs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AllActs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allacts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AllActs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClaimCouponRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required uint32 PkgID = 2;
  if (has_pkgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkgid(), output);
  }

  // repeated .vmsg.CSCouponActStatusItem AllActs = 3;
  for (int i = 0; i < this->allacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->allacts(i), output);
  }

}

int CSClaimCouponRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required uint32 PkgID = 2;
    if (has_pkgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkgid());
    }

  }
  // repeated .vmsg.CSCouponActStatusItem AllActs = 3;
  total_size += 1 * this->allacts_size();
  for (int i = 0; i < this->allacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allacts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClaimCouponRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSClaimCouponRsp*>(&from));
}

void CSClaimCouponRsp::MergeFrom(const CSClaimCouponRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  allacts_.MergeFrom(from.allacts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_pkgid()) {
      set_pkgid(from.pkgid());
    }
  }
}

void CSClaimCouponRsp::CopyFrom(const CSClaimCouponRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClaimCouponRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < allacts_size(); i++) {
    if (!this->allacts(i).IsInitialized()) return false;
  }
  return true;
}

void CSClaimCouponRsp::Swap(CSClaimCouponRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(pkgid_, other->pkgid_);
    allacts_.Swap(&other->allacts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSClaimCouponRsp::GetTypeName() const {
  return "vmsg.CSClaimCouponRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSClaimFirstChargePkgRsp::kBagInfoFieldNumber;
const int CSClaimFirstChargePkgRsp::kPkgIDFieldNumber;
const int CSClaimFirstChargePkgRsp::kAllActsFieldNumber;
#endif  // !_MSC_VER

CSClaimFirstChargePkgRsp::CSClaimFirstChargePkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSClaimFirstChargePkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSClaimFirstChargePkgRsp::CSClaimFirstChargePkgRsp(const CSClaimFirstChargePkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSClaimFirstChargePkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  pkgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClaimFirstChargePkgRsp::~CSClaimFirstChargePkgRsp() {
  SharedDtor();
}

void CSClaimFirstChargePkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSClaimFirstChargePkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSClaimFirstChargePkgRsp& CSClaimFirstChargePkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSClaimFirstChargePkgRsp* CSClaimFirstChargePkgRsp::default_instance_ = NULL;

CSClaimFirstChargePkgRsp* CSClaimFirstChargePkgRsp::New() const {
  return new CSClaimFirstChargePkgRsp;
}

void CSClaimFirstChargePkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    pkgid_ = 0u;
  }
  allacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSClaimFirstChargePkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PkgID;
        break;
      }

      // required uint32 PkgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PkgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkgid_)));
          set_has_pkgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AllActs;
        break;
      }

      // repeated .vmsg.CSCouponActStatusItem AllActs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AllActs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allacts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AllActs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClaimFirstChargePkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required uint32 PkgID = 2;
  if (has_pkgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkgid(), output);
  }

  // repeated .vmsg.CSCouponActStatusItem AllActs = 3;
  for (int i = 0; i < this->allacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->allacts(i), output);
  }

}

int CSClaimFirstChargePkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required uint32 PkgID = 2;
    if (has_pkgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkgid());
    }

  }
  // repeated .vmsg.CSCouponActStatusItem AllActs = 3;
  total_size += 1 * this->allacts_size();
  for (int i = 0; i < this->allacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allacts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClaimFirstChargePkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSClaimFirstChargePkgRsp*>(&from));
}

void CSClaimFirstChargePkgRsp::MergeFrom(const CSClaimFirstChargePkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  allacts_.MergeFrom(from.allacts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_pkgid()) {
      set_pkgid(from.pkgid());
    }
  }
}

void CSClaimFirstChargePkgRsp::CopyFrom(const CSClaimFirstChargePkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClaimFirstChargePkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < allacts_size(); i++) {
    if (!this->allacts(i).IsInitialized()) return false;
  }
  return true;
}

void CSClaimFirstChargePkgRsp::Swap(CSClaimFirstChargePkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(pkgid_, other->pkgid_);
    allacts_.Swap(&other->allacts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSClaimFirstChargePkgRsp::GetTypeName() const {
  return "vmsg.CSClaimFirstChargePkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSSpring7DayPkgStatus::kStartTimeFieldNumber;
const int CSSpring7DayPkgStatus::kStopTimeFieldNumber;
const int CSSpring7DayPkgStatus::kClaimStatusFieldNumber;
#endif  // !_MSC_VER

CSSpring7DayPkgStatus::CSSpring7DayPkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSSpring7DayPkgStatus::InitAsDefaultInstance() {
}

CSSpring7DayPkgStatus::CSSpring7DayPkgStatus(const CSSpring7DayPkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSSpring7DayPkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  claimstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSSpring7DayPkgStatus::~CSSpring7DayPkgStatus() {
  SharedDtor();
}

void CSSpring7DayPkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSSpring7DayPkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSSpring7DayPkgStatus& CSSpring7DayPkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSSpring7DayPkgStatus* CSSpring7DayPkgStatus::default_instance_ = NULL;

CSSpring7DayPkgStatus* CSSpring7DayPkgStatus::New() const {
  return new CSSpring7DayPkgStatus;
}

void CSSpring7DayPkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    claimstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSSpring7DayPkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ClaimStatus;
        break;
      }

      // required uint32 ClaimStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClaimStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &claimstatus_)));
          set_has_claimstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSSpring7DayPkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 ClaimStatus = 3;
  if (has_claimstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->claimstatus(), output);
  }

}

int CSSpring7DayPkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 ClaimStatus = 3;
    if (has_claimstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->claimstatus());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSSpring7DayPkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSSpring7DayPkgStatus*>(&from));
}

void CSSpring7DayPkgStatus::MergeFrom(const CSSpring7DayPkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_claimstatus()) {
      set_claimstatus(from.claimstatus());
    }
  }
}

void CSSpring7DayPkgStatus::CopyFrom(const CSSpring7DayPkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSSpring7DayPkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSSpring7DayPkgStatus::Swap(CSSpring7DayPkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(claimstatus_, other->claimstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSSpring7DayPkgStatus::GetTypeName() const {
  return "vmsg.CSSpring7DayPkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int SumChargePkgStatus::kStartTimeFieldNumber;
const int SumChargePkgStatus::kStopTimeFieldNumber;
const int SumChargePkgStatus::kTotalChargeFieldNumber;
const int SumChargePkgStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

SumChargePkgStatus::SumChargePkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SumChargePkgStatus::InitAsDefaultInstance() {
}

SumChargePkgStatus::SumChargePkgStatus(const SumChargePkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SumChargePkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  totalcharge_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumChargePkgStatus::~SumChargePkgStatus() {
  SharedDtor();
}

void SumChargePkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SumChargePkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SumChargePkgStatus& SumChargePkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

SumChargePkgStatus* SumChargePkgStatus::default_instance_ = NULL;

SumChargePkgStatus* SumChargePkgStatus::New() const {
  return new SumChargePkgStatus;
}

void SumChargePkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    totalcharge_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SumChargePkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalCharge;
        break;
      }

      // required uint32 totalCharge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcharge_)));
          set_has_totalcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // required uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SumChargePkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 totalCharge = 3;
  if (has_totalcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->totalcharge(), output);
  }

  // required uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

}

int SumChargePkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 totalCharge = 3;
    if (has_totalcharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcharge());
    }

    // required uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumChargePkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SumChargePkgStatus*>(&from));
}

void SumChargePkgStatus::MergeFrom(const SumChargePkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_totalcharge()) {
      set_totalcharge(from.totalcharge());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void SumChargePkgStatus::CopyFrom(const SumChargePkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumChargePkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SumChargePkgStatus::Swap(SumChargePkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(totalcharge_, other->totalcharge_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SumChargePkgStatus::GetTypeName() const {
  return "vmsg.SumChargePkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyChargePkgStatus::kStartTimeFieldNumber;
const int DailyChargePkgStatus::kStopTimeFieldNumber;
const int DailyChargePkgStatus::kChargeFieldNumber;
const int DailyChargePkgStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

DailyChargePkgStatus::DailyChargePkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyChargePkgStatus::InitAsDefaultInstance() {
}

DailyChargePkgStatus::DailyChargePkgStatus(const DailyChargePkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyChargePkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  charge_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyChargePkgStatus::~DailyChargePkgStatus() {
  SharedDtor();
}

void DailyChargePkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyChargePkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyChargePkgStatus& DailyChargePkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyChargePkgStatus* DailyChargePkgStatus::default_instance_ = NULL;

DailyChargePkgStatus* DailyChargePkgStatus::New() const {
  return new DailyChargePkgStatus;
}

void DailyChargePkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    charge_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyChargePkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Charge;
        break;
      }

      // required uint32 Charge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }

      // required uint32 Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyChargePkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 Charge = 3;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charge(), output);
  }

  // required uint32 Status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

}

int DailyChargePkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 Charge = 3;
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charge());
    }

    // required uint32 Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyChargePkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyChargePkgStatus*>(&from));
}

void DailyChargePkgStatus::MergeFrom(const DailyChargePkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void DailyChargePkgStatus::CopyFrom(const DailyChargePkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyChargePkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DailyChargePkgStatus::Swap(DailyChargePkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(charge_, other->charge_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyChargePkgStatus::GetTypeName() const {
  return "vmsg.DailyChargePkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyLoginPkgStatus::kStartTimeFieldNumber;
const int DailyLoginPkgStatus::kStopTimeFieldNumber;
const int DailyLoginPkgStatus::kLoginCntFieldNumber;
const int DailyLoginPkgStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

DailyLoginPkgStatus::DailyLoginPkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyLoginPkgStatus::InitAsDefaultInstance() {
}

DailyLoginPkgStatus::DailyLoginPkgStatus(const DailyLoginPkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLoginPkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  logincnt_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLoginPkgStatus::~DailyLoginPkgStatus() {
  SharedDtor();
}

void DailyLoginPkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyLoginPkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyLoginPkgStatus& DailyLoginPkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyLoginPkgStatus* DailyLoginPkgStatus::default_instance_ = NULL;

DailyLoginPkgStatus* DailyLoginPkgStatus::New() const {
  return new DailyLoginPkgStatus;
}

void DailyLoginPkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    logincnt_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyLoginPkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LoginCnt;
        break;
      }

      // required uint32 LoginCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LoginCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &logincnt_)));
          set_has_logincnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Status;
        break;
      }

      // required uint32 Status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyLoginPkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 LoginCnt = 3;
  if (has_logincnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->logincnt(), output);
  }

  // required uint32 Status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

}

int DailyLoginPkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 LoginCnt = 3;
    if (has_logincnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->logincnt());
    }

    // required uint32 Status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLoginPkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyLoginPkgStatus*>(&from));
}

void DailyLoginPkgStatus::MergeFrom(const DailyLoginPkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_logincnt()) {
      set_logincnt(from.logincnt());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void DailyLoginPkgStatus::CopyFrom(const DailyLoginPkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLoginPkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DailyLoginPkgStatus::Swap(DailyLoginPkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(logincnt_, other->logincnt_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyLoginPkgStatus::GetTypeName() const {
  return "vmsg.DailyLoginPkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int GradeGeekPkgStatus::kStartTimeFieldNumber;
const int GradeGeekPkgStatus::kStopTimeFieldNumber;
const int GradeGeekPkgStatus::kStatusFieldNumber;
const int GradeGeekPkgStatus::kGetNumFieldNumber;
#endif  // !_MSC_VER

GradeGeekPkgStatus::GradeGeekPkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GradeGeekPkgStatus::InitAsDefaultInstance() {
}

GradeGeekPkgStatus::GradeGeekPkgStatus(const GradeGeekPkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GradeGeekPkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradeGeekPkgStatus::~GradeGeekPkgStatus() {
  SharedDtor();
}

void GradeGeekPkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GradeGeekPkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GradeGeekPkgStatus& GradeGeekPkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

GradeGeekPkgStatus* GradeGeekPkgStatus::default_instance_ = NULL;

GradeGeekPkgStatus* GradeGeekPkgStatus::New() const {
  return new GradeGeekPkgStatus;
}

void GradeGeekPkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    status_ = 0u;
  }
  getnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GradeGeekPkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GetNum;
        break;
      }

      // repeated uint32 GetNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_getnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_getnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GetNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradeGeekPkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // repeated uint32 GetNum = 4;
  for (int i = 0; i < this->getnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->getnum(i), output);
  }

}

int GradeGeekPkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  // repeated uint32 GetNum = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->getnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->getnum(i));
    }
    total_size += 1 * this->getnum_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradeGeekPkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GradeGeekPkgStatus*>(&from));
}

void GradeGeekPkgStatus::MergeFrom(const GradeGeekPkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  getnum_.MergeFrom(from.getnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void GradeGeekPkgStatus::CopyFrom(const GradeGeekPkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeGeekPkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GradeGeekPkgStatus::Swap(GradeGeekPkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(status_, other->status_);
    getnum_.Swap(&other->getnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GradeGeekPkgStatus::GetTypeName() const {
  return "vmsg.GradeGeekPkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int FightGeekPkgStatus::kStartTimeFieldNumber;
const int FightGeekPkgStatus::kStopTimeFieldNumber;
const int FightGeekPkgStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

FightGeekPkgStatus::FightGeekPkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGeekPkgStatus::InitAsDefaultInstance() {
}

FightGeekPkgStatus::FightGeekPkgStatus(const FightGeekPkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGeekPkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGeekPkgStatus::~FightGeekPkgStatus() {
  SharedDtor();
}

void FightGeekPkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightGeekPkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGeekPkgStatus& FightGeekPkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

FightGeekPkgStatus* FightGeekPkgStatus::default_instance_ = NULL;

FightGeekPkgStatus* FightGeekPkgStatus::New() const {
  return new FightGeekPkgStatus;
}

void FightGeekPkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGeekPkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGeekPkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

}

int FightGeekPkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGeekPkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGeekPkgStatus*>(&from));
}

void FightGeekPkgStatus::MergeFrom(const FightGeekPkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void FightGeekPkgStatus::CopyFrom(const FightGeekPkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGeekPkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FightGeekPkgStatus::Swap(FightGeekPkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGeekPkgStatus::GetTypeName() const {
  return "vmsg.FightGeekPkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int VipGiftPkgStatus::kStartTimeFieldNumber;
const int VipGiftPkgStatus::kStopTimeFieldNumber;
const int VipGiftPkgStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

VipGiftPkgStatus::VipGiftPkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VipGiftPkgStatus::InitAsDefaultInstance() {
}

VipGiftPkgStatus::VipGiftPkgStatus(const VipGiftPkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VipGiftPkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipGiftPkgStatus::~VipGiftPkgStatus() {
  SharedDtor();
}

void VipGiftPkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VipGiftPkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VipGiftPkgStatus& VipGiftPkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

VipGiftPkgStatus* VipGiftPkgStatus::default_instance_ = NULL;

VipGiftPkgStatus* VipGiftPkgStatus::New() const {
  return new VipGiftPkgStatus;
}

void VipGiftPkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VipGiftPkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipGiftPkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

}

int VipGiftPkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipGiftPkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VipGiftPkgStatus*>(&from));
}

void VipGiftPkgStatus::MergeFrom(const VipGiftPkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void VipGiftPkgStatus::CopyFrom(const VipGiftPkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipGiftPkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void VipGiftPkgStatus::Swap(VipGiftPkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VipGiftPkgStatus::GetTypeName() const {
  return "vmsg.VipGiftPkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyConsumePkgStatus::kStartTimeFieldNumber;
const int DailyConsumePkgStatus::kStopTimeFieldNumber;
const int DailyConsumePkgStatus::kStatusFieldNumber;
const int DailyConsumePkgStatus::kConsumeFieldNumber;
#endif  // !_MSC_VER

DailyConsumePkgStatus::DailyConsumePkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyConsumePkgStatus::InitAsDefaultInstance() {
}

DailyConsumePkgStatus::DailyConsumePkgStatus(const DailyConsumePkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyConsumePkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  status_ = 0u;
  consume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyConsumePkgStatus::~DailyConsumePkgStatus() {
  SharedDtor();
}

void DailyConsumePkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyConsumePkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyConsumePkgStatus& DailyConsumePkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyConsumePkgStatus* DailyConsumePkgStatus::default_instance_ = NULL;

DailyConsumePkgStatus* DailyConsumePkgStatus::New() const {
  return new DailyConsumePkgStatus;
}

void DailyConsumePkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    status_ = 0u;
    consume_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyConsumePkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Consume;
        break;
      }

      // required uint32 Consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyConsumePkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 Consume = 4;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consume(), output);
  }

}

int DailyConsumePkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 Consume = 4;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyConsumePkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyConsumePkgStatus*>(&from));
}

void DailyConsumePkgStatus::MergeFrom(const DailyConsumePkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
}

void DailyConsumePkgStatus::CopyFrom(const DailyConsumePkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyConsumePkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DailyConsumePkgStatus::Swap(DailyConsumePkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(status_, other->status_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyConsumePkgStatus::GetTypeName() const {
  return "vmsg.DailyConsumePkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int SumConsumePkgStatus::kStartTimeFieldNumber;
const int SumConsumePkgStatus::kStopTimeFieldNumber;
const int SumConsumePkgStatus::kStatusFieldNumber;
const int SumConsumePkgStatus::kConsumeFieldNumber;
#endif  // !_MSC_VER

SumConsumePkgStatus::SumConsumePkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SumConsumePkgStatus::InitAsDefaultInstance() {
}

SumConsumePkgStatus::SumConsumePkgStatus(const SumConsumePkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SumConsumePkgStatus::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = 0u;
  stoptime_ = 0u;
  status_ = 0u;
  consume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumConsumePkgStatus::~SumConsumePkgStatus() {
  SharedDtor();
}

void SumConsumePkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SumConsumePkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SumConsumePkgStatus& SumConsumePkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

SumConsumePkgStatus* SumConsumePkgStatus::default_instance_ = NULL;

SumConsumePkgStatus* SumConsumePkgStatus::New() const {
  return new SumConsumePkgStatus;
}

void SumConsumePkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = 0u;
    stoptime_ = 0u;
    status_ = 0u;
    consume_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SumConsumePkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StopTime;
        break;
      }

      // required uint32 StopTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StopTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stoptime_)));
          set_has_stoptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // required uint32 Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Consume;
        break;
      }

      // required uint32 Consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SumConsumePkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starttime(), output);
  }

  // required uint32 StopTime = 2;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stoptime(), output);
  }

  // required uint32 Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // required uint32 Consume = 4;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consume(), output);
  }

}

int SumConsumePkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // required uint32 StopTime = 2;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stoptime());
    }

    // required uint32 Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 Consume = 4;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumConsumePkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SumConsumePkgStatus*>(&from));
}

void SumConsumePkgStatus::MergeFrom(const SumConsumePkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
}

void SumConsumePkgStatus::CopyFrom(const SumConsumePkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumConsumePkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SumConsumePkgStatus::Swap(SumConsumePkgStatus* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(status_, other->status_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SumConsumePkgStatus::GetTypeName() const {
  return "vmsg.SumConsumePkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int OnlinePkgStatus::kStatusFieldNumber;
const int OnlinePkgStatus::kOnlineTimeFieldNumber;
#endif  // !_MSC_VER

OnlinePkgStatus::OnlinePkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OnlinePkgStatus::InitAsDefaultInstance() {
}

OnlinePkgStatus::OnlinePkgStatus(const OnlinePkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OnlinePkgStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0u;
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlinePkgStatus::~OnlinePkgStatus() {
  SharedDtor();
}

void OnlinePkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OnlinePkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlinePkgStatus& OnlinePkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

OnlinePkgStatus* OnlinePkgStatus::default_instance_ = NULL;

OnlinePkgStatus* OnlinePkgStatus::New() const {
  return new OnlinePkgStatus;
}

void OnlinePkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0u;
    onlinetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OnlinePkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OnlineTime;
        break;
      }

      // required uint32 OnlineTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlinePkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->status(), output);
  }

  // required uint32 OnlineTime = 2;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onlinetime(), output);
  }

}

int OnlinePkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // required uint32 OnlineTime = 2;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlinePkgStatus*>(&from));
}

void OnlinePkgStatus::MergeFrom(const OnlinePkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
}

void OnlinePkgStatus::CopyFrom(const OnlinePkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OnlinePkgStatus::Swap(OnlinePkgStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OnlinePkgStatus::GetTypeName() const {
  return "vmsg.OnlinePkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int NextDayPkgStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

NextDayPkgStatus::NextDayPkgStatus()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextDayPkgStatus::InitAsDefaultInstance() {
}

NextDayPkgStatus::NextDayPkgStatus(const NextDayPkgStatus& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextDayPkgStatus::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextDayPkgStatus::~NextDayPkgStatus() {
  SharedDtor();
}

void NextDayPkgStatus::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NextDayPkgStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextDayPkgStatus& NextDayPkgStatus::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

NextDayPkgStatus* NextDayPkgStatus::default_instance_ = NULL;

NextDayPkgStatus* NextDayPkgStatus::New() const {
  return new NextDayPkgStatus;
}

void NextDayPkgStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextDayPkgStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextDayPkgStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

}

int NextDayPkgStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextDayPkgStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextDayPkgStatus*>(&from));
}

void NextDayPkgStatus::MergeFrom(const NextDayPkgStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
}

void NextDayPkgStatus::CopyFrom(const NextDayPkgStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextDayPkgStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NextDayPkgStatus::Swap(NextDayPkgStatus* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextDayPkgStatus::GetTypeName() const {
  return "vmsg.NextDayPkgStatus";
}


// ===================================================================

#ifndef _MSC_VER
const int SumChargePkgRqst::kLevelFieldNumber;
#endif  // !_MSC_VER

SumChargePkgRqst::SumChargePkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SumChargePkgRqst::InitAsDefaultInstance() {
}

SumChargePkgRqst::SumChargePkgRqst(const SumChargePkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SumChargePkgRqst::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumChargePkgRqst::~SumChargePkgRqst() {
  SharedDtor();
}

void SumChargePkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SumChargePkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SumChargePkgRqst& SumChargePkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

SumChargePkgRqst* SumChargePkgRqst::default_instance_ = NULL;

SumChargePkgRqst* SumChargePkgRqst::New() const {
  return new SumChargePkgRqst;
}

void SumChargePkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SumChargePkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SumChargePkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

}

int SumChargePkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumChargePkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SumChargePkgRqst*>(&from));
}

void SumChargePkgRqst::MergeFrom(const SumChargePkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void SumChargePkgRqst::CopyFrom(const SumChargePkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumChargePkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SumChargePkgRqst::Swap(SumChargePkgRqst* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SumChargePkgRqst::GetTypeName() const {
  return "vmsg.SumChargePkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyChargePkgRqst::kLevelFieldNumber;
#endif  // !_MSC_VER

DailyChargePkgRqst::DailyChargePkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyChargePkgRqst::InitAsDefaultInstance() {
}

DailyChargePkgRqst::DailyChargePkgRqst(const DailyChargePkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyChargePkgRqst::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyChargePkgRqst::~DailyChargePkgRqst() {
  SharedDtor();
}

void DailyChargePkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyChargePkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyChargePkgRqst& DailyChargePkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyChargePkgRqst* DailyChargePkgRqst::default_instance_ = NULL;

DailyChargePkgRqst* DailyChargePkgRqst::New() const {
  return new DailyChargePkgRqst;
}

void DailyChargePkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyChargePkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyChargePkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

}

int DailyChargePkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyChargePkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyChargePkgRqst*>(&from));
}

void DailyChargePkgRqst::MergeFrom(const DailyChargePkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void DailyChargePkgRqst::CopyFrom(const DailyChargePkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyChargePkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DailyChargePkgRqst::Swap(DailyChargePkgRqst* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyChargePkgRqst::GetTypeName() const {
  return "vmsg.DailyChargePkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyLoginPkgRqst::kDayFieldNumber;
#endif  // !_MSC_VER

DailyLoginPkgRqst::DailyLoginPkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyLoginPkgRqst::InitAsDefaultInstance() {
}

DailyLoginPkgRqst::DailyLoginPkgRqst(const DailyLoginPkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLoginPkgRqst::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLoginPkgRqst::~DailyLoginPkgRqst() {
  SharedDtor();
}

void DailyLoginPkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyLoginPkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyLoginPkgRqst& DailyLoginPkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyLoginPkgRqst* DailyLoginPkgRqst::default_instance_ = NULL;

DailyLoginPkgRqst* DailyLoginPkgRqst::New() const {
  return new DailyLoginPkgRqst;
}

void DailyLoginPkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyLoginPkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyLoginPkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

}

int DailyLoginPkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLoginPkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyLoginPkgRqst*>(&from));
}

void DailyLoginPkgRqst::MergeFrom(const DailyLoginPkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
}

void DailyLoginPkgRqst::CopyFrom(const DailyLoginPkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLoginPkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DailyLoginPkgRqst::Swap(DailyLoginPkgRqst* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyLoginPkgRqst::GetTypeName() const {
  return "vmsg.DailyLoginPkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int GradeGeekPkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

GradeGeekPkgRqst::GradeGeekPkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GradeGeekPkgRqst::InitAsDefaultInstance() {
}

GradeGeekPkgRqst::GradeGeekPkgRqst(const GradeGeekPkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GradeGeekPkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradeGeekPkgRqst::~GradeGeekPkgRqst() {
  SharedDtor();
}

void GradeGeekPkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GradeGeekPkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GradeGeekPkgRqst& GradeGeekPkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

GradeGeekPkgRqst* GradeGeekPkgRqst::default_instance_ = NULL;

GradeGeekPkgRqst* GradeGeekPkgRqst::New() const {
  return new GradeGeekPkgRqst;
}

void GradeGeekPkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GradeGeekPkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradeGeekPkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int GradeGeekPkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradeGeekPkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GradeGeekPkgRqst*>(&from));
}

void GradeGeekPkgRqst::MergeFrom(const GradeGeekPkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void GradeGeekPkgRqst::CopyFrom(const GradeGeekPkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeGeekPkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GradeGeekPkgRqst::Swap(GradeGeekPkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GradeGeekPkgRqst::GetTypeName() const {
  return "vmsg.GradeGeekPkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int FightGeekPkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

FightGeekPkgRqst::FightGeekPkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGeekPkgRqst::InitAsDefaultInstance() {
}

FightGeekPkgRqst::FightGeekPkgRqst(const FightGeekPkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGeekPkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGeekPkgRqst::~FightGeekPkgRqst() {
  SharedDtor();
}

void FightGeekPkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightGeekPkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGeekPkgRqst& FightGeekPkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

FightGeekPkgRqst* FightGeekPkgRqst::default_instance_ = NULL;

FightGeekPkgRqst* FightGeekPkgRqst::New() const {
  return new FightGeekPkgRqst;
}

void FightGeekPkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGeekPkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGeekPkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int FightGeekPkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGeekPkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGeekPkgRqst*>(&from));
}

void FightGeekPkgRqst::MergeFrom(const FightGeekPkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void FightGeekPkgRqst::CopyFrom(const FightGeekPkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGeekPkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FightGeekPkgRqst::Swap(FightGeekPkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGeekPkgRqst::GetTypeName() const {
  return "vmsg.FightGeekPkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int VipGiftPkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

VipGiftPkgRqst::VipGiftPkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VipGiftPkgRqst::InitAsDefaultInstance() {
}

VipGiftPkgRqst::VipGiftPkgRqst(const VipGiftPkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VipGiftPkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipGiftPkgRqst::~VipGiftPkgRqst() {
  SharedDtor();
}

void VipGiftPkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VipGiftPkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VipGiftPkgRqst& VipGiftPkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

VipGiftPkgRqst* VipGiftPkgRqst::default_instance_ = NULL;

VipGiftPkgRqst* VipGiftPkgRqst::New() const {
  return new VipGiftPkgRqst;
}

void VipGiftPkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VipGiftPkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipGiftPkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int VipGiftPkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipGiftPkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VipGiftPkgRqst*>(&from));
}

void VipGiftPkgRqst::MergeFrom(const VipGiftPkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void VipGiftPkgRqst::CopyFrom(const VipGiftPkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipGiftPkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VipGiftPkgRqst::Swap(VipGiftPkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VipGiftPkgRqst::GetTypeName() const {
  return "vmsg.VipGiftPkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyConsumePkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

DailyConsumePkgRqst::DailyConsumePkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyConsumePkgRqst::InitAsDefaultInstance() {
}

DailyConsumePkgRqst::DailyConsumePkgRqst(const DailyConsumePkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyConsumePkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyConsumePkgRqst::~DailyConsumePkgRqst() {
  SharedDtor();
}

void DailyConsumePkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyConsumePkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyConsumePkgRqst& DailyConsumePkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyConsumePkgRqst* DailyConsumePkgRqst::default_instance_ = NULL;

DailyConsumePkgRqst* DailyConsumePkgRqst::New() const {
  return new DailyConsumePkgRqst;
}

void DailyConsumePkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyConsumePkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyConsumePkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int DailyConsumePkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyConsumePkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyConsumePkgRqst*>(&from));
}

void DailyConsumePkgRqst::MergeFrom(const DailyConsumePkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void DailyConsumePkgRqst::CopyFrom(const DailyConsumePkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyConsumePkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DailyConsumePkgRqst::Swap(DailyConsumePkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyConsumePkgRqst::GetTypeName() const {
  return "vmsg.DailyConsumePkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int SumConsumePkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

SumConsumePkgRqst::SumConsumePkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SumConsumePkgRqst::InitAsDefaultInstance() {
}

SumConsumePkgRqst::SumConsumePkgRqst(const SumConsumePkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SumConsumePkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumConsumePkgRqst::~SumConsumePkgRqst() {
  SharedDtor();
}

void SumConsumePkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SumConsumePkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SumConsumePkgRqst& SumConsumePkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

SumConsumePkgRqst* SumConsumePkgRqst::default_instance_ = NULL;

SumConsumePkgRqst* SumConsumePkgRqst::New() const {
  return new SumConsumePkgRqst;
}

void SumConsumePkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SumConsumePkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SumConsumePkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int SumConsumePkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumConsumePkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SumConsumePkgRqst*>(&from));
}

void SumConsumePkgRqst::MergeFrom(const SumConsumePkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void SumConsumePkgRqst::CopyFrom(const SumConsumePkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumConsumePkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SumConsumePkgRqst::Swap(SumConsumePkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SumConsumePkgRqst::GetTypeName() const {
  return "vmsg.SumConsumePkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int OnlinePkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

OnlinePkgRqst::OnlinePkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OnlinePkgRqst::InitAsDefaultInstance() {
}

OnlinePkgRqst::OnlinePkgRqst(const OnlinePkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OnlinePkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlinePkgRqst::~OnlinePkgRqst() {
  SharedDtor();
}

void OnlinePkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OnlinePkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlinePkgRqst& OnlinePkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

OnlinePkgRqst* OnlinePkgRqst::default_instance_ = NULL;

OnlinePkgRqst* OnlinePkgRqst::New() const {
  return new OnlinePkgRqst;
}

void OnlinePkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OnlinePkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlinePkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int OnlinePkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlinePkgRqst*>(&from));
}

void OnlinePkgRqst::MergeFrom(const OnlinePkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void OnlinePkgRqst::CopyFrom(const OnlinePkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePkgRqst::IsInitialized() const {

  return true;
}

void OnlinePkgRqst::Swap(OnlinePkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OnlinePkgRqst::GetTypeName() const {
  return "vmsg.OnlinePkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int NextDayPkgRqst::kAwardLevelFieldNumber;
#endif  // !_MSC_VER

NextDayPkgRqst::NextDayPkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextDayPkgRqst::InitAsDefaultInstance() {
}

NextDayPkgRqst::NextDayPkgRqst(const NextDayPkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextDayPkgRqst::SharedCtor() {
  _cached_size_ = 0;
  awardlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextDayPkgRqst::~NextDayPkgRqst() {
  SharedDtor();
}

void NextDayPkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NextDayPkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextDayPkgRqst& NextDayPkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

NextDayPkgRqst* NextDayPkgRqst::default_instance_ = NULL;

NextDayPkgRqst* NextDayPkgRqst::New() const {
  return new NextDayPkgRqst;
}

void NextDayPkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    awardlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextDayPkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AwardLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardlevel_)));
          set_has_awardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextDayPkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 AwardLevel = 1;
  if (has_awardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->awardlevel(), output);
  }

}

int NextDayPkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AwardLevel = 1;
    if (has_awardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardlevel());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextDayPkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextDayPkgRqst*>(&from));
}

void NextDayPkgRqst::MergeFrom(const NextDayPkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_awardlevel()) {
      set_awardlevel(from.awardlevel());
    }
  }
}

void NextDayPkgRqst::CopyFrom(const NextDayPkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextDayPkgRqst::IsInitialized() const {

  return true;
}

void NextDayPkgRqst::Swap(NextDayPkgRqst* other) {
  if (other != this) {
    std::swap(awardlevel_, other->awardlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextDayPkgRqst::GetTypeName() const {
  return "vmsg.NextDayPkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int AwardInfo::kTypeFieldNumber;
const int AwardInfo::kIdFieldNumber;
const int AwardInfo::kNumFieldNumber;
#endif  // !_MSC_VER

AwardInfo::AwardInfo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void AwardInfo::InitAsDefaultInstance() {
}

AwardInfo::AwardInfo(const AwardInfo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void AwardInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AwardInfo::~AwardInfo() {
  SharedDtor();
}

void AwardInfo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void AwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AwardInfo& AwardInfo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

AwardInfo* AwardInfo::default_instance_ = NULL;

AwardInfo* AwardInfo::New() const {
  return new AwardInfo;
}

void AwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool AwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // required uint32 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // required uint32 Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // required uint32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

}

int AwardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AwardInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AwardInfo*>(&from));
}

void AwardInfo::MergeFrom(const AwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
}

void AwardInfo::CopyFrom(const AwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AwardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AwardInfo::Swap(AwardInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string AwardInfo::GetTypeName() const {
  return "vmsg.AwardInfo";
}


// ===================================================================

#ifndef _MSC_VER
const int SumChargePkgPkgRsp::kBagInfoFieldNumber;
const int SumChargePkgPkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

SumChargePkgPkgRsp::SumChargePkgPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SumChargePkgPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

SumChargePkgPkgRsp::SumChargePkgPkgRsp(const SumChargePkgPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SumChargePkgPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumChargePkgPkgRsp::~SumChargePkgPkgRsp() {
  SharedDtor();
}

void SumChargePkgPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void SumChargePkgPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SumChargePkgPkgRsp& SumChargePkgPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

SumChargePkgPkgRsp* SumChargePkgPkgRsp::default_instance_ = NULL;

SumChargePkgPkgRsp* SumChargePkgPkgRsp::New() const {
  return new SumChargePkgPkgRsp;
}

void SumChargePkgPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SumChargePkgPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SumChargePkgPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int SumChargePkgPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumChargePkgPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SumChargePkgPkgRsp*>(&from));
}

void SumChargePkgPkgRsp::MergeFrom(const SumChargePkgPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void SumChargePkgPkgRsp::CopyFrom(const SumChargePkgPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumChargePkgPkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SumChargePkgPkgRsp::Swap(SumChargePkgPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SumChargePkgPkgRsp::GetTypeName() const {
  return "vmsg.SumChargePkgPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyChargePkgRsp::kBagInfoFieldNumber;
const int DailyChargePkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

DailyChargePkgRsp::DailyChargePkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyChargePkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

DailyChargePkgRsp::DailyChargePkgRsp(const DailyChargePkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyChargePkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyChargePkgRsp::~DailyChargePkgRsp() {
  SharedDtor();
}

void DailyChargePkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void DailyChargePkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyChargePkgRsp& DailyChargePkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyChargePkgRsp* DailyChargePkgRsp::default_instance_ = NULL;

DailyChargePkgRsp* DailyChargePkgRsp::New() const {
  return new DailyChargePkgRsp;
}

void DailyChargePkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyChargePkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyChargePkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int DailyChargePkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyChargePkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyChargePkgRsp*>(&from));
}

void DailyChargePkgRsp::MergeFrom(const DailyChargePkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void DailyChargePkgRsp::CopyFrom(const DailyChargePkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyChargePkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void DailyChargePkgRsp::Swap(DailyChargePkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyChargePkgRsp::GetTypeName() const {
  return "vmsg.DailyChargePkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyLoginPkgRsp::kBagInfoFieldNumber;
const int DailyLoginPkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

DailyLoginPkgRsp::DailyLoginPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyLoginPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

DailyLoginPkgRsp::DailyLoginPkgRsp(const DailyLoginPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyLoginPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyLoginPkgRsp::~DailyLoginPkgRsp() {
  SharedDtor();
}

void DailyLoginPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void DailyLoginPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyLoginPkgRsp& DailyLoginPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyLoginPkgRsp* DailyLoginPkgRsp::default_instance_ = NULL;

DailyLoginPkgRsp* DailyLoginPkgRsp::New() const {
  return new DailyLoginPkgRsp;
}

void DailyLoginPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyLoginPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyLoginPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int DailyLoginPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyLoginPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyLoginPkgRsp*>(&from));
}

void DailyLoginPkgRsp::MergeFrom(const DailyLoginPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void DailyLoginPkgRsp::CopyFrom(const DailyLoginPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyLoginPkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void DailyLoginPkgRsp::Swap(DailyLoginPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyLoginPkgRsp::GetTypeName() const {
  return "vmsg.DailyLoginPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int GradeGeekPkgRsp::kBagInfoFieldNumber;
const int GradeGeekPkgRsp::kAwardInfoFieldNumber;
const int GradeGeekPkgRsp::kSuccessFieldNumber;
#endif  // !_MSC_VER

GradeGeekPkgRsp::GradeGeekPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GradeGeekPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

GradeGeekPkgRsp::GradeGeekPkgRsp(const GradeGeekPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GradeGeekPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  success_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GradeGeekPkgRsp::~GradeGeekPkgRsp() {
  SharedDtor();
}

void GradeGeekPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void GradeGeekPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GradeGeekPkgRsp& GradeGeekPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

GradeGeekPkgRsp* GradeGeekPkgRsp::default_instance_ = NULL;

GradeGeekPkgRsp* GradeGeekPkgRsp::New() const {
  return new GradeGeekPkgRsp;
}

void GradeGeekPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    success_ = 0u;
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GradeGeekPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectTag(24)) goto parse_Success;
        break;
      }

      // optional uint32 Success = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GradeGeekPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

  // optional uint32 Success = 3;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->success(), output);
  }

}

int GradeGeekPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // optional uint32 Success = 3;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GradeGeekPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GradeGeekPkgRsp*>(&from));
}

void GradeGeekPkgRsp::MergeFrom(const GradeGeekPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
}

void GradeGeekPkgRsp::CopyFrom(const GradeGeekPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GradeGeekPkgRsp::IsInitialized() const {

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void GradeGeekPkgRsp::Swap(GradeGeekPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GradeGeekPkgRsp::GetTypeName() const {
  return "vmsg.GradeGeekPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int FightGeekPkgRsp::kBagInfoFieldNumber;
const int FightGeekPkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

FightGeekPkgRsp::FightGeekPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGeekPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

FightGeekPkgRsp::FightGeekPkgRsp(const FightGeekPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGeekPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGeekPkgRsp::~FightGeekPkgRsp() {
  SharedDtor();
}

void FightGeekPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void FightGeekPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGeekPkgRsp& FightGeekPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

FightGeekPkgRsp* FightGeekPkgRsp::default_instance_ = NULL;

FightGeekPkgRsp* FightGeekPkgRsp::New() const {
  return new FightGeekPkgRsp;
}

void FightGeekPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGeekPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGeekPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int FightGeekPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGeekPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGeekPkgRsp*>(&from));
}

void FightGeekPkgRsp::MergeFrom(const FightGeekPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void FightGeekPkgRsp::CopyFrom(const FightGeekPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGeekPkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void FightGeekPkgRsp::Swap(FightGeekPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGeekPkgRsp::GetTypeName() const {
  return "vmsg.FightGeekPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int VipGiftPkgRsp::kBagInfoFieldNumber;
const int VipGiftPkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

VipGiftPkgRsp::VipGiftPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VipGiftPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

VipGiftPkgRsp::VipGiftPkgRsp(const VipGiftPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VipGiftPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipGiftPkgRsp::~VipGiftPkgRsp() {
  SharedDtor();
}

void VipGiftPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void VipGiftPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VipGiftPkgRsp& VipGiftPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

VipGiftPkgRsp* VipGiftPkgRsp::default_instance_ = NULL;

VipGiftPkgRsp* VipGiftPkgRsp::New() const {
  return new VipGiftPkgRsp;
}

void VipGiftPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VipGiftPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipGiftPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int VipGiftPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipGiftPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VipGiftPkgRsp*>(&from));
}

void VipGiftPkgRsp::MergeFrom(const VipGiftPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void VipGiftPkgRsp::CopyFrom(const VipGiftPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipGiftPkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void VipGiftPkgRsp::Swap(VipGiftPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VipGiftPkgRsp::GetTypeName() const {
  return "vmsg.VipGiftPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyConsumePkgRsp::kBagInfoFieldNumber;
const int DailyConsumePkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

DailyConsumePkgRsp::DailyConsumePkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyConsumePkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

DailyConsumePkgRsp::DailyConsumePkgRsp(const DailyConsumePkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyConsumePkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyConsumePkgRsp::~DailyConsumePkgRsp() {
  SharedDtor();
}

void DailyConsumePkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void DailyConsumePkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyConsumePkgRsp& DailyConsumePkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

DailyConsumePkgRsp* DailyConsumePkgRsp::default_instance_ = NULL;

DailyConsumePkgRsp* DailyConsumePkgRsp::New() const {
  return new DailyConsumePkgRsp;
}

void DailyConsumePkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyConsumePkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyConsumePkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int DailyConsumePkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyConsumePkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyConsumePkgRsp*>(&from));
}

void DailyConsumePkgRsp::MergeFrom(const DailyConsumePkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void DailyConsumePkgRsp::CopyFrom(const DailyConsumePkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyConsumePkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void DailyConsumePkgRsp::Swap(DailyConsumePkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyConsumePkgRsp::GetTypeName() const {
  return "vmsg.DailyConsumePkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int SumConsumePkgRsp::kBagInfoFieldNumber;
const int SumConsumePkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

SumConsumePkgRsp::SumConsumePkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SumConsumePkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

SumConsumePkgRsp::SumConsumePkgRsp(const SumConsumePkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SumConsumePkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SumConsumePkgRsp::~SumConsumePkgRsp() {
  SharedDtor();
}

void SumConsumePkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void SumConsumePkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SumConsumePkgRsp& SumConsumePkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

SumConsumePkgRsp* SumConsumePkgRsp::default_instance_ = NULL;

SumConsumePkgRsp* SumConsumePkgRsp::New() const {
  return new SumConsumePkgRsp;
}

void SumConsumePkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SumConsumePkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SumConsumePkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int SumConsumePkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SumConsumePkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SumConsumePkgRsp*>(&from));
}

void SumConsumePkgRsp::MergeFrom(const SumConsumePkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void SumConsumePkgRsp::CopyFrom(const SumConsumePkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SumConsumePkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void SumConsumePkgRsp::Swap(SumConsumePkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SumConsumePkgRsp::GetTypeName() const {
  return "vmsg.SumConsumePkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int OnlinePkgRsp::kBagInfoFieldNumber;
const int OnlinePkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

OnlinePkgRsp::OnlinePkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OnlinePkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

OnlinePkgRsp::OnlinePkgRsp(const OnlinePkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OnlinePkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlinePkgRsp::~OnlinePkgRsp() {
  SharedDtor();
}

void OnlinePkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void OnlinePkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OnlinePkgRsp& OnlinePkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

OnlinePkgRsp* OnlinePkgRsp::default_instance_ = NULL;

OnlinePkgRsp* OnlinePkgRsp::New() const {
  return new OnlinePkgRsp;
}

void OnlinePkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OnlinePkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlinePkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int OnlinePkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlinePkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OnlinePkgRsp*>(&from));
}

void OnlinePkgRsp::MergeFrom(const OnlinePkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void OnlinePkgRsp::CopyFrom(const OnlinePkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlinePkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void OnlinePkgRsp::Swap(OnlinePkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OnlinePkgRsp::GetTypeName() const {
  return "vmsg.OnlinePkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int NextDayPkgRsp::kBagInfoFieldNumber;
const int NextDayPkgRsp::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

NextDayPkgRsp::NextDayPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextDayPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

NextDayPkgRsp::NextDayPkgRsp(const NextDayPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextDayPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextDayPkgRsp::~NextDayPkgRsp() {
  SharedDtor();
}

void NextDayPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void NextDayPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextDayPkgRsp& NextDayPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

NextDayPkgRsp* NextDayPkgRsp::default_instance_ = NULL;

NextDayPkgRsp* NextDayPkgRsp::New() const {
  return new NextDayPkgRsp;
}

void NextDayPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
  }
  awardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextDayPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        break;
      }

      // repeated .vmsg.AwardInfo AwardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextDayPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // repeated .vmsg.AwardInfo AwardInfo = 2;
  for (int i = 0; i < this->awardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardinfo(i), output);
  }

}

int NextDayPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

  }
  // repeated .vmsg.AwardInfo AwardInfo = 2;
  total_size += 1 * this->awardinfo_size();
  for (int i = 0; i < this->awardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextDayPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextDayPkgRsp*>(&from));
}

void NextDayPkgRsp::MergeFrom(const NextDayPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardinfo_.MergeFrom(from.awardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
  }
}

void NextDayPkgRsp::CopyFrom(const NextDayPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextDayPkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardinfo_size(); i++) {
    if (!this->awardinfo(i).IsInitialized()) return false;
  }
  return true;
}

void NextDayPkgRsp::Swap(NextDayPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    awardinfo_.Swap(&other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextDayPkgRsp::GetTypeName() const {
  return "vmsg.NextDayPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCouponActStatusItem::kTypeFieldNumber;
const int CSCouponActStatusItem::kStatusFieldNumber;
const int CSCouponActStatusItem::kSpring7DayStatusFieldNumber;
const int CSCouponActStatusItem::kStoredManualFieldNumber;
const int CSCouponActStatusItem::kSumChargeAwardFieldNumber;
const int CSCouponActStatusItem::kDailyLoginStatusFieldNumber;
const int CSCouponActStatusItem::kDailyChargeStatusFieldNumber;
const int CSCouponActStatusItem::kGradeGeekStatusFieldNumber;
const int CSCouponActStatusItem::kFightGeekStatusFieldNumber;
const int CSCouponActStatusItem::kVipGiftPkgStatusFieldNumber;
const int CSCouponActStatusItem::kDailyConsumePkgStatusFieldNumber;
const int CSCouponActStatusItem::kSumConsumePkgStatusFieldNumber;
const int CSCouponActStatusItem::kOnlinePkgStatusFieldNumber;
const int CSCouponActStatusItem::kNextDayPkgStatusFieldNumber;
#endif  // !_MSC_VER

CSCouponActStatusItem::CSCouponActStatusItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCouponActStatusItem::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sumchargeaward_ = const_cast< ::vmsg::SumChargePkgStatus*>(
      ::vmsg::SumChargePkgStatus::internal_default_instance());
#else
  sumchargeaward_ = const_cast< ::vmsg::SumChargePkgStatus*>(&::vmsg::SumChargePkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailyloginstatus_ = const_cast< ::vmsg::DailyLoginPkgStatus*>(
      ::vmsg::DailyLoginPkgStatus::internal_default_instance());
#else
  dailyloginstatus_ = const_cast< ::vmsg::DailyLoginPkgStatus*>(&::vmsg::DailyLoginPkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailychargestatus_ = const_cast< ::vmsg::DailyChargePkgStatus*>(
      ::vmsg::DailyChargePkgStatus::internal_default_instance());
#else
  dailychargestatus_ = const_cast< ::vmsg::DailyChargePkgStatus*>(&::vmsg::DailyChargePkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gradegeekstatus_ = const_cast< ::vmsg::GradeGeekPkgStatus*>(
      ::vmsg::GradeGeekPkgStatus::internal_default_instance());
#else
  gradegeekstatus_ = const_cast< ::vmsg::GradeGeekPkgStatus*>(&::vmsg::GradeGeekPkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fightgeekstatus_ = const_cast< ::vmsg::FightGeekPkgStatus*>(
      ::vmsg::FightGeekPkgStatus::internal_default_instance());
#else
  fightgeekstatus_ = const_cast< ::vmsg::FightGeekPkgStatus*>(&::vmsg::FightGeekPkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vipgiftpkgstatus_ = const_cast< ::vmsg::VipGiftPkgStatus*>(
      ::vmsg::VipGiftPkgStatus::internal_default_instance());
#else
  vipgiftpkgstatus_ = const_cast< ::vmsg::VipGiftPkgStatus*>(&::vmsg::VipGiftPkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailyconsumepkgstatus_ = const_cast< ::vmsg::DailyConsumePkgStatus*>(
      ::vmsg::DailyConsumePkgStatus::internal_default_instance());
#else
  dailyconsumepkgstatus_ = const_cast< ::vmsg::DailyConsumePkgStatus*>(&::vmsg::DailyConsumePkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sumconsumepkgstatus_ = const_cast< ::vmsg::SumConsumePkgStatus*>(
      ::vmsg::SumConsumePkgStatus::internal_default_instance());
#else
  sumconsumepkgstatus_ = const_cast< ::vmsg::SumConsumePkgStatus*>(&::vmsg::SumConsumePkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  onlinepkgstatus_ = const_cast< ::vmsg::OnlinePkgStatus*>(
      ::vmsg::OnlinePkgStatus::internal_default_instance());
#else
  onlinepkgstatus_ = const_cast< ::vmsg::OnlinePkgStatus*>(&::vmsg::OnlinePkgStatus::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nextdaypkgstatus_ = const_cast< ::vmsg::NextDayPkgStatus*>(
      ::vmsg::NextDayPkgStatus::internal_default_instance());
#else
  nextdaypkgstatus_ = const_cast< ::vmsg::NextDayPkgStatus*>(&::vmsg::NextDayPkgStatus::default_instance());
#endif
}

CSCouponActStatusItem::CSCouponActStatusItem(const CSCouponActStatusItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCouponActStatusItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  status_ = 0u;
  storedmanual_ = 0u;
  sumchargeaward_ = NULL;
  dailyloginstatus_ = NULL;
  dailychargestatus_ = NULL;
  gradegeekstatus_ = NULL;
  fightgeekstatus_ = NULL;
  vipgiftpkgstatus_ = NULL;
  dailyconsumepkgstatus_ = NULL;
  sumconsumepkgstatus_ = NULL;
  onlinepkgstatus_ = NULL;
  nextdaypkgstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCouponActStatusItem::~CSCouponActStatusItem() {
  SharedDtor();
}

void CSCouponActStatusItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sumchargeaward_;
    delete dailyloginstatus_;
    delete dailychargestatus_;
    delete gradegeekstatus_;
    delete fightgeekstatus_;
    delete vipgiftpkgstatus_;
    delete dailyconsumepkgstatus_;
    delete sumconsumepkgstatus_;
    delete onlinepkgstatus_;
    delete nextdaypkgstatus_;
  }
}

void CSCouponActStatusItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCouponActStatusItem& CSCouponActStatusItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSCouponActStatusItem* CSCouponActStatusItem::default_instance_ = NULL;

CSCouponActStatusItem* CSCouponActStatusItem::New() const {
  return new CSCouponActStatusItem;
}

void CSCouponActStatusItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    status_ = 0u;
    storedmanual_ = 0u;
    if (has_sumchargeaward()) {
      if (sumchargeaward_ != NULL) sumchargeaward_->::vmsg::SumChargePkgStatus::Clear();
    }
    if (has_dailyloginstatus()) {
      if (dailyloginstatus_ != NULL) dailyloginstatus_->::vmsg::DailyLoginPkgStatus::Clear();
    }
    if (has_dailychargestatus()) {
      if (dailychargestatus_ != NULL) dailychargestatus_->::vmsg::DailyChargePkgStatus::Clear();
    }
    if (has_gradegeekstatus()) {
      if (gradegeekstatus_ != NULL) gradegeekstatus_->::vmsg::GradeGeekPkgStatus::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fightgeekstatus()) {
      if (fightgeekstatus_ != NULL) fightgeekstatus_->::vmsg::FightGeekPkgStatus::Clear();
    }
    if (has_vipgiftpkgstatus()) {
      if (vipgiftpkgstatus_ != NULL) vipgiftpkgstatus_->::vmsg::VipGiftPkgStatus::Clear();
    }
    if (has_dailyconsumepkgstatus()) {
      if (dailyconsumepkgstatus_ != NULL) dailyconsumepkgstatus_->::vmsg::DailyConsumePkgStatus::Clear();
    }
    if (has_sumconsumepkgstatus()) {
      if (sumconsumepkgstatus_ != NULL) sumconsumepkgstatus_->::vmsg::SumConsumePkgStatus::Clear();
    }
    if (has_onlinepkgstatus()) {
      if (onlinepkgstatus_ != NULL) onlinepkgstatus_->::vmsg::OnlinePkgStatus::Clear();
    }
    if (has_nextdaypkgstatus()) {
      if (nextdaypkgstatus_ != NULL) nextdaypkgstatus_->::vmsg::NextDayPkgStatus::Clear();
    }
  }
  spring7daystatus_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCouponActStatusItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Status;
        break;
      }

      // required uint32 Status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Spring7DayStatus;
        break;
      }

      // repeated .vmsg.CSSpring7DayPkgStatus Spring7DayStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Spring7DayStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spring7daystatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Spring7DayStatus;
        if (input->ExpectTag(32)) goto parse_StoredManual;
        break;
      }

      // optional uint32 StoredManual = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StoredManual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storedmanual_)));
          set_has_storedmanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_SumChargeAward;
        break;
      }

      // optional .vmsg.SumChargePkgStatus SumChargeAward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SumChargeAward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumchargeaward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DailyLoginStatus;
        break;
      }

      // optional .vmsg.DailyLoginPkgStatus DailyLoginStatus = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyLoginStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyloginstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DailyChargeStatus;
        break;
      }

      // optional .vmsg.DailyChargePkgStatus DailyChargeStatus = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyChargeStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailychargestatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_GradeGeekStatus;
        break;
      }

      // optional .vmsg.GradeGeekPkgStatus GradeGeekStatus = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GradeGeekStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gradegeekstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_FightGeekStatus;
        break;
      }

      // optional .vmsg.FightGeekPkgStatus FightGeekStatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FightGeekStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightgeekstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_VipGiftPkgStatus;
        break;
      }

      // optional .vmsg.VipGiftPkgStatus VipGiftPkgStatus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipGiftPkgStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipgiftpkgstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_DailyConsumePkgStatus;
        break;
      }

      // optional .vmsg.DailyConsumePkgStatus DailyConsumePkgStatus = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyConsumePkgStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyconsumepkgstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_SumConsumePkgStatus;
        break;
      }

      // optional .vmsg.SumConsumePkgStatus SumConsumePkgStatus = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SumConsumePkgStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumconsumepkgstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_OnlinePkgStatus;
        break;
      }

      // optional .vmsg.OnlinePkgStatus OnlinePkgStatus = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnlinePkgStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlinepkgstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_NextDayPkgStatus;
        break;
      }

      // optional .vmsg.NextDayPkgStatus NextDayPkgStatus = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextDayPkgStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextdaypkgstatus()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCouponActStatusItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 Status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  // repeated .vmsg.CSSpring7DayPkgStatus Spring7DayStatus = 3;
  for (int i = 0; i < this->spring7daystatus_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->spring7daystatus(i), output);
  }

  // optional uint32 StoredManual = 4;
  if (has_storedmanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->storedmanual(), output);
  }

  // optional .vmsg.SumChargePkgStatus SumChargeAward = 5;
  if (has_sumchargeaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->sumchargeaward(), output);
  }

  // optional .vmsg.DailyLoginPkgStatus DailyLoginStatus = 6;
  if (has_dailyloginstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->dailyloginstatus(), output);
  }

  // optional .vmsg.DailyChargePkgStatus DailyChargeStatus = 7;
  if (has_dailychargestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->dailychargestatus(), output);
  }

  // optional .vmsg.GradeGeekPkgStatus GradeGeekStatus = 8;
  if (has_gradegeekstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->gradegeekstatus(), output);
  }

  // optional .vmsg.FightGeekPkgStatus FightGeekStatus = 9;
  if (has_fightgeekstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->fightgeekstatus(), output);
  }

  // optional .vmsg.VipGiftPkgStatus VipGiftPkgStatus = 10;
  if (has_vipgiftpkgstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->vipgiftpkgstatus(), output);
  }

  // optional .vmsg.DailyConsumePkgStatus DailyConsumePkgStatus = 11;
  if (has_dailyconsumepkgstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->dailyconsumepkgstatus(), output);
  }

  // optional .vmsg.SumConsumePkgStatus SumConsumePkgStatus = 12;
  if (has_sumconsumepkgstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->sumconsumepkgstatus(), output);
  }

  // optional .vmsg.OnlinePkgStatus OnlinePkgStatus = 13;
  if (has_onlinepkgstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->onlinepkgstatus(), output);
  }

  // optional .vmsg.NextDayPkgStatus NextDayPkgStatus = 14;
  if (has_nextdaypkgstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->nextdaypkgstatus(), output);
  }

}

int CSCouponActStatusItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 StoredManual = 4;
    if (has_storedmanual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storedmanual());
    }

    // optional .vmsg.SumChargePkgStatus SumChargeAward = 5;
    if (has_sumchargeaward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sumchargeaward());
    }

    // optional .vmsg.DailyLoginPkgStatus DailyLoginStatus = 6;
    if (has_dailyloginstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyloginstatus());
    }

    // optional .vmsg.DailyChargePkgStatus DailyChargeStatus = 7;
    if (has_dailychargestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailychargestatus());
    }

    // optional .vmsg.GradeGeekPkgStatus GradeGeekStatus = 8;
    if (has_gradegeekstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gradegeekstatus());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.FightGeekPkgStatus FightGeekStatus = 9;
    if (has_fightgeekstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightgeekstatus());
    }

    // optional .vmsg.VipGiftPkgStatus VipGiftPkgStatus = 10;
    if (has_vipgiftpkgstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipgiftpkgstatus());
    }

    // optional .vmsg.DailyConsumePkgStatus DailyConsumePkgStatus = 11;
    if (has_dailyconsumepkgstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyconsumepkgstatus());
    }

    // optional .vmsg.SumConsumePkgStatus SumConsumePkgStatus = 12;
    if (has_sumconsumepkgstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sumconsumepkgstatus());
    }

    // optional .vmsg.OnlinePkgStatus OnlinePkgStatus = 13;
    if (has_onlinepkgstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onlinepkgstatus());
    }

    // optional .vmsg.NextDayPkgStatus NextDayPkgStatus = 14;
    if (has_nextdaypkgstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextdaypkgstatus());
    }

  }
  // repeated .vmsg.CSSpring7DayPkgStatus Spring7DayStatus = 3;
  total_size += 1 * this->spring7daystatus_size();
  for (int i = 0; i < this->spring7daystatus_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spring7daystatus(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCouponActStatusItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCouponActStatusItem*>(&from));
}

void CSCouponActStatusItem::MergeFrom(const CSCouponActStatusItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  spring7daystatus_.MergeFrom(from.spring7daystatus_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_storedmanual()) {
      set_storedmanual(from.storedmanual());
    }
    if (from.has_sumchargeaward()) {
      mutable_sumchargeaward()->::vmsg::SumChargePkgStatus::MergeFrom(from.sumchargeaward());
    }
    if (from.has_dailyloginstatus()) {
      mutable_dailyloginstatus()->::vmsg::DailyLoginPkgStatus::MergeFrom(from.dailyloginstatus());
    }
    if (from.has_dailychargestatus()) {
      mutable_dailychargestatus()->::vmsg::DailyChargePkgStatus::MergeFrom(from.dailychargestatus());
    }
    if (from.has_gradegeekstatus()) {
      mutable_gradegeekstatus()->::vmsg::GradeGeekPkgStatus::MergeFrom(from.gradegeekstatus());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightgeekstatus()) {
      mutable_fightgeekstatus()->::vmsg::FightGeekPkgStatus::MergeFrom(from.fightgeekstatus());
    }
    if (from.has_vipgiftpkgstatus()) {
      mutable_vipgiftpkgstatus()->::vmsg::VipGiftPkgStatus::MergeFrom(from.vipgiftpkgstatus());
    }
    if (from.has_dailyconsumepkgstatus()) {
      mutable_dailyconsumepkgstatus()->::vmsg::DailyConsumePkgStatus::MergeFrom(from.dailyconsumepkgstatus());
    }
    if (from.has_sumconsumepkgstatus()) {
      mutable_sumconsumepkgstatus()->::vmsg::SumConsumePkgStatus::MergeFrom(from.sumconsumepkgstatus());
    }
    if (from.has_onlinepkgstatus()) {
      mutable_onlinepkgstatus()->::vmsg::OnlinePkgStatus::MergeFrom(from.onlinepkgstatus());
    }
    if (from.has_nextdaypkgstatus()) {
      mutable_nextdaypkgstatus()->::vmsg::NextDayPkgStatus::MergeFrom(from.nextdaypkgstatus());
    }
  }
}

void CSCouponActStatusItem::CopyFrom(const CSCouponActStatusItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCouponActStatusItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < spring7daystatus_size(); i++) {
    if (!this->spring7daystatus(i).IsInitialized()) return false;
  }
  if (has_sumchargeaward()) {
    if (!this->sumchargeaward().IsInitialized()) return false;
  }
  if (has_dailyloginstatus()) {
    if (!this->dailyloginstatus().IsInitialized()) return false;
  }
  if (has_dailychargestatus()) {
    if (!this->dailychargestatus().IsInitialized()) return false;
  }
  if (has_gradegeekstatus()) {
    if (!this->gradegeekstatus().IsInitialized()) return false;
  }
  if (has_fightgeekstatus()) {
    if (!this->fightgeekstatus().IsInitialized()) return false;
  }
  if (has_vipgiftpkgstatus()) {
    if (!this->vipgiftpkgstatus().IsInitialized()) return false;
  }
  if (has_dailyconsumepkgstatus()) {
    if (!this->dailyconsumepkgstatus().IsInitialized()) return false;
  }
  if (has_sumconsumepkgstatus()) {
    if (!this->sumconsumepkgstatus().IsInitialized()) return false;
  }
  if (has_onlinepkgstatus()) {
    if (!this->onlinepkgstatus().IsInitialized()) return false;
  }
  if (has_nextdaypkgstatus()) {
    if (!this->nextdaypkgstatus().IsInitialized()) return false;
  }
  return true;
}

void CSCouponActStatusItem::Swap(CSCouponActStatusItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    spring7daystatus_.Swap(&other->spring7daystatus_);
    std::swap(storedmanual_, other->storedmanual_);
    std::swap(sumchargeaward_, other->sumchargeaward_);
    std::swap(dailyloginstatus_, other->dailyloginstatus_);
    std::swap(dailychargestatus_, other->dailychargestatus_);
    std::swap(gradegeekstatus_, other->gradegeekstatus_);
    std::swap(fightgeekstatus_, other->fightgeekstatus_);
    std::swap(vipgiftpkgstatus_, other->vipgiftpkgstatus_);
    std::swap(dailyconsumepkgstatus_, other->dailyconsumepkgstatus_);
    std::swap(sumconsumepkgstatus_, other->sumconsumepkgstatus_);
    std::swap(onlinepkgstatus_, other->onlinepkgstatus_);
    std::swap(nextdaypkgstatus_, other->nextdaypkgstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCouponActStatusItem::GetTypeName() const {
  return "vmsg.CSCouponActStatusItem";
}


// ===================================================================

#ifndef _MSC_VER
const int CSClaimSpringPkgRqst::kDayFieldNumber;
#endif  // !_MSC_VER

CSClaimSpringPkgRqst::CSClaimSpringPkgRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSClaimSpringPkgRqst::InitAsDefaultInstance() {
}

CSClaimSpringPkgRqst::CSClaimSpringPkgRqst(const CSClaimSpringPkgRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSClaimSpringPkgRqst::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClaimSpringPkgRqst::~CSClaimSpringPkgRqst() {
  SharedDtor();
}

void CSClaimSpringPkgRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSClaimSpringPkgRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSClaimSpringPkgRqst& CSClaimSpringPkgRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSClaimSpringPkgRqst* CSClaimSpringPkgRqst::default_instance_ = NULL;

CSClaimSpringPkgRqst* CSClaimSpringPkgRqst::New() const {
  return new CSClaimSpringPkgRqst;
}

void CSClaimSpringPkgRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSClaimSpringPkgRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClaimSpringPkgRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

}

int CSClaimSpringPkgRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClaimSpringPkgRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSClaimSpringPkgRqst*>(&from));
}

void CSClaimSpringPkgRqst::MergeFrom(const CSClaimSpringPkgRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
}

void CSClaimSpringPkgRqst::CopyFrom(const CSClaimSpringPkgRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClaimSpringPkgRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSClaimSpringPkgRqst::Swap(CSClaimSpringPkgRqst* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSClaimSpringPkgRqst::GetTypeName() const {
  return "vmsg.CSClaimSpringPkgRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSClaimSpringPkgRsp::kBagInfoFieldNumber;
const int CSClaimSpringPkgRsp::kPkgIDFieldNumber;
const int CSClaimSpringPkgRsp::kAwardLstFieldNumber;
#endif  // !_MSC_VER

CSClaimSpringPkgRsp::CSClaimSpringPkgRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSClaimSpringPkgRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(
      ::vmsg::CSBagInfo::internal_default_instance());
#else
  baginfo_ = const_cast< ::vmsg::CSBagInfo*>(&::vmsg::CSBagInfo::default_instance());
#endif
}

CSClaimSpringPkgRsp::CSClaimSpringPkgRsp(const CSClaimSpringPkgRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSClaimSpringPkgRsp::SharedCtor() {
  _cached_size_ = 0;
  baginfo_ = NULL;
  pkgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSClaimSpringPkgRsp::~CSClaimSpringPkgRsp() {
  SharedDtor();
}

void CSClaimSpringPkgRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete baginfo_;
  }
}

void CSClaimSpringPkgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSClaimSpringPkgRsp& CSClaimSpringPkgRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSClaimSpringPkgRsp* CSClaimSpringPkgRsp::default_instance_ = NULL;

CSClaimSpringPkgRsp* CSClaimSpringPkgRsp::New() const {
  return new CSClaimSpringPkgRsp;
}

void CSClaimSpringPkgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baginfo()) {
      if (baginfo_ != NULL) baginfo_->::vmsg::CSBagInfo::Clear();
    }
    pkgid_ = 0u;
  }
  awardlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSClaimSpringPkgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSBagInfo BagInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baginfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PkgID;
        break;
      }

      // required uint32 PkgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PkgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkgid_)));
          set_has_pkgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AwardLst;
        break;
      }

      // repeated .vmsg.CSAwardElement AwardLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_AwardLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSClaimSpringPkgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSBagInfo BagInfo = 1;
  if (has_baginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->baginfo(), output);
  }

  // required uint32 PkgID = 2;
  if (has_pkgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkgid(), output);
  }

  // repeated .vmsg.CSAwardElement AwardLst = 3;
  for (int i = 0; i < this->awardlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->awardlst(i), output);
  }

}

int CSClaimSpringPkgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSBagInfo BagInfo = 1;
    if (has_baginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baginfo());
    }

    // required uint32 PkgID = 2;
    if (has_pkgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkgid());
    }

  }
  // repeated .vmsg.CSAwardElement AwardLst = 3;
  total_size += 1 * this->awardlst_size();
  for (int i = 0; i < this->awardlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSClaimSpringPkgRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSClaimSpringPkgRsp*>(&from));
}

void CSClaimSpringPkgRsp::MergeFrom(const CSClaimSpringPkgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlst_.MergeFrom(from.awardlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baginfo()) {
      mutable_baginfo()->::vmsg::CSBagInfo::MergeFrom(from.baginfo());
    }
    if (from.has_pkgid()) {
      set_pkgid(from.pkgid());
    }
  }
}

void CSClaimSpringPkgRsp::CopyFrom(const CSClaimSpringPkgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSClaimSpringPkgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baginfo()) {
    if (!this->baginfo().IsInitialized()) return false;
  }
  for (int i = 0; i < awardlst_size(); i++) {
    if (!this->awardlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSClaimSpringPkgRsp::Swap(CSClaimSpringPkgRsp* other) {
  if (other != this) {
    std::swap(baginfo_, other->baginfo_);
    std::swap(pkgid_, other->pkgid_);
    awardlst_.Swap(&other->awardlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSClaimSpringPkgRsp::GetTypeName() const {
  return "vmsg.CSClaimSpringPkgRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryAllPkgStatusRsp::kAllActsFieldNumber;
#endif  // !_MSC_VER

CSQueryAllPkgStatusRsp::CSQueryAllPkgStatusRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryAllPkgStatusRsp::InitAsDefaultInstance() {
}

CSQueryAllPkgStatusRsp::CSQueryAllPkgStatusRsp(const CSQueryAllPkgStatusRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryAllPkgStatusRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryAllPkgStatusRsp::~CSQueryAllPkgStatusRsp() {
  SharedDtor();
}

void CSQueryAllPkgStatusRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryAllPkgStatusRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryAllPkgStatusRsp& CSQueryAllPkgStatusRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryAllPkgStatusRsp* CSQueryAllPkgStatusRsp::default_instance_ = NULL;

CSQueryAllPkgStatusRsp* CSQueryAllPkgStatusRsp::New() const {
  return new CSQueryAllPkgStatusRsp;
}

void CSQueryAllPkgStatusRsp::Clear() {
  allacts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryAllPkgStatusRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSCouponActStatusItem AllActs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AllActs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allacts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_AllActs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryAllPkgStatusRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSCouponActStatusItem AllActs = 1;
  for (int i = 0; i < this->allacts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->allacts(i), output);
  }

}

int CSQueryAllPkgStatusRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSCouponActStatusItem AllActs = 1;
  total_size += 1 * this->allacts_size();
  for (int i = 0; i < this->allacts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allacts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryAllPkgStatusRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryAllPkgStatusRsp*>(&from));
}

void CSQueryAllPkgStatusRsp::MergeFrom(const CSQueryAllPkgStatusRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  allacts_.MergeFrom(from.allacts_);
}

void CSQueryAllPkgStatusRsp::CopyFrom(const CSQueryAllPkgStatusRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryAllPkgStatusRsp::IsInitialized() const {

  for (int i = 0; i < allacts_size(); i++) {
    if (!this->allacts(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryAllPkgStatusRsp::Swap(CSQueryAllPkgStatusRsp* other) {
  if (other != this) {
    allacts_.Swap(&other->allacts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryAllPkgStatusRsp::GetTypeName() const {
  return "vmsg.CSQueryAllPkgStatusRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCouponRequest::kClaimRequestFieldNumber;
const int CSCouponRequest::kClaimSpringPkgRqstFieldNumber;
const int CSCouponRequest::kSumchargePkgRqstFieldNumber;
const int CSCouponRequest::kDailyChargePkgRqstFieldNumber;
const int CSCouponRequest::kGradeGeekPkgRqstFieldNumber;
const int CSCouponRequest::kFightGeekPkgRqstFieldNumber;
const int CSCouponRequest::kDailyLoginPkgRqstFieldNumber;
const int CSCouponRequest::kVipGiftPkgRqstFieldNumber;
const int CSCouponRequest::kDailyConsumePkgRqstFieldNumber;
const int CSCouponRequest::kSumConsumePkgRqstFieldNumber;
const int CSCouponRequest::kOnlinePkgRqstFieldNumber;
const int CSCouponRequest::kNextDayPkgRqstFieldNumber;
#endif  // !_MSC_VER

CSCouponRequest::CSCouponRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCouponRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claim_request_ = const_cast< ::vmsg::CSClaimCouponRqst*>(
      ::vmsg::CSClaimCouponRqst::internal_default_instance());
#else
  claim_request_ = const_cast< ::vmsg::CSClaimCouponRqst*>(&::vmsg::CSClaimCouponRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claim_spring_pkg_rqst_ = const_cast< ::vmsg::CSClaimSpringPkgRqst*>(
      ::vmsg::CSClaimSpringPkgRqst::internal_default_instance());
#else
  claim_spring_pkg_rqst_ = const_cast< ::vmsg::CSClaimSpringPkgRqst*>(&::vmsg::CSClaimSpringPkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sumcharge_pkg_rqst_ = const_cast< ::vmsg::SumChargePkgRqst*>(
      ::vmsg::SumChargePkgRqst::internal_default_instance());
#else
  sumcharge_pkg_rqst_ = const_cast< ::vmsg::SumChargePkgRqst*>(&::vmsg::SumChargePkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailycharge_pkg_rqst_ = const_cast< ::vmsg::DailyChargePkgRqst*>(
      ::vmsg::DailyChargePkgRqst::internal_default_instance());
#else
  dailycharge_pkg_rqst_ = const_cast< ::vmsg::DailyChargePkgRqst*>(&::vmsg::DailyChargePkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gradegeek_pkg_rqst_ = const_cast< ::vmsg::GradeGeekPkgRqst*>(
      ::vmsg::GradeGeekPkgRqst::internal_default_instance());
#else
  gradegeek_pkg_rqst_ = const_cast< ::vmsg::GradeGeekPkgRqst*>(&::vmsg::GradeGeekPkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fightgeek_pkg_rqst_ = const_cast< ::vmsg::FightGeekPkgRqst*>(
      ::vmsg::FightGeekPkgRqst::internal_default_instance());
#else
  fightgeek_pkg_rqst_ = const_cast< ::vmsg::FightGeekPkgRqst*>(&::vmsg::FightGeekPkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailylogin_pkg_rqst_ = const_cast< ::vmsg::DailyLoginPkgRqst*>(
      ::vmsg::DailyLoginPkgRqst::internal_default_instance());
#else
  dailylogin_pkg_rqst_ = const_cast< ::vmsg::DailyLoginPkgRqst*>(&::vmsg::DailyLoginPkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vipgiftpkgrqst_ = const_cast< ::vmsg::VipGiftPkgRqst*>(
      ::vmsg::VipGiftPkgRqst::internal_default_instance());
#else
  vipgiftpkgrqst_ = const_cast< ::vmsg::VipGiftPkgRqst*>(&::vmsg::VipGiftPkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailyconsumepkgrqst_ = const_cast< ::vmsg::DailyConsumePkgRqst*>(
      ::vmsg::DailyConsumePkgRqst::internal_default_instance());
#else
  dailyconsumepkgrqst_ = const_cast< ::vmsg::DailyConsumePkgRqst*>(&::vmsg::DailyConsumePkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sumconsumepkgrqst_ = const_cast< ::vmsg::SumConsumePkgRqst*>(
      ::vmsg::SumConsumePkgRqst::internal_default_instance());
#else
  sumconsumepkgrqst_ = const_cast< ::vmsg::SumConsumePkgRqst*>(&::vmsg::SumConsumePkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  onlinepkgrqst_ = const_cast< ::vmsg::OnlinePkgRqst*>(
      ::vmsg::OnlinePkgRqst::internal_default_instance());
#else
  onlinepkgrqst_ = const_cast< ::vmsg::OnlinePkgRqst*>(&::vmsg::OnlinePkgRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nextdaypkgrqst_ = const_cast< ::vmsg::NextDayPkgRqst*>(
      ::vmsg::NextDayPkgRqst::internal_default_instance());
#else
  nextdaypkgrqst_ = const_cast< ::vmsg::NextDayPkgRqst*>(&::vmsg::NextDayPkgRqst::default_instance());
#endif
}

CSCouponRequest::CSCouponRequest(const CSCouponRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCouponRequest::SharedCtor() {
  _cached_size_ = 0;
  claim_request_ = NULL;
  claim_spring_pkg_rqst_ = NULL;
  sumcharge_pkg_rqst_ = NULL;
  dailycharge_pkg_rqst_ = NULL;
  gradegeek_pkg_rqst_ = NULL;
  fightgeek_pkg_rqst_ = NULL;
  dailylogin_pkg_rqst_ = NULL;
  vipgiftpkgrqst_ = NULL;
  dailyconsumepkgrqst_ = NULL;
  sumconsumepkgrqst_ = NULL;
  onlinepkgrqst_ = NULL;
  nextdaypkgrqst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCouponRequest::~CSCouponRequest() {
  SharedDtor();
}

void CSCouponRequest::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete claim_request_;
    delete claim_spring_pkg_rqst_;
    delete sumcharge_pkg_rqst_;
    delete dailycharge_pkg_rqst_;
    delete gradegeek_pkg_rqst_;
    delete fightgeek_pkg_rqst_;
    delete dailylogin_pkg_rqst_;
    delete vipgiftpkgrqst_;
    delete dailyconsumepkgrqst_;
    delete sumconsumepkgrqst_;
    delete onlinepkgrqst_;
    delete nextdaypkgrqst_;
  }
}

void CSCouponRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCouponRequest& CSCouponRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSCouponRequest* CSCouponRequest::default_instance_ = NULL;

CSCouponRequest* CSCouponRequest::New() const {
  return new CSCouponRequest;
}

void CSCouponRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_claim_request()) {
      if (claim_request_ != NULL) claim_request_->::vmsg::CSClaimCouponRqst::Clear();
    }
    if (has_claim_spring_pkg_rqst()) {
      if (claim_spring_pkg_rqst_ != NULL) claim_spring_pkg_rqst_->::vmsg::CSClaimSpringPkgRqst::Clear();
    }
    if (has_sumcharge_pkg_rqst()) {
      if (sumcharge_pkg_rqst_ != NULL) sumcharge_pkg_rqst_->::vmsg::SumChargePkgRqst::Clear();
    }
    if (has_dailycharge_pkg_rqst()) {
      if (dailycharge_pkg_rqst_ != NULL) dailycharge_pkg_rqst_->::vmsg::DailyChargePkgRqst::Clear();
    }
    if (has_gradegeek_pkg_rqst()) {
      if (gradegeek_pkg_rqst_ != NULL) gradegeek_pkg_rqst_->::vmsg::GradeGeekPkgRqst::Clear();
    }
    if (has_fightgeek_pkg_rqst()) {
      if (fightgeek_pkg_rqst_ != NULL) fightgeek_pkg_rqst_->::vmsg::FightGeekPkgRqst::Clear();
    }
    if (has_dailylogin_pkg_rqst()) {
      if (dailylogin_pkg_rqst_ != NULL) dailylogin_pkg_rqst_->::vmsg::DailyLoginPkgRqst::Clear();
    }
    if (has_vipgiftpkgrqst()) {
      if (vipgiftpkgrqst_ != NULL) vipgiftpkgrqst_->::vmsg::VipGiftPkgRqst::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dailyconsumepkgrqst()) {
      if (dailyconsumepkgrqst_ != NULL) dailyconsumepkgrqst_->::vmsg::DailyConsumePkgRqst::Clear();
    }
    if (has_sumconsumepkgrqst()) {
      if (sumconsumepkgrqst_ != NULL) sumconsumepkgrqst_->::vmsg::SumConsumePkgRqst::Clear();
    }
    if (has_onlinepkgrqst()) {
      if (onlinepkgrqst_ != NULL) onlinepkgrqst_->::vmsg::OnlinePkgRqst::Clear();
    }
    if (has_nextdaypkgrqst()) {
      if (nextdaypkgrqst_ != NULL) nextdaypkgrqst_->::vmsg::NextDayPkgRqst::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCouponRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSClaimCouponRqst Claim_Request = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claim_request()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Claim_Spring_Pkg_Rqst;
        break;
      }

      // optional .vmsg.CSClaimSpringPkgRqst Claim_Spring_Pkg_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Claim_Spring_Pkg_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claim_spring_pkg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sumcharge_Pkg_Rqst;
        break;
      }

      // optional .vmsg.SumChargePkgRqst sumcharge_Pkg_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sumcharge_Pkg_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumcharge_pkg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DailyCharge_Pkg_Rqst;
        break;
      }

      // optional .vmsg.DailyChargePkgRqst DailyCharge_Pkg_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyCharge_Pkg_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailycharge_pkg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GradeGeek_Pkg_Rqst;
        break;
      }

      // optional .vmsg.GradeGeekPkgRqst GradeGeek_Pkg_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GradeGeek_Pkg_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gradegeek_pkg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FightGeek_Pkg_Rqst;
        break;
      }

      // optional .vmsg.FightGeekPkgRqst FightGeek_Pkg_Rqst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FightGeek_Pkg_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightgeek_pkg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DailyLogin_Pkg_Rqst;
        break;
      }

      // optional .vmsg.DailyLoginPkgRqst DailyLogin_Pkg_Rqst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyLogin_Pkg_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailylogin_pkg_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_VipGiftPkgRqst;
        break;
      }

      // optional .vmsg.VipGiftPkgRqst VipGiftPkgRqst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipGiftPkgRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipgiftpkgrqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_DailyConsumePkgRqst;
        break;
      }

      // optional .vmsg.DailyConsumePkgRqst DailyConsumePkgRqst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyConsumePkgRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyconsumepkgrqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_SumConsumePkgRqst;
        break;
      }

      // optional .vmsg.SumConsumePkgRqst SumConsumePkgRqst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SumConsumePkgRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumconsumepkgrqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_OnlinePkgRqst;
        break;
      }

      // optional .vmsg.OnlinePkgRqst OnlinePkgRqst = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnlinePkgRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlinepkgrqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_NextDayPkgRqst;
        break;
      }

      // optional .vmsg.NextDayPkgRqst NextDayPkgRqst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextDayPkgRqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextdaypkgrqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCouponRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSClaimCouponRqst Claim_Request = 1;
  if (has_claim_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->claim_request(), output);
  }

  // optional .vmsg.CSClaimSpringPkgRqst Claim_Spring_Pkg_Rqst = 2;
  if (has_claim_spring_pkg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->claim_spring_pkg_rqst(), output);
  }

  // optional .vmsg.SumChargePkgRqst sumcharge_Pkg_Rqst = 3;
  if (has_sumcharge_pkg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->sumcharge_pkg_rqst(), output);
  }

  // optional .vmsg.DailyChargePkgRqst DailyCharge_Pkg_Rqst = 4;
  if (has_dailycharge_pkg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dailycharge_pkg_rqst(), output);
  }

  // optional .vmsg.GradeGeekPkgRqst GradeGeek_Pkg_Rqst = 5;
  if (has_gradegeek_pkg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->gradegeek_pkg_rqst(), output);
  }

  // optional .vmsg.FightGeekPkgRqst FightGeek_Pkg_Rqst = 6;
  if (has_fightgeek_pkg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->fightgeek_pkg_rqst(), output);
  }

  // optional .vmsg.DailyLoginPkgRqst DailyLogin_Pkg_Rqst = 7;
  if (has_dailylogin_pkg_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->dailylogin_pkg_rqst(), output);
  }

  // optional .vmsg.VipGiftPkgRqst VipGiftPkgRqst = 8;
  if (has_vipgiftpkgrqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->vipgiftpkgrqst(), output);
  }

  // optional .vmsg.DailyConsumePkgRqst DailyConsumePkgRqst = 9;
  if (has_dailyconsumepkgrqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->dailyconsumepkgrqst(), output);
  }

  // optional .vmsg.SumConsumePkgRqst SumConsumePkgRqst = 10;
  if (has_sumconsumepkgrqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->sumconsumepkgrqst(), output);
  }

  // optional .vmsg.OnlinePkgRqst OnlinePkgRqst = 11;
  if (has_onlinepkgrqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->onlinepkgrqst(), output);
  }

  // optional .vmsg.NextDayPkgRqst NextDayPkgRqst = 12;
  if (has_nextdaypkgrqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->nextdaypkgrqst(), output);
  }

}

int CSCouponRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSClaimCouponRqst Claim_Request = 1;
    if (has_claim_request()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claim_request());
    }

    // optional .vmsg.CSClaimSpringPkgRqst Claim_Spring_Pkg_Rqst = 2;
    if (has_claim_spring_pkg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claim_spring_pkg_rqst());
    }

    // optional .vmsg.SumChargePkgRqst sumcharge_Pkg_Rqst = 3;
    if (has_sumcharge_pkg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sumcharge_pkg_rqst());
    }

    // optional .vmsg.DailyChargePkgRqst DailyCharge_Pkg_Rqst = 4;
    if (has_dailycharge_pkg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailycharge_pkg_rqst());
    }

    // optional .vmsg.GradeGeekPkgRqst GradeGeek_Pkg_Rqst = 5;
    if (has_gradegeek_pkg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gradegeek_pkg_rqst());
    }

    // optional .vmsg.FightGeekPkgRqst FightGeek_Pkg_Rqst = 6;
    if (has_fightgeek_pkg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightgeek_pkg_rqst());
    }

    // optional .vmsg.DailyLoginPkgRqst DailyLogin_Pkg_Rqst = 7;
    if (has_dailylogin_pkg_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailylogin_pkg_rqst());
    }

    // optional .vmsg.VipGiftPkgRqst VipGiftPkgRqst = 8;
    if (has_vipgiftpkgrqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipgiftpkgrqst());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.DailyConsumePkgRqst DailyConsumePkgRqst = 9;
    if (has_dailyconsumepkgrqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyconsumepkgrqst());
    }

    // optional .vmsg.SumConsumePkgRqst SumConsumePkgRqst = 10;
    if (has_sumconsumepkgrqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sumconsumepkgrqst());
    }

    // optional .vmsg.OnlinePkgRqst OnlinePkgRqst = 11;
    if (has_onlinepkgrqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onlinepkgrqst());
    }

    // optional .vmsg.NextDayPkgRqst NextDayPkgRqst = 12;
    if (has_nextdaypkgrqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextdaypkgrqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCouponRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCouponRequest*>(&from));
}

void CSCouponRequest::MergeFrom(const CSCouponRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_claim_request()) {
      mutable_claim_request()->::vmsg::CSClaimCouponRqst::MergeFrom(from.claim_request());
    }
    if (from.has_claim_spring_pkg_rqst()) {
      mutable_claim_spring_pkg_rqst()->::vmsg::CSClaimSpringPkgRqst::MergeFrom(from.claim_spring_pkg_rqst());
    }
    if (from.has_sumcharge_pkg_rqst()) {
      mutable_sumcharge_pkg_rqst()->::vmsg::SumChargePkgRqst::MergeFrom(from.sumcharge_pkg_rqst());
    }
    if (from.has_dailycharge_pkg_rqst()) {
      mutable_dailycharge_pkg_rqst()->::vmsg::DailyChargePkgRqst::MergeFrom(from.dailycharge_pkg_rqst());
    }
    if (from.has_gradegeek_pkg_rqst()) {
      mutable_gradegeek_pkg_rqst()->::vmsg::GradeGeekPkgRqst::MergeFrom(from.gradegeek_pkg_rqst());
    }
    if (from.has_fightgeek_pkg_rqst()) {
      mutable_fightgeek_pkg_rqst()->::vmsg::FightGeekPkgRqst::MergeFrom(from.fightgeek_pkg_rqst());
    }
    if (from.has_dailylogin_pkg_rqst()) {
      mutable_dailylogin_pkg_rqst()->::vmsg::DailyLoginPkgRqst::MergeFrom(from.dailylogin_pkg_rqst());
    }
    if (from.has_vipgiftpkgrqst()) {
      mutable_vipgiftpkgrqst()->::vmsg::VipGiftPkgRqst::MergeFrom(from.vipgiftpkgrqst());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dailyconsumepkgrqst()) {
      mutable_dailyconsumepkgrqst()->::vmsg::DailyConsumePkgRqst::MergeFrom(from.dailyconsumepkgrqst());
    }
    if (from.has_sumconsumepkgrqst()) {
      mutable_sumconsumepkgrqst()->::vmsg::SumConsumePkgRqst::MergeFrom(from.sumconsumepkgrqst());
    }
    if (from.has_onlinepkgrqst()) {
      mutable_onlinepkgrqst()->::vmsg::OnlinePkgRqst::MergeFrom(from.onlinepkgrqst());
    }
    if (from.has_nextdaypkgrqst()) {
      mutable_nextdaypkgrqst()->::vmsg::NextDayPkgRqst::MergeFrom(from.nextdaypkgrqst());
    }
  }
}

void CSCouponRequest::CopyFrom(const CSCouponRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCouponRequest::IsInitialized() const {

  if (has_claim_request()) {
    if (!this->claim_request().IsInitialized()) return false;
  }
  if (has_claim_spring_pkg_rqst()) {
    if (!this->claim_spring_pkg_rqst().IsInitialized()) return false;
  }
  if (has_sumcharge_pkg_rqst()) {
    if (!this->sumcharge_pkg_rqst().IsInitialized()) return false;
  }
  if (has_dailycharge_pkg_rqst()) {
    if (!this->dailycharge_pkg_rqst().IsInitialized()) return false;
  }
  if (has_gradegeek_pkg_rqst()) {
    if (!this->gradegeek_pkg_rqst().IsInitialized()) return false;
  }
  if (has_fightgeek_pkg_rqst()) {
    if (!this->fightgeek_pkg_rqst().IsInitialized()) return false;
  }
  if (has_dailylogin_pkg_rqst()) {
    if (!this->dailylogin_pkg_rqst().IsInitialized()) return false;
  }
  if (has_vipgiftpkgrqst()) {
    if (!this->vipgiftpkgrqst().IsInitialized()) return false;
  }
  if (has_dailyconsumepkgrqst()) {
    if (!this->dailyconsumepkgrqst().IsInitialized()) return false;
  }
  if (has_sumconsumepkgrqst()) {
    if (!this->sumconsumepkgrqst().IsInitialized()) return false;
  }
  return true;
}

void CSCouponRequest::Swap(CSCouponRequest* other) {
  if (other != this) {
    std::swap(claim_request_, other->claim_request_);
    std::swap(claim_spring_pkg_rqst_, other->claim_spring_pkg_rqst_);
    std::swap(sumcharge_pkg_rqst_, other->sumcharge_pkg_rqst_);
    std::swap(dailycharge_pkg_rqst_, other->dailycharge_pkg_rqst_);
    std::swap(gradegeek_pkg_rqst_, other->gradegeek_pkg_rqst_);
    std::swap(fightgeek_pkg_rqst_, other->fightgeek_pkg_rqst_);
    std::swap(dailylogin_pkg_rqst_, other->dailylogin_pkg_rqst_);
    std::swap(vipgiftpkgrqst_, other->vipgiftpkgrqst_);
    std::swap(dailyconsumepkgrqst_, other->dailyconsumepkgrqst_);
    std::swap(sumconsumepkgrqst_, other->sumconsumepkgrqst_);
    std::swap(onlinepkgrqst_, other->onlinepkgrqst_);
    std::swap(nextdaypkgrqst_, other->nextdaypkgrqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCouponRequest::GetTypeName() const {
  return "vmsg.CSCouponRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSCouponRespond::kClaimResponseFieldNumber;
const int CSCouponRespond::kClaimFirstChargeResponseFieldNumber;
const int CSCouponRespond::kAllPkgStatusFieldNumber;
const int CSCouponRespond::kClaimSpringPkgRspFieldNumber;
const int CSCouponRespond::kSumchargePkgRspFieldNumber;
const int CSCouponRespond::kDailyChargePkgRspFieldNumber;
const int CSCouponRespond::kDailyLoginPkgRspFieldNumber;
const int CSCouponRespond::kGradeGeekPkgRspFieldNumber;
const int CSCouponRespond::kFightGeekPkgRspFieldNumber;
const int CSCouponRespond::kVipGiftPkgRspFieldNumber;
const int CSCouponRespond::kDailyConsumePkgRspFieldNumber;
const int CSCouponRespond::kSumConsumePkgRspFieldNumber;
const int CSCouponRespond::kOnlinePkgRspFieldNumber;
const int CSCouponRespond::kNextDayPkgRspFieldNumber;
#endif  // !_MSC_VER

CSCouponRespond::CSCouponRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSCouponRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claim_response_ = const_cast< ::vmsg::CSClaimCouponRsp*>(
      ::vmsg::CSClaimCouponRsp::internal_default_instance());
#else
  claim_response_ = const_cast< ::vmsg::CSClaimCouponRsp*>(&::vmsg::CSClaimCouponRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claim_first_charge_response_ = const_cast< ::vmsg::CSClaimFirstChargePkgRsp*>(
      ::vmsg::CSClaimFirstChargePkgRsp::internal_default_instance());
#else
  claim_first_charge_response_ = const_cast< ::vmsg::CSClaimFirstChargePkgRsp*>(&::vmsg::CSClaimFirstChargePkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  all_pkg_status_ = const_cast< ::vmsg::CSQueryAllPkgStatusRsp*>(
      ::vmsg::CSQueryAllPkgStatusRsp::internal_default_instance());
#else
  all_pkg_status_ = const_cast< ::vmsg::CSQueryAllPkgStatusRsp*>(&::vmsg::CSQueryAllPkgStatusRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  claimspringpkg_rsp_ = const_cast< ::vmsg::CSClaimSpringPkgRsp*>(
      ::vmsg::CSClaimSpringPkgRsp::internal_default_instance());
#else
  claimspringpkg_rsp_ = const_cast< ::vmsg::CSClaimSpringPkgRsp*>(&::vmsg::CSClaimSpringPkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sumcharge_pkg_rsp_ = const_cast< ::vmsg::SumChargePkgPkgRsp*>(
      ::vmsg::SumChargePkgPkgRsp::internal_default_instance());
#else
  sumcharge_pkg_rsp_ = const_cast< ::vmsg::SumChargePkgPkgRsp*>(&::vmsg::SumChargePkgPkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailycharge_pkg_rsp_ = const_cast< ::vmsg::DailyChargePkgRsp*>(
      ::vmsg::DailyChargePkgRsp::internal_default_instance());
#else
  dailycharge_pkg_rsp_ = const_cast< ::vmsg::DailyChargePkgRsp*>(&::vmsg::DailyChargePkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailylogin_pkg_rsp_ = const_cast< ::vmsg::DailyLoginPkgRsp*>(
      ::vmsg::DailyLoginPkgRsp::internal_default_instance());
#else
  dailylogin_pkg_rsp_ = const_cast< ::vmsg::DailyLoginPkgRsp*>(&::vmsg::DailyLoginPkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  gradegeek_pkg_rsp_ = const_cast< ::vmsg::GradeGeekPkgRsp*>(
      ::vmsg::GradeGeekPkgRsp::internal_default_instance());
#else
  gradegeek_pkg_rsp_ = const_cast< ::vmsg::GradeGeekPkgRsp*>(&::vmsg::GradeGeekPkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fightgeek_pkg_rsp_ = const_cast< ::vmsg::FightGeekPkgRsp*>(
      ::vmsg::FightGeekPkgRsp::internal_default_instance());
#else
  fightgeek_pkg_rsp_ = const_cast< ::vmsg::FightGeekPkgRsp*>(&::vmsg::FightGeekPkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  vipgiftpkgrsp_ = const_cast< ::vmsg::VipGiftPkgRsp*>(
      ::vmsg::VipGiftPkgRsp::internal_default_instance());
#else
  vipgiftpkgrsp_ = const_cast< ::vmsg::VipGiftPkgRsp*>(&::vmsg::VipGiftPkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  dailyconsumepkgrsp_ = const_cast< ::vmsg::DailyConsumePkgRsp*>(
      ::vmsg::DailyConsumePkgRsp::internal_default_instance());
#else
  dailyconsumepkgrsp_ = const_cast< ::vmsg::DailyConsumePkgRsp*>(&::vmsg::DailyConsumePkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sumconsumepkgrsp_ = const_cast< ::vmsg::SumConsumePkgRsp*>(
      ::vmsg::SumConsumePkgRsp::internal_default_instance());
#else
  sumconsumepkgrsp_ = const_cast< ::vmsg::SumConsumePkgRsp*>(&::vmsg::SumConsumePkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  onlinepkgrsp_ = const_cast< ::vmsg::OnlinePkgRsp*>(
      ::vmsg::OnlinePkgRsp::internal_default_instance());
#else
  onlinepkgrsp_ = const_cast< ::vmsg::OnlinePkgRsp*>(&::vmsg::OnlinePkgRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nextdaypkgrsp_ = const_cast< ::vmsg::NextDayPkgRsp*>(
      ::vmsg::NextDayPkgRsp::internal_default_instance());
#else
  nextdaypkgrsp_ = const_cast< ::vmsg::NextDayPkgRsp*>(&::vmsg::NextDayPkgRsp::default_instance());
#endif
}

CSCouponRespond::CSCouponRespond(const CSCouponRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSCouponRespond::SharedCtor() {
  _cached_size_ = 0;
  claim_response_ = NULL;
  claim_first_charge_response_ = NULL;
  all_pkg_status_ = NULL;
  claimspringpkg_rsp_ = NULL;
  sumcharge_pkg_rsp_ = NULL;
  dailycharge_pkg_rsp_ = NULL;
  dailylogin_pkg_rsp_ = NULL;
  gradegeek_pkg_rsp_ = NULL;
  fightgeek_pkg_rsp_ = NULL;
  vipgiftpkgrsp_ = NULL;
  dailyconsumepkgrsp_ = NULL;
  sumconsumepkgrsp_ = NULL;
  onlinepkgrsp_ = NULL;
  nextdaypkgrsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSCouponRespond::~CSCouponRespond() {
  SharedDtor();
}

void CSCouponRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete claim_response_;
    delete claim_first_charge_response_;
    delete all_pkg_status_;
    delete claimspringpkg_rsp_;
    delete sumcharge_pkg_rsp_;
    delete dailycharge_pkg_rsp_;
    delete dailylogin_pkg_rsp_;
    delete gradegeek_pkg_rsp_;
    delete fightgeek_pkg_rsp_;
    delete vipgiftpkgrsp_;
    delete dailyconsumepkgrsp_;
    delete sumconsumepkgrsp_;
    delete onlinepkgrsp_;
    delete nextdaypkgrsp_;
  }
}

void CSCouponRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSCouponRespond& CSCouponRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSCouponMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSCouponMsg_2eproto();
#endif
  return *default_instance_;
}

CSCouponRespond* CSCouponRespond::default_instance_ = NULL;

CSCouponRespond* CSCouponRespond::New() const {
  return new CSCouponRespond;
}

void CSCouponRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_claim_response()) {
      if (claim_response_ != NULL) claim_response_->::vmsg::CSClaimCouponRsp::Clear();
    }
    if (has_claim_first_charge_response()) {
      if (claim_first_charge_response_ != NULL) claim_first_charge_response_->::vmsg::CSClaimFirstChargePkgRsp::Clear();
    }
    if (has_all_pkg_status()) {
      if (all_pkg_status_ != NULL) all_pkg_status_->::vmsg::CSQueryAllPkgStatusRsp::Clear();
    }
    if (has_claimspringpkg_rsp()) {
      if (claimspringpkg_rsp_ != NULL) claimspringpkg_rsp_->::vmsg::CSClaimSpringPkgRsp::Clear();
    }
    if (has_sumcharge_pkg_rsp()) {
      if (sumcharge_pkg_rsp_ != NULL) sumcharge_pkg_rsp_->::vmsg::SumChargePkgPkgRsp::Clear();
    }
    if (has_dailycharge_pkg_rsp()) {
      if (dailycharge_pkg_rsp_ != NULL) dailycharge_pkg_rsp_->::vmsg::DailyChargePkgRsp::Clear();
    }
    if (has_dailylogin_pkg_rsp()) {
      if (dailylogin_pkg_rsp_ != NULL) dailylogin_pkg_rsp_->::vmsg::DailyLoginPkgRsp::Clear();
    }
    if (has_gradegeek_pkg_rsp()) {
      if (gradegeek_pkg_rsp_ != NULL) gradegeek_pkg_rsp_->::vmsg::GradeGeekPkgRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fightgeek_pkg_rsp()) {
      if (fightgeek_pkg_rsp_ != NULL) fightgeek_pkg_rsp_->::vmsg::FightGeekPkgRsp::Clear();
    }
    if (has_vipgiftpkgrsp()) {
      if (vipgiftpkgrsp_ != NULL) vipgiftpkgrsp_->::vmsg::VipGiftPkgRsp::Clear();
    }
    if (has_dailyconsumepkgrsp()) {
      if (dailyconsumepkgrsp_ != NULL) dailyconsumepkgrsp_->::vmsg::DailyConsumePkgRsp::Clear();
    }
    if (has_sumconsumepkgrsp()) {
      if (sumconsumepkgrsp_ != NULL) sumconsumepkgrsp_->::vmsg::SumConsumePkgRsp::Clear();
    }
    if (has_onlinepkgrsp()) {
      if (onlinepkgrsp_ != NULL) onlinepkgrsp_->::vmsg::OnlinePkgRsp::Clear();
    }
    if (has_nextdaypkgrsp()) {
      if (nextdaypkgrsp_ != NULL) nextdaypkgrsp_->::vmsg::NextDayPkgRsp::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSCouponRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSClaimCouponRsp Claim_Response = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claim_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Claim_First_Charge_Response;
        break;
      }

      // optional .vmsg.CSClaimFirstChargePkgRsp Claim_First_Charge_Response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Claim_First_Charge_Response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claim_first_charge_response()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_All_Pkg_Status;
        break;
      }

      // optional .vmsg.CSQueryAllPkgStatusRsp All_Pkg_Status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_All_Pkg_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_all_pkg_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ClaimSpringPkg_Rsp;
        break;
      }

      // optional .vmsg.CSClaimSpringPkgRsp ClaimSpringPkg_Rsp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ClaimSpringPkg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_claimspringpkg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Sumcharge_Pkg_Rsp;
        break;
      }

      // optional .vmsg.SumChargePkgPkgRsp Sumcharge_Pkg_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Sumcharge_Pkg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumcharge_pkg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DailyCharge_Pkg_Rsp;
        break;
      }

      // optional .vmsg.DailyChargePkgRsp DailyCharge_Pkg_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyCharge_Pkg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailycharge_pkg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DailyLogin_Pkg_Rsp;
        break;
      }

      // optional .vmsg.DailyLoginPkgRsp DailyLogin_Pkg_Rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyLogin_Pkg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailylogin_pkg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_GradeGeek_Pkg_Rsp;
        break;
      }

      // optional .vmsg.GradeGeekPkgRsp GradeGeek_Pkg_Rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GradeGeek_Pkg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gradegeek_pkg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_FightGeek_Pkg_Rsp;
        break;
      }

      // optional .vmsg.FightGeekPkgRsp FightGeek_Pkg_Rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FightGeek_Pkg_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fightgeek_pkg_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_VipGiftPkgRsp;
        break;
      }

      // optional .vmsg.VipGiftPkgRsp VipGiftPkgRsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VipGiftPkgRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipgiftpkgrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_DailyConsumePkgRsp;
        break;
      }

      // optional .vmsg.DailyConsumePkgRsp DailyConsumePkgRsp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyConsumePkgRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyconsumepkgrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_SumConsumePkgRsp;
        break;
      }

      // optional .vmsg.SumConsumePkgRsp SumConsumePkgRsp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SumConsumePkgRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sumconsumepkgrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_OnlinePkgRsp;
        break;
      }

      // optional .vmsg.OnlinePkgRsp OnlinePkgRsp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OnlinePkgRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_onlinepkgrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_NextDayPkgRsp;
        break;
      }

      // optional .vmsg.NextDayPkgRsp NextDayPkgRsp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextDayPkgRsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextdaypkgrsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSCouponRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSClaimCouponRsp Claim_Response = 1;
  if (has_claim_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->claim_response(), output);
  }

  // optional .vmsg.CSClaimFirstChargePkgRsp Claim_First_Charge_Response = 2;
  if (has_claim_first_charge_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->claim_first_charge_response(), output);
  }

  // optional .vmsg.CSQueryAllPkgStatusRsp All_Pkg_Status = 3;
  if (has_all_pkg_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->all_pkg_status(), output);
  }

  // optional .vmsg.CSClaimSpringPkgRsp ClaimSpringPkg_Rsp = 4;
  if (has_claimspringpkg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->claimspringpkg_rsp(), output);
  }

  // optional .vmsg.SumChargePkgPkgRsp Sumcharge_Pkg_Rsp = 5;
  if (has_sumcharge_pkg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->sumcharge_pkg_rsp(), output);
  }

  // optional .vmsg.DailyChargePkgRsp DailyCharge_Pkg_Rsp = 6;
  if (has_dailycharge_pkg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->dailycharge_pkg_rsp(), output);
  }

  // optional .vmsg.DailyLoginPkgRsp DailyLogin_Pkg_Rsp = 7;
  if (has_dailylogin_pkg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->dailylogin_pkg_rsp(), output);
  }

  // optional .vmsg.GradeGeekPkgRsp GradeGeek_Pkg_Rsp = 8;
  if (has_gradegeek_pkg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->gradegeek_pkg_rsp(), output);
  }

  // optional .vmsg.FightGeekPkgRsp FightGeek_Pkg_Rsp = 9;
  if (has_fightgeek_pkg_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->fightgeek_pkg_rsp(), output);
  }

  // optional .vmsg.VipGiftPkgRsp VipGiftPkgRsp = 10;
  if (has_vipgiftpkgrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->vipgiftpkgrsp(), output);
  }

  // optional .vmsg.DailyConsumePkgRsp DailyConsumePkgRsp = 11;
  if (has_dailyconsumepkgrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->dailyconsumepkgrsp(), output);
  }

  // optional .vmsg.SumConsumePkgRsp SumConsumePkgRsp = 12;
  if (has_sumconsumepkgrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->sumconsumepkgrsp(), output);
  }

  // optional .vmsg.OnlinePkgRsp OnlinePkgRsp = 13;
  if (has_onlinepkgrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->onlinepkgrsp(), output);
  }

  // optional .vmsg.NextDayPkgRsp NextDayPkgRsp = 14;
  if (has_nextdaypkgrsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->nextdaypkgrsp(), output);
  }

}

int CSCouponRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSClaimCouponRsp Claim_Response = 1;
    if (has_claim_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claim_response());
    }

    // optional .vmsg.CSClaimFirstChargePkgRsp Claim_First_Charge_Response = 2;
    if (has_claim_first_charge_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claim_first_charge_response());
    }

    // optional .vmsg.CSQueryAllPkgStatusRsp All_Pkg_Status = 3;
    if (has_all_pkg_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->all_pkg_status());
    }

    // optional .vmsg.CSClaimSpringPkgRsp ClaimSpringPkg_Rsp = 4;
    if (has_claimspringpkg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->claimspringpkg_rsp());
    }

    // optional .vmsg.SumChargePkgPkgRsp Sumcharge_Pkg_Rsp = 5;
    if (has_sumcharge_pkg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sumcharge_pkg_rsp());
    }

    // optional .vmsg.DailyChargePkgRsp DailyCharge_Pkg_Rsp = 6;
    if (has_dailycharge_pkg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailycharge_pkg_rsp());
    }

    // optional .vmsg.DailyLoginPkgRsp DailyLogin_Pkg_Rsp = 7;
    if (has_dailylogin_pkg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailylogin_pkg_rsp());
    }

    // optional .vmsg.GradeGeekPkgRsp GradeGeek_Pkg_Rsp = 8;
    if (has_gradegeek_pkg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gradegeek_pkg_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.FightGeekPkgRsp FightGeek_Pkg_Rsp = 9;
    if (has_fightgeek_pkg_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fightgeek_pkg_rsp());
    }

    // optional .vmsg.VipGiftPkgRsp VipGiftPkgRsp = 10;
    if (has_vipgiftpkgrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipgiftpkgrsp());
    }

    // optional .vmsg.DailyConsumePkgRsp DailyConsumePkgRsp = 11;
    if (has_dailyconsumepkgrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyconsumepkgrsp());
    }

    // optional .vmsg.SumConsumePkgRsp SumConsumePkgRsp = 12;
    if (has_sumconsumepkgrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sumconsumepkgrsp());
    }

    // optional .vmsg.OnlinePkgRsp OnlinePkgRsp = 13;
    if (has_onlinepkgrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onlinepkgrsp());
    }

    // optional .vmsg.NextDayPkgRsp NextDayPkgRsp = 14;
    if (has_nextdaypkgrsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextdaypkgrsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSCouponRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSCouponRespond*>(&from));
}

void CSCouponRespond::MergeFrom(const CSCouponRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_claim_response()) {
      mutable_claim_response()->::vmsg::CSClaimCouponRsp::MergeFrom(from.claim_response());
    }
    if (from.has_claim_first_charge_response()) {
      mutable_claim_first_charge_response()->::vmsg::CSClaimFirstChargePkgRsp::MergeFrom(from.claim_first_charge_response());
    }
    if (from.has_all_pkg_status()) {
      mutable_all_pkg_status()->::vmsg::CSQueryAllPkgStatusRsp::MergeFrom(from.all_pkg_status());
    }
    if (from.has_claimspringpkg_rsp()) {
      mutable_claimspringpkg_rsp()->::vmsg::CSClaimSpringPkgRsp::MergeFrom(from.claimspringpkg_rsp());
    }
    if (from.has_sumcharge_pkg_rsp()) {
      mutable_sumcharge_pkg_rsp()->::vmsg::SumChargePkgPkgRsp::MergeFrom(from.sumcharge_pkg_rsp());
    }
    if (from.has_dailycharge_pkg_rsp()) {
      mutable_dailycharge_pkg_rsp()->::vmsg::DailyChargePkgRsp::MergeFrom(from.dailycharge_pkg_rsp());
    }
    if (from.has_dailylogin_pkg_rsp()) {
      mutable_dailylogin_pkg_rsp()->::vmsg::DailyLoginPkgRsp::MergeFrom(from.dailylogin_pkg_rsp());
    }
    if (from.has_gradegeek_pkg_rsp()) {
      mutable_gradegeek_pkg_rsp()->::vmsg::GradeGeekPkgRsp::MergeFrom(from.gradegeek_pkg_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightgeek_pkg_rsp()) {
      mutable_fightgeek_pkg_rsp()->::vmsg::FightGeekPkgRsp::MergeFrom(from.fightgeek_pkg_rsp());
    }
    if (from.has_vipgiftpkgrsp()) {
      mutable_vipgiftpkgrsp()->::vmsg::VipGiftPkgRsp::MergeFrom(from.vipgiftpkgrsp());
    }
    if (from.has_dailyconsumepkgrsp()) {
      mutable_dailyconsumepkgrsp()->::vmsg::DailyConsumePkgRsp::MergeFrom(from.dailyconsumepkgrsp());
    }
    if (from.has_sumconsumepkgrsp()) {
      mutable_sumconsumepkgrsp()->::vmsg::SumConsumePkgRsp::MergeFrom(from.sumconsumepkgrsp());
    }
    if (from.has_onlinepkgrsp()) {
      mutable_onlinepkgrsp()->::vmsg::OnlinePkgRsp::MergeFrom(from.onlinepkgrsp());
    }
    if (from.has_nextdaypkgrsp()) {
      mutable_nextdaypkgrsp()->::vmsg::NextDayPkgRsp::MergeFrom(from.nextdaypkgrsp());
    }
  }
}

void CSCouponRespond::CopyFrom(const CSCouponRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSCouponRespond::IsInitialized() const {

  if (has_claim_response()) {
    if (!this->claim_response().IsInitialized()) return false;
  }
  if (has_claim_first_charge_response()) {
    if (!this->claim_first_charge_response().IsInitialized()) return false;
  }
  if (has_all_pkg_status()) {
    if (!this->all_pkg_status().IsInitialized()) return false;
  }
  if (has_claimspringpkg_rsp()) {
    if (!this->claimspringpkg_rsp().IsInitialized()) return false;
  }
  if (has_sumcharge_pkg_rsp()) {
    if (!this->sumcharge_pkg_rsp().IsInitialized()) return false;
  }
  if (has_dailycharge_pkg_rsp()) {
    if (!this->dailycharge_pkg_rsp().IsInitialized()) return false;
  }
  if (has_dailylogin_pkg_rsp()) {
    if (!this->dailylogin_pkg_rsp().IsInitialized()) return false;
  }
  if (has_gradegeek_pkg_rsp()) {
    if (!this->gradegeek_pkg_rsp().IsInitialized()) return false;
  }
  if (has_fightgeek_pkg_rsp()) {
    if (!this->fightgeek_pkg_rsp().IsInitialized()) return false;
  }
  if (has_vipgiftpkgrsp()) {
    if (!this->vipgiftpkgrsp().IsInitialized()) return false;
  }
  if (has_dailyconsumepkgrsp()) {
    if (!this->dailyconsumepkgrsp().IsInitialized()) return false;
  }
  if (has_sumconsumepkgrsp()) {
    if (!this->sumconsumepkgrsp().IsInitialized()) return false;
  }
  if (has_onlinepkgrsp()) {
    if (!this->onlinepkgrsp().IsInitialized()) return false;
  }
  if (has_nextdaypkgrsp()) {
    if (!this->nextdaypkgrsp().IsInitialized()) return false;
  }
  return true;
}

void CSCouponRespond::Swap(CSCouponRespond* other) {
  if (other != this) {
    std::swap(claim_response_, other->claim_response_);
    std::swap(claim_first_charge_response_, other->claim_first_charge_response_);
    std::swap(all_pkg_status_, other->all_pkg_status_);
    std::swap(claimspringpkg_rsp_, other->claimspringpkg_rsp_);
    std::swap(sumcharge_pkg_rsp_, other->sumcharge_pkg_rsp_);
    std::swap(dailycharge_pkg_rsp_, other->dailycharge_pkg_rsp_);
    std::swap(dailylogin_pkg_rsp_, other->dailylogin_pkg_rsp_);
    std::swap(gradegeek_pkg_rsp_, other->gradegeek_pkg_rsp_);
    std::swap(fightgeek_pkg_rsp_, other->fightgeek_pkg_rsp_);
    std::swap(vipgiftpkgrsp_, other->vipgiftpkgrsp_);
    std::swap(dailyconsumepkgrsp_, other->dailyconsumepkgrsp_);
    std::swap(sumconsumepkgrsp_, other->sumconsumepkgrsp_);
    std::swap(onlinepkgrsp_, other->onlinepkgrsp_);
    std::swap(nextdaypkgrsp_, other->nextdaypkgrsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSCouponRespond::GetTypeName() const {
  return "vmsg.CSCouponRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
