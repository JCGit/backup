// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Macros.proto

#ifndef PROTOBUF_Macros_2eproto__INCLUDED
#define PROTOBUF_Macros_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Macros_2eproto();
void protobuf_AssignDesc_Macros_2eproto();
void protobuf_ShutdownFile_Macros_2eproto();


enum SKILL_TRIGGER_TYPE {
  SKILL_TRIGGER_DIRECT_FOLLOW = 4,
  SKILL_TRIGGER_SPAWN_FOLLOW = 3,
  SKILL_TRIGGER_AREA = 1,
  SKILL_TRIGGER_FLY_COLIDE = 2,
  SKILL_TRIGGER_CLOSE_ATTACK = 5,
  SKILL_TRIGGER_ON_ME = 6,
  SKILL_TRIGGER_ON_GUN_DIRECT = 7,
  SKILL_TRIGGER_ON_GUN_SPREAD = 8,
  SKILL_TRIGGER_SEPERATE_AREA = 9,
  SKILL_TRIGGER_ACTION_ONLY_ON_ME = 10,
  SKILL_TRIGGER_SPAWN_FOLLOW_ON_GROUND = 11,
  SKILL_TRIGGER_SPAWN_DIRECT = 12,
  SKILL_TRIGGER_TRHOWN_TRAP = 13,
  SKILL_TRIGGER_LEFT_EDGE = 14,
  SKILL_TRIGGER_DIRECT_FLY_TO = 15,
  SKILL_TRIGGER_DASH = 16,
  SKILL_TRIGGER_RAND_DIRECT_ON_GROUND = 17,
  SKILL_TRIGGER_RAND_FLY_TO_GROUND = 18,
  SKILL_TRIGGER_NEXT_ACTION = 19,
  SKILL_TRIGGER_FLY_DIRECT_COLIDE = 20,
  SKILL_TRIGGER_THROWN_COLIDE = 21,
  SKILL_TRIGGER_JUMP_ATK = 22
};
bool SKILL_TRIGGER_TYPE_IsValid(int value);
const SKILL_TRIGGER_TYPE SKILL_TRIGGER_TYPE_MIN = SKILL_TRIGGER_AREA;
const SKILL_TRIGGER_TYPE SKILL_TRIGGER_TYPE_MAX = SKILL_TRIGGER_JUMP_ATK;
const int SKILL_TRIGGER_TYPE_ARRAYSIZE = SKILL_TRIGGER_TYPE_MAX + 1;

enum SKILL_EFFECT_TYPE {
  SKILL_EFFECT_HP_ABS_HURT = 1,
  SKILL_EFFECT_HP_RATIO_HURT = 2,
  SKILL_EFFECT_FORWARD_DASH = 3,
  SKILL_EFFECT_BACKWARD_DASH = 4,
  SKILL_EFFECT_UP_DASH = 5,
  SKILL_EFFECT_DOWN_DASH = 6,
  SKILL_EFFECT_ADD_BUFF = 7,
  SKILL_EFFECT_ADD_GROUND_BUFF = 8
};
bool SKILL_EFFECT_TYPE_IsValid(int value);
const SKILL_EFFECT_TYPE SKILL_EFFECT_TYPE_MIN = SKILL_EFFECT_HP_ABS_HURT;
const SKILL_EFFECT_TYPE SKILL_EFFECT_TYPE_MAX = SKILL_EFFECT_ADD_GROUND_BUFF;
const int SKILL_EFFECT_TYPE_ARRAYSIZE = SKILL_EFFECT_TYPE_MAX + 1;

enum SKILL_ANIMATION_STATE {
  SKILL_ANIMATION_STATE_NULL = 0,
  SKILL_ANIMATION_STATE_PREPARE = 1,
  SKILL_ANIMATION_STATE_CHASE = 2,
  SKILL_ANIMATION_STATE_DONE = 3,
  SKILL_ANIMATION_STATE_HITING = 4,
  SKILL_ANIMATION_STATE_FLYING = 5,
  SKILL_ANIMATION_STATE_STANDBY = 6
};
bool SKILL_ANIMATION_STATE_IsValid(int value);
const SKILL_ANIMATION_STATE SKILL_ANIMATION_STATE_MIN = SKILL_ANIMATION_STATE_NULL;
const SKILL_ANIMATION_STATE SKILL_ANIMATION_STATE_MAX = SKILL_ANIMATION_STATE_STANDBY;
const int SKILL_ANIMATION_STATE_ARRAYSIZE = SKILL_ANIMATION_STATE_MAX + 1;

enum SKILL_DAMAGE_AREA_TYPE {
  SKILL_DAMAGE_CIRCLE = 1,
  SKILL_DAMAGE_RECT = 2,
  SKILL_DAMAGE_CROSS = 3,
  SKILL_DAMAGE_T = 4
};
bool SKILL_DAMAGE_AREA_TYPE_IsValid(int value);
const SKILL_DAMAGE_AREA_TYPE SKILL_DAMAGE_AREA_TYPE_MIN = SKILL_DAMAGE_CIRCLE;
const SKILL_DAMAGE_AREA_TYPE SKILL_DAMAGE_AREA_TYPE_MAX = SKILL_DAMAGE_T;
const int SKILL_DAMAGE_AREA_TYPE_ARRAYSIZE = SKILL_DAMAGE_AREA_TYPE_MAX + 1;

enum SKILL_EFFECT_TARGET_TYPE {
  EFFECT_TARGET_TYPE_FRIEND = 1,
  EFFECT_TARGET_TYPE_ENIMY = 2,
  EFFECT_TARGET_TYPE_ME = 3
};
bool SKILL_EFFECT_TARGET_TYPE_IsValid(int value);
const SKILL_EFFECT_TARGET_TYPE SKILL_EFFECT_TARGET_TYPE_MIN = EFFECT_TARGET_TYPE_FRIEND;
const SKILL_EFFECT_TARGET_TYPE SKILL_EFFECT_TARGET_TYPE_MAX = EFFECT_TARGET_TYPE_ME;
const int SKILL_EFFECT_TARGET_TYPE_ARRAYSIZE = SKILL_EFFECT_TARGET_TYPE_MAX + 1;

enum SKILL_CAST_COND_TYPE {
  EFFECT_CAST_COND_TYPE_LE_HP = 1,
  EFFECT_CAST_COND_TYPE_LE_DIST = 2,
  EFFECT_CAST_COND_TYPE_GE_DIST = 3,
  EFFECT_CAST_COND_TYPE_CD_READY = 4
};
bool SKILL_CAST_COND_TYPE_IsValid(int value);
const SKILL_CAST_COND_TYPE SKILL_CAST_COND_TYPE_MIN = EFFECT_CAST_COND_TYPE_LE_HP;
const SKILL_CAST_COND_TYPE SKILL_CAST_COND_TYPE_MAX = EFFECT_CAST_COND_TYPE_CD_READY;
const int SKILL_CAST_COND_TYPE_ARRAYSIZE = SKILL_CAST_COND_TYPE_MAX + 1;

enum ROLE_TYPE {
  ROLE_TYPE_MONSTER = 1,
  ROLE_TYPE_ELITE = 2,
  ROLE_TYPE_JUNIOR_BOSS = 3,
  ROLE_TYPE_SENIOR_BOSS = 4,
  ROLE_TYPE_FRIEND = 5,
  ROLE_TYPE_ITEM = 6,
  ROLE_TYPE_PLAYER = 7,
  ROLE_TYPE_NPC = 8
};
bool ROLE_TYPE_IsValid(int value);
const ROLE_TYPE ROLE_TYPE_MIN = ROLE_TYPE_MONSTER;
const ROLE_TYPE ROLE_TYPE_MAX = ROLE_TYPE_NPC;
const int ROLE_TYPE_ARRAYSIZE = ROLE_TYPE_MAX + 1;

enum ROLE_PARTY {
  ROLE_PARTY_FRIEND = 1,
  ROLE_PARTY_HOSTILE = 2,
  ROLE_PARTY_NEUTRAL = 3
};
bool ROLE_PARTY_IsValid(int value);
const ROLE_PARTY ROLE_PARTY_MIN = ROLE_PARTY_FRIEND;
const ROLE_PARTY ROLE_PARTY_MAX = ROLE_PARTY_NEUTRAL;
const int ROLE_PARTY_ARRAYSIZE = ROLE_PARTY_MAX + 1;

enum ATTACK_TYPE {
  CLOSE_PANITRATE = 1,
  CLOSE_BLUNT = 2,
  CLOSE_MAGIC = 3,
  CLOSE_ORDINARY = 4,
  REMOGE_MAGIC = 5,
  REMOTE_PANITRATE = 6,
  REMOTE_ORDINARY = 7
};
bool ATTACK_TYPE_IsValid(int value);
const ATTACK_TYPE ATTACK_TYPE_MIN = CLOSE_PANITRATE;
const ATTACK_TYPE ATTACK_TYPE_MAX = REMOTE_ORDINARY;
const int ATTACK_TYPE_ARRAYSIZE = ATTACK_TYPE_MAX + 1;

enum ARMOR_TYPE {
  NO_ARMOR_DEF = 0,
  LIGHT_ARMOR_DEF = 1,
  HEARY_ARMOR_DEF = 2
};
bool ARMOR_TYPE_IsValid(int value);
const ARMOR_TYPE ARMOR_TYPE_MIN = NO_ARMOR_DEF;
const ARMOR_TYPE ARMOR_TYPE_MAX = HEARY_ARMOR_DEF;
const int ARMOR_TYPE_ARRAYSIZE = ARMOR_TYPE_MAX + 1;

enum MAGIC_TYPE {
  NULL_MAGIC = 0,
  ICE_MAGIC = 1,
  FLAME_MAGIC = 2,
  POISON_MAGIC = 3,
  BIOTECH_MAGIC = 4,
  LIGHTNING_MAGIC = 5,
  MAX_MAGIC_CNT = 6
};
bool MAGIC_TYPE_IsValid(int value);
const MAGIC_TYPE MAGIC_TYPE_MIN = NULL_MAGIC;
const MAGIC_TYPE MAGIC_TYPE_MAX = MAX_MAGIC_CNT;
const int MAGIC_TYPE_ARRAYSIZE = MAGIC_TYPE_MAX + 1;

enum AI_TYPE {
  AI_TYPE_FIRE_AT_WILL = 1,
  AI_TYPE_ATTACK_MARCH = 2,
  AI_TYPE_PROTECT_CASTLE = 3,
  AI_TYPE_LAST_SKILL_ONLY = 4,
  AI_TYPE_MOVE_ATTACK_WO_CHASE = 5,
  AI_TYPE_STANDSTILL_ATTACK = 6,
  AI_TYPE_LOCK_ENIMY_POTROL = 7,
  AI_TYPE_STAND_ATTACK_LEFT = 8,
  AI_TYPE_MOVE_AROUND = 9,
  AI_TYPE_MOVE_LEFT_ONLY = 10,
  AI_TYPE_WARSHIP = 11,
  AI_TYPE_ATTACK_BOSS_CLOSEST = 12,
  AI_TYPE_PROTECT_ME = 13
};
bool AI_TYPE_IsValid(int value);
const AI_TYPE AI_TYPE_MIN = AI_TYPE_FIRE_AT_WILL;
const AI_TYPE AI_TYPE_MAX = AI_TYPE_PROTECT_ME;
const int AI_TYPE_ARRAYSIZE = AI_TYPE_MAX + 1;

enum SYSTEM_MACROS {
  ROLE_EQUIP_CELLS = 5,
  ROLE_MAX_WEAPON_CNT = 32,
  ROLE_SKILL_CNT = 4,
  ROLE_EQUIP_SERIES_CNT = 5,
  ROLE_MAX_BUFF_CNT = 10,
  RANDOM_DOMINATOR = 10000,
  BUFF_MAX_EFFECTS_IN_ONE = 4
};
bool SYSTEM_MACROS_IsValid(int value);
const SYSTEM_MACROS SYSTEM_MACROS_MIN = ROLE_SKILL_CNT;
const SYSTEM_MACROS SYSTEM_MACROS_MAX = RANDOM_DOMINATOR;
const int SYSTEM_MACROS_ARRAYSIZE = SYSTEM_MACROS_MAX + 1;

enum BUFF_ADD_EFF_TYPE {
  BUFF_ADD_EFF = 1,
  BUFF_DEC_EFF = 2
};
bool BUFF_ADD_EFF_TYPE_IsValid(int value);
const BUFF_ADD_EFF_TYPE BUFF_ADD_EFF_TYPE_MIN = BUFF_ADD_EFF;
const BUFF_ADD_EFF_TYPE BUFF_ADD_EFF_TYPE_MAX = BUFF_DEC_EFF;
const int BUFF_ADD_EFF_TYPE_ARRAYSIZE = BUFF_ADD_EFF_TYPE_MAX + 1;

enum BUFF_TYPES {
  BUFF_CONT_CUR_HP_BY_RATIO = 1,
  BUFF_DEF_BY_RATIO = 2,
  BUFF_ATK_BY_RATIO = 3,
  BUFF_WALK_SPEED_BY_RATIO = 4,
  BUFF_DASH_SPEED_BY_RATIO = 5,
  BUFF_HP_MAX_BY_RATIO = 6,
  BUFF_ICE_ATK_BY_RATIO = 7,
  BUFF_FIRE_ATK_BY_RATIO = 8,
  BUFF_ICE_DEF_BY_RATIO = 9,
  BUFF_FIRE_DEF_BY_RATIO = 10,
  BUFF_POISON_ATK_BY_RATIO = 11,
  BUFF_POISON_DEF_BY_RATIO = 12,
  BUFF_BIOTIC_ATK_BY_RATIO = 13,
  BUFF_BIOTIC_DEF_BY_RATIO = 14,
  BUFF_BULLET_DEPTH_BY_RATIO = 15,
  BUFF_BULLET_LIGHT_BY_RATIO = 16,
  BUFF_CONT_MAX_HP_BY_RATIO = 17,
  BUFF_CONT_CUR_HP_BY_ABS = 18,
  BUFF_DIZZY = 19,
  BUFF_IMMOBILIZE = 20,
  BUFF_BLIND = 21,
  BUFF_INVINCIBLE = 22,
  BUFF_ADD_BULLET_DAMAGE = 23,
  BUFF_ADD_HP_BY_FORMULA = 24,
  MAX_BUFF_TYPE = 25
};
bool BUFF_TYPES_IsValid(int value);
const BUFF_TYPES BUFF_TYPES_MIN = BUFF_CONT_CUR_HP_BY_RATIO;
const BUFF_TYPES BUFF_TYPES_MAX = MAX_BUFF_TYPE;
const int BUFF_TYPES_ARRAYSIZE = BUFF_TYPES_MAX + 1;

enum BUFF_POS_TYPE {
  BUFF_POS_HEAD = 1,
  BUFF_POS_CENTER = 2,
  BUFF_POS_FOOT = 3
};
bool BUFF_POS_TYPE_IsValid(int value);
const BUFF_POS_TYPE BUFF_POS_TYPE_MIN = BUFF_POS_HEAD;
const BUFF_POS_TYPE BUFF_POS_TYPE_MAX = BUFF_POS_FOOT;
const int BUFF_POS_TYPE_ARRAYSIZE = BUFF_POS_TYPE_MAX + 1;

enum TRAJECTORY_TYPE {
  TRA_ISO_HORI_LINE = 1,
  TRA_CON_HORI_LINE = 2,
  TRA_ISO_FORWARD_TRACE = 3,
  TRA_CON_SPREAD = 4,
  TRA_ISO_FULL_TRACE = 5,
  TRA_JTL_LINE = 6
};
bool TRAJECTORY_TYPE_IsValid(int value);
const TRAJECTORY_TYPE TRAJECTORY_TYPE_MIN = TRA_ISO_HORI_LINE;
const TRAJECTORY_TYPE TRAJECTORY_TYPE_MAX = TRA_JTL_LINE;
const int TRAJECTORY_TYPE_ARRAYSIZE = TRAJECTORY_TYPE_MAX + 1;

enum GUN_GUESTURE {
  GUESTURE_PISTOLS = 1,
  GUESTURE_RIFLES = 2,
  GUESTURE_RPG = 3,
  GUESTURE_MACHINE_GUN = 4
};
bool GUN_GUESTURE_IsValid(int value);
const GUN_GUESTURE GUN_GUESTURE_MIN = GUESTURE_PISTOLS;
const GUN_GUESTURE GUN_GUESTURE_MAX = GUESTURE_MACHINE_GUN;
const int GUN_GUESTURE_ARRAYSIZE = GUN_GUESTURE_MAX + 1;

enum FLOOR_BUFF_TYPE {
  BUFF_TYPE_LAST = 1,
  BUFF_TYPE_ONCE = 2,
  BUFF_TYPE_WEAPON = 3,
  BUFF_TYPE_WEAPON_UP = 4,
  BUFF_TYPE_WEAPON_MAX = 5
};
bool FLOOR_BUFF_TYPE_IsValid(int value);
const FLOOR_BUFF_TYPE FLOOR_BUFF_TYPE_MIN = BUFF_TYPE_LAST;
const FLOOR_BUFF_TYPE FLOOR_BUFF_TYPE_MAX = BUFF_TYPE_WEAPON_MAX;
const int FLOOR_BUFF_TYPE_ARRAYSIZE = FLOOR_BUFF_TYPE_MAX + 1;

enum SCENE_ITEM_TYPE {
  ITEM_TYPE_THROUGH_TOUCH = 1,
  ITEM_TYPE_THROUGH_AREA = 2,
  ITEM_TYPE_BLOCK_DESTROY = 3,
  ITEM_TYPE_BLOCK_UNDESTROY = 4
};
bool SCENE_ITEM_TYPE_IsValid(int value);
const SCENE_ITEM_TYPE SCENE_ITEM_TYPE_MIN = ITEM_TYPE_THROUGH_TOUCH;
const SCENE_ITEM_TYPE SCENE_ITEM_TYPE_MAX = ITEM_TYPE_BLOCK_UNDESTROY;
const int SCENE_ITEM_TYPE_ARRAYSIZE = SCENE_ITEM_TYPE_MAX + 1;

enum SCENE_ITEM_DROP_TYPE {
  DROP_TYPE_BUFF = 1,
  DROP_TYPE_WEAPON = 2
};
bool SCENE_ITEM_DROP_TYPE_IsValid(int value);
const SCENE_ITEM_DROP_TYPE SCENE_ITEM_DROP_TYPE_MIN = DROP_TYPE_BUFF;
const SCENE_ITEM_DROP_TYPE SCENE_ITEM_DROP_TYPE_MAX = DROP_TYPE_WEAPON;
const int SCENE_ITEM_DROP_TYPE_ARRAYSIZE = SCENE_ITEM_DROP_TYPE_MAX + 1;

enum TRAP_TYPE {
  TRAP_TYPE_LAST = 1,
  TRAP_TYPE_ONCE = 2,
  TRAP_TYPE_PUNCTURE = 3
};
bool TRAP_TYPE_IsValid(int value);
const TRAP_TYPE TRAP_TYPE_MIN = TRAP_TYPE_LAST;
const TRAP_TYPE TRAP_TYPE_MAX = TRAP_TYPE_PUNCTURE;
const int TRAP_TYPE_ARRAYSIZE = TRAP_TYPE_MAX + 1;

enum WAR_TYPE {
  WAR_TYPE_NULL = 0,
  WAR_TYPE_INST = 1
};
bool WAR_TYPE_IsValid(int value);
const WAR_TYPE WAR_TYPE_MIN = WAR_TYPE_NULL;
const WAR_TYPE WAR_TYPE_MAX = WAR_TYPE_INST;
const int WAR_TYPE_ARRAYSIZE = WAR_TYPE_MAX + 1;

enum MONSTER_APPEAR_TYPE {
  APPEAR_NORMAL = 0,
  APPEAR_SLEEP = 1,
  APPEAR_CAR = 2,
  APPEAR_AFTER_DIE = 3,
  APPEAR_WALK_IN_LEFT = 4,
  APPEAR_WALK_IN_RIGHT = 5,
  APPEAR_ARENA_SPECIAL = 6
};
bool MONSTER_APPEAR_TYPE_IsValid(int value);
const MONSTER_APPEAR_TYPE MONSTER_APPEAR_TYPE_MIN = APPEAR_NORMAL;
const MONSTER_APPEAR_TYPE MONSTER_APPEAR_TYPE_MAX = APPEAR_ARENA_SPECIAL;
const int MONSTER_APPEAR_TYPE_ARRAYSIZE = MONSTER_APPEAR_TYPE_MAX + 1;

enum WAR_WIN_TYPE {
  WIN_TYPE_CLEAN_ALL = 1,
  WIN_TYPE_KILL_ONE = 2,
  WIN_TYPE_KILL_NUM = 3,
  WIN_TYPE_KILL_ONE_NUM = 4,
  WIN_TYPE_LAST_TIME = 5
};
bool WAR_WIN_TYPE_IsValid(int value);
const WAR_WIN_TYPE WAR_WIN_TYPE_MIN = WIN_TYPE_CLEAN_ALL;
const WAR_WIN_TYPE WAR_WIN_TYPE_MAX = WIN_TYPE_LAST_TIME;
const int WAR_WIN_TYPE_ARRAYSIZE = WAR_WIN_TYPE_MAX + 1;

enum WAR_HIDE_AWARD_TYPE {
  WAR_HIDE_HP_TYPE = 1,
  WAR_HIDE_TIME_TYPE = 2,
  WAR_HIDE_MEDICAL_TYPE = 3,
  WAR_HIDE_BULLET_TYPE = 4,
  WAR_HIDE_RELIVE_TYPE = 5
};
bool WAR_HIDE_AWARD_TYPE_IsValid(int value);
const WAR_HIDE_AWARD_TYPE WAR_HIDE_AWARD_TYPE_MIN = WAR_HIDE_HP_TYPE;
const WAR_HIDE_AWARD_TYPE WAR_HIDE_AWARD_TYPE_MAX = WAR_HIDE_RELIVE_TYPE;
const int WAR_HIDE_AWARD_TYPE_ARRAYSIZE = WAR_HIDE_AWARD_TYPE_MAX + 1;

enum STORY_TYPE {
  STORY_RECV_TASK = 1,
  STORY_COMMIT_TASK = 2,
  STORY_GUIDE_STEP = 3
};
bool STORY_TYPE_IsValid(int value);
const STORY_TYPE STORY_TYPE_MIN = STORY_RECV_TASK;
const STORY_TYPE STORY_TYPE_MAX = STORY_GUIDE_STEP;
const int STORY_TYPE_ARRAYSIZE = STORY_TYPE_MAX + 1;

enum GUIDE_STEP_TYPE {
  GUIDE_STEP_STORY = 1,
  GUIDE_STEP_VIEW_CLICK = 2
};
bool GUIDE_STEP_TYPE_IsValid(int value);
const GUIDE_STEP_TYPE GUIDE_STEP_TYPE_MIN = GUIDE_STEP_STORY;
const GUIDE_STEP_TYPE GUIDE_STEP_TYPE_MAX = GUIDE_STEP_VIEW_CLICK;
const int GUIDE_STEP_TYPE_ARRAYSIZE = GUIDE_STEP_TYPE_MAX + 1;

enum GUIDE_TRIGGER_TYPE {
  GUIDE_TRIGGER_MODULE = 1,
  GUIDE_TRIGGER_TASK = 2
};
bool GUIDE_TRIGGER_TYPE_IsValid(int value);
const GUIDE_TRIGGER_TYPE GUIDE_TRIGGER_TYPE_MIN = GUIDE_TRIGGER_MODULE;
const GUIDE_TRIGGER_TYPE GUIDE_TRIGGER_TYPE_MAX = GUIDE_TRIGGER_TASK;
const int GUIDE_TRIGGER_TYPE_ARRAYSIZE = GUIDE_TRIGGER_TYPE_MAX + 1;

enum NIHILITY_LEVEL_TYPE {
  NORMAL_TYPE_LEVEL = 1,
  ELITE_TYPE_LEVEL = 2,
  BOSS_TYPE_LEVEL = 3,
  GOLD_TYPE_LEVEL = 4
};
bool NIHILITY_LEVEL_TYPE_IsValid(int value);
const NIHILITY_LEVEL_TYPE NIHILITY_LEVEL_TYPE_MIN = NORMAL_TYPE_LEVEL;
const NIHILITY_LEVEL_TYPE NIHILITY_LEVEL_TYPE_MAX = GOLD_TYPE_LEVEL;
const int NIHILITY_LEVEL_TYPE_ARRAYSIZE = NIHILITY_LEVEL_TYPE_MAX + 1;

enum FIRE_SOUND_TYPE {
  FIRE_SOUND_CYCLING_TYPE = 1,
  FIRE_SOUND_ISOLATE_TYPE = 2
};
bool FIRE_SOUND_TYPE_IsValid(int value);
const FIRE_SOUND_TYPE FIRE_SOUND_TYPE_MIN = FIRE_SOUND_CYCLING_TYPE;
const FIRE_SOUND_TYPE FIRE_SOUND_TYPE_MAX = FIRE_SOUND_ISOLATE_TYPE;
const int FIRE_SOUND_TYPE_ARRAYSIZE = FIRE_SOUND_TYPE_MAX + 1;

// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Macros_2eproto__INCLUDED
