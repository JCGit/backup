// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSGuildMsg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSGuildMsg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace vmsg {

void protobuf_ShutdownFile_CSGuildMsg_2eproto() {
  delete CSGuildBrief::default_instance_;
  delete CSGuildMemberBrief::default_instance_;
  delete CSGuildMember::default_instance_;
  delete CSGuildReq::default_instance_;
  delete CSGuildCreateRqst::default_instance_;
  delete CSGuildInfoRsp::default_instance_;
  delete CSGuildMemberLstRsp::default_instance_;
  delete CSMyGuildReqRsp::default_instance_;
  delete CSAllGuildReqRsp::default_instance_;
  delete CSGuildChgPriviRqst::default_instance_;
  delete CSGuildChgPriviRsp::default_instance_;
  delete CSGuildChgNoticeRqst::default_instance_;
  delete CSGuildJoinReplyRqst::default_instance_;
  delete CSGuildJoinReplyRsp::default_instance_;
  delete CSGuildJoinInNotify::default_instance_;
  delete CSGuildInviteReplyRqst::default_instance_;
  delete CSOtherGuildRsp::default_instance_;
  delete CSQueryGuildLstRsp::default_instance_;
  delete CSGuildSearchRqst::default_instance_;
  delete CSGuildSearchRsp::default_instance_;
  delete CSGuildDailyActRsp::default_instance_;
  delete CSGuildInviteMemberRsp::default_instance_;
  delete CSGuildBunEndRsp::default_instance_;
  delete CSGuildActInviteRqst::default_instance_;
  delete CSGuildThiefRqst::default_instance_;
  delete CSGuildActBlockEndRqst::default_instance_;
  delete CSGuildStatNotify::default_instance_;
  delete CSGuildRequest::default_instance_;
  delete CSGuildRespond::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSGuildMsg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSGuildMsg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::vmsg::protobuf_AddDesc_MsgBase_2eproto();
  ::vmsg::protobuf_AddDesc_ShareByClient_2eproto();
  ::vmsg::protobuf_AddDesc_CSPlayerMsg_2eproto();
  CSGuildBrief::default_instance_ = new CSGuildBrief();
  CSGuildMemberBrief::default_instance_ = new CSGuildMemberBrief();
  CSGuildMember::default_instance_ = new CSGuildMember();
  CSGuildReq::default_instance_ = new CSGuildReq();
  CSGuildCreateRqst::default_instance_ = new CSGuildCreateRqst();
  CSGuildInfoRsp::default_instance_ = new CSGuildInfoRsp();
  CSGuildMemberLstRsp::default_instance_ = new CSGuildMemberLstRsp();
  CSMyGuildReqRsp::default_instance_ = new CSMyGuildReqRsp();
  CSAllGuildReqRsp::default_instance_ = new CSAllGuildReqRsp();
  CSGuildChgPriviRqst::default_instance_ = new CSGuildChgPriviRqst();
  CSGuildChgPriviRsp::default_instance_ = new CSGuildChgPriviRsp();
  CSGuildChgNoticeRqst::default_instance_ = new CSGuildChgNoticeRqst();
  CSGuildJoinReplyRqst::default_instance_ = new CSGuildJoinReplyRqst();
  CSGuildJoinReplyRsp::default_instance_ = new CSGuildJoinReplyRsp();
  CSGuildJoinInNotify::default_instance_ = new CSGuildJoinInNotify();
  CSGuildInviteReplyRqst::default_instance_ = new CSGuildInviteReplyRqst();
  CSOtherGuildRsp::default_instance_ = new CSOtherGuildRsp();
  CSQueryGuildLstRsp::default_instance_ = new CSQueryGuildLstRsp();
  CSGuildSearchRqst::default_instance_ = new CSGuildSearchRqst();
  CSGuildSearchRsp::default_instance_ = new CSGuildSearchRsp();
  CSGuildDailyActRsp::default_instance_ = new CSGuildDailyActRsp();
  CSGuildInviteMemberRsp::default_instance_ = new CSGuildInviteMemberRsp();
  CSGuildBunEndRsp::default_instance_ = new CSGuildBunEndRsp();
  CSGuildActInviteRqst::default_instance_ = new CSGuildActInviteRqst();
  CSGuildThiefRqst::default_instance_ = new CSGuildThiefRqst();
  CSGuildActBlockEndRqst::default_instance_ = new CSGuildActBlockEndRqst();
  CSGuildStatNotify::default_instance_ = new CSGuildStatNotify();
  CSGuildRequest::default_instance_ = new CSGuildRequest();
  CSGuildRespond::default_instance_ = new CSGuildRespond();
  CSGuildBrief::default_instance_->InitAsDefaultInstance();
  CSGuildMemberBrief::default_instance_->InitAsDefaultInstance();
  CSGuildMember::default_instance_->InitAsDefaultInstance();
  CSGuildReq::default_instance_->InitAsDefaultInstance();
  CSGuildCreateRqst::default_instance_->InitAsDefaultInstance();
  CSGuildInfoRsp::default_instance_->InitAsDefaultInstance();
  CSGuildMemberLstRsp::default_instance_->InitAsDefaultInstance();
  CSMyGuildReqRsp::default_instance_->InitAsDefaultInstance();
  CSAllGuildReqRsp::default_instance_->InitAsDefaultInstance();
  CSGuildChgPriviRqst::default_instance_->InitAsDefaultInstance();
  CSGuildChgPriviRsp::default_instance_->InitAsDefaultInstance();
  CSGuildChgNoticeRqst::default_instance_->InitAsDefaultInstance();
  CSGuildJoinReplyRqst::default_instance_->InitAsDefaultInstance();
  CSGuildJoinReplyRsp::default_instance_->InitAsDefaultInstance();
  CSGuildJoinInNotify::default_instance_->InitAsDefaultInstance();
  CSGuildInviteReplyRqst::default_instance_->InitAsDefaultInstance();
  CSOtherGuildRsp::default_instance_->InitAsDefaultInstance();
  CSQueryGuildLstRsp::default_instance_->InitAsDefaultInstance();
  CSGuildSearchRqst::default_instance_->InitAsDefaultInstance();
  CSGuildSearchRsp::default_instance_->InitAsDefaultInstance();
  CSGuildDailyActRsp::default_instance_->InitAsDefaultInstance();
  CSGuildInviteMemberRsp::default_instance_->InitAsDefaultInstance();
  CSGuildBunEndRsp::default_instance_->InitAsDefaultInstance();
  CSGuildActInviteRqst::default_instance_->InitAsDefaultInstance();
  CSGuildThiefRqst::default_instance_->InitAsDefaultInstance();
  CSGuildActBlockEndRqst::default_instance_->InitAsDefaultInstance();
  CSGuildStatNotify::default_instance_->InitAsDefaultInstance();
  CSGuildRequest::default_instance_->InitAsDefaultInstance();
  CSGuildRespond::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSGuildMsg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSGuildMsg_2eproto_once_);
void protobuf_AddDesc_CSGuildMsg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSGuildMsg_2eproto_once_,
                 &protobuf_AddDesc_CSGuildMsg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSGuildMsg_2eproto {
  StaticDescriptorInitializer_CSGuildMsg_2eproto() {
    protobuf_AddDesc_CSGuildMsg_2eproto();
  }
} static_descriptor_initializer_CSGuildMsg_2eproto_;
#endif
bool GuildPriviType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool GuildReplyJoinType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool GuildDailyActType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

bool GuildStatNotifyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildBrief::kGuildIDFieldNumber;
const int CSGuildBrief::kGuildNameFieldNumber;
const int CSGuildBrief::kMemberNumFieldNumber;
const int CSGuildBrief::kRankFieldNumber;
const int CSGuildBrief::kExpFieldNumber;
const int CSGuildBrief::kLevelFieldNumber;
const int CSGuildBrief::kChairManNameFieldNumber;
const int CSGuildBrief::kNoticeFieldNumber;
#endif  // !_MSC_VER

CSGuildBrief::CSGuildBrief()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildBrief::InitAsDefaultInstance() {
}

CSGuildBrief::CSGuildBrief(const CSGuildBrief& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildBrief::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  membernum_ = 0u;
  rank_ = 0u;
  exp_ = 0u;
  level_ = 0u;
  chairmanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildBrief::~CSGuildBrief() {
  SharedDtor();
}

void CSGuildBrief::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (chairmanname_ != &::google::protobuf::internal::kEmptyString) {
    delete chairmanname_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildBrief& CSGuildBrief::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildBrief* CSGuildBrief::default_instance_ = NULL;

CSGuildBrief* CSGuildBrief::New() const {
  return new CSGuildBrief;
}

void CSGuildBrief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    membernum_ = 0u;
    rank_ = 0u;
    exp_ = 0u;
    level_ = 0u;
    if (has_chairmanname()) {
      if (chairmanname_ != &::google::protobuf::internal::kEmptyString) {
        chairmanname_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 GuildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // required string GuildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MemberNum;
        break;
      }

      // required uint32 MemberNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Rank;
        break;
      }

      // required uint32 Rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Exp;
        break;
      }

      // required uint32 Exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Level;
        break;
      }

      // required uint32 Level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ChairManName;
        break;
      }

      // required string ChairManName = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChairManName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chairmanname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Notice;
        break;
      }

      // required string Notice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 GuildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // required uint32 MemberNum = 3;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->membernum(), output);
  }

  // required uint32 Rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  // required uint32 Exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->exp(), output);
  }

  // required uint32 Level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // required string ChairManName = 7;
  if (has_chairmanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->chairmanname(), output);
  }

  // required string Notice = 8;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->notice(), output);
  }

}

int CSGuildBrief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 GuildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required uint32 MemberNum = 3;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membernum());
    }

    // required uint32 Rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // required uint32 Exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 Level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required string ChairManName = 7;
    if (has_chairmanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chairmanname());
    }

    // required string Notice = 8;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildBrief::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildBrief*>(&from));
}

void CSGuildBrief::MergeFrom(const CSGuildBrief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_chairmanname()) {
      set_chairmanname(from.chairmanname());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
}

void CSGuildBrief::CopyFrom(const CSGuildBrief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildBrief::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void CSGuildBrief::Swap(CSGuildBrief* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(membernum_, other->membernum_);
    std::swap(rank_, other->rank_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(chairmanname_, other->chairmanname_);
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildBrief::GetTypeName() const {
  return "vmsg.CSGuildBrief";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildMemberBrief::kUinFieldNumber;
const int CSGuildMemberBrief::kNameFieldNumber;
const int CSGuildMemberBrief::kTypeFieldNumber;
const int CSGuildMemberBrief::kLevelFieldNumber;
const int CSGuildMemberBrief::kShowIDFieldNumber;
#endif  // !_MSC_VER

CSGuildMemberBrief::CSGuildMemberBrief()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildMemberBrief::InitAsDefaultInstance() {
}

CSGuildMemberBrief::CSGuildMemberBrief(const CSGuildMemberBrief& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildMemberBrief::SharedCtor() {
  _cached_size_ = 0;
  uin_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  level_ = 0u;
  showid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildMemberBrief::~CSGuildMemberBrief() {
  SharedDtor();
}

void CSGuildMemberBrief::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildMemberBrief::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildMemberBrief& CSGuildMemberBrief::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildMemberBrief* CSGuildMemberBrief::default_instance_ = NULL;

CSGuildMemberBrief* CSGuildMemberBrief::New() const {
  return new CSGuildMemberBrief;
}

void CSGuildMemberBrief::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    level_ = 0u;
    showid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildMemberBrief::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 Uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // required uint32 Type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // required uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildMemberBrief::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 Uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uin(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint32 ShowID = 5;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->showid(), output);
  }

}

int CSGuildMemberBrief::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 Uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 ShowID = 5;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildMemberBrief::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildMemberBrief*>(&from));
}

void CSGuildMemberBrief::MergeFrom(const CSGuildMemberBrief& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
  }
}

void CSGuildMemberBrief::CopyFrom(const CSGuildMemberBrief& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildMemberBrief::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void CSGuildMemberBrief::Swap(CSGuildMemberBrief* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(showid_, other->showid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildMemberBrief::GetTypeName() const {
  return "vmsg.CSGuildMemberBrief";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildMember::kBriefFieldNumber;
const int CSGuildMember::kLastLoginFieldNumber;
const int CSGuildMember::kIsOnlineFieldNumber;
#endif  // !_MSC_VER

CSGuildMember::CSGuildMember()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildMember::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  brief_ = const_cast< ::vmsg::CSGuildMemberBrief*>(
      ::vmsg::CSGuildMemberBrief::internal_default_instance());
#else
  brief_ = const_cast< ::vmsg::CSGuildMemberBrief*>(&::vmsg::CSGuildMemberBrief::default_instance());
#endif
}

CSGuildMember::CSGuildMember(const CSGuildMember& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildMember::SharedCtor() {
  _cached_size_ = 0;
  brief_ = NULL;
  lastlogin_ = 0u;
  isonline_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildMember::~CSGuildMember() {
  SharedDtor();
}

void CSGuildMember::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete brief_;
  }
}

void CSGuildMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildMember& CSGuildMember::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildMember* CSGuildMember::default_instance_ = NULL;

CSGuildMember* CSGuildMember::New() const {
  return new CSGuildMember;
}

void CSGuildMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_brief()) {
      if (brief_ != NULL) brief_->::vmsg::CSGuildMemberBrief::Clear();
    }
    lastlogin_ = 0u;
    isonline_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSGuildMemberBrief Brief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LastLogin;
        break;
      }

      // required uint32 LastLogin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogin_)));
          set_has_lastlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsOnline;
        break;
      }

      // required uint32 IsOnline = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSGuildMemberBrief Brief = 1;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->brief(), output);
  }

  // required uint32 LastLogin = 4;
  if (has_lastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lastlogin(), output);
  }

  // required uint32 IsOnline = 5;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isonline(), output);
  }

}

int CSGuildMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSGuildMemberBrief Brief = 1;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

    // required uint32 LastLogin = 4;
    if (has_lastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogin());
    }

    // required uint32 IsOnline = 5;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isonline());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildMember*>(&from));
}

void CSGuildMember::MergeFrom(const CSGuildMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brief()) {
      mutable_brief()->::vmsg::CSGuildMemberBrief::MergeFrom(from.brief());
    }
    if (from.has_lastlogin()) {
      set_lastlogin(from.lastlogin());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
}

void CSGuildMember::CopyFrom(const CSGuildMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_brief()) {
    if (!this->brief().IsInitialized()) return false;
  }
  return true;
}

void CSGuildMember::Swap(CSGuildMember* other) {
  if (other != this) {
    std::swap(brief_, other->brief_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildMember::GetTypeName() const {
  return "vmsg.CSGuildMember";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildReq::kReqTimeFieldNumber;
const int CSGuildReq::kNameFieldNumber;
const int CSGuildReq::kLevelFieldNumber;
const int CSGuildReq::kUinFieldNumber;
#endif  // !_MSC_VER

CSGuildReq::CSGuildReq()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildReq::InitAsDefaultInstance() {
}

CSGuildReq::CSGuildReq(const CSGuildReq& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildReq::SharedCtor() {
  _cached_size_ = 0;
  reqtime_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  uin_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildReq::~CSGuildReq() {
  SharedDtor();
}

void CSGuildReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildReq& CSGuildReq::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildReq* CSGuildReq::default_instance_ = NULL;

CSGuildReq* CSGuildReq::New() const {
  return new CSGuildReq;
}

void CSGuildReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqtime_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    uin_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ReqTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqtime_)));
          set_has_reqtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // required uint32 Level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Uin;
        break;
      }

      // required uint64 Uin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ReqTime = 1;
  if (has_reqtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reqtime(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // required uint64 Uin = 5;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uin(), output);
  }

}

int CSGuildReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ReqTime = 1;
    if (has_reqtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqtime());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 Uin = 5;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildReq::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildReq*>(&from));
}

void CSGuildReq::MergeFrom(const CSGuildReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqtime()) {
      set_reqtime(from.reqtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
}

void CSGuildReq::CopyFrom(const CSGuildReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CSGuildReq::Swap(CSGuildReq* other) {
  if (other != this) {
    std::swap(reqtime_, other->reqtime_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildReq::GetTypeName() const {
  return "vmsg.CSGuildReq";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildCreateRqst::kGuildNameFieldNumber;
#endif  // !_MSC_VER

CSGuildCreateRqst::CSGuildCreateRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildCreateRqst::InitAsDefaultInstance() {
}

CSGuildCreateRqst::CSGuildCreateRqst(const CSGuildCreateRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildCreateRqst::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildCreateRqst::~CSGuildCreateRqst() {
  SharedDtor();
}

void CSGuildCreateRqst::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildCreateRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildCreateRqst& CSGuildCreateRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildCreateRqst* CSGuildCreateRqst::default_instance_ = NULL;

CSGuildCreateRqst* CSGuildCreateRqst::New() const {
  return new CSGuildCreateRqst;
}

void CSGuildCreateRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildCreateRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string GuildName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildCreateRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string GuildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

}

int CSGuildCreateRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string GuildName = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildCreateRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildCreateRqst*>(&from));
}

void CSGuildCreateRqst::MergeFrom(const CSGuildCreateRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
}

void CSGuildCreateRqst::CopyFrom(const CSGuildCreateRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildCreateRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGuildCreateRqst::Swap(CSGuildCreateRqst* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildCreateRqst::GetTypeName() const {
  return "vmsg.CSGuildCreateRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildInfoRsp::kGuildBriefFieldNumber;
const int CSGuildInfoRsp::kGuildMemberLstFieldNumber;
const int CSGuildInfoRsp::kNoticeFieldNumber;
const int CSGuildInfoRsp::kImpeachUinFieldNumber;
const int CSGuildInfoRsp::kImpeachTimeFieldNumber;
#endif  // !_MSC_VER

CSGuildInfoRsp::CSGuildInfoRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildInfoRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildbrief_ = const_cast< ::vmsg::CSGuildBrief*>(
      ::vmsg::CSGuildBrief::internal_default_instance());
#else
  guildbrief_ = const_cast< ::vmsg::CSGuildBrief*>(&::vmsg::CSGuildBrief::default_instance());
#endif
}

CSGuildInfoRsp::CSGuildInfoRsp(const CSGuildInfoRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  guildbrief_ = NULL;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  impeachuin_ = GOOGLE_ULONGLONG(0);
  impeachtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildInfoRsp::~CSGuildInfoRsp() {
  SharedDtor();
}

void CSGuildInfoRsp::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guildbrief_;
  }
}

void CSGuildInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildInfoRsp& CSGuildInfoRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildInfoRsp* CSGuildInfoRsp::default_instance_ = NULL;

CSGuildInfoRsp* CSGuildInfoRsp::New() const {
  return new CSGuildInfoRsp;
}

void CSGuildInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildbrief()) {
      if (guildbrief_ != NULL) guildbrief_->::vmsg::CSGuildBrief::Clear();
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    impeachuin_ = GOOGLE_ULONGLONG(0);
    impeachtime_ = 0u;
  }
  guildmemberlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSGuildBrief GuildBrief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbrief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberLst;
        break;
      }

      // repeated .vmsg.CSGuildMember GuildMemberLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildMemberLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildmemberlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberLst;
        if (input->ExpectTag(26)) goto parse_Notice;
        break;
      }

      // required string Notice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ImpeachUin;
        break;
      }

      // optional uint64 ImpeachUin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ImpeachUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &impeachuin_)));
          set_has_impeachuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ImpeachTime;
        break;
      }

      // optional uint32 ImpeachTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ImpeachTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &impeachtime_)));
          set_has_impeachtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSGuildBrief GuildBrief = 1;
  if (has_guildbrief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildbrief(), output);
  }

  // repeated .vmsg.CSGuildMember GuildMemberLst = 2;
  for (int i = 0; i < this->guildmemberlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->guildmemberlst(i), output);
  }

  // required string Notice = 3;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notice(), output);
  }

  // optional uint64 ImpeachUin = 4;
  if (has_impeachuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->impeachuin(), output);
  }

  // optional uint32 ImpeachTime = 5;
  if (has_impeachtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->impeachtime(), output);
  }

}

int CSGuildInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSGuildBrief GuildBrief = 1;
    if (has_guildbrief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbrief());
    }

    // required string Notice = 3;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint64 ImpeachUin = 4;
    if (has_impeachuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->impeachuin());
    }

    // optional uint32 ImpeachTime = 5;
    if (has_impeachtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->impeachtime());
    }

  }
  // repeated .vmsg.CSGuildMember GuildMemberLst = 2;
  total_size += 1 * this->guildmemberlst_size();
  for (int i = 0; i < this->guildmemberlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildmemberlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildInfoRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildInfoRsp*>(&from));
}

void CSGuildInfoRsp::MergeFrom(const CSGuildInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildmemberlst_.MergeFrom(from.guildmemberlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildbrief()) {
      mutable_guildbrief()->::vmsg::CSGuildBrief::MergeFrom(from.guildbrief());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_impeachuin()) {
      set_impeachuin(from.impeachuin());
    }
    if (from.has_impeachtime()) {
      set_impeachtime(from.impeachtime());
    }
  }
}

void CSGuildInfoRsp::CopyFrom(const CSGuildInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_guildbrief()) {
    if (!this->guildbrief().IsInitialized()) return false;
  }
  for (int i = 0; i < guildmemberlst_size(); i++) {
    if (!this->guildmemberlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSGuildInfoRsp::Swap(CSGuildInfoRsp* other) {
  if (other != this) {
    std::swap(guildbrief_, other->guildbrief_);
    guildmemberlst_.Swap(&other->guildmemberlst_);
    std::swap(notice_, other->notice_);
    std::swap(impeachuin_, other->impeachuin_);
    std::swap(impeachtime_, other->impeachtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildInfoRsp::GetTypeName() const {
  return "vmsg.CSGuildInfoRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildMemberLstRsp::kGuildMemberLstFieldNumber;
#endif  // !_MSC_VER

CSGuildMemberLstRsp::CSGuildMemberLstRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildMemberLstRsp::InitAsDefaultInstance() {
}

CSGuildMemberLstRsp::CSGuildMemberLstRsp(const CSGuildMemberLstRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildMemberLstRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildMemberLstRsp::~CSGuildMemberLstRsp() {
  SharedDtor();
}

void CSGuildMemberLstRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildMemberLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildMemberLstRsp& CSGuildMemberLstRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildMemberLstRsp* CSGuildMemberLstRsp::default_instance_ = NULL;

CSGuildMemberLstRsp* CSGuildMemberLstRsp::New() const {
  return new CSGuildMemberLstRsp;
}

void CSGuildMemberLstRsp::Clear() {
  guildmemberlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildMemberLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSGuildMember GuildMemberLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildMemberLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildmemberlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GuildMemberLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildMemberLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSGuildMember GuildMemberLst = 1;
  for (int i = 0; i < this->guildmemberlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildmemberlst(i), output);
  }

}

int CSGuildMemberLstRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSGuildMember GuildMemberLst = 1;
  total_size += 1 * this->guildmemberlst_size();
  for (int i = 0; i < this->guildmemberlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildmemberlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildMemberLstRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildMemberLstRsp*>(&from));
}

void CSGuildMemberLstRsp::MergeFrom(const CSGuildMemberLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildmemberlst_.MergeFrom(from.guildmemberlst_);
}

void CSGuildMemberLstRsp::CopyFrom(const CSGuildMemberLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildMemberLstRsp::IsInitialized() const {

  for (int i = 0; i < guildmemberlst_size(); i++) {
    if (!this->guildmemberlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSGuildMemberLstRsp::Swap(CSGuildMemberLstRsp* other) {
  if (other != this) {
    guildmemberlst_.Swap(&other->guildmemberlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildMemberLstRsp::GetTypeName() const {
  return "vmsg.CSGuildMemberLstRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSMyGuildReqRsp::kGuildIDLstFieldNumber;
#endif  // !_MSC_VER

CSMyGuildReqRsp::CSMyGuildReqRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSMyGuildReqRsp::InitAsDefaultInstance() {
}

CSMyGuildReqRsp::CSMyGuildReqRsp(const CSMyGuildReqRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSMyGuildReqRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMyGuildReqRsp::~CSMyGuildReqRsp() {
  SharedDtor();
}

void CSMyGuildReqRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSMyGuildReqRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSMyGuildReqRsp& CSMyGuildReqRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSMyGuildReqRsp* CSMyGuildReqRsp::default_instance_ = NULL;

CSMyGuildReqRsp* CSMyGuildReqRsp::New() const {
  return new CSMyGuildReqRsp;
}

void CSMyGuildReqRsp::Clear() {
  guildidlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSMyGuildReqRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 GuildIDLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildIDLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_guildidlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guildidlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_GuildIDLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMyGuildReqRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 GuildIDLst = 1;
  for (int i = 0; i < this->guildidlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->guildidlst(i), output);
  }

}

int CSMyGuildReqRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint64 GuildIDLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->guildidlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guildidlst(i));
    }
    total_size += 1 * this->guildidlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMyGuildReqRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSMyGuildReqRsp*>(&from));
}

void CSMyGuildReqRsp::MergeFrom(const CSMyGuildReqRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildidlst_.MergeFrom(from.guildidlst_);
}

void CSMyGuildReqRsp::CopyFrom(const CSMyGuildReqRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMyGuildReqRsp::IsInitialized() const {

  return true;
}

void CSMyGuildReqRsp::Swap(CSMyGuildReqRsp* other) {
  if (other != this) {
    guildidlst_.Swap(&other->guildidlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSMyGuildReqRsp::GetTypeName() const {
  return "vmsg.CSMyGuildReqRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSAllGuildReqRsp::kGuildReqLstFieldNumber;
#endif  // !_MSC_VER

CSAllGuildReqRsp::CSAllGuildReqRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSAllGuildReqRsp::InitAsDefaultInstance() {
}

CSAllGuildReqRsp::CSAllGuildReqRsp(const CSAllGuildReqRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSAllGuildReqRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSAllGuildReqRsp::~CSAllGuildReqRsp() {
  SharedDtor();
}

void CSAllGuildReqRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSAllGuildReqRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSAllGuildReqRsp& CSAllGuildReqRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSAllGuildReqRsp* CSAllGuildReqRsp::default_instance_ = NULL;

CSAllGuildReqRsp* CSAllGuildReqRsp::New() const {
  return new CSAllGuildReqRsp;
}

void CSAllGuildReqRsp::Clear() {
  guildreqlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSAllGuildReqRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSGuildReq GuildReqLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildReqLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildreqlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GuildReqLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSAllGuildReqRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSGuildReq GuildReqLst = 1;
  for (int i = 0; i < this->guildreqlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildreqlst(i), output);
  }

}

int CSAllGuildReqRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSGuildReq GuildReqLst = 1;
  total_size += 1 * this->guildreqlst_size();
  for (int i = 0; i < this->guildreqlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildreqlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSAllGuildReqRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSAllGuildReqRsp*>(&from));
}

void CSAllGuildReqRsp::MergeFrom(const CSAllGuildReqRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildreqlst_.MergeFrom(from.guildreqlst_);
}

void CSAllGuildReqRsp::CopyFrom(const CSAllGuildReqRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSAllGuildReqRsp::IsInitialized() const {

  for (int i = 0; i < guildreqlst_size(); i++) {
    if (!this->guildreqlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSAllGuildReqRsp::Swap(CSAllGuildReqRsp* other) {
  if (other != this) {
    guildreqlst_.Swap(&other->guildreqlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSAllGuildReqRsp::GetTypeName() const {
  return "vmsg.CSAllGuildReqRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildChgPriviRqst::kChgUinFieldNumber;
const int CSGuildChgPriviRqst::kNewPriviFieldNumber;
#endif  // !_MSC_VER

CSGuildChgPriviRqst::CSGuildChgPriviRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildChgPriviRqst::InitAsDefaultInstance() {
}

CSGuildChgPriviRqst::CSGuildChgPriviRqst(const CSGuildChgPriviRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildChgPriviRqst::SharedCtor() {
  _cached_size_ = 0;
  chguin_ = GOOGLE_ULONGLONG(0);
  newprivi_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildChgPriviRqst::~CSGuildChgPriviRqst() {
  SharedDtor();
}

void CSGuildChgPriviRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildChgPriviRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildChgPriviRqst& CSGuildChgPriviRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildChgPriviRqst* CSGuildChgPriviRqst::default_instance_ = NULL;

CSGuildChgPriviRqst* CSGuildChgPriviRqst::New() const {
  return new CSGuildChgPriviRqst;
}

void CSGuildChgPriviRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chguin_ = GOOGLE_ULONGLONG(0);
    newprivi_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildChgPriviRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ChgUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chguin_)));
          set_has_chguin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewPrivi;
        break;
      }

      // required uint32 NewPrivi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewPrivi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newprivi_)));
          set_has_newprivi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildChgPriviRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ChgUin = 1;
  if (has_chguin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chguin(), output);
  }

  // required uint32 NewPrivi = 2;
  if (has_newprivi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newprivi(), output);
  }

}

int CSGuildChgPriviRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ChgUin = 1;
    if (has_chguin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chguin());
    }

    // required uint32 NewPrivi = 2;
    if (has_newprivi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newprivi());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildChgPriviRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildChgPriviRqst*>(&from));
}

void CSGuildChgPriviRqst::MergeFrom(const CSGuildChgPriviRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chguin()) {
      set_chguin(from.chguin());
    }
    if (from.has_newprivi()) {
      set_newprivi(from.newprivi());
    }
  }
}

void CSGuildChgPriviRqst::CopyFrom(const CSGuildChgPriviRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildChgPriviRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildChgPriviRqst::Swap(CSGuildChgPriviRqst* other) {
  if (other != this) {
    std::swap(chguin_, other->chguin_);
    std::swap(newprivi_, other->newprivi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildChgPriviRqst::GetTypeName() const {
  return "vmsg.CSGuildChgPriviRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildChgPriviRsp::kChgUinFieldNumber;
const int CSGuildChgPriviRsp::kNewPriviFieldNumber;
#endif  // !_MSC_VER

CSGuildChgPriviRsp::CSGuildChgPriviRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildChgPriviRsp::InitAsDefaultInstance() {
}

CSGuildChgPriviRsp::CSGuildChgPriviRsp(const CSGuildChgPriviRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildChgPriviRsp::SharedCtor() {
  _cached_size_ = 0;
  chguin_ = GOOGLE_ULONGLONG(0);
  newprivi_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildChgPriviRsp::~CSGuildChgPriviRsp() {
  SharedDtor();
}

void CSGuildChgPriviRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildChgPriviRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildChgPriviRsp& CSGuildChgPriviRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildChgPriviRsp* CSGuildChgPriviRsp::default_instance_ = NULL;

CSGuildChgPriviRsp* CSGuildChgPriviRsp::New() const {
  return new CSGuildChgPriviRsp;
}

void CSGuildChgPriviRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chguin_ = GOOGLE_ULONGLONG(0);
    newprivi_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildChgPriviRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ChgUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &chguin_)));
          set_has_chguin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewPrivi;
        break;
      }

      // required uint32 NewPrivi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewPrivi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newprivi_)));
          set_has_newprivi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildChgPriviRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 ChgUin = 1;
  if (has_chguin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->chguin(), output);
  }

  // required uint32 NewPrivi = 2;
  if (has_newprivi()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newprivi(), output);
  }

}

int CSGuildChgPriviRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 ChgUin = 1;
    if (has_chguin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->chguin());
    }

    // required uint32 NewPrivi = 2;
    if (has_newprivi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newprivi());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildChgPriviRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildChgPriviRsp*>(&from));
}

void CSGuildChgPriviRsp::MergeFrom(const CSGuildChgPriviRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chguin()) {
      set_chguin(from.chguin());
    }
    if (from.has_newprivi()) {
      set_newprivi(from.newprivi());
    }
  }
}

void CSGuildChgPriviRsp::CopyFrom(const CSGuildChgPriviRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildChgPriviRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildChgPriviRsp::Swap(CSGuildChgPriviRsp* other) {
  if (other != this) {
    std::swap(chguin_, other->chguin_);
    std::swap(newprivi_, other->newprivi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildChgPriviRsp::GetTypeName() const {
  return "vmsg.CSGuildChgPriviRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildChgNoticeRqst::kNoticeFieldNumber;
#endif  // !_MSC_VER

CSGuildChgNoticeRqst::CSGuildChgNoticeRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildChgNoticeRqst::InitAsDefaultInstance() {
}

CSGuildChgNoticeRqst::CSGuildChgNoticeRqst(const CSGuildChgNoticeRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildChgNoticeRqst::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildChgNoticeRqst::~CSGuildChgNoticeRqst() {
  SharedDtor();
}

void CSGuildChgNoticeRqst::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildChgNoticeRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildChgNoticeRqst& CSGuildChgNoticeRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildChgNoticeRqst* CSGuildChgNoticeRqst::default_instance_ = NULL;

CSGuildChgNoticeRqst* CSGuildChgNoticeRqst::New() const {
  return new CSGuildChgNoticeRqst;
}

void CSGuildChgNoticeRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildChgNoticeRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildChgNoticeRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string Notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

}

int CSGuildChgNoticeRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string Notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildChgNoticeRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildChgNoticeRqst*>(&from));
}

void CSGuildChgNoticeRqst::MergeFrom(const CSGuildChgNoticeRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
}

void CSGuildChgNoticeRqst::CopyFrom(const CSGuildChgNoticeRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildChgNoticeRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGuildChgNoticeRqst::Swap(CSGuildChgNoticeRqst* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildChgNoticeRqst::GetTypeName() const {
  return "vmsg.CSGuildChgNoticeRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildJoinReplyRqst::kJoinUinLstFieldNumber;
const int CSGuildJoinReplyRqst::kReplyFieldNumber;
#endif  // !_MSC_VER

CSGuildJoinReplyRqst::CSGuildJoinReplyRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildJoinReplyRqst::InitAsDefaultInstance() {
}

CSGuildJoinReplyRqst::CSGuildJoinReplyRqst(const CSGuildJoinReplyRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildJoinReplyRqst::SharedCtor() {
  _cached_size_ = 0;
  reply_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildJoinReplyRqst::~CSGuildJoinReplyRqst() {
  SharedDtor();
}

void CSGuildJoinReplyRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildJoinReplyRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildJoinReplyRqst& CSGuildJoinReplyRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildJoinReplyRqst* CSGuildJoinReplyRqst::default_instance_ = NULL;

CSGuildJoinReplyRqst* CSGuildJoinReplyRqst::New() const {
  return new CSGuildJoinReplyRqst;
}

void CSGuildJoinReplyRqst::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    reply_ = 0u;
  }
  joinuinlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildJoinReplyRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 JoinUinLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JoinUinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_joinuinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_joinuinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_JoinUinLst;
        if (input->ExpectTag(16)) goto parse_Reply;
        break;
      }

      // required uint32 Reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildJoinReplyRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 JoinUinLst = 1;
  for (int i = 0; i < this->joinuinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->joinuinlst(i), output);
  }

  // required uint32 Reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply(), output);
  }

}

int CSGuildJoinReplyRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 Reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply());
    }

  }
  // repeated uint64 JoinUinLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->joinuinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->joinuinlst(i));
    }
    total_size += 1 * this->joinuinlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildJoinReplyRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildJoinReplyRqst*>(&from));
}

void CSGuildJoinReplyRqst::MergeFrom(const CSGuildJoinReplyRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  joinuinlst_.MergeFrom(from.joinuinlst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
}

void CSGuildJoinReplyRqst::CopyFrom(const CSGuildJoinReplyRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildJoinReplyRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSGuildJoinReplyRqst::Swap(CSGuildJoinReplyRqst* other) {
  if (other != this) {
    joinuinlst_.Swap(&other->joinuinlst_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildJoinReplyRqst::GetTypeName() const {
  return "vmsg.CSGuildJoinReplyRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildJoinReplyRsp::kJoinUinLstFieldNumber;
const int CSGuildJoinReplyRsp::kReplyFieldNumber;
#endif  // !_MSC_VER

CSGuildJoinReplyRsp::CSGuildJoinReplyRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildJoinReplyRsp::InitAsDefaultInstance() {
}

CSGuildJoinReplyRsp::CSGuildJoinReplyRsp(const CSGuildJoinReplyRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildJoinReplyRsp::SharedCtor() {
  _cached_size_ = 0;
  reply_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildJoinReplyRsp::~CSGuildJoinReplyRsp() {
  SharedDtor();
}

void CSGuildJoinReplyRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildJoinReplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildJoinReplyRsp& CSGuildJoinReplyRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildJoinReplyRsp* CSGuildJoinReplyRsp::default_instance_ = NULL;

CSGuildJoinReplyRsp* CSGuildJoinReplyRsp::New() const {
  return new CSGuildJoinReplyRsp;
}

void CSGuildJoinReplyRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    reply_ = 0u;
  }
  joinuinlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildJoinReplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 JoinUinLst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_JoinUinLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_joinuinlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_joinuinlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_JoinUinLst;
        if (input->ExpectTag(16)) goto parse_Reply;
        break;
      }

      // required uint32 Reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildJoinReplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 JoinUinLst = 1;
  for (int i = 0; i < this->joinuinlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->joinuinlst(i), output);
  }

  // required uint32 Reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply(), output);
  }

}

int CSGuildJoinReplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 Reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply());
    }

  }
  // repeated uint64 JoinUinLst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->joinuinlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->joinuinlst(i));
    }
    total_size += 1 * this->joinuinlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildJoinReplyRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildJoinReplyRsp*>(&from));
}

void CSGuildJoinReplyRsp::MergeFrom(const CSGuildJoinReplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  joinuinlst_.MergeFrom(from.joinuinlst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
}

void CSGuildJoinReplyRsp::CopyFrom(const CSGuildJoinReplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildJoinReplyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void CSGuildJoinReplyRsp::Swap(CSGuildJoinReplyRsp* other) {
  if (other != this) {
    joinuinlst_.Swap(&other->joinuinlst_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildJoinReplyRsp::GetTypeName() const {
  return "vmsg.CSGuildJoinReplyRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildJoinInNotify::kGuildIDFieldNumber;
const int CSGuildJoinInNotify::kGuildNickFieldNumber;
#endif  // !_MSC_VER

CSGuildJoinInNotify::CSGuildJoinInNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildJoinInNotify::InitAsDefaultInstance() {
}

CSGuildJoinInNotify::CSGuildJoinInNotify(const CSGuildJoinInNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildJoinInNotify::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildnick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildJoinInNotify::~CSGuildJoinInNotify() {
  SharedDtor();
}

void CSGuildJoinInNotify::SharedDtor() {
  if (guildnick_ != &::google::protobuf::internal::kEmptyString) {
    delete guildnick_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildJoinInNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildJoinInNotify& CSGuildJoinInNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildJoinInNotify* CSGuildJoinInNotify::default_instance_ = NULL;

CSGuildJoinInNotify* CSGuildJoinInNotify::New() const {
  return new CSGuildJoinInNotify;
}

void CSGuildJoinInNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildnick()) {
      if (guildnick_ != &::google::protobuf::internal::kEmptyString) {
        guildnick_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildJoinInNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 GuildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildNick;
        break;
      }

      // required string GuildNick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildNick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildnick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildJoinInNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 GuildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required string GuildNick = 2;
  if (has_guildnick()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildnick(), output);
  }

}

int CSGuildJoinInNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 GuildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required string GuildNick = 2;
    if (has_guildnick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildnick());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildJoinInNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildJoinInNotify*>(&from));
}

void CSGuildJoinInNotify::MergeFrom(const CSGuildJoinInNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildnick()) {
      set_guildnick(from.guildnick());
    }
  }
}

void CSGuildJoinInNotify::CopyFrom(const CSGuildJoinInNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildJoinInNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildJoinInNotify::Swap(CSGuildJoinInNotify* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildnick_, other->guildnick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildJoinInNotify::GetTypeName() const {
  return "vmsg.CSGuildJoinInNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildInviteReplyRqst::kInviteGuildFieldNumber;
const int CSGuildInviteReplyRqst::kReplyFieldNumber;
#endif  // !_MSC_VER

CSGuildInviteReplyRqst::CSGuildInviteReplyRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildInviteReplyRqst::InitAsDefaultInstance() {
}

CSGuildInviteReplyRqst::CSGuildInviteReplyRqst(const CSGuildInviteReplyRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildInviteReplyRqst::SharedCtor() {
  _cached_size_ = 0;
  inviteguild_ = GOOGLE_ULONGLONG(0);
  reply_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildInviteReplyRqst::~CSGuildInviteReplyRqst() {
  SharedDtor();
}

void CSGuildInviteReplyRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildInviteReplyRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildInviteReplyRqst& CSGuildInviteReplyRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildInviteReplyRqst* CSGuildInviteReplyRqst::default_instance_ = NULL;

CSGuildInviteReplyRqst* CSGuildInviteReplyRqst::New() const {
  return new CSGuildInviteReplyRqst;
}

void CSGuildInviteReplyRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inviteguild_ = GOOGLE_ULONGLONG(0);
    reply_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildInviteReplyRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 InviteGuild = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviteguild_)));
          set_has_inviteguild();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reply;
        break;
      }

      // required uint32 Reply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildInviteReplyRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 InviteGuild = 1;
  if (has_inviteguild()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->inviteguild(), output);
  }

  // required uint32 Reply = 2;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reply(), output);
  }

}

int CSGuildInviteReplyRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 InviteGuild = 1;
    if (has_inviteguild()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviteguild());
    }

    // required uint32 Reply = 2;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reply());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildInviteReplyRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildInviteReplyRqst*>(&from));
}

void CSGuildInviteReplyRqst::MergeFrom(const CSGuildInviteReplyRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inviteguild()) {
      set_inviteguild(from.inviteguild());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
  }
}

void CSGuildInviteReplyRqst::CopyFrom(const CSGuildInviteReplyRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildInviteReplyRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildInviteReplyRqst::Swap(CSGuildInviteReplyRqst* other) {
  if (other != this) {
    std::swap(inviteguild_, other->inviteguild_);
    std::swap(reply_, other->reply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildInviteReplyRqst::GetTypeName() const {
  return "vmsg.CSGuildInviteReplyRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSOtherGuildRsp::kGuildBriefFieldNumber;
const int CSOtherGuildRsp::kGuildMemberLstFieldNumber;
#endif  // !_MSC_VER

CSOtherGuildRsp::CSOtherGuildRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSOtherGuildRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildbrief_ = const_cast< ::vmsg::CSGuildBrief*>(
      ::vmsg::CSGuildBrief::internal_default_instance());
#else
  guildbrief_ = const_cast< ::vmsg::CSGuildBrief*>(&::vmsg::CSGuildBrief::default_instance());
#endif
}

CSOtherGuildRsp::CSOtherGuildRsp(const CSOtherGuildRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSOtherGuildRsp::SharedCtor() {
  _cached_size_ = 0;
  guildbrief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSOtherGuildRsp::~CSOtherGuildRsp() {
  SharedDtor();
}

void CSOtherGuildRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guildbrief_;
  }
}

void CSOtherGuildRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSOtherGuildRsp& CSOtherGuildRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSOtherGuildRsp* CSOtherGuildRsp::default_instance_ = NULL;

CSOtherGuildRsp* CSOtherGuildRsp::New() const {
  return new CSOtherGuildRsp;
}

void CSOtherGuildRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildbrief()) {
      if (guildbrief_ != NULL) guildbrief_->::vmsg::CSGuildBrief::Clear();
    }
  }
  guildmemberlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSOtherGuildRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSGuildBrief GuildBrief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbrief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberLst;
        break;
      }

      // repeated .vmsg.CSGuildMemberBrief GuildMemberLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildMemberLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildmemberlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuildMemberLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSOtherGuildRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSGuildBrief GuildBrief = 1;
  if (has_guildbrief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildbrief(), output);
  }

  // repeated .vmsg.CSGuildMemberBrief GuildMemberLst = 2;
  for (int i = 0; i < this->guildmemberlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->guildmemberlst(i), output);
  }

}

int CSOtherGuildRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSGuildBrief GuildBrief = 1;
    if (has_guildbrief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbrief());
    }

  }
  // repeated .vmsg.CSGuildMemberBrief GuildMemberLst = 2;
  total_size += 1 * this->guildmemberlst_size();
  for (int i = 0; i < this->guildmemberlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildmemberlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSOtherGuildRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSOtherGuildRsp*>(&from));
}

void CSOtherGuildRsp::MergeFrom(const CSOtherGuildRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildmemberlst_.MergeFrom(from.guildmemberlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildbrief()) {
      mutable_guildbrief()->::vmsg::CSGuildBrief::MergeFrom(from.guildbrief());
    }
  }
}

void CSOtherGuildRsp::CopyFrom(const CSOtherGuildRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOtherGuildRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_guildbrief()) {
    if (!this->guildbrief().IsInitialized()) return false;
  }
  for (int i = 0; i < guildmemberlst_size(); i++) {
    if (!this->guildmemberlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSOtherGuildRsp::Swap(CSOtherGuildRsp* other) {
  if (other != this) {
    std::swap(guildbrief_, other->guildbrief_);
    guildmemberlst_.Swap(&other->guildmemberlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSOtherGuildRsp::GetTypeName() const {
  return "vmsg.CSOtherGuildRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSQueryGuildLstRsp::kGuildLstFieldNumber;
const int CSQueryGuildLstRsp::kGuildReqLstFieldNumber;
#endif  // !_MSC_VER

CSQueryGuildLstRsp::CSQueryGuildLstRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSQueryGuildLstRsp::InitAsDefaultInstance() {
}

CSQueryGuildLstRsp::CSQueryGuildLstRsp(const CSQueryGuildLstRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSQueryGuildLstRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSQueryGuildLstRsp::~CSQueryGuildLstRsp() {
  SharedDtor();
}

void CSQueryGuildLstRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSQueryGuildLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSQueryGuildLstRsp& CSQueryGuildLstRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSQueryGuildLstRsp* CSQueryGuildLstRsp::default_instance_ = NULL;

CSQueryGuildLstRsp* CSQueryGuildLstRsp::New() const {
  return new CSQueryGuildLstRsp;
}

void CSQueryGuildLstRsp::Clear() {
  guildlst_.Clear();
  guildreqlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSQueryGuildLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .vmsg.CSGuildBrief GuildLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_GuildLst;
        if (input->ExpectTag(32)) goto parse_GuildReqLst;
        break;
      }

      // repeated uint64 GuildReqLst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildReqLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_guildreqlst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_guildreqlst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GuildReqLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSQueryGuildLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .vmsg.CSGuildBrief GuildLst = 3;
  for (int i = 0; i < this->guildlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->guildlst(i), output);
  }

  // repeated uint64 GuildReqLst = 4;
  for (int i = 0; i < this->guildreqlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->guildreqlst(i), output);
  }

}

int CSQueryGuildLstRsp::ByteSize() const {
  int total_size = 0;

  // repeated .vmsg.CSGuildBrief GuildLst = 3;
  total_size += 1 * this->guildlst_size();
  for (int i = 0; i < this->guildlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildlst(i));
  }

  // repeated uint64 GuildReqLst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->guildreqlst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->guildreqlst(i));
    }
    total_size += 1 * this->guildreqlst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSQueryGuildLstRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSQueryGuildLstRsp*>(&from));
}

void CSQueryGuildLstRsp::MergeFrom(const CSQueryGuildLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildlst_.MergeFrom(from.guildlst_);
  guildreqlst_.MergeFrom(from.guildreqlst_);
}

void CSQueryGuildLstRsp::CopyFrom(const CSQueryGuildLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSQueryGuildLstRsp::IsInitialized() const {

  for (int i = 0; i < guildlst_size(); i++) {
    if (!this->guildlst(i).IsInitialized()) return false;
  }
  return true;
}

void CSQueryGuildLstRsp::Swap(CSQueryGuildLstRsp* other) {
  if (other != this) {
    guildlst_.Swap(&other->guildlst_);
    guildreqlst_.Swap(&other->guildreqlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSQueryGuildLstRsp::GetTypeName() const {
  return "vmsg.CSQueryGuildLstRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildSearchRqst::kSearchNameFieldNumber;
#endif  // !_MSC_VER

CSGuildSearchRqst::CSGuildSearchRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildSearchRqst::InitAsDefaultInstance() {
}

CSGuildSearchRqst::CSGuildSearchRqst(const CSGuildSearchRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildSearchRqst::SharedCtor() {
  _cached_size_ = 0;
  searchname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildSearchRqst::~CSGuildSearchRqst() {
  SharedDtor();
}

void CSGuildSearchRqst::SharedDtor() {
  if (searchname_ != &::google::protobuf::internal::kEmptyString) {
    delete searchname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildSearchRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildSearchRqst& CSGuildSearchRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildSearchRqst* CSGuildSearchRqst::default_instance_ = NULL;

CSGuildSearchRqst* CSGuildSearchRqst::New() const {
  return new CSGuildSearchRqst;
}

void CSGuildSearchRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_searchname()) {
      if (searchname_ != &::google::protobuf::internal::kEmptyString) {
        searchname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildSearchRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string SearchName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_searchname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildSearchRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string SearchName = 1;
  if (has_searchname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->searchname(), output);
  }

}

int CSGuildSearchRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string SearchName = 1;
    if (has_searchname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->searchname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildSearchRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildSearchRqst*>(&from));
}

void CSGuildSearchRqst::MergeFrom(const CSGuildSearchRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_searchname()) {
      set_searchname(from.searchname());
    }
  }
}

void CSGuildSearchRqst::CopyFrom(const CSGuildSearchRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildSearchRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGuildSearchRqst::Swap(CSGuildSearchRqst* other) {
  if (other != this) {
    std::swap(searchname_, other->searchname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildSearchRqst::GetTypeName() const {
  return "vmsg.CSGuildSearchRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildSearchRsp::kGuildBriefFieldNumber;
#endif  // !_MSC_VER

CSGuildSearchRsp::CSGuildSearchRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildSearchRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildbrief_ = const_cast< ::vmsg::CSGuildBrief*>(
      ::vmsg::CSGuildBrief::internal_default_instance());
#else
  guildbrief_ = const_cast< ::vmsg::CSGuildBrief*>(&::vmsg::CSGuildBrief::default_instance());
#endif
}

CSGuildSearchRsp::CSGuildSearchRsp(const CSGuildSearchRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildSearchRsp::SharedCtor() {
  _cached_size_ = 0;
  guildbrief_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildSearchRsp::~CSGuildSearchRsp() {
  SharedDtor();
}

void CSGuildSearchRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guildbrief_;
  }
}

void CSGuildSearchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildSearchRsp& CSGuildSearchRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildSearchRsp* CSGuildSearchRsp::default_instance_ = NULL;

CSGuildSearchRsp* CSGuildSearchRsp::New() const {
  return new CSGuildSearchRsp;
}

void CSGuildSearchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildbrief()) {
      if (guildbrief_ != NULL) guildbrief_->::vmsg::CSGuildBrief::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildSearchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSGuildBrief GuildBrief = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbrief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildSearchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSGuildBrief GuildBrief = 1;
  if (has_guildbrief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildbrief(), output);
  }

}

int CSGuildSearchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSGuildBrief GuildBrief = 1;
    if (has_guildbrief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbrief());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildSearchRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildSearchRsp*>(&from));
}

void CSGuildSearchRsp::MergeFrom(const CSGuildSearchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildbrief()) {
      mutable_guildbrief()->::vmsg::CSGuildBrief::MergeFrom(from.guildbrief());
    }
  }
}

void CSGuildSearchRsp::CopyFrom(const CSGuildSearchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildSearchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_guildbrief()) {
    if (!this->guildbrief().IsInitialized()) return false;
  }
  return true;
}

void CSGuildSearchRsp::Swap(CSGuildSearchRsp* other) {
  if (other != this) {
    std::swap(guildbrief_, other->guildbrief_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildSearchRsp::GetTypeName() const {
  return "vmsg.CSGuildSearchRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildDailyActRsp::kBunRemainNumFieldNumber;
const int CSGuildDailyActRsp::kThiefRemainNumFieldNumber;
const int CSGuildDailyActRsp::kBlockRemainNumFieldNumber;
#endif  // !_MSC_VER

CSGuildDailyActRsp::CSGuildDailyActRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildDailyActRsp::InitAsDefaultInstance() {
}

CSGuildDailyActRsp::CSGuildDailyActRsp(const CSGuildDailyActRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildDailyActRsp::SharedCtor() {
  _cached_size_ = 0;
  bunremainnum_ = 0u;
  thiefremainnum_ = 0u;
  blockremainnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildDailyActRsp::~CSGuildDailyActRsp() {
  SharedDtor();
}

void CSGuildDailyActRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildDailyActRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildDailyActRsp& CSGuildDailyActRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildDailyActRsp* CSGuildDailyActRsp::default_instance_ = NULL;

CSGuildDailyActRsp* CSGuildDailyActRsp::New() const {
  return new CSGuildDailyActRsp;
}

void CSGuildDailyActRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bunremainnum_ = 0u;
    thiefremainnum_ = 0u;
    blockremainnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildDailyActRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BunRemainNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bunremainnum_)));
          set_has_bunremainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ThiefRemainNum;
        break;
      }

      // required uint32 ThiefRemainNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ThiefRemainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &thiefremainnum_)));
          set_has_thiefremainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BlockRemainNum;
        break;
      }

      // required uint32 BlockRemainNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BlockRemainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blockremainnum_)));
          set_has_blockremainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildDailyActRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BunRemainNum = 1;
  if (has_bunremainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bunremainnum(), output);
  }

  // required uint32 ThiefRemainNum = 2;
  if (has_thiefremainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->thiefremainnum(), output);
  }

  // required uint32 BlockRemainNum = 3;
  if (has_blockremainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->blockremainnum(), output);
  }

}

int CSGuildDailyActRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BunRemainNum = 1;
    if (has_bunremainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bunremainnum());
    }

    // required uint32 ThiefRemainNum = 2;
    if (has_thiefremainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->thiefremainnum());
    }

    // required uint32 BlockRemainNum = 3;
    if (has_blockremainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blockremainnum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildDailyActRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildDailyActRsp*>(&from));
}

void CSGuildDailyActRsp::MergeFrom(const CSGuildDailyActRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bunremainnum()) {
      set_bunremainnum(from.bunremainnum());
    }
    if (from.has_thiefremainnum()) {
      set_thiefremainnum(from.thiefremainnum());
    }
    if (from.has_blockremainnum()) {
      set_blockremainnum(from.blockremainnum());
    }
  }
}

void CSGuildDailyActRsp::CopyFrom(const CSGuildDailyActRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildDailyActRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSGuildDailyActRsp::Swap(CSGuildDailyActRsp* other) {
  if (other != this) {
    std::swap(bunremainnum_, other->bunremainnum_);
    std::swap(thiefremainnum_, other->thiefremainnum_);
    std::swap(blockremainnum_, other->blockremainnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildDailyActRsp::GetTypeName() const {
  return "vmsg.CSGuildDailyActRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildInviteMemberRsp::kMemberInfoFieldNumber;
const int CSGuildInviteMemberRsp::kActTypeFieldNumber;
#endif  // !_MSC_VER

CSGuildInviteMemberRsp::CSGuildInviteMemberRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildInviteMemberRsp::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  memberinfo_ = const_cast< ::vmsg::CSGuildMemberBrief*>(
      ::vmsg::CSGuildMemberBrief::internal_default_instance());
#else
  memberinfo_ = const_cast< ::vmsg::CSGuildMemberBrief*>(&::vmsg::CSGuildMemberBrief::default_instance());
#endif
}

CSGuildInviteMemberRsp::CSGuildInviteMemberRsp(const CSGuildInviteMemberRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildInviteMemberRsp::SharedCtor() {
  _cached_size_ = 0;
  memberinfo_ = NULL;
  acttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildInviteMemberRsp::~CSGuildInviteMemberRsp() {
  SharedDtor();
}

void CSGuildInviteMemberRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete memberinfo_;
  }
}

void CSGuildInviteMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildInviteMemberRsp& CSGuildInviteMemberRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildInviteMemberRsp* CSGuildInviteMemberRsp::default_instance_ = NULL;

CSGuildInviteMemberRsp* CSGuildInviteMemberRsp::New() const {
  return new CSGuildInviteMemberRsp;
}

void CSGuildInviteMemberRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::vmsg::CSGuildMemberBrief::Clear();
    }
    acttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildInviteMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .vmsg.CSGuildMemberBrief MemberInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActType;
        break;
      }

      // required uint32 ActType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildInviteMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .vmsg.CSGuildMemberBrief MemberInfo = 1;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->memberinfo(), output);
  }

  // required uint32 ActType = 2;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acttype(), output);
  }

}

int CSGuildInviteMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .vmsg.CSGuildMemberBrief MemberInfo = 1;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

    // required uint32 ActType = 2;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acttype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildInviteMemberRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildInviteMemberRsp*>(&from));
}

void CSGuildInviteMemberRsp::MergeFrom(const CSGuildInviteMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::vmsg::CSGuildMemberBrief::MergeFrom(from.memberinfo());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
  }
}

void CSGuildInviteMemberRsp::CopyFrom(const CSGuildInviteMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildInviteMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_memberinfo()) {
    if (!this->memberinfo().IsInitialized()) return false;
  }
  return true;
}

void CSGuildInviteMemberRsp::Swap(CSGuildInviteMemberRsp* other) {
  if (other != this) {
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(acttype_, other->acttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildInviteMemberRsp::GetTypeName() const {
  return "vmsg.CSGuildInviteMemberRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildBunEndRsp::kIsWinFieldNumber;
const int CSGuildBunEndRsp::kMyBunNumFieldNumber;
const int CSGuildBunEndRsp::kMemberBunNumFieldNumber;
#endif  // !_MSC_VER

CSGuildBunEndRsp::CSGuildBunEndRsp()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildBunEndRsp::InitAsDefaultInstance() {
}

CSGuildBunEndRsp::CSGuildBunEndRsp(const CSGuildBunEndRsp& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildBunEndRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = 0u;
  mybunnum_ = 0u;
  memberbunnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildBunEndRsp::~CSGuildBunEndRsp() {
  SharedDtor();
}

void CSGuildBunEndRsp::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildBunEndRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildBunEndRsp& CSGuildBunEndRsp::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildBunEndRsp* CSGuildBunEndRsp::default_instance_ = NULL;

CSGuildBunEndRsp* CSGuildBunEndRsp::New() const {
  return new CSGuildBunEndRsp;
}

void CSGuildBunEndRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iswin_ = 0u;
    mybunnum_ = 0u;
    memberbunnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildBunEndRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 IsWin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MyBunNum;
        break;
      }

      // required uint32 MyBunNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MyBunNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mybunnum_)));
          set_has_mybunnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MemberBunNum;
        break;
      }

      // required uint32 MemberBunNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberBunNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memberbunnum_)));
          set_has_memberbunnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildBunEndRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->iswin(), output);
  }

  // required uint32 MyBunNum = 2;
  if (has_mybunnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mybunnum(), output);
  }

  // required uint32 MemberBunNum = 3;
  if (has_memberbunnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->memberbunnum(), output);
  }

}

int CSGuildBunEndRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 IsWin = 1;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

    // required uint32 MyBunNum = 2;
    if (has_mybunnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mybunnum());
    }

    // required uint32 MemberBunNum = 3;
    if (has_memberbunnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memberbunnum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildBunEndRsp::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildBunEndRsp*>(&from));
}

void CSGuildBunEndRsp::MergeFrom(const CSGuildBunEndRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_mybunnum()) {
      set_mybunnum(from.mybunnum());
    }
    if (from.has_memberbunnum()) {
      set_memberbunnum(from.memberbunnum());
    }
  }
}

void CSGuildBunEndRsp::CopyFrom(const CSGuildBunEndRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildBunEndRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CSGuildBunEndRsp::Swap(CSGuildBunEndRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(mybunnum_, other->mybunnum_);
    std::swap(memberbunnum_, other->memberbunnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildBunEndRsp::GetTypeName() const {
  return "vmsg.CSGuildBunEndRsp";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildActInviteRqst::kMemberUinFieldNumber;
const int CSGuildActInviteRqst::kActTypeFieldNumber;
#endif  // !_MSC_VER

CSGuildActInviteRqst::CSGuildActInviteRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildActInviteRqst::InitAsDefaultInstance() {
}

CSGuildActInviteRqst::CSGuildActInviteRqst(const CSGuildActInviteRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildActInviteRqst::SharedCtor() {
  _cached_size_ = 0;
  memberuin_ = GOOGLE_ULONGLONG(0);
  acttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildActInviteRqst::~CSGuildActInviteRqst() {
  SharedDtor();
}

void CSGuildActInviteRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildActInviteRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildActInviteRqst& CSGuildActInviteRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildActInviteRqst* CSGuildActInviteRqst::default_instance_ = NULL;

CSGuildActInviteRqst* CSGuildActInviteRqst::New() const {
  return new CSGuildActInviteRqst;
}

void CSGuildActInviteRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    memberuin_ = GOOGLE_ULONGLONG(0);
    acttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildActInviteRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 MemberUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberuin_)));
          set_has_memberuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ActType;
        break;
      }

      // required uint32 ActType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acttype_)));
          set_has_acttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildActInviteRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 MemberUin = 1;
  if (has_memberuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->memberuin(), output);
  }

  // required uint32 ActType = 2;
  if (has_acttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->acttype(), output);
  }

}

int CSGuildActInviteRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 MemberUin = 1;
    if (has_memberuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberuin());
    }

    // required uint32 ActType = 2;
    if (has_acttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acttype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildActInviteRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildActInviteRqst*>(&from));
}

void CSGuildActInviteRqst::MergeFrom(const CSGuildActInviteRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuin()) {
      set_memberuin(from.memberuin());
    }
    if (from.has_acttype()) {
      set_acttype(from.acttype());
    }
  }
}

void CSGuildActInviteRqst::CopyFrom(const CSGuildActInviteRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildActInviteRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildActInviteRqst::Swap(CSGuildActInviteRqst* other) {
  if (other != this) {
    std::swap(memberuin_, other->memberuin_);
    std::swap(acttype_, other->acttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildActInviteRqst::GetTypeName() const {
  return "vmsg.CSGuildActInviteRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildThiefRqst::kDamageHPFieldNumber;
const int CSGuildThiefRqst::kKillThiefNumFieldNumber;
const int CSGuildThiefRqst::kThiefLstFieldNumber;
#endif  // !_MSC_VER

CSGuildThiefRqst::CSGuildThiefRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildThiefRqst::InitAsDefaultInstance() {
}

CSGuildThiefRqst::CSGuildThiefRqst(const CSGuildThiefRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildThiefRqst::SharedCtor() {
  _cached_size_ = 0;
  damagehp_ = 0u;
  killthiefnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildThiefRqst::~CSGuildThiefRqst() {
  SharedDtor();
}

void CSGuildThiefRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildThiefRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildThiefRqst& CSGuildThiefRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildThiefRqst* CSGuildThiefRqst::default_instance_ = NULL;

CSGuildThiefRqst* CSGuildThiefRqst::New() const {
  return new CSGuildThiefRqst;
}

void CSGuildThiefRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    damagehp_ = 0u;
    killthiefnum_ = 0u;
  }
  thieflst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildThiefRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DamageHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagehp_)));
          set_has_damagehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_KillThiefNum;
        break;
      }

      // required uint32 KillThiefNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KillThiefNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killthiefnum_)));
          set_has_killthiefnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ThiefLst;
        break;
      }

      // repeated uint32 ThiefLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ThiefLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_thieflst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_thieflst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ThiefLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildThiefRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DamageHP = 1;
  if (has_damagehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->damagehp(), output);
  }

  // required uint32 KillThiefNum = 2;
  if (has_killthiefnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killthiefnum(), output);
  }

  // repeated uint32 ThiefLst = 3;
  for (int i = 0; i < this->thieflst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->thieflst(i), output);
  }

}

int CSGuildThiefRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DamageHP = 1;
    if (has_damagehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagehp());
    }

    // required uint32 KillThiefNum = 2;
    if (has_killthiefnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killthiefnum());
    }

  }
  // repeated uint32 ThiefLst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->thieflst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->thieflst(i));
    }
    total_size += 1 * this->thieflst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildThiefRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildThiefRqst*>(&from));
}

void CSGuildThiefRqst::MergeFrom(const CSGuildThiefRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  thieflst_.MergeFrom(from.thieflst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagehp()) {
      set_damagehp(from.damagehp());
    }
    if (from.has_killthiefnum()) {
      set_killthiefnum(from.killthiefnum());
    }
  }
}

void CSGuildThiefRqst::CopyFrom(const CSGuildThiefRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildThiefRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildThiefRqst::Swap(CSGuildThiefRqst* other) {
  if (other != this) {
    std::swap(damagehp_, other->damagehp_);
    std::swap(killthiefnum_, other->killthiefnum_);
    thieflst_.Swap(&other->thieflst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildThiefRqst::GetTypeName() const {
  return "vmsg.CSGuildThiefRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildActBlockEndRqst::kDamageHPFieldNumber;
const int CSGuildActBlockEndRqst::kBlockNumFieldNumber;
const int CSGuildActBlockEndRqst::kBlockLstFieldNumber;
#endif  // !_MSC_VER

CSGuildActBlockEndRqst::CSGuildActBlockEndRqst()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildActBlockEndRqst::InitAsDefaultInstance() {
}

CSGuildActBlockEndRqst::CSGuildActBlockEndRqst(const CSGuildActBlockEndRqst& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildActBlockEndRqst::SharedCtor() {
  _cached_size_ = 0;
  damagehp_ = 0u;
  blocknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildActBlockEndRqst::~CSGuildActBlockEndRqst() {
  SharedDtor();
}

void CSGuildActBlockEndRqst::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildActBlockEndRqst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildActBlockEndRqst& CSGuildActBlockEndRqst::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildActBlockEndRqst* CSGuildActBlockEndRqst::default_instance_ = NULL;

CSGuildActBlockEndRqst* CSGuildActBlockEndRqst::New() const {
  return new CSGuildActBlockEndRqst;
}

void CSGuildActBlockEndRqst::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    damagehp_ = 0u;
    blocknum_ = 0u;
  }
  blocklst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildActBlockEndRqst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DamageHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagehp_)));
          set_has_damagehp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BlockNum;
        break;
      }

      // required uint32 BlockNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BlockNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blocknum_)));
          set_has_blocknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BlockLst;
        break;
      }

      // repeated uint32 BlockLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BlockLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_blocklst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_blocklst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BlockLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildActBlockEndRqst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DamageHP = 1;
  if (has_damagehp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->damagehp(), output);
  }

  // required uint32 BlockNum = 2;
  if (has_blocknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->blocknum(), output);
  }

  // repeated uint32 BlockLst = 3;
  for (int i = 0; i < this->blocklst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->blocklst(i), output);
  }

}

int CSGuildActBlockEndRqst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DamageHP = 1;
    if (has_damagehp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagehp());
    }

    // required uint32 BlockNum = 2;
    if (has_blocknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blocknum());
    }

  }
  // repeated uint32 BlockLst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->blocklst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->blocklst(i));
    }
    total_size += 1 * this->blocklst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildActBlockEndRqst::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildActBlockEndRqst*>(&from));
}

void CSGuildActBlockEndRqst::MergeFrom(const CSGuildActBlockEndRqst& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocklst_.MergeFrom(from.blocklst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagehp()) {
      set_damagehp(from.damagehp());
    }
    if (from.has_blocknum()) {
      set_blocknum(from.blocknum());
    }
  }
}

void CSGuildActBlockEndRqst::CopyFrom(const CSGuildActBlockEndRqst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildActBlockEndRqst::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildActBlockEndRqst::Swap(CSGuildActBlockEndRqst* other) {
  if (other != this) {
    std::swap(damagehp_, other->damagehp_);
    std::swap(blocknum_, other->blocknum_);
    blocklst_.Swap(&other->blocklst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildActBlockEndRqst::GetTypeName() const {
  return "vmsg.CSGuildActBlockEndRqst";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildStatNotify::kGuildIDFieldNumber;
const int CSGuildStatNotify::kReasonFieldNumber;
#endif  // !_MSC_VER

CSGuildStatNotify::CSGuildStatNotify()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildStatNotify::InitAsDefaultInstance() {
}

CSGuildStatNotify::CSGuildStatNotify(const CSGuildStatNotify& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildStatNotify::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  reason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildStatNotify::~CSGuildStatNotify() {
  SharedDtor();
}

void CSGuildStatNotify::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CSGuildStatNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildStatNotify& CSGuildStatNotify::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildStatNotify* CSGuildStatNotify::default_instance_ = NULL;

CSGuildStatNotify* CSGuildStatNotify::New() const {
  return new CSGuildStatNotify;
}

void CSGuildStatNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = GOOGLE_ULONGLONG(0);
    reason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildStatNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 GuildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reason;
        break;
      }

      // required uint32 Reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildStatNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 GuildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // required uint32 Reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reason(), output);
  }

}

int CSGuildStatNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 GuildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 Reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reason());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildStatNotify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildStatNotify*>(&from));
}

void CSGuildStatNotify::MergeFrom(const CSGuildStatNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
}

void CSGuildStatNotify::CopyFrom(const CSGuildStatNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildStatNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGuildStatNotify::Swap(CSGuildStatNotify* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildStatNotify::GetTypeName() const {
  return "vmsg.CSGuildStatNotify";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildRequest::kGuildCreateRqstFieldNumber;
const int CSGuildRequest::kGuildJoinRqstFieldNumber;
const int CSGuildRequest::kGuildKickRqstFieldNumber;
const int CSGuildRequest::kGuildInviteRqstFieldNumber;
const int CSGuildRequest::kQueryOtherGuildRqstFieldNumber;
const int CSGuildRequest::kChgGuildNoticeRqstFieldNumber;
const int CSGuildRequest::kAssignChairManRqstFieldNumber;
const int CSGuildRequest::kGuildChgPriviRqstFieldNumber;
const int CSGuildRequest::kGuildJoinReplyRqstFieldNumber;
const int CSGuildRequest::kGuildInviteReplyRqstFieldNumber;
const int CSGuildRequest::kDeleteMyGuildReqRqstFieldNumber;
const int CSGuildRequest::kGuildSearchRqstFieldNumber;
const int CSGuildRequest::kActInviteRqstFieldNumber;
const int CSGuildRequest::kBunEndNumRqstFieldNumber;
const int CSGuildRequest::kThiefEndRqstFieldNumber;
const int CSGuildRequest::kBlockEndRqstFieldNumber;
const int CSGuildRequest::kActTypeStartRqstFieldNumber;
#endif  // !_MSC_VER

CSGuildRequest::CSGuildRequest()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildRequest::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildcreate_rqst_ = const_cast< ::vmsg::CSGuildCreateRqst*>(
      ::vmsg::CSGuildCreateRqst::internal_default_instance());
#else
  guildcreate_rqst_ = const_cast< ::vmsg::CSGuildCreateRqst*>(&::vmsg::CSGuildCreateRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  chgguildnotice_rqst_ = const_cast< ::vmsg::CSGuildChgNoticeRqst*>(
      ::vmsg::CSGuildChgNoticeRqst::internal_default_instance());
#else
  chgguildnotice_rqst_ = const_cast< ::vmsg::CSGuildChgNoticeRqst*>(&::vmsg::CSGuildChgNoticeRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildchgprivi_rqst_ = const_cast< ::vmsg::CSGuildChgPriviRqst*>(
      ::vmsg::CSGuildChgPriviRqst::internal_default_instance());
#else
  guildchgprivi_rqst_ = const_cast< ::vmsg::CSGuildChgPriviRqst*>(&::vmsg::CSGuildChgPriviRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildjoinreply_rqst_ = const_cast< ::vmsg::CSGuildJoinReplyRqst*>(
      ::vmsg::CSGuildJoinReplyRqst::internal_default_instance());
#else
  guildjoinreply_rqst_ = const_cast< ::vmsg::CSGuildJoinReplyRqst*>(&::vmsg::CSGuildJoinReplyRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildinvitereply_rqst_ = const_cast< ::vmsg::CSGuildInviteReplyRqst*>(
      ::vmsg::CSGuildInviteReplyRqst::internal_default_instance());
#else
  guildinvitereply_rqst_ = const_cast< ::vmsg::CSGuildInviteReplyRqst*>(&::vmsg::CSGuildInviteReplyRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildsearch_rqst_ = const_cast< ::vmsg::CSGuildSearchRqst*>(
      ::vmsg::CSGuildSearchRqst::internal_default_instance());
#else
  guildsearch_rqst_ = const_cast< ::vmsg::CSGuildSearchRqst*>(&::vmsg::CSGuildSearchRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actinvite_rqst_ = const_cast< ::vmsg::CSGuildActInviteRqst*>(
      ::vmsg::CSGuildActInviteRqst::internal_default_instance());
#else
  actinvite_rqst_ = const_cast< ::vmsg::CSGuildActInviteRqst*>(&::vmsg::CSGuildActInviteRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  thiefend_rqst_ = const_cast< ::vmsg::CSGuildThiefRqst*>(
      ::vmsg::CSGuildThiefRqst::internal_default_instance());
#else
  thiefend_rqst_ = const_cast< ::vmsg::CSGuildThiefRqst*>(&::vmsg::CSGuildThiefRqst::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  blockend_rqst_ = const_cast< ::vmsg::CSGuildActBlockEndRqst*>(
      ::vmsg::CSGuildActBlockEndRqst::internal_default_instance());
#else
  blockend_rqst_ = const_cast< ::vmsg::CSGuildActBlockEndRqst*>(&::vmsg::CSGuildActBlockEndRqst::default_instance());
#endif
}

CSGuildRequest::CSGuildRequest(const CSGuildRequest& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildRequest::SharedCtor() {
  _cached_size_ = 0;
  guildcreate_rqst_ = NULL;
  guildjoin_rqst_ = GOOGLE_ULONGLONG(0);
  guildkick_rqst_ = GOOGLE_ULONGLONG(0);
  guildinvite_rqst_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  queryotherguild_rqst_ = GOOGLE_ULONGLONG(0);
  chgguildnotice_rqst_ = NULL;
  assignchairman_rqst_ = GOOGLE_ULONGLONG(0);
  guildchgprivi_rqst_ = NULL;
  guildjoinreply_rqst_ = NULL;
  guildinvitereply_rqst_ = NULL;
  deletemyguildreq_rqst_ = GOOGLE_ULONGLONG(0);
  guildsearch_rqst_ = NULL;
  actinvite_rqst_ = NULL;
  bunendnum_rqst_ = 0u;
  thiefend_rqst_ = NULL;
  blockend_rqst_ = NULL;
  acttypestart_rqst_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildRequest::~CSGuildRequest() {
  SharedDtor();
}

void CSGuildRequest::SharedDtor() {
  if (guildinvite_rqst_ != &::google::protobuf::internal::kEmptyString) {
    delete guildinvite_rqst_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guildcreate_rqst_;
    delete chgguildnotice_rqst_;
    delete guildchgprivi_rqst_;
    delete guildjoinreply_rqst_;
    delete guildinvitereply_rqst_;
    delete guildsearch_rqst_;
    delete actinvite_rqst_;
    delete thiefend_rqst_;
    delete blockend_rqst_;
  }
}

void CSGuildRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildRequest& CSGuildRequest::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildRequest* CSGuildRequest::default_instance_ = NULL;

CSGuildRequest* CSGuildRequest::New() const {
  return new CSGuildRequest;
}

void CSGuildRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildcreate_rqst()) {
      if (guildcreate_rqst_ != NULL) guildcreate_rqst_->::vmsg::CSGuildCreateRqst::Clear();
    }
    guildjoin_rqst_ = GOOGLE_ULONGLONG(0);
    guildkick_rqst_ = GOOGLE_ULONGLONG(0);
    if (has_guildinvite_rqst()) {
      if (guildinvite_rqst_ != &::google::protobuf::internal::kEmptyString) {
        guildinvite_rqst_->clear();
      }
    }
    queryotherguild_rqst_ = GOOGLE_ULONGLONG(0);
    if (has_chgguildnotice_rqst()) {
      if (chgguildnotice_rqst_ != NULL) chgguildnotice_rqst_->::vmsg::CSGuildChgNoticeRqst::Clear();
    }
    assignchairman_rqst_ = GOOGLE_ULONGLONG(0);
    if (has_guildchgprivi_rqst()) {
      if (guildchgprivi_rqst_ != NULL) guildchgprivi_rqst_->::vmsg::CSGuildChgPriviRqst::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_guildjoinreply_rqst()) {
      if (guildjoinreply_rqst_ != NULL) guildjoinreply_rqst_->::vmsg::CSGuildJoinReplyRqst::Clear();
    }
    if (has_guildinvitereply_rqst()) {
      if (guildinvitereply_rqst_ != NULL) guildinvitereply_rqst_->::vmsg::CSGuildInviteReplyRqst::Clear();
    }
    deletemyguildreq_rqst_ = GOOGLE_ULONGLONG(0);
    if (has_guildsearch_rqst()) {
      if (guildsearch_rqst_ != NULL) guildsearch_rqst_->::vmsg::CSGuildSearchRqst::Clear();
    }
    if (has_actinvite_rqst()) {
      if (actinvite_rqst_ != NULL) actinvite_rqst_->::vmsg::CSGuildActInviteRqst::Clear();
    }
    bunendnum_rqst_ = 0u;
    if (has_thiefend_rqst()) {
      if (thiefend_rqst_ != NULL) thiefend_rqst_->::vmsg::CSGuildThiefRqst::Clear();
    }
    if (has_blockend_rqst()) {
      if (blockend_rqst_ != NULL) blockend_rqst_->::vmsg::CSGuildActBlockEndRqst::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    acttypestart_rqst_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .vmsg.CSGuildCreateRqst GuildCreate_Rqst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildcreate_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GuildJoin_Rqst;
        break;
      }

      // optional uint64 GuildJoin_Rqst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildJoin_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildjoin_rqst_)));
          set_has_guildjoin_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GuildKick_Rqst;
        break;
      }

      // optional uint64 GuildKick_Rqst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildKick_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildkick_rqst_)));
          set_has_guildkick_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_GuildInvite_Rqst;
        break;
      }

      // optional string GuildInvite_Rqst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildInvite_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildinvite_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_QueryOtherGuild_Rqst;
        break;
      }

      // optional uint64 QueryOtherGuild_Rqst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QueryOtherGuild_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &queryotherguild_rqst_)));
          set_has_queryotherguild_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ChgGuildNotice_Rqst;
        break;
      }

      // optional .vmsg.CSGuildChgNoticeRqst ChgGuildNotice_Rqst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ChgGuildNotice_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chgguildnotice_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AssignChairMan_Rqst;
        break;
      }

      // optional uint64 AssignChairMan_Rqst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AssignChairMan_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assignchairman_rqst_)));
          set_has_assignchairman_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_GuildChgPrivi_Rqst;
        break;
      }

      // optional .vmsg.CSGuildChgPriviRqst GuildChgPrivi_Rqst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildChgPrivi_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildchgprivi_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_GuildJoinReply_Rqst;
        break;
      }

      // optional .vmsg.CSGuildJoinReplyRqst GuildJoinReply_Rqst = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildJoinReply_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildjoinreply_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GuildInviteReply_Rqst;
        break;
      }

      // optional .vmsg.CSGuildInviteReplyRqst GuildInviteReply_Rqst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildInviteReply_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinvitereply_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DeleteMyGuildReq_Rqst;
        break;
      }

      // optional uint64 DeleteMyGuildReq_Rqst = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeleteMyGuildReq_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deletemyguildreq_rqst_)));
          set_has_deletemyguildreq_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_GuildSearch_Rqst;
        break;
      }

      // optional .vmsg.CSGuildSearchRqst GuildSearch_Rqst = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildSearch_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildsearch_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ActInvite_Rqst;
        break;
      }

      // optional .vmsg.CSGuildActInviteRqst ActInvite_Rqst = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActInvite_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actinvite_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_BunEndNum_Rqst;
        break;
      }

      // optional uint32 BunEndNum_Rqst = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BunEndNum_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bunendnum_rqst_)));
          set_has_bunendnum_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_ThiefEnd_Rqst;
        break;
      }

      // optional .vmsg.CSGuildThiefRqst ThiefEnd_Rqst = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ThiefEnd_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_thiefend_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_BlockEnd_Rqst;
        break;
      }

      // optional .vmsg.CSGuildActBlockEndRqst BlockEnd_Rqst = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BlockEnd_Rqst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockend_rqst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ActTypeStart_Rqst;
        break;
      }

      // optional uint32 ActTypeStart_Rqst = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActTypeStart_Rqst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acttypestart_rqst_)));
          set_has_acttypestart_rqst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .vmsg.CSGuildCreateRqst GuildCreate_Rqst = 1;
  if (has_guildcreate_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildcreate_rqst(), output);
  }

  // optional uint64 GuildJoin_Rqst = 2;
  if (has_guildjoin_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildjoin_rqst(), output);
  }

  // optional uint64 GuildKick_Rqst = 3;
  if (has_guildkick_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildkick_rqst(), output);
  }

  // optional string GuildInvite_Rqst = 4;
  if (has_guildinvite_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildinvite_rqst(), output);
  }

  // optional uint64 QueryOtherGuild_Rqst = 5;
  if (has_queryotherguild_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->queryotherguild_rqst(), output);
  }

  // optional .vmsg.CSGuildChgNoticeRqst ChgGuildNotice_Rqst = 6;
  if (has_chgguildnotice_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->chgguildnotice_rqst(), output);
  }

  // optional uint64 AssignChairMan_Rqst = 7;
  if (has_assignchairman_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->assignchairman_rqst(), output);
  }

  // optional .vmsg.CSGuildChgPriviRqst GuildChgPrivi_Rqst = 8;
  if (has_guildchgprivi_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->guildchgprivi_rqst(), output);
  }

  // optional .vmsg.CSGuildJoinReplyRqst GuildJoinReply_Rqst = 9;
  if (has_guildjoinreply_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->guildjoinreply_rqst(), output);
  }

  // optional .vmsg.CSGuildInviteReplyRqst GuildInviteReply_Rqst = 10;
  if (has_guildinvitereply_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->guildinvitereply_rqst(), output);
  }

  // optional uint64 DeleteMyGuildReq_Rqst = 12;
  if (has_deletemyguildreq_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->deletemyguildreq_rqst(), output);
  }

  // optional .vmsg.CSGuildSearchRqst GuildSearch_Rqst = 13;
  if (has_guildsearch_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->guildsearch_rqst(), output);
  }

  // optional .vmsg.CSGuildActInviteRqst ActInvite_Rqst = 14;
  if (has_actinvite_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->actinvite_rqst(), output);
  }

  // optional uint32 BunEndNum_Rqst = 15;
  if (has_bunendnum_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bunendnum_rqst(), output);
  }

  // optional .vmsg.CSGuildThiefRqst ThiefEnd_Rqst = 16;
  if (has_thiefend_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->thiefend_rqst(), output);
  }

  // optional .vmsg.CSGuildActBlockEndRqst BlockEnd_Rqst = 17;
  if (has_blockend_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->blockend_rqst(), output);
  }

  // optional uint32 ActTypeStart_Rqst = 18;
  if (has_acttypestart_rqst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->acttypestart_rqst(), output);
  }

}

int CSGuildRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .vmsg.CSGuildCreateRqst GuildCreate_Rqst = 1;
    if (has_guildcreate_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildcreate_rqst());
    }

    // optional uint64 GuildJoin_Rqst = 2;
    if (has_guildjoin_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildjoin_rqst());
    }

    // optional uint64 GuildKick_Rqst = 3;
    if (has_guildkick_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildkick_rqst());
    }

    // optional string GuildInvite_Rqst = 4;
    if (has_guildinvite_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildinvite_rqst());
    }

    // optional uint64 QueryOtherGuild_Rqst = 5;
    if (has_queryotherguild_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->queryotherguild_rqst());
    }

    // optional .vmsg.CSGuildChgNoticeRqst ChgGuildNotice_Rqst = 6;
    if (has_chgguildnotice_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chgguildnotice_rqst());
    }

    // optional uint64 AssignChairMan_Rqst = 7;
    if (has_assignchairman_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assignchairman_rqst());
    }

    // optional .vmsg.CSGuildChgPriviRqst GuildChgPrivi_Rqst = 8;
    if (has_guildchgprivi_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildchgprivi_rqst());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSGuildJoinReplyRqst GuildJoinReply_Rqst = 9;
    if (has_guildjoinreply_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildjoinreply_rqst());
    }

    // optional .vmsg.CSGuildInviteReplyRqst GuildInviteReply_Rqst = 10;
    if (has_guildinvitereply_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinvitereply_rqst());
    }

    // optional uint64 DeleteMyGuildReq_Rqst = 12;
    if (has_deletemyguildreq_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deletemyguildreq_rqst());
    }

    // optional .vmsg.CSGuildSearchRqst GuildSearch_Rqst = 13;
    if (has_guildsearch_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildsearch_rqst());
    }

    // optional .vmsg.CSGuildActInviteRqst ActInvite_Rqst = 14;
    if (has_actinvite_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actinvite_rqst());
    }

    // optional uint32 BunEndNum_Rqst = 15;
    if (has_bunendnum_rqst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bunendnum_rqst());
    }

    // optional .vmsg.CSGuildThiefRqst ThiefEnd_Rqst = 16;
    if (has_thiefend_rqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thiefend_rqst());
    }

    // optional .vmsg.CSGuildActBlockEndRqst BlockEnd_Rqst = 17;
    if (has_blockend_rqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockend_rqst());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 ActTypeStart_Rqst = 18;
    if (has_acttypestart_rqst()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acttypestart_rqst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildRequest*>(&from));
}

void CSGuildRequest::MergeFrom(const CSGuildRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildcreate_rqst()) {
      mutable_guildcreate_rqst()->::vmsg::CSGuildCreateRqst::MergeFrom(from.guildcreate_rqst());
    }
    if (from.has_guildjoin_rqst()) {
      set_guildjoin_rqst(from.guildjoin_rqst());
    }
    if (from.has_guildkick_rqst()) {
      set_guildkick_rqst(from.guildkick_rqst());
    }
    if (from.has_guildinvite_rqst()) {
      set_guildinvite_rqst(from.guildinvite_rqst());
    }
    if (from.has_queryotherguild_rqst()) {
      set_queryotherguild_rqst(from.queryotherguild_rqst());
    }
    if (from.has_chgguildnotice_rqst()) {
      mutable_chgguildnotice_rqst()->::vmsg::CSGuildChgNoticeRqst::MergeFrom(from.chgguildnotice_rqst());
    }
    if (from.has_assignchairman_rqst()) {
      set_assignchairman_rqst(from.assignchairman_rqst());
    }
    if (from.has_guildchgprivi_rqst()) {
      mutable_guildchgprivi_rqst()->::vmsg::CSGuildChgPriviRqst::MergeFrom(from.guildchgprivi_rqst());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildjoinreply_rqst()) {
      mutable_guildjoinreply_rqst()->::vmsg::CSGuildJoinReplyRqst::MergeFrom(from.guildjoinreply_rqst());
    }
    if (from.has_guildinvitereply_rqst()) {
      mutable_guildinvitereply_rqst()->::vmsg::CSGuildInviteReplyRqst::MergeFrom(from.guildinvitereply_rqst());
    }
    if (from.has_deletemyguildreq_rqst()) {
      set_deletemyguildreq_rqst(from.deletemyguildreq_rqst());
    }
    if (from.has_guildsearch_rqst()) {
      mutable_guildsearch_rqst()->::vmsg::CSGuildSearchRqst::MergeFrom(from.guildsearch_rqst());
    }
    if (from.has_actinvite_rqst()) {
      mutable_actinvite_rqst()->::vmsg::CSGuildActInviteRqst::MergeFrom(from.actinvite_rqst());
    }
    if (from.has_bunendnum_rqst()) {
      set_bunendnum_rqst(from.bunendnum_rqst());
    }
    if (from.has_thiefend_rqst()) {
      mutable_thiefend_rqst()->::vmsg::CSGuildThiefRqst::MergeFrom(from.thiefend_rqst());
    }
    if (from.has_blockend_rqst()) {
      mutable_blockend_rqst()->::vmsg::CSGuildActBlockEndRqst::MergeFrom(from.blockend_rqst());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_acttypestart_rqst()) {
      set_acttypestart_rqst(from.acttypestart_rqst());
    }
  }
}

void CSGuildRequest::CopyFrom(const CSGuildRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildRequest::IsInitialized() const {

  if (has_guildcreate_rqst()) {
    if (!this->guildcreate_rqst().IsInitialized()) return false;
  }
  if (has_chgguildnotice_rqst()) {
    if (!this->chgguildnotice_rqst().IsInitialized()) return false;
  }
  if (has_guildchgprivi_rqst()) {
    if (!this->guildchgprivi_rqst().IsInitialized()) return false;
  }
  if (has_guildjoinreply_rqst()) {
    if (!this->guildjoinreply_rqst().IsInitialized()) return false;
  }
  if (has_guildinvitereply_rqst()) {
    if (!this->guildinvitereply_rqst().IsInitialized()) return false;
  }
  if (has_guildsearch_rqst()) {
    if (!this->guildsearch_rqst().IsInitialized()) return false;
  }
  if (has_actinvite_rqst()) {
    if (!this->actinvite_rqst().IsInitialized()) return false;
  }
  if (has_thiefend_rqst()) {
    if (!this->thiefend_rqst().IsInitialized()) return false;
  }
  if (has_blockend_rqst()) {
    if (!this->blockend_rqst().IsInitialized()) return false;
  }
  return true;
}

void CSGuildRequest::Swap(CSGuildRequest* other) {
  if (other != this) {
    std::swap(guildcreate_rqst_, other->guildcreate_rqst_);
    std::swap(guildjoin_rqst_, other->guildjoin_rqst_);
    std::swap(guildkick_rqst_, other->guildkick_rqst_);
    std::swap(guildinvite_rqst_, other->guildinvite_rqst_);
    std::swap(queryotherguild_rqst_, other->queryotherguild_rqst_);
    std::swap(chgguildnotice_rqst_, other->chgguildnotice_rqst_);
    std::swap(assignchairman_rqst_, other->assignchairman_rqst_);
    std::swap(guildchgprivi_rqst_, other->guildchgprivi_rqst_);
    std::swap(guildjoinreply_rqst_, other->guildjoinreply_rqst_);
    std::swap(guildinvitereply_rqst_, other->guildinvitereply_rqst_);
    std::swap(deletemyguildreq_rqst_, other->deletemyguildreq_rqst_);
    std::swap(guildsearch_rqst_, other->guildsearch_rqst_);
    std::swap(actinvite_rqst_, other->actinvite_rqst_);
    std::swap(bunendnum_rqst_, other->bunendnum_rqst_);
    std::swap(thiefend_rqst_, other->thiefend_rqst_);
    std::swap(blockend_rqst_, other->blockend_rqst_);
    std::swap(acttypestart_rqst_, other->acttypestart_rqst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildRequest::GetTypeName() const {
  return "vmsg.CSGuildRequest";
}


// ===================================================================

#ifndef _MSC_VER
const int CSGuildRespond::kGuildJoinRspFieldNumber;
const int CSGuildRespond::kGuildKickRspFieldNumber;
const int CSGuildRespond::kGuildInfoRspFieldNumber;
const int CSGuildRespond::kMyGuildReqRspFieldNumber;
const int CSGuildRespond::kOtherGuildRspFieldNumber;
const int CSGuildRespond::kAssignChairManRspFieldNumber;
const int CSGuildRespond::kQueryGuildLstRspFieldNumber;
const int CSGuildRespond::kGuildCreateRspFieldNumber;
const int CSGuildRespond::kAllGuildReqRspFieldNumber;
const int CSGuildRespond::kGuildReplyJoinRspFieldNumber;
const int CSGuildRespond::kDeleteMyGuildReqRspFieldNumber;
const int CSGuildRespond::kGuildChgPriviRspFieldNumber;
const int CSGuildRespond::kGuildSearchRspFieldNumber;
const int CSGuildRespond::kImpeachRspFieldNumber;
const int CSGuildRespond::kGuildDailyActRspFieldNumber;
const int CSGuildRespond::kGuildInviteMemberRspFieldNumber;
const int CSGuildRespond::kGuildBunEndRspFieldNumber;
const int CSGuildRespond::kGuildStatNotifyRspFieldNumber;
#endif  // !_MSC_VER

CSGuildRespond::CSGuildRespond()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSGuildRespond::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildinfo_rsp_ = const_cast< ::vmsg::CSGuildInfoRsp*>(
      ::vmsg::CSGuildInfoRsp::internal_default_instance());
#else
  guildinfo_rsp_ = const_cast< ::vmsg::CSGuildInfoRsp*>(&::vmsg::CSGuildInfoRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  myguildreq_rsp_ = const_cast< ::vmsg::CSMyGuildReqRsp*>(
      ::vmsg::CSMyGuildReqRsp::internal_default_instance());
#else
  myguildreq_rsp_ = const_cast< ::vmsg::CSMyGuildReqRsp*>(&::vmsg::CSMyGuildReqRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  otherguild_rsp_ = const_cast< ::vmsg::CSOtherGuildRsp*>(
      ::vmsg::CSOtherGuildRsp::internal_default_instance());
#else
  otherguild_rsp_ = const_cast< ::vmsg::CSOtherGuildRsp*>(&::vmsg::CSOtherGuildRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  queryguildlst_rsp_ = const_cast< ::vmsg::CSQueryGuildLstRsp*>(
      ::vmsg::CSQueryGuildLstRsp::internal_default_instance());
#else
  queryguildlst_rsp_ = const_cast< ::vmsg::CSQueryGuildLstRsp*>(&::vmsg::CSQueryGuildLstRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildcreate_rsp_ = const_cast< ::vmsg::CSGuildInfoRsp*>(
      ::vmsg::CSGuildInfoRsp::internal_default_instance());
#else
  guildcreate_rsp_ = const_cast< ::vmsg::CSGuildInfoRsp*>(&::vmsg::CSGuildInfoRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  allguildreq_rsp_ = const_cast< ::vmsg::CSAllGuildReqRsp*>(
      ::vmsg::CSAllGuildReqRsp::internal_default_instance());
#else
  allguildreq_rsp_ = const_cast< ::vmsg::CSAllGuildReqRsp*>(&::vmsg::CSAllGuildReqRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildreplyjoin_rsp_ = const_cast< ::vmsg::CSGuildJoinReplyRsp*>(
      ::vmsg::CSGuildJoinReplyRsp::internal_default_instance());
#else
  guildreplyjoin_rsp_ = const_cast< ::vmsg::CSGuildJoinReplyRsp*>(&::vmsg::CSGuildJoinReplyRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildchgprivi_rsp_ = const_cast< ::vmsg::CSGuildChgPriviRsp*>(
      ::vmsg::CSGuildChgPriviRsp::internal_default_instance());
#else
  guildchgprivi_rsp_ = const_cast< ::vmsg::CSGuildChgPriviRsp*>(&::vmsg::CSGuildChgPriviRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildsearch_rsp_ = const_cast< ::vmsg::CSGuildSearchRsp*>(
      ::vmsg::CSGuildSearchRsp::internal_default_instance());
#else
  guildsearch_rsp_ = const_cast< ::vmsg::CSGuildSearchRsp*>(&::vmsg::CSGuildSearchRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guilddailyact_rsp_ = const_cast< ::vmsg::CSGuildDailyActRsp*>(
      ::vmsg::CSGuildDailyActRsp::internal_default_instance());
#else
  guilddailyact_rsp_ = const_cast< ::vmsg::CSGuildDailyActRsp*>(&::vmsg::CSGuildDailyActRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildinvitemember_rsp_ = const_cast< ::vmsg::CSGuildInviteMemberRsp*>(
      ::vmsg::CSGuildInviteMemberRsp::internal_default_instance());
#else
  guildinvitemember_rsp_ = const_cast< ::vmsg::CSGuildInviteMemberRsp*>(&::vmsg::CSGuildInviteMemberRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildbunend_rsp_ = const_cast< ::vmsg::CSGuildBunEndRsp*>(
      ::vmsg::CSGuildBunEndRsp::internal_default_instance());
#else
  guildbunend_rsp_ = const_cast< ::vmsg::CSGuildBunEndRsp*>(&::vmsg::CSGuildBunEndRsp::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  guildstatnotify_rsp_ = const_cast< ::vmsg::CSGuildStatNotify*>(
      ::vmsg::CSGuildStatNotify::internal_default_instance());
#else
  guildstatnotify_rsp_ = const_cast< ::vmsg::CSGuildStatNotify*>(&::vmsg::CSGuildStatNotify::default_instance());
#endif
}

CSGuildRespond::CSGuildRespond(const CSGuildRespond& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSGuildRespond::SharedCtor() {
  _cached_size_ = 0;
  guildjoin_rsp_ = GOOGLE_ULONGLONG(0);
  guildkick_rsp_ = GOOGLE_ULONGLONG(0);
  guildinfo_rsp_ = NULL;
  myguildreq_rsp_ = NULL;
  otherguild_rsp_ = NULL;
  assignchairman_rsp_ = GOOGLE_ULONGLONG(0);
  queryguildlst_rsp_ = NULL;
  guildcreate_rsp_ = NULL;
  allguildreq_rsp_ = NULL;
  guildreplyjoin_rsp_ = NULL;
  deletemyguildreq_rsp_ = GOOGLE_ULONGLONG(0);
  guildchgprivi_rsp_ = NULL;
  guildsearch_rsp_ = NULL;
  impeach_rsp_ = 0u;
  guilddailyact_rsp_ = NULL;
  guildinvitemember_rsp_ = NULL;
  guildbunend_rsp_ = NULL;
  guildstatnotify_rsp_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGuildRespond::~CSGuildRespond() {
  SharedDtor();
}

void CSGuildRespond::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete guildinfo_rsp_;
    delete myguildreq_rsp_;
    delete otherguild_rsp_;
    delete queryguildlst_rsp_;
    delete guildcreate_rsp_;
    delete allguildreq_rsp_;
    delete guildreplyjoin_rsp_;
    delete guildchgprivi_rsp_;
    delete guildsearch_rsp_;
    delete guilddailyact_rsp_;
    delete guildinvitemember_rsp_;
    delete guildbunend_rsp_;
    delete guildstatnotify_rsp_;
  }
}

void CSGuildRespond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSGuildRespond& CSGuildRespond::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSGuildMsg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSGuildMsg_2eproto();
#endif
  return *default_instance_;
}

CSGuildRespond* CSGuildRespond::default_instance_ = NULL;

CSGuildRespond* CSGuildRespond::New() const {
  return new CSGuildRespond;
}

void CSGuildRespond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildjoin_rsp_ = GOOGLE_ULONGLONG(0);
    guildkick_rsp_ = GOOGLE_ULONGLONG(0);
    if (has_guildinfo_rsp()) {
      if (guildinfo_rsp_ != NULL) guildinfo_rsp_->::vmsg::CSGuildInfoRsp::Clear();
    }
    if (has_myguildreq_rsp()) {
      if (myguildreq_rsp_ != NULL) myguildreq_rsp_->::vmsg::CSMyGuildReqRsp::Clear();
    }
    if (has_otherguild_rsp()) {
      if (otherguild_rsp_ != NULL) otherguild_rsp_->::vmsg::CSOtherGuildRsp::Clear();
    }
    assignchairman_rsp_ = GOOGLE_ULONGLONG(0);
    if (has_queryguildlst_rsp()) {
      if (queryguildlst_rsp_ != NULL) queryguildlst_rsp_->::vmsg::CSQueryGuildLstRsp::Clear();
    }
    if (has_guildcreate_rsp()) {
      if (guildcreate_rsp_ != NULL) guildcreate_rsp_->::vmsg::CSGuildInfoRsp::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_allguildreq_rsp()) {
      if (allguildreq_rsp_ != NULL) allguildreq_rsp_->::vmsg::CSAllGuildReqRsp::Clear();
    }
    if (has_guildreplyjoin_rsp()) {
      if (guildreplyjoin_rsp_ != NULL) guildreplyjoin_rsp_->::vmsg::CSGuildJoinReplyRsp::Clear();
    }
    deletemyguildreq_rsp_ = GOOGLE_ULONGLONG(0);
    if (has_guildchgprivi_rsp()) {
      if (guildchgprivi_rsp_ != NULL) guildchgprivi_rsp_->::vmsg::CSGuildChgPriviRsp::Clear();
    }
    if (has_guildsearch_rsp()) {
      if (guildsearch_rsp_ != NULL) guildsearch_rsp_->::vmsg::CSGuildSearchRsp::Clear();
    }
    impeach_rsp_ = 0u;
    if (has_guilddailyact_rsp()) {
      if (guilddailyact_rsp_ != NULL) guilddailyact_rsp_->::vmsg::CSGuildDailyActRsp::Clear();
    }
    if (has_guildinvitemember_rsp()) {
      if (guildinvitemember_rsp_ != NULL) guildinvitemember_rsp_->::vmsg::CSGuildInviteMemberRsp::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_guildbunend_rsp()) {
      if (guildbunend_rsp_ != NULL) guildbunend_rsp_->::vmsg::CSGuildBunEndRsp::Clear();
    }
    if (has_guildstatnotify_rsp()) {
      if (guildstatnotify_rsp_ != NULL) guildstatnotify_rsp_->::vmsg::CSGuildStatNotify::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSGuildRespond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildJoin_Rsp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildjoin_rsp_)));
          set_has_guildjoin_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GuildKick_Rsp;
        break;
      }

      // optional uint64 GuildKick_Rsp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GuildKick_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildkick_rsp_)));
          set_has_guildkick_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_GuildInfo_Rsp;
        break;
      }

      // optional .vmsg.CSGuildInfoRsp GuildInfo_Rsp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildInfo_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinfo_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MyGuildReq_Rsp;
        break;
      }

      // optional .vmsg.CSMyGuildReqRsp MyGuildReq_Rsp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MyGuildReq_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myguildreq_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_OtherGuild_Rsp;
        break;
      }

      // optional .vmsg.CSOtherGuildRsp OtherGuild_Rsp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OtherGuild_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otherguild_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AssignChairMan_Rsp;
        break;
      }

      // optional uint64 AssignChairMan_Rsp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AssignChairMan_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &assignchairman_rsp_)));
          set_has_assignchairman_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_QueryGuildLst_Rsp;
        break;
      }

      // optional .vmsg.CSQueryGuildLstRsp QueryGuildLst_Rsp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QueryGuildLst_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_queryguildlst_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_GuildCreate_Rsp;
        break;
      }

      // optional .vmsg.CSGuildInfoRsp GuildCreate_Rsp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildCreate_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildcreate_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_AllGuildReq_Rsp;
        break;
      }

      // optional .vmsg.CSAllGuildReqRsp AllGuildReq_Rsp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AllGuildReq_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allguildreq_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_GuildReplyJoin_Rsp;
        break;
      }

      // optional .vmsg.CSGuildJoinReplyRsp GuildReplyJoin_Rsp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildReplyJoin_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildreplyjoin_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_DeleteMyGuildReq_Rsp;
        break;
      }

      // optional uint64 DeleteMyGuildReq_Rsp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DeleteMyGuildReq_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deletemyguildreq_rsp_)));
          set_has_deletemyguildreq_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_GuildChgPrivi_Rsp;
        break;
      }

      // optional .vmsg.CSGuildChgPriviRsp GuildChgPrivi_Rsp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildChgPrivi_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildchgprivi_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_GuildSearch_Rsp;
        break;
      }

      // optional .vmsg.CSGuildSearchRsp GuildSearch_Rsp = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildSearch_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildsearch_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Impeach_Rsp;
        break;
      }

      // optional uint32 Impeach_Rsp = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Impeach_Rsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &impeach_rsp_)));
          set_has_impeach_rsp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_GuildDailyAct_Rsp;
        break;
      }

      // optional .vmsg.CSGuildDailyActRsp GuildDailyAct_Rsp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildDailyAct_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guilddailyact_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_GuildInviteMember_Rsp;
        break;
      }

      // optional .vmsg.CSGuildInviteMemberRsp GuildInviteMember_Rsp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildInviteMember_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildinvitemember_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_GuildBunEnd_Rsp;
        break;
      }

      // optional .vmsg.CSGuildBunEndRsp GuildBunEnd_Rsp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildBunEnd_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildbunend_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_GuildStatNotify_Rsp;
        break;
      }

      // optional .vmsg.CSGuildStatNotify GuildStatNotify_Rsp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuildStatNotify_Rsp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guildstatnotify_rsp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGuildRespond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 GuildJoin_Rsp = 1;
  if (has_guildjoin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildjoin_rsp(), output);
  }

  // optional uint64 GuildKick_Rsp = 2;
  if (has_guildkick_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildkick_rsp(), output);
  }

  // optional .vmsg.CSGuildInfoRsp GuildInfo_Rsp = 5;
  if (has_guildinfo_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->guildinfo_rsp(), output);
  }

  // optional .vmsg.CSMyGuildReqRsp MyGuildReq_Rsp = 6;
  if (has_myguildreq_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->myguildreq_rsp(), output);
  }

  // optional .vmsg.CSOtherGuildRsp OtherGuild_Rsp = 7;
  if (has_otherguild_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->otherguild_rsp(), output);
  }

  // optional uint64 AssignChairMan_Rsp = 8;
  if (has_assignchairman_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->assignchairman_rsp(), output);
  }

  // optional .vmsg.CSQueryGuildLstRsp QueryGuildLst_Rsp = 9;
  if (has_queryguildlst_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->queryguildlst_rsp(), output);
  }

  // optional .vmsg.CSGuildInfoRsp GuildCreate_Rsp = 10;
  if (has_guildcreate_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->guildcreate_rsp(), output);
  }

  // optional .vmsg.CSAllGuildReqRsp AllGuildReq_Rsp = 11;
  if (has_allguildreq_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->allguildreq_rsp(), output);
  }

  // optional .vmsg.CSGuildJoinReplyRsp GuildReplyJoin_Rsp = 12;
  if (has_guildreplyjoin_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->guildreplyjoin_rsp(), output);
  }

  // optional uint64 DeleteMyGuildReq_Rsp = 13;
  if (has_deletemyguildreq_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->deletemyguildreq_rsp(), output);
  }

  // optional .vmsg.CSGuildChgPriviRsp GuildChgPrivi_Rsp = 14;
  if (has_guildchgprivi_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->guildchgprivi_rsp(), output);
  }

  // optional .vmsg.CSGuildSearchRsp GuildSearch_Rsp = 15;
  if (has_guildsearch_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->guildsearch_rsp(), output);
  }

  // optional uint32 Impeach_Rsp = 16;
  if (has_impeach_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->impeach_rsp(), output);
  }

  // optional .vmsg.CSGuildDailyActRsp GuildDailyAct_Rsp = 17;
  if (has_guilddailyact_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->guilddailyact_rsp(), output);
  }

  // optional .vmsg.CSGuildInviteMemberRsp GuildInviteMember_Rsp = 18;
  if (has_guildinvitemember_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->guildinvitemember_rsp(), output);
  }

  // optional .vmsg.CSGuildBunEndRsp GuildBunEnd_Rsp = 19;
  if (has_guildbunend_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->guildbunend_rsp(), output);
  }

  // optional .vmsg.CSGuildStatNotify GuildStatNotify_Rsp = 20;
  if (has_guildstatnotify_rsp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->guildstatnotify_rsp(), output);
  }

}

int CSGuildRespond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildJoin_Rsp = 1;
    if (has_guildjoin_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildjoin_rsp());
    }

    // optional uint64 GuildKick_Rsp = 2;
    if (has_guildkick_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildkick_rsp());
    }

    // optional .vmsg.CSGuildInfoRsp GuildInfo_Rsp = 5;
    if (has_guildinfo_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinfo_rsp());
    }

    // optional .vmsg.CSMyGuildReqRsp MyGuildReq_Rsp = 6;
    if (has_myguildreq_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myguildreq_rsp());
    }

    // optional .vmsg.CSOtherGuildRsp OtherGuild_Rsp = 7;
    if (has_otherguild_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->otherguild_rsp());
    }

    // optional uint64 AssignChairMan_Rsp = 8;
    if (has_assignchairman_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->assignchairman_rsp());
    }

    // optional .vmsg.CSQueryGuildLstRsp QueryGuildLst_Rsp = 9;
    if (has_queryguildlst_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->queryguildlst_rsp());
    }

    // optional .vmsg.CSGuildInfoRsp GuildCreate_Rsp = 10;
    if (has_guildcreate_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildcreate_rsp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .vmsg.CSAllGuildReqRsp AllGuildReq_Rsp = 11;
    if (has_allguildreq_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allguildreq_rsp());
    }

    // optional .vmsg.CSGuildJoinReplyRsp GuildReplyJoin_Rsp = 12;
    if (has_guildreplyjoin_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildreplyjoin_rsp());
    }

    // optional uint64 DeleteMyGuildReq_Rsp = 13;
    if (has_deletemyguildreq_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deletemyguildreq_rsp());
    }

    // optional .vmsg.CSGuildChgPriviRsp GuildChgPrivi_Rsp = 14;
    if (has_guildchgprivi_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildchgprivi_rsp());
    }

    // optional .vmsg.CSGuildSearchRsp GuildSearch_Rsp = 15;
    if (has_guildsearch_rsp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildsearch_rsp());
    }

    // optional uint32 Impeach_Rsp = 16;
    if (has_impeach_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->impeach_rsp());
    }

    // optional .vmsg.CSGuildDailyActRsp GuildDailyAct_Rsp = 17;
    if (has_guilddailyact_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guilddailyact_rsp());
    }

    // optional .vmsg.CSGuildInviteMemberRsp GuildInviteMember_Rsp = 18;
    if (has_guildinvitemember_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildinvitemember_rsp());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .vmsg.CSGuildBunEndRsp GuildBunEnd_Rsp = 19;
    if (has_guildbunend_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildbunend_rsp());
    }

    // optional .vmsg.CSGuildStatNotify GuildStatNotify_Rsp = 20;
    if (has_guildstatnotify_rsp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guildstatnotify_rsp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGuildRespond::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSGuildRespond*>(&from));
}

void CSGuildRespond::MergeFrom(const CSGuildRespond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildjoin_rsp()) {
      set_guildjoin_rsp(from.guildjoin_rsp());
    }
    if (from.has_guildkick_rsp()) {
      set_guildkick_rsp(from.guildkick_rsp());
    }
    if (from.has_guildinfo_rsp()) {
      mutable_guildinfo_rsp()->::vmsg::CSGuildInfoRsp::MergeFrom(from.guildinfo_rsp());
    }
    if (from.has_myguildreq_rsp()) {
      mutable_myguildreq_rsp()->::vmsg::CSMyGuildReqRsp::MergeFrom(from.myguildreq_rsp());
    }
    if (from.has_otherguild_rsp()) {
      mutable_otherguild_rsp()->::vmsg::CSOtherGuildRsp::MergeFrom(from.otherguild_rsp());
    }
    if (from.has_assignchairman_rsp()) {
      set_assignchairman_rsp(from.assignchairman_rsp());
    }
    if (from.has_queryguildlst_rsp()) {
      mutable_queryguildlst_rsp()->::vmsg::CSQueryGuildLstRsp::MergeFrom(from.queryguildlst_rsp());
    }
    if (from.has_guildcreate_rsp()) {
      mutable_guildcreate_rsp()->::vmsg::CSGuildInfoRsp::MergeFrom(from.guildcreate_rsp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_allguildreq_rsp()) {
      mutable_allguildreq_rsp()->::vmsg::CSAllGuildReqRsp::MergeFrom(from.allguildreq_rsp());
    }
    if (from.has_guildreplyjoin_rsp()) {
      mutable_guildreplyjoin_rsp()->::vmsg::CSGuildJoinReplyRsp::MergeFrom(from.guildreplyjoin_rsp());
    }
    if (from.has_deletemyguildreq_rsp()) {
      set_deletemyguildreq_rsp(from.deletemyguildreq_rsp());
    }
    if (from.has_guildchgprivi_rsp()) {
      mutable_guildchgprivi_rsp()->::vmsg::CSGuildChgPriviRsp::MergeFrom(from.guildchgprivi_rsp());
    }
    if (from.has_guildsearch_rsp()) {
      mutable_guildsearch_rsp()->::vmsg::CSGuildSearchRsp::MergeFrom(from.guildsearch_rsp());
    }
    if (from.has_impeach_rsp()) {
      set_impeach_rsp(from.impeach_rsp());
    }
    if (from.has_guilddailyact_rsp()) {
      mutable_guilddailyact_rsp()->::vmsg::CSGuildDailyActRsp::MergeFrom(from.guilddailyact_rsp());
    }
    if (from.has_guildinvitemember_rsp()) {
      mutable_guildinvitemember_rsp()->::vmsg::CSGuildInviteMemberRsp::MergeFrom(from.guildinvitemember_rsp());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_guildbunend_rsp()) {
      mutable_guildbunend_rsp()->::vmsg::CSGuildBunEndRsp::MergeFrom(from.guildbunend_rsp());
    }
    if (from.has_guildstatnotify_rsp()) {
      mutable_guildstatnotify_rsp()->::vmsg::CSGuildStatNotify::MergeFrom(from.guildstatnotify_rsp());
    }
  }
}

void CSGuildRespond::CopyFrom(const CSGuildRespond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGuildRespond::IsInitialized() const {

  if (has_guildinfo_rsp()) {
    if (!this->guildinfo_rsp().IsInitialized()) return false;
  }
  if (has_otherguild_rsp()) {
    if (!this->otherguild_rsp().IsInitialized()) return false;
  }
  if (has_queryguildlst_rsp()) {
    if (!this->queryguildlst_rsp().IsInitialized()) return false;
  }
  if (has_guildcreate_rsp()) {
    if (!this->guildcreate_rsp().IsInitialized()) return false;
  }
  if (has_allguildreq_rsp()) {
    if (!this->allguildreq_rsp().IsInitialized()) return false;
  }
  if (has_guildreplyjoin_rsp()) {
    if (!this->guildreplyjoin_rsp().IsInitialized()) return false;
  }
  if (has_guildchgprivi_rsp()) {
    if (!this->guildchgprivi_rsp().IsInitialized()) return false;
  }
  if (has_guildsearch_rsp()) {
    if (!this->guildsearch_rsp().IsInitialized()) return false;
  }
  if (has_guilddailyact_rsp()) {
    if (!this->guilddailyact_rsp().IsInitialized()) return false;
  }
  if (has_guildinvitemember_rsp()) {
    if (!this->guildinvitemember_rsp().IsInitialized()) return false;
  }
  if (has_guildbunend_rsp()) {
    if (!this->guildbunend_rsp().IsInitialized()) return false;
  }
  if (has_guildstatnotify_rsp()) {
    if (!this->guildstatnotify_rsp().IsInitialized()) return false;
  }
  return true;
}

void CSGuildRespond::Swap(CSGuildRespond* other) {
  if (other != this) {
    std::swap(guildjoin_rsp_, other->guildjoin_rsp_);
    std::swap(guildkick_rsp_, other->guildkick_rsp_);
    std::swap(guildinfo_rsp_, other->guildinfo_rsp_);
    std::swap(myguildreq_rsp_, other->myguildreq_rsp_);
    std::swap(otherguild_rsp_, other->otherguild_rsp_);
    std::swap(assignchairman_rsp_, other->assignchairman_rsp_);
    std::swap(queryguildlst_rsp_, other->queryguildlst_rsp_);
    std::swap(guildcreate_rsp_, other->guildcreate_rsp_);
    std::swap(allguildreq_rsp_, other->allguildreq_rsp_);
    std::swap(guildreplyjoin_rsp_, other->guildreplyjoin_rsp_);
    std::swap(deletemyguildreq_rsp_, other->deletemyguildreq_rsp_);
    std::swap(guildchgprivi_rsp_, other->guildchgprivi_rsp_);
    std::swap(guildsearch_rsp_, other->guildsearch_rsp_);
    std::swap(impeach_rsp_, other->impeach_rsp_);
    std::swap(guilddailyact_rsp_, other->guilddailyact_rsp_);
    std::swap(guildinvitemember_rsp_, other->guildinvitemember_rsp_);
    std::swap(guildbunend_rsp_, other->guildbunend_rsp_);
    std::swap(guildstatnotify_rsp_, other->guildstatnotify_rsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSGuildRespond::GetTypeName() const {
  return "vmsg.CSGuildRespond";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vmsg

// @@protoc_insertion_point(global_scope)
