// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyTaskCfg.proto

#ifndef PROTOBUF_DailyTaskCfg_2eproto__INCLUDED
#define PROTOBUF_DailyTaskCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DailyTaskCfg_2eproto();
void protobuf_AssignDesc_DailyTaskCfg_2eproto();
void protobuf_ShutdownFile_DailyTaskCfg_2eproto();

class DailyTarget;
class DailyAward;
class DailyTaskCfg;
class DailyTaskCfgSet;

// ===================================================================

class DailyTarget : public ::google::protobuf::MessageLite {
 public:
  DailyTarget();
  virtual ~DailyTarget();

  DailyTarget(const DailyTarget& from);

  inline DailyTarget& operator=(const DailyTarget& from) {
    CopyFrom(from);
    return *this;
  }

  static const DailyTarget& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DailyTarget* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DailyTarget* other);

  // implements Message ----------------------------------------------

  DailyTarget* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DailyTarget& from);
  void MergeFrom(const DailyTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 TargetType = 1;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 targettype() const;
  inline void set_targettype(::google::protobuf::uint32 value);

  // required uint32 R1 = 2;
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 2;
  inline ::google::protobuf::uint32 r1() const;
  inline void set_r1(::google::protobuf::uint32 value);

  // required uint32 R2 = 3;
  inline bool has_r2() const;
  inline void clear_r2();
  static const int kR2FieldNumber = 3;
  inline ::google::protobuf::uint32 r2() const;
  inline void set_r2(::google::protobuf::uint32 value);

  // required uint32 R3 = 4;
  inline bool has_r3() const;
  inline void clear_r3();
  static const int kR3FieldNumber = 4;
  inline ::google::protobuf::uint32 r3() const;
  inline void set_r3(::google::protobuf::uint32 value);

  // required uint32 R4 = 5;
  inline bool has_r4() const;
  inline void clear_r4();
  static const int kR4FieldNumber = 5;
  inline ::google::protobuf::uint32 r4() const;
  inline void set_r4(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DailyTarget)
 private:
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_r1();
  inline void clear_has_r1();
  inline void set_has_r2();
  inline void clear_has_r2();
  inline void set_has_r3();
  inline void clear_has_r3();
  inline void set_has_r4();
  inline void clear_has_r4();

  ::google::protobuf::uint32 targettype_;
  ::google::protobuf::uint32 r1_;
  ::google::protobuf::uint32 r2_;
  ::google::protobuf::uint32 r3_;
  ::google::protobuf::uint32 r4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DailyTaskCfg_2eproto();
  friend void protobuf_ShutdownFile_DailyTaskCfg_2eproto();

  void InitAsDefaultInstance();
  static DailyTarget* default_instance_;
};
// -------------------------------------------------------------------

class DailyAward : public ::google::protobuf::MessageLite {
 public:
  DailyAward();
  virtual ~DailyAward();

  DailyAward(const DailyAward& from);

  inline DailyAward& operator=(const DailyAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const DailyAward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DailyAward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DailyAward* other);

  // implements Message ----------------------------------------------

  DailyAward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DailyAward& from);
  void MergeFrom(const DailyAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Coin = 1;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 1;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // required uint32 Exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 Gold = 3;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 3;
  inline ::google::protobuf::uint32 gold() const;
  inline void set_gold(::google::protobuf::uint32 value);

  // required uint32 AwardType = 4;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 awardtype() const;
  inline void set_awardtype(::google::protobuf::uint32 value);

  // required uint32 AwardCfgID = 5;
  inline bool has_awardcfgid() const;
  inline void clear_awardcfgid();
  static const int kAwardCfgIDFieldNumber = 5;
  inline ::google::protobuf::uint32 awardcfgid() const;
  inline void set_awardcfgid(::google::protobuf::uint32 value);

  // required uint32 AwardCnt = 6;
  inline bool has_awardcnt() const;
  inline void clear_awardcnt();
  static const int kAwardCntFieldNumber = 6;
  inline ::google::protobuf::uint32 awardcnt() const;
  inline void set_awardcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DailyAward)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_awardcfgid();
  inline void clear_has_awardcfgid();
  inline void set_has_awardcnt();
  inline void clear_has_awardcnt();

  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 gold_;
  ::google::protobuf::uint32 awardtype_;
  ::google::protobuf::uint32 awardcfgid_;
  ::google::protobuf::uint32 awardcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DailyTaskCfg_2eproto();
  friend void protobuf_ShutdownFile_DailyTaskCfg_2eproto();

  void InitAsDefaultInstance();
  static DailyAward* default_instance_;
};
// -------------------------------------------------------------------

class DailyTaskCfg : public ::google::protobuf::MessageLite {
 public:
  DailyTaskCfg();
  virtual ~DailyTaskCfg();

  DailyTaskCfg(const DailyTaskCfg& from);

  inline DailyTaskCfg& operator=(const DailyTaskCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const DailyTaskCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DailyTaskCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DailyTaskCfg* other);

  // implements Message ----------------------------------------------

  DailyTaskCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DailyTaskCfg& from);
  void MergeFrom(const DailyTaskCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 SysType = 2;
  inline bool has_systype() const;
  inline void clear_systype();
  static const int kSysTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 systype() const;
  inline void set_systype(::google::protobuf::uint32 value);

  // required string DailyTaskIcon = 3;
  inline bool has_dailytaskicon() const;
  inline void clear_dailytaskicon();
  static const int kDailyTaskIconFieldNumber = 3;
  inline const ::std::string& dailytaskicon() const;
  inline void set_dailytaskicon(const ::std::string& value);
  inline void set_dailytaskicon(const char* value);
  inline void set_dailytaskicon(const char* value, size_t size);
  inline ::std::string* mutable_dailytaskicon();
  inline ::std::string* release_dailytaskicon();
  inline void set_allocated_dailytaskicon(::std::string* dailytaskicon);

  // required string DailyTaskName = 4;
  inline bool has_dailytaskname() const;
  inline void clear_dailytaskname();
  static const int kDailyTaskNameFieldNumber = 4;
  inline const ::std::string& dailytaskname() const;
  inline void set_dailytaskname(const ::std::string& value);
  inline void set_dailytaskname(const char* value);
  inline void set_dailytaskname(const char* value, size_t size);
  inline ::std::string* mutable_dailytaskname();
  inline ::std::string* release_dailytaskname();
  inline void set_allocated_dailytaskname(::std::string* dailytaskname);

  // required string DailyTaskDesc = 5;
  inline bool has_dailytaskdesc() const;
  inline void clear_dailytaskdesc();
  static const int kDailyTaskDescFieldNumber = 5;
  inline const ::std::string& dailytaskdesc() const;
  inline void set_dailytaskdesc(const ::std::string& value);
  inline void set_dailytaskdesc(const char* value);
  inline void set_dailytaskdesc(const char* value, size_t size);
  inline ::std::string* mutable_dailytaskdesc();
  inline ::std::string* release_dailytaskdesc();
  inline void set_allocated_dailytaskdesc(::std::string* dailytaskdesc);

  // required string DailyTaskIntro = 6;
  inline bool has_dailytaskintro() const;
  inline void clear_dailytaskintro();
  static const int kDailyTaskIntroFieldNumber = 6;
  inline const ::std::string& dailytaskintro() const;
  inline void set_dailytaskintro(const ::std::string& value);
  inline void set_dailytaskintro(const char* value);
  inline void set_dailytaskintro(const char* value, size_t size);
  inline ::std::string* mutable_dailytaskintro();
  inline ::std::string* release_dailytaskintro();
  inline void set_allocated_dailytaskintro(::std::string* dailytaskintro);

  // required uint32 DailyLeadID = 7;
  inline bool has_dailyleadid() const;
  inline void clear_dailyleadid();
  static const int kDailyLeadIDFieldNumber = 7;
  inline ::google::protobuf::uint32 dailyleadid() const;
  inline void set_dailyleadid(::google::protobuf::uint32 value);

  // required .com.cfg.vo.DailyTarget Target = 8;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 8;
  inline const ::com::cfg::vo::DailyTarget& target() const;
  inline ::com::cfg::vo::DailyTarget* mutable_target();
  inline ::com::cfg::vo::DailyTarget* release_target();
  inline void set_allocated_target(::com::cfg::vo::DailyTarget* target);

  // required uint32 MainAwardType = 9;
  inline bool has_mainawardtype() const;
  inline void clear_mainawardtype();
  static const int kMainAwardTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 mainawardtype() const;
  inline void set_mainawardtype(::google::protobuf::uint32 value);

  // required .com.cfg.vo.DailyAward Award = 10;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 10;
  inline const ::com::cfg::vo::DailyAward& award() const;
  inline ::com::cfg::vo::DailyAward* mutable_award();
  inline ::com::cfg::vo::DailyAward* release_award();
  inline void set_allocated_award(::com::cfg::vo::DailyAward* award);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DailyTaskCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_systype();
  inline void clear_has_systype();
  inline void set_has_dailytaskicon();
  inline void clear_has_dailytaskicon();
  inline void set_has_dailytaskname();
  inline void clear_has_dailytaskname();
  inline void set_has_dailytaskdesc();
  inline void clear_has_dailytaskdesc();
  inline void set_has_dailytaskintro();
  inline void clear_has_dailytaskintro();
  inline void set_has_dailyleadid();
  inline void clear_has_dailyleadid();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_mainawardtype();
  inline void clear_has_mainawardtype();
  inline void set_has_award();
  inline void clear_has_award();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 systype_;
  ::std::string* dailytaskicon_;
  ::std::string* dailytaskname_;
  ::std::string* dailytaskdesc_;
  ::std::string* dailytaskintro_;
  ::com::cfg::vo::DailyTarget* target_;
  ::google::protobuf::uint32 dailyleadid_;
  ::google::protobuf::uint32 mainawardtype_;
  ::com::cfg::vo::DailyAward* award_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DailyTaskCfg_2eproto();
  friend void protobuf_ShutdownFile_DailyTaskCfg_2eproto();

  void InitAsDefaultInstance();
  static DailyTaskCfg* default_instance_;
};
// -------------------------------------------------------------------

class DailyTaskCfgSet : public ::google::protobuf::MessageLite {
 public:
  DailyTaskCfgSet();
  virtual ~DailyTaskCfgSet();

  DailyTaskCfgSet(const DailyTaskCfgSet& from);

  inline DailyTaskCfgSet& operator=(const DailyTaskCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const DailyTaskCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DailyTaskCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DailyTaskCfgSet* other);

  // implements Message ----------------------------------------------

  DailyTaskCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DailyTaskCfgSet& from);
  void MergeFrom(const DailyTaskCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.DailyTaskCfg dailytaskcfg = 1;
  inline int dailytaskcfg_size() const;
  inline void clear_dailytaskcfg();
  static const int kDailytaskcfgFieldNumber = 1;
  inline const ::com::cfg::vo::DailyTaskCfg& dailytaskcfg(int index) const;
  inline ::com::cfg::vo::DailyTaskCfg* mutable_dailytaskcfg(int index);
  inline ::com::cfg::vo::DailyTaskCfg* add_dailytaskcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DailyTaskCfg >&
      dailytaskcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DailyTaskCfg >*
      mutable_dailytaskcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DailyTaskCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DailyTaskCfg > dailytaskcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DailyTaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DailyTaskCfg_2eproto();
  friend void protobuf_ShutdownFile_DailyTaskCfg_2eproto();

  void InitAsDefaultInstance();
  static DailyTaskCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// DailyTarget

// required uint32 TargetType = 1;
inline bool DailyTarget::has_targettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyTarget::set_has_targettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyTarget::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyTarget::clear_targettype() {
  targettype_ = 0u;
  clear_has_targettype();
}
inline ::google::protobuf::uint32 DailyTarget::targettype() const {
  return targettype_;
}
inline void DailyTarget::set_targettype(::google::protobuf::uint32 value) {
  set_has_targettype();
  targettype_ = value;
}

// required uint32 R1 = 2;
inline bool DailyTarget::has_r1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyTarget::set_has_r1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyTarget::clear_has_r1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyTarget::clear_r1() {
  r1_ = 0u;
  clear_has_r1();
}
inline ::google::protobuf::uint32 DailyTarget::r1() const {
  return r1_;
}
inline void DailyTarget::set_r1(::google::protobuf::uint32 value) {
  set_has_r1();
  r1_ = value;
}

// required uint32 R2 = 3;
inline bool DailyTarget::has_r2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyTarget::set_has_r2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyTarget::clear_has_r2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyTarget::clear_r2() {
  r2_ = 0u;
  clear_has_r2();
}
inline ::google::protobuf::uint32 DailyTarget::r2() const {
  return r2_;
}
inline void DailyTarget::set_r2(::google::protobuf::uint32 value) {
  set_has_r2();
  r2_ = value;
}

// required uint32 R3 = 4;
inline bool DailyTarget::has_r3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyTarget::set_has_r3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyTarget::clear_has_r3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyTarget::clear_r3() {
  r3_ = 0u;
  clear_has_r3();
}
inline ::google::protobuf::uint32 DailyTarget::r3() const {
  return r3_;
}
inline void DailyTarget::set_r3(::google::protobuf::uint32 value) {
  set_has_r3();
  r3_ = value;
}

// required uint32 R4 = 5;
inline bool DailyTarget::has_r4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyTarget::set_has_r4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyTarget::clear_has_r4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyTarget::clear_r4() {
  r4_ = 0u;
  clear_has_r4();
}
inline ::google::protobuf::uint32 DailyTarget::r4() const {
  return r4_;
}
inline void DailyTarget::set_r4(::google::protobuf::uint32 value) {
  set_has_r4();
  r4_ = value;
}

// -------------------------------------------------------------------

// DailyAward

// required uint32 Coin = 1;
inline bool DailyAward::has_coin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyAward::set_has_coin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyAward::clear_has_coin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyAward::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 DailyAward::coin() const {
  return coin_;
}
inline void DailyAward::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// required uint32 Exp = 2;
inline bool DailyAward::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyAward::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyAward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyAward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 DailyAward::exp() const {
  return exp_;
}
inline void DailyAward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 Gold = 3;
inline bool DailyAward::has_gold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyAward::set_has_gold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyAward::clear_has_gold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyAward::clear_gold() {
  gold_ = 0u;
  clear_has_gold();
}
inline ::google::protobuf::uint32 DailyAward::gold() const {
  return gold_;
}
inline void DailyAward::set_gold(::google::protobuf::uint32 value) {
  set_has_gold();
  gold_ = value;
}

// required uint32 AwardType = 4;
inline bool DailyAward::has_awardtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyAward::set_has_awardtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyAward::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyAward::clear_awardtype() {
  awardtype_ = 0u;
  clear_has_awardtype();
}
inline ::google::protobuf::uint32 DailyAward::awardtype() const {
  return awardtype_;
}
inline void DailyAward::set_awardtype(::google::protobuf::uint32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// required uint32 AwardCfgID = 5;
inline bool DailyAward::has_awardcfgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyAward::set_has_awardcfgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyAward::clear_has_awardcfgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyAward::clear_awardcfgid() {
  awardcfgid_ = 0u;
  clear_has_awardcfgid();
}
inline ::google::protobuf::uint32 DailyAward::awardcfgid() const {
  return awardcfgid_;
}
inline void DailyAward::set_awardcfgid(::google::protobuf::uint32 value) {
  set_has_awardcfgid();
  awardcfgid_ = value;
}

// required uint32 AwardCnt = 6;
inline bool DailyAward::has_awardcnt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DailyAward::set_has_awardcnt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DailyAward::clear_has_awardcnt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DailyAward::clear_awardcnt() {
  awardcnt_ = 0u;
  clear_has_awardcnt();
}
inline ::google::protobuf::uint32 DailyAward::awardcnt() const {
  return awardcnt_;
}
inline void DailyAward::set_awardcnt(::google::protobuf::uint32 value) {
  set_has_awardcnt();
  awardcnt_ = value;
}

// -------------------------------------------------------------------

// DailyTaskCfg

// required uint32 ID = 1;
inline bool DailyTaskCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DailyTaskCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DailyTaskCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DailyTaskCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 DailyTaskCfg::id() const {
  return id_;
}
inline void DailyTaskCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 SysType = 2;
inline bool DailyTaskCfg::has_systype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DailyTaskCfg::set_has_systype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DailyTaskCfg::clear_has_systype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DailyTaskCfg::clear_systype() {
  systype_ = 0u;
  clear_has_systype();
}
inline ::google::protobuf::uint32 DailyTaskCfg::systype() const {
  return systype_;
}
inline void DailyTaskCfg::set_systype(::google::protobuf::uint32 value) {
  set_has_systype();
  systype_ = value;
}

// required string DailyTaskIcon = 3;
inline bool DailyTaskCfg::has_dailytaskicon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DailyTaskCfg::set_has_dailytaskicon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DailyTaskCfg::clear_has_dailytaskicon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DailyTaskCfg::clear_dailytaskicon() {
  if (dailytaskicon_ != &::google::protobuf::internal::kEmptyString) {
    dailytaskicon_->clear();
  }
  clear_has_dailytaskicon();
}
inline const ::std::string& DailyTaskCfg::dailytaskicon() const {
  return *dailytaskicon_;
}
inline void DailyTaskCfg::set_dailytaskicon(const ::std::string& value) {
  set_has_dailytaskicon();
  if (dailytaskicon_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskicon_ = new ::std::string;
  }
  dailytaskicon_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskicon(const char* value) {
  set_has_dailytaskicon();
  if (dailytaskicon_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskicon_ = new ::std::string;
  }
  dailytaskicon_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskicon(const char* value, size_t size) {
  set_has_dailytaskicon();
  if (dailytaskicon_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskicon_ = new ::std::string;
  }
  dailytaskicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyTaskCfg::mutable_dailytaskicon() {
  set_has_dailytaskicon();
  if (dailytaskicon_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskicon_ = new ::std::string;
  }
  return dailytaskicon_;
}
inline ::std::string* DailyTaskCfg::release_dailytaskicon() {
  clear_has_dailytaskicon();
  if (dailytaskicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dailytaskicon_;
    dailytaskicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyTaskCfg::set_allocated_dailytaskicon(::std::string* dailytaskicon) {
  if (dailytaskicon_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskicon_;
  }
  if (dailytaskicon) {
    set_has_dailytaskicon();
    dailytaskicon_ = dailytaskicon;
  } else {
    clear_has_dailytaskicon();
    dailytaskicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DailyTaskName = 4;
inline bool DailyTaskCfg::has_dailytaskname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DailyTaskCfg::set_has_dailytaskname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DailyTaskCfg::clear_has_dailytaskname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DailyTaskCfg::clear_dailytaskname() {
  if (dailytaskname_ != &::google::protobuf::internal::kEmptyString) {
    dailytaskname_->clear();
  }
  clear_has_dailytaskname();
}
inline const ::std::string& DailyTaskCfg::dailytaskname() const {
  return *dailytaskname_;
}
inline void DailyTaskCfg::set_dailytaskname(const ::std::string& value) {
  set_has_dailytaskname();
  if (dailytaskname_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskname_ = new ::std::string;
  }
  dailytaskname_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskname(const char* value) {
  set_has_dailytaskname();
  if (dailytaskname_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskname_ = new ::std::string;
  }
  dailytaskname_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskname(const char* value, size_t size) {
  set_has_dailytaskname();
  if (dailytaskname_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskname_ = new ::std::string;
  }
  dailytaskname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyTaskCfg::mutable_dailytaskname() {
  set_has_dailytaskname();
  if (dailytaskname_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskname_ = new ::std::string;
  }
  return dailytaskname_;
}
inline ::std::string* DailyTaskCfg::release_dailytaskname() {
  clear_has_dailytaskname();
  if (dailytaskname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dailytaskname_;
    dailytaskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyTaskCfg::set_allocated_dailytaskname(::std::string* dailytaskname) {
  if (dailytaskname_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskname_;
  }
  if (dailytaskname) {
    set_has_dailytaskname();
    dailytaskname_ = dailytaskname;
  } else {
    clear_has_dailytaskname();
    dailytaskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DailyTaskDesc = 5;
inline bool DailyTaskCfg::has_dailytaskdesc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DailyTaskCfg::set_has_dailytaskdesc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DailyTaskCfg::clear_has_dailytaskdesc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DailyTaskCfg::clear_dailytaskdesc() {
  if (dailytaskdesc_ != &::google::protobuf::internal::kEmptyString) {
    dailytaskdesc_->clear();
  }
  clear_has_dailytaskdesc();
}
inline const ::std::string& DailyTaskCfg::dailytaskdesc() const {
  return *dailytaskdesc_;
}
inline void DailyTaskCfg::set_dailytaskdesc(const ::std::string& value) {
  set_has_dailytaskdesc();
  if (dailytaskdesc_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskdesc_ = new ::std::string;
  }
  dailytaskdesc_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskdesc(const char* value) {
  set_has_dailytaskdesc();
  if (dailytaskdesc_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskdesc_ = new ::std::string;
  }
  dailytaskdesc_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskdesc(const char* value, size_t size) {
  set_has_dailytaskdesc();
  if (dailytaskdesc_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskdesc_ = new ::std::string;
  }
  dailytaskdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyTaskCfg::mutable_dailytaskdesc() {
  set_has_dailytaskdesc();
  if (dailytaskdesc_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskdesc_ = new ::std::string;
  }
  return dailytaskdesc_;
}
inline ::std::string* DailyTaskCfg::release_dailytaskdesc() {
  clear_has_dailytaskdesc();
  if (dailytaskdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dailytaskdesc_;
    dailytaskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyTaskCfg::set_allocated_dailytaskdesc(::std::string* dailytaskdesc) {
  if (dailytaskdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskdesc_;
  }
  if (dailytaskdesc) {
    set_has_dailytaskdesc();
    dailytaskdesc_ = dailytaskdesc;
  } else {
    clear_has_dailytaskdesc();
    dailytaskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DailyTaskIntro = 6;
inline bool DailyTaskCfg::has_dailytaskintro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DailyTaskCfg::set_has_dailytaskintro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DailyTaskCfg::clear_has_dailytaskintro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DailyTaskCfg::clear_dailytaskintro() {
  if (dailytaskintro_ != &::google::protobuf::internal::kEmptyString) {
    dailytaskintro_->clear();
  }
  clear_has_dailytaskintro();
}
inline const ::std::string& DailyTaskCfg::dailytaskintro() const {
  return *dailytaskintro_;
}
inline void DailyTaskCfg::set_dailytaskintro(const ::std::string& value) {
  set_has_dailytaskintro();
  if (dailytaskintro_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskintro_ = new ::std::string;
  }
  dailytaskintro_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskintro(const char* value) {
  set_has_dailytaskintro();
  if (dailytaskintro_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskintro_ = new ::std::string;
  }
  dailytaskintro_->assign(value);
}
inline void DailyTaskCfg::set_dailytaskintro(const char* value, size_t size) {
  set_has_dailytaskintro();
  if (dailytaskintro_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskintro_ = new ::std::string;
  }
  dailytaskintro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DailyTaskCfg::mutable_dailytaskintro() {
  set_has_dailytaskintro();
  if (dailytaskintro_ == &::google::protobuf::internal::kEmptyString) {
    dailytaskintro_ = new ::std::string;
  }
  return dailytaskintro_;
}
inline ::std::string* DailyTaskCfg::release_dailytaskintro() {
  clear_has_dailytaskintro();
  if (dailytaskintro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dailytaskintro_;
    dailytaskintro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DailyTaskCfg::set_allocated_dailytaskintro(::std::string* dailytaskintro) {
  if (dailytaskintro_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskintro_;
  }
  if (dailytaskintro) {
    set_has_dailytaskintro();
    dailytaskintro_ = dailytaskintro;
  } else {
    clear_has_dailytaskintro();
    dailytaskintro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 DailyLeadID = 7;
inline bool DailyTaskCfg::has_dailyleadid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DailyTaskCfg::set_has_dailyleadid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DailyTaskCfg::clear_has_dailyleadid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DailyTaskCfg::clear_dailyleadid() {
  dailyleadid_ = 0u;
  clear_has_dailyleadid();
}
inline ::google::protobuf::uint32 DailyTaskCfg::dailyleadid() const {
  return dailyleadid_;
}
inline void DailyTaskCfg::set_dailyleadid(::google::protobuf::uint32 value) {
  set_has_dailyleadid();
  dailyleadid_ = value;
}

// required .com.cfg.vo.DailyTarget Target = 8;
inline bool DailyTaskCfg::has_target() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DailyTaskCfg::set_has_target() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DailyTaskCfg::clear_has_target() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DailyTaskCfg::clear_target() {
  if (target_ != NULL) target_->::com::cfg::vo::DailyTarget::Clear();
  clear_has_target();
}
inline const ::com::cfg::vo::DailyTarget& DailyTaskCfg::target() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return target_ != NULL ? *target_ : *default_instance().target_;
#else
  return target_ != NULL ? *target_ : *default_instance_->target_;
#endif
}
inline ::com::cfg::vo::DailyTarget* DailyTaskCfg::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::com::cfg::vo::DailyTarget;
  return target_;
}
inline ::com::cfg::vo::DailyTarget* DailyTaskCfg::release_target() {
  clear_has_target();
  ::com::cfg::vo::DailyTarget* temp = target_;
  target_ = NULL;
  return temp;
}
inline void DailyTaskCfg::set_allocated_target(::com::cfg::vo::DailyTarget* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
}

// required uint32 MainAwardType = 9;
inline bool DailyTaskCfg::has_mainawardtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DailyTaskCfg::set_has_mainawardtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DailyTaskCfg::clear_has_mainawardtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DailyTaskCfg::clear_mainawardtype() {
  mainawardtype_ = 0u;
  clear_has_mainawardtype();
}
inline ::google::protobuf::uint32 DailyTaskCfg::mainawardtype() const {
  return mainawardtype_;
}
inline void DailyTaskCfg::set_mainawardtype(::google::protobuf::uint32 value) {
  set_has_mainawardtype();
  mainawardtype_ = value;
}

// required .com.cfg.vo.DailyAward Award = 10;
inline bool DailyTaskCfg::has_award() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DailyTaskCfg::set_has_award() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DailyTaskCfg::clear_has_award() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DailyTaskCfg::clear_award() {
  if (award_ != NULL) award_->::com::cfg::vo::DailyAward::Clear();
  clear_has_award();
}
inline const ::com::cfg::vo::DailyAward& DailyTaskCfg::award() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return award_ != NULL ? *award_ : *default_instance().award_;
#else
  return award_ != NULL ? *award_ : *default_instance_->award_;
#endif
}
inline ::com::cfg::vo::DailyAward* DailyTaskCfg::mutable_award() {
  set_has_award();
  if (award_ == NULL) award_ = new ::com::cfg::vo::DailyAward;
  return award_;
}
inline ::com::cfg::vo::DailyAward* DailyTaskCfg::release_award() {
  clear_has_award();
  ::com::cfg::vo::DailyAward* temp = award_;
  award_ = NULL;
  return temp;
}
inline void DailyTaskCfg::set_allocated_award(::com::cfg::vo::DailyAward* award) {
  delete award_;
  award_ = award;
  if (award) {
    set_has_award();
  } else {
    clear_has_award();
  }
}

// -------------------------------------------------------------------

// DailyTaskCfgSet

// repeated .com.cfg.vo.DailyTaskCfg dailytaskcfg = 1;
inline int DailyTaskCfgSet::dailytaskcfg_size() const {
  return dailytaskcfg_.size();
}
inline void DailyTaskCfgSet::clear_dailytaskcfg() {
  dailytaskcfg_.Clear();
}
inline const ::com::cfg::vo::DailyTaskCfg& DailyTaskCfgSet::dailytaskcfg(int index) const {
  return dailytaskcfg_.Get(index);
}
inline ::com::cfg::vo::DailyTaskCfg* DailyTaskCfgSet::mutable_dailytaskcfg(int index) {
  return dailytaskcfg_.Mutable(index);
}
inline ::com::cfg::vo::DailyTaskCfg* DailyTaskCfgSet::add_dailytaskcfg() {
  return dailytaskcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DailyTaskCfg >&
DailyTaskCfgSet::dailytaskcfg() const {
  return dailytaskcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DailyTaskCfg >*
DailyTaskCfgSet::mutable_dailytaskcfg() {
  return &dailytaskcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DailyTaskCfg_2eproto__INCLUDED
