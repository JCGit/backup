// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FloorBuffCfg.proto

#ifndef PROTOBUF_FloorBuffCfg_2eproto__INCLUDED
#define PROTOBUF_FloorBuffCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FloorBuffCfg_2eproto();
void protobuf_AssignDesc_FloorBuffCfg_2eproto();
void protobuf_ShutdownFile_FloorBuffCfg_2eproto();

class FloorBuffCfg;
class FloorBuffCfgSet;

// ===================================================================

class FloorBuffCfg : public ::google::protobuf::MessageLite {
 public:
  FloorBuffCfg();
  virtual ~FloorBuffCfg();

  FloorBuffCfg(const FloorBuffCfg& from);

  inline FloorBuffCfg& operator=(const FloorBuffCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const FloorBuffCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FloorBuffCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FloorBuffCfg* other);

  // implements Message ----------------------------------------------

  FloorBuffCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FloorBuffCfg& from);
  void MergeFrom(const FloorBuffCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string Desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required string Res = 4;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 4;
  inline const ::std::string& res() const;
  inline void set_res(const ::std::string& value);
  inline void set_res(const char* value);
  inline void set_res(const char* value, size_t size);
  inline ::std::string* mutable_res();
  inline ::std::string* release_res();
  inline void set_allocated_res(::std::string* res);

  // required uint32 Time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 BuffID = 6;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 6;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // required uint32 TargetType = 7;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 targettype() const;
  inline void set_targettype(::google::protobuf::uint32 value);

  // required uint32 BuffType = 8;
  inline bool has_bufftype() const;
  inline void clear_bufftype();
  static const int kBuffTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 bufftype() const;
  inline void set_bufftype(::google::protobuf::uint32 value);

  // required uint32 ModelType = 9;
  inline bool has_modeltype() const;
  inline void clear_modeltype();
  static const int kModelTypeFieldNumber = 9;
  inline ::google::protobuf::uint32 modeltype() const;
  inline void set_modeltype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FloorBuffCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_res();
  inline void clear_has_res();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_bufftype();
  inline void clear_has_bufftype();
  inline void set_has_modeltype();
  inline void clear_has_modeltype();

  ::std::string* name_;
  ::std::string* desc_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::std::string* res_;
  ::google::protobuf::uint32 buffid_;
  ::google::protobuf::uint32 targettype_;
  ::google::protobuf::uint32 bufftype_;
  ::google::protobuf::uint32 modeltype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FloorBuffCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FloorBuffCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FloorBuffCfg_2eproto();
  friend void protobuf_ShutdownFile_FloorBuffCfg_2eproto();

  void InitAsDefaultInstance();
  static FloorBuffCfg* default_instance_;
};
// -------------------------------------------------------------------

class FloorBuffCfgSet : public ::google::protobuf::MessageLite {
 public:
  FloorBuffCfgSet();
  virtual ~FloorBuffCfgSet();

  FloorBuffCfgSet(const FloorBuffCfgSet& from);

  inline FloorBuffCfgSet& operator=(const FloorBuffCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const FloorBuffCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FloorBuffCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FloorBuffCfgSet* other);

  // implements Message ----------------------------------------------

  FloorBuffCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FloorBuffCfgSet& from);
  void MergeFrom(const FloorBuffCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.FloorBuffCfg floorBuffCfg = 1;
  inline int floorbuffcfg_size() const;
  inline void clear_floorbuffcfg();
  static const int kFloorBuffCfgFieldNumber = 1;
  inline const ::com::cfg::vo::FloorBuffCfg& floorbuffcfg(int index) const;
  inline ::com::cfg::vo::FloorBuffCfg* mutable_floorbuffcfg(int index);
  inline ::com::cfg::vo::FloorBuffCfg* add_floorbuffcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FloorBuffCfg >&
      floorbuffcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FloorBuffCfg >*
      mutable_floorbuffcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FloorBuffCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FloorBuffCfg > floorbuffcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FloorBuffCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FloorBuffCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FloorBuffCfg_2eproto();
  friend void protobuf_ShutdownFile_FloorBuffCfg_2eproto();

  void InitAsDefaultInstance();
  static FloorBuffCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// FloorBuffCfg

// required uint32 ID = 1;
inline bool FloorBuffCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FloorBuffCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FloorBuffCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FloorBuffCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FloorBuffCfg::id() const {
  return id_;
}
inline void FloorBuffCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string Name = 2;
inline bool FloorBuffCfg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FloorBuffCfg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FloorBuffCfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FloorBuffCfg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FloorBuffCfg::name() const {
  return *name_;
}
inline void FloorBuffCfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FloorBuffCfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FloorBuffCfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FloorBuffCfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FloorBuffCfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FloorBuffCfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Desc = 3;
inline bool FloorBuffCfg::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FloorBuffCfg::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FloorBuffCfg::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FloorBuffCfg::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& FloorBuffCfg::desc() const {
  return *desc_;
}
inline void FloorBuffCfg::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void FloorBuffCfg::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void FloorBuffCfg::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FloorBuffCfg::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* FloorBuffCfg::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FloorBuffCfg::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Res = 4;
inline bool FloorBuffCfg::has_res() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FloorBuffCfg::set_has_res() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FloorBuffCfg::clear_has_res() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FloorBuffCfg::clear_res() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    res_->clear();
  }
  clear_has_res();
}
inline const ::std::string& FloorBuffCfg::res() const {
  return *res_;
}
inline void FloorBuffCfg::set_res(const ::std::string& value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void FloorBuffCfg::set_res(const char* value) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(value);
}
inline void FloorBuffCfg::set_res(const char* value, size_t size) {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  res_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FloorBuffCfg::mutable_res() {
  set_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    res_ = new ::std::string;
  }
  return res_;
}
inline ::std::string* FloorBuffCfg::release_res() {
  clear_has_res();
  if (res_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = res_;
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FloorBuffCfg::set_allocated_res(::std::string* res) {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (res) {
    set_has_res();
    res_ = res;
  } else {
    clear_has_res();
    res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 Time = 5;
inline bool FloorBuffCfg::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FloorBuffCfg::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FloorBuffCfg::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FloorBuffCfg::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 FloorBuffCfg::time() const {
  return time_;
}
inline void FloorBuffCfg::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 BuffID = 6;
inline bool FloorBuffCfg::has_buffid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FloorBuffCfg::set_has_buffid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FloorBuffCfg::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FloorBuffCfg::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 FloorBuffCfg::buffid() const {
  return buffid_;
}
inline void FloorBuffCfg::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// required uint32 TargetType = 7;
inline bool FloorBuffCfg::has_targettype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FloorBuffCfg::set_has_targettype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FloorBuffCfg::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FloorBuffCfg::clear_targettype() {
  targettype_ = 0u;
  clear_has_targettype();
}
inline ::google::protobuf::uint32 FloorBuffCfg::targettype() const {
  return targettype_;
}
inline void FloorBuffCfg::set_targettype(::google::protobuf::uint32 value) {
  set_has_targettype();
  targettype_ = value;
}

// required uint32 BuffType = 8;
inline bool FloorBuffCfg::has_bufftype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FloorBuffCfg::set_has_bufftype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FloorBuffCfg::clear_has_bufftype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FloorBuffCfg::clear_bufftype() {
  bufftype_ = 0u;
  clear_has_bufftype();
}
inline ::google::protobuf::uint32 FloorBuffCfg::bufftype() const {
  return bufftype_;
}
inline void FloorBuffCfg::set_bufftype(::google::protobuf::uint32 value) {
  set_has_bufftype();
  bufftype_ = value;
}

// required uint32 ModelType = 9;
inline bool FloorBuffCfg::has_modeltype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FloorBuffCfg::set_has_modeltype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FloorBuffCfg::clear_has_modeltype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FloorBuffCfg::clear_modeltype() {
  modeltype_ = 0u;
  clear_has_modeltype();
}
inline ::google::protobuf::uint32 FloorBuffCfg::modeltype() const {
  return modeltype_;
}
inline void FloorBuffCfg::set_modeltype(::google::protobuf::uint32 value) {
  set_has_modeltype();
  modeltype_ = value;
}

// -------------------------------------------------------------------

// FloorBuffCfgSet

// repeated .com.cfg.vo.FloorBuffCfg floorBuffCfg = 1;
inline int FloorBuffCfgSet::floorbuffcfg_size() const {
  return floorbuffcfg_.size();
}
inline void FloorBuffCfgSet::clear_floorbuffcfg() {
  floorbuffcfg_.Clear();
}
inline const ::com::cfg::vo::FloorBuffCfg& FloorBuffCfgSet::floorbuffcfg(int index) const {
  return floorbuffcfg_.Get(index);
}
inline ::com::cfg::vo::FloorBuffCfg* FloorBuffCfgSet::mutable_floorbuffcfg(int index) {
  return floorbuffcfg_.Mutable(index);
}
inline ::com::cfg::vo::FloorBuffCfg* FloorBuffCfgSet::add_floorbuffcfg() {
  return floorbuffcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FloorBuffCfg >&
FloorBuffCfgSet::floorbuffcfg() const {
  return floorbuffcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FloorBuffCfg >*
FloorBuffCfgSet::mutable_floorbuffcfg() {
  return &floorbuffcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FloorBuffCfg_2eproto__INCLUDED
