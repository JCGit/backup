// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EndlessCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EndlessCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EndlessCfg_2eproto() {
  delete Round::default_instance_;
  delete EndlessCfg::default_instance_;
  delete EndlessCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EndlessCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EndlessCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Round::default_instance_ = new Round();
  EndlessCfg::default_instance_ = new EndlessCfg();
  EndlessCfgSet::default_instance_ = new EndlessCfgSet();
  Round::default_instance_->InitAsDefaultInstance();
  EndlessCfg::default_instance_->InitAsDefaultInstance();
  EndlessCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EndlessCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EndlessCfg_2eproto_once_);
void protobuf_AddDesc_EndlessCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EndlessCfg_2eproto_once_,
                 &protobuf_AddDesc_EndlessCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EndlessCfg_2eproto {
  StaticDescriptorInitializer_EndlessCfg_2eproto() {
    protobuf_AddDesc_EndlessCfg_2eproto();
  }
} static_descriptor_initializer_EndlessCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Round::kNumFieldNumber;
const int Round::kTimeFieldNumber;
const int Round::kExtraTypeFieldNumber;
const int Round::kExtraNumFieldNumber;
const int Round::kExtraProbFieldNumber;
#endif  // !_MSC_VER

Round::Round()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Round::InitAsDefaultInstance() {
}

Round::Round(const Round& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Round::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  time_ = 0u;
  extratype_ = 0u;
  extranum_ = 0u;
  extraprob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Round::~Round() {
  SharedDtor();
}

void Round::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Round::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Round& Round::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EndlessCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EndlessCfg_2eproto();
#endif
  return *default_instance_;
}

Round* Round::default_instance_ = NULL;

Round* Round::New() const {
  return new Round;
}

void Round::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    time_ = 0u;
    extratype_ = 0u;
    extranum_ = 0u;
    extraprob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Round::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // required uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ExtraType;
        break;
      }

      // required uint32 ExtraType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extratype_)));
          set_has_extratype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ExtraNum;
        break;
      }

      // required uint32 ExtraNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extranum_)));
          set_has_extranum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ExtraProb;
        break;
      }

      // required uint32 ExtraProb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtraProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraprob_)));
          set_has_extraprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Round::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // required uint32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 ExtraType = 3;
  if (has_extratype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extratype(), output);
  }

  // required uint32 ExtraNum = 4;
  if (has_extranum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->extranum(), output);
  }

  // required uint32 ExtraProb = 5;
  if (has_extraprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->extraprob(), output);
  }

}

int Round::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // required uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 ExtraType = 3;
    if (has_extratype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extratype());
    }

    // required uint32 ExtraNum = 4;
    if (has_extranum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extranum());
    }

    // required uint32 ExtraProb = 5;
    if (has_extraprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraprob());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Round::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Round*>(&from));
}

void Round::MergeFrom(const Round& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_extratype()) {
      set_extratype(from.extratype());
    }
    if (from.has_extranum()) {
      set_extranum(from.extranum());
    }
    if (from.has_extraprob()) {
      set_extraprob(from.extraprob());
    }
  }
}

void Round::CopyFrom(const Round& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Round::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Round::Swap(Round* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(extratype_, other->extratype_);
    std::swap(extranum_, other->extranum_);
    std::swap(extraprob_, other->extraprob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Round::GetTypeName() const {
  return "com.cfg.vo.Round";
}


// ===================================================================

#ifndef _MSC_VER
const int EndlessCfg::kAddLevFieldNumber;
const int EndlessCfg::kRoundInfoFieldNumber;
const int EndlessCfg::kLimitNumFieldNumber;
#endif  // !_MSC_VER

EndlessCfg::EndlessCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EndlessCfg::InitAsDefaultInstance() {
}

EndlessCfg::EndlessCfg(const EndlessCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EndlessCfg::SharedCtor() {
  _cached_size_ = 0;
  addlev_ = 0u;
  limitnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndlessCfg::~EndlessCfg() {
  SharedDtor();
}

void EndlessCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndlessCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndlessCfg& EndlessCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EndlessCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EndlessCfg_2eproto();
#endif
  return *default_instance_;
}

EndlessCfg* EndlessCfg::default_instance_ = NULL;

EndlessCfg* EndlessCfg::New() const {
  return new EndlessCfg;
}

void EndlessCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    addlev_ = 0u;
    limitnum_ = 0u;
  }
  roundinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EndlessCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AddLev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addlev_)));
          set_has_addlev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoundInfo;
        break;
      }

      // repeated .com.cfg.vo.Round RoundInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoundInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roundinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoundInfo;
        if (input->ExpectTag(40)) goto parse_LimitNum;
        break;
      }

      // required uint32 LimitNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitnum_)));
          set_has_limitnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndlessCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AddLev = 3;
  if (has_addlev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addlev(), output);
  }

  // repeated .com.cfg.vo.Round RoundInfo = 4;
  for (int i = 0; i < this->roundinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->roundinfo(i), output);
  }

  // required uint32 LimitNum = 5;
  if (has_limitnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->limitnum(), output);
  }

}

int EndlessCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AddLev = 3;
    if (has_addlev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addlev());
    }

    // required uint32 LimitNum = 5;
    if (has_limitnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limitnum());
    }

  }
  // repeated .com.cfg.vo.Round RoundInfo = 4;
  total_size += 1 * this->roundinfo_size();
  for (int i = 0; i < this->roundinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roundinfo(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndlessCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndlessCfg*>(&from));
}

void EndlessCfg::MergeFrom(const EndlessCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  roundinfo_.MergeFrom(from.roundinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_addlev()) {
      set_addlev(from.addlev());
    }
    if (from.has_limitnum()) {
      set_limitnum(from.limitnum());
    }
  }
}

void EndlessCfg::CopyFrom(const EndlessCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndlessCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < roundinfo_size(); i++) {
    if (!this->roundinfo(i).IsInitialized()) return false;
  }
  return true;
}

void EndlessCfg::Swap(EndlessCfg* other) {
  if (other != this) {
    std::swap(addlev_, other->addlev_);
    roundinfo_.Swap(&other->roundinfo_);
    std::swap(limitnum_, other->limitnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EndlessCfg::GetTypeName() const {
  return "com.cfg.vo.EndlessCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EndlessCfgSet::kEndlessCfgFieldNumber;
#endif  // !_MSC_VER

EndlessCfgSet::EndlessCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EndlessCfgSet::InitAsDefaultInstance() {
}

EndlessCfgSet::EndlessCfgSet(const EndlessCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EndlessCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndlessCfgSet::~EndlessCfgSet() {
  SharedDtor();
}

void EndlessCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EndlessCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EndlessCfgSet& EndlessCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EndlessCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EndlessCfg_2eproto();
#endif
  return *default_instance_;
}

EndlessCfgSet* EndlessCfgSet::default_instance_ = NULL;

EndlessCfgSet* EndlessCfgSet::New() const {
  return new EndlessCfgSet;
}

void EndlessCfgSet::Clear() {
  endlesscfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EndlessCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EndlessCfg endlessCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endlessCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endlesscfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_endlessCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EndlessCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EndlessCfg endlessCfg = 1;
  for (int i = 0; i < this->endlesscfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->endlesscfg(i), output);
  }

}

int EndlessCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EndlessCfg endlessCfg = 1;
  total_size += 1 * this->endlesscfg_size();
  for (int i = 0; i < this->endlesscfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endlesscfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndlessCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EndlessCfgSet*>(&from));
}

void EndlessCfgSet::MergeFrom(const EndlessCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  endlesscfg_.MergeFrom(from.endlesscfg_);
}

void EndlessCfgSet::CopyFrom(const EndlessCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndlessCfgSet::IsInitialized() const {

  for (int i = 0; i < endlesscfg_size(); i++) {
    if (!this->endlesscfg(i).IsInitialized()) return false;
  }
  return true;
}

void EndlessCfgSet::Swap(EndlessCfgSet* other) {
  if (other != this) {
    endlesscfg_.Swap(&other->endlesscfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EndlessCfgSet::GetTypeName() const {
  return "com.cfg.vo.EndlessCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
