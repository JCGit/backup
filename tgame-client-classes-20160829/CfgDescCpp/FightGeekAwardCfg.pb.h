// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightGeekAwardCfg.proto

#ifndef PROTOBUF_FightGeekAwardCfg_2eproto__INCLUDED
#define PROTOBUF_FightGeekAwardCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FightGeekAwardCfg_2eproto();
void protobuf_AssignDesc_FightGeekAwardCfg_2eproto();
void protobuf_ShutdownFile_FightGeekAwardCfg_2eproto();

class FightGeekActCfgElmt;
class FightGeekAwardCfg;
class FightGeekAwardCfgSet;

// ===================================================================

class FightGeekActCfgElmt : public ::google::protobuf::MessageLite {
 public:
  FightGeekActCfgElmt();
  virtual ~FightGeekActCfgElmt();

  FightGeekActCfgElmt(const FightGeekActCfgElmt& from);

  inline FightGeekActCfgElmt& operator=(const FightGeekActCfgElmt& from) {
    CopyFrom(from);
    return *this;
  }

  static const FightGeekActCfgElmt& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FightGeekActCfgElmt* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FightGeekActCfgElmt* other);

  // implements Message ----------------------------------------------

  FightGeekActCfgElmt* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FightGeekActCfgElmt& from);
  void MergeFrom(const FightGeekActCfgElmt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ElementType = 1;
  inline bool has_elementtype() const;
  inline void clear_elementtype();
  static const int kElementTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 elementtype() const;
  inline void set_elementtype(::google::protobuf::uint32 value);

  // required uint32 ElementID = 2;
  inline bool has_elementid() const;
  inline void clear_elementid();
  static const int kElementIDFieldNumber = 2;
  inline ::google::protobuf::uint32 elementid() const;
  inline void set_elementid(::google::protobuf::uint32 value);

  // required uint32 ElementCnt = 3;
  inline bool has_elementcnt() const;
  inline void clear_elementcnt();
  static const int kElementCntFieldNumber = 3;
  inline ::google::protobuf::uint32 elementcnt() const;
  inline void set_elementcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FightGeekActCfgElmt)
 private:
  inline void set_has_elementtype();
  inline void clear_has_elementtype();
  inline void set_has_elementid();
  inline void clear_has_elementid();
  inline void set_has_elementcnt();
  inline void clear_has_elementcnt();

  ::google::protobuf::uint32 elementtype_;
  ::google::protobuf::uint32 elementid_;
  ::google::protobuf::uint32 elementcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FightGeekAwardCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FightGeekAwardCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FightGeekAwardCfg_2eproto();
  friend void protobuf_ShutdownFile_FightGeekAwardCfg_2eproto();

  void InitAsDefaultInstance();
  static FightGeekActCfgElmt* default_instance_;
};
// -------------------------------------------------------------------

class FightGeekAwardCfg : public ::google::protobuf::MessageLite {
 public:
  FightGeekAwardCfg();
  virtual ~FightGeekAwardCfg();

  FightGeekAwardCfg(const FightGeekAwardCfg& from);

  inline FightGeekAwardCfg& operator=(const FightGeekAwardCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const FightGeekAwardCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FightGeekAwardCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FightGeekAwardCfg* other);

  // implements Message ----------------------------------------------

  FightGeekAwardCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FightGeekAwardCfg& from);
  void MergeFrom(const FightGeekAwardCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 Fight = 2;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 2;
  inline ::google::protobuf::uint32 fight() const;
  inline void set_fight(::google::protobuf::uint32 value);

  // repeated .com.cfg.vo.FightGeekActCfgElmt ElmtLst = 3;
  inline int elmtlst_size() const;
  inline void clear_elmtlst();
  static const int kElmtLstFieldNumber = 3;
  inline const ::com::cfg::vo::FightGeekActCfgElmt& elmtlst(int index) const;
  inline ::com::cfg::vo::FightGeekActCfgElmt* mutable_elmtlst(int index);
  inline ::com::cfg::vo::FightGeekActCfgElmt* add_elmtlst();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekActCfgElmt >&
      elmtlst() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekActCfgElmt >*
      mutable_elmtlst();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FightGeekAwardCfg)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 fight_;
  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekActCfgElmt > elmtlst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FightGeekAwardCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FightGeekAwardCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FightGeekAwardCfg_2eproto();
  friend void protobuf_ShutdownFile_FightGeekAwardCfg_2eproto();

  void InitAsDefaultInstance();
  static FightGeekAwardCfg* default_instance_;
};
// -------------------------------------------------------------------

class FightGeekAwardCfgSet : public ::google::protobuf::MessageLite {
 public:
  FightGeekAwardCfgSet();
  virtual ~FightGeekAwardCfgSet();

  FightGeekAwardCfgSet(const FightGeekAwardCfgSet& from);

  inline FightGeekAwardCfgSet& operator=(const FightGeekAwardCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const FightGeekAwardCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FightGeekAwardCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FightGeekAwardCfgSet* other);

  // implements Message ----------------------------------------------

  FightGeekAwardCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FightGeekAwardCfgSet& from);
  void MergeFrom(const FightGeekAwardCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.FightGeekAwardCfg fightGeekAwardCfg = 1;
  inline int fightgeekawardcfg_size() const;
  inline void clear_fightgeekawardcfg();
  static const int kFightGeekAwardCfgFieldNumber = 1;
  inline const ::com::cfg::vo::FightGeekAwardCfg& fightgeekawardcfg(int index) const;
  inline ::com::cfg::vo::FightGeekAwardCfg* mutable_fightgeekawardcfg(int index);
  inline ::com::cfg::vo::FightGeekAwardCfg* add_fightgeekawardcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekAwardCfg >&
      fightgeekawardcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekAwardCfg >*
      mutable_fightgeekawardcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FightGeekAwardCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekAwardCfg > fightgeekawardcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FightGeekAwardCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FightGeekAwardCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FightGeekAwardCfg_2eproto();
  friend void protobuf_ShutdownFile_FightGeekAwardCfg_2eproto();

  void InitAsDefaultInstance();
  static FightGeekAwardCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// FightGeekActCfgElmt

// required uint32 ElementType = 1;
inline bool FightGeekActCfgElmt::has_elementtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGeekActCfgElmt::set_has_elementtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGeekActCfgElmt::clear_has_elementtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGeekActCfgElmt::clear_elementtype() {
  elementtype_ = 0u;
  clear_has_elementtype();
}
inline ::google::protobuf::uint32 FightGeekActCfgElmt::elementtype() const {
  return elementtype_;
}
inline void FightGeekActCfgElmt::set_elementtype(::google::protobuf::uint32 value) {
  set_has_elementtype();
  elementtype_ = value;
}

// required uint32 ElementID = 2;
inline bool FightGeekActCfgElmt::has_elementid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGeekActCfgElmt::set_has_elementid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGeekActCfgElmt::clear_has_elementid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGeekActCfgElmt::clear_elementid() {
  elementid_ = 0u;
  clear_has_elementid();
}
inline ::google::protobuf::uint32 FightGeekActCfgElmt::elementid() const {
  return elementid_;
}
inline void FightGeekActCfgElmt::set_elementid(::google::protobuf::uint32 value) {
  set_has_elementid();
  elementid_ = value;
}

// required uint32 ElementCnt = 3;
inline bool FightGeekActCfgElmt::has_elementcnt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightGeekActCfgElmt::set_has_elementcnt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightGeekActCfgElmt::clear_has_elementcnt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightGeekActCfgElmt::clear_elementcnt() {
  elementcnt_ = 0u;
  clear_has_elementcnt();
}
inline ::google::protobuf::uint32 FightGeekActCfgElmt::elementcnt() const {
  return elementcnt_;
}
inline void FightGeekActCfgElmt::set_elementcnt(::google::protobuf::uint32 value) {
  set_has_elementcnt();
  elementcnt_ = value;
}

// -------------------------------------------------------------------

// FightGeekAwardCfg

// required uint32 Level = 1;
inline bool FightGeekAwardCfg::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightGeekAwardCfg::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightGeekAwardCfg::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightGeekAwardCfg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 FightGeekAwardCfg::level() const {
  return level_;
}
inline void FightGeekAwardCfg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 Fight = 2;
inline bool FightGeekAwardCfg::has_fight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightGeekAwardCfg::set_has_fight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightGeekAwardCfg::clear_has_fight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightGeekAwardCfg::clear_fight() {
  fight_ = 0u;
  clear_has_fight();
}
inline ::google::protobuf::uint32 FightGeekAwardCfg::fight() const {
  return fight_;
}
inline void FightGeekAwardCfg::set_fight(::google::protobuf::uint32 value) {
  set_has_fight();
  fight_ = value;
}

// repeated .com.cfg.vo.FightGeekActCfgElmt ElmtLst = 3;
inline int FightGeekAwardCfg::elmtlst_size() const {
  return elmtlst_.size();
}
inline void FightGeekAwardCfg::clear_elmtlst() {
  elmtlst_.Clear();
}
inline const ::com::cfg::vo::FightGeekActCfgElmt& FightGeekAwardCfg::elmtlst(int index) const {
  return elmtlst_.Get(index);
}
inline ::com::cfg::vo::FightGeekActCfgElmt* FightGeekAwardCfg::mutable_elmtlst(int index) {
  return elmtlst_.Mutable(index);
}
inline ::com::cfg::vo::FightGeekActCfgElmt* FightGeekAwardCfg::add_elmtlst() {
  return elmtlst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekActCfgElmt >&
FightGeekAwardCfg::elmtlst() const {
  return elmtlst_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekActCfgElmt >*
FightGeekAwardCfg::mutable_elmtlst() {
  return &elmtlst_;
}

// -------------------------------------------------------------------

// FightGeekAwardCfgSet

// repeated .com.cfg.vo.FightGeekAwardCfg fightGeekAwardCfg = 1;
inline int FightGeekAwardCfgSet::fightgeekawardcfg_size() const {
  return fightgeekawardcfg_.size();
}
inline void FightGeekAwardCfgSet::clear_fightgeekawardcfg() {
  fightgeekawardcfg_.Clear();
}
inline const ::com::cfg::vo::FightGeekAwardCfg& FightGeekAwardCfgSet::fightgeekawardcfg(int index) const {
  return fightgeekawardcfg_.Get(index);
}
inline ::com::cfg::vo::FightGeekAwardCfg* FightGeekAwardCfgSet::mutable_fightgeekawardcfg(int index) {
  return fightgeekawardcfg_.Mutable(index);
}
inline ::com::cfg::vo::FightGeekAwardCfg* FightGeekAwardCfgSet::add_fightgeekawardcfg() {
  return fightgeekawardcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekAwardCfg >&
FightGeekAwardCfgSet::fightgeekawardcfg() const {
  return fightgeekawardcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FightGeekAwardCfg >*
FightGeekAwardCfgSet::mutable_fightgeekawardcfg() {
  return &fightgeekawardcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FightGeekAwardCfg_2eproto__INCLUDED
