// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WarStarAwardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WarStarAwardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WarStarAwardCfg_2eproto() {
  delete WarStarAwardElmt::default_instance_;
  delete WarStarAwardCfg::default_instance_;
  delete WarStarAwardCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WarStarAwardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WarStarAwardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  WarStarAwardElmt::default_instance_ = new WarStarAwardElmt();
  WarStarAwardCfg::default_instance_ = new WarStarAwardCfg();
  WarStarAwardCfgSet::default_instance_ = new WarStarAwardCfgSet();
  WarStarAwardElmt::default_instance_->InitAsDefaultInstance();
  WarStarAwardCfg::default_instance_->InitAsDefaultInstance();
  WarStarAwardCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WarStarAwardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WarStarAwardCfg_2eproto_once_);
void protobuf_AddDesc_WarStarAwardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WarStarAwardCfg_2eproto_once_,
                 &protobuf_AddDesc_WarStarAwardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WarStarAwardCfg_2eproto {
  StaticDescriptorInitializer_WarStarAwardCfg_2eproto() {
    protobuf_AddDesc_WarStarAwardCfg_2eproto();
  }
} static_descriptor_initializer_WarStarAwardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WarStarAwardElmt::kStarCntFieldNumber;
const int WarStarAwardElmt::kAwardIDFieldNumber;
#endif  // !_MSC_VER

WarStarAwardElmt::WarStarAwardElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarStarAwardElmt::InitAsDefaultInstance() {
}

WarStarAwardElmt::WarStarAwardElmt(const WarStarAwardElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarStarAwardElmt::SharedCtor() {
  _cached_size_ = 0;
  starcnt_ = 0u;
  awardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarStarAwardElmt::~WarStarAwardElmt() {
  SharedDtor();
}

void WarStarAwardElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarStarAwardElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarStarAwardElmt& WarStarAwardElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarStarAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarStarAwardCfg_2eproto();
#endif
  return *default_instance_;
}

WarStarAwardElmt* WarStarAwardElmt::default_instance_ = NULL;

WarStarAwardElmt* WarStarAwardElmt::New() const {
  return new WarStarAwardElmt;
}

void WarStarAwardElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starcnt_ = 0u;
    awardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarStarAwardElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StarCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starcnt_)));
          set_has_starcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardID;
        break;
      }

      // required uint32 AwardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardid_)));
          set_has_awardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarStarAwardElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StarCnt = 1;
  if (has_starcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->starcnt(), output);
  }

  // required uint32 AwardID = 2;
  if (has_awardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardid(), output);
  }

}

int WarStarAwardElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StarCnt = 1;
    if (has_starcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starcnt());
    }

    // required uint32 AwardID = 2;
    if (has_awardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarStarAwardElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarStarAwardElmt*>(&from));
}

void WarStarAwardElmt::MergeFrom(const WarStarAwardElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starcnt()) {
      set_starcnt(from.starcnt());
    }
    if (from.has_awardid()) {
      set_awardid(from.awardid());
    }
  }
}

void WarStarAwardElmt::CopyFrom(const WarStarAwardElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarStarAwardElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WarStarAwardElmt::Swap(WarStarAwardElmt* other) {
  if (other != this) {
    std::swap(starcnt_, other->starcnt_);
    std::swap(awardid_, other->awardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarStarAwardElmt::GetTypeName() const {
  return "com.cfg.vo.WarStarAwardElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int WarStarAwardCfg::kWarIDFieldNumber;
const int WarStarAwardCfg::kAwardsFieldNumber;
#endif  // !_MSC_VER

WarStarAwardCfg::WarStarAwardCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarStarAwardCfg::InitAsDefaultInstance() {
}

WarStarAwardCfg::WarStarAwardCfg(const WarStarAwardCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarStarAwardCfg::SharedCtor() {
  _cached_size_ = 0;
  warid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarStarAwardCfg::~WarStarAwardCfg() {
  SharedDtor();
}

void WarStarAwardCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarStarAwardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarStarAwardCfg& WarStarAwardCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarStarAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarStarAwardCfg_2eproto();
#endif
  return *default_instance_;
}

WarStarAwardCfg* WarStarAwardCfg::default_instance_ = NULL;

WarStarAwardCfg* WarStarAwardCfg::New() const {
  return new WarStarAwardCfg;
}

void WarStarAwardCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    warid_ = 0u;
  }
  awards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarStarAwardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WarID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Awards;
        break;
      }

      // repeated .com.cfg.vo.WarStarAwardElmt Awards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Awards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarStarAwardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WarID = 1;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warid(), output);
  }

  // repeated .com.cfg.vo.WarStarAwardElmt Awards = 2;
  for (int i = 0; i < this->awards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awards(i), output);
  }

}

int WarStarAwardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WarID = 1;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

  }
  // repeated .com.cfg.vo.WarStarAwardElmt Awards = 2;
  total_size += 1 * this->awards_size();
  for (int i = 0; i < this->awards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awards(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarStarAwardCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarStarAwardCfg*>(&from));
}

void WarStarAwardCfg::MergeFrom(const WarStarAwardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  awards_.MergeFrom(from.awards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warid()) {
      set_warid(from.warid());
    }
  }
}

void WarStarAwardCfg::CopyFrom(const WarStarAwardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarStarAwardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awards_size(); i++) {
    if (!this->awards(i).IsInitialized()) return false;
  }
  return true;
}

void WarStarAwardCfg::Swap(WarStarAwardCfg* other) {
  if (other != this) {
    std::swap(warid_, other->warid_);
    awards_.Swap(&other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarStarAwardCfg::GetTypeName() const {
  return "com.cfg.vo.WarStarAwardCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WarStarAwardCfgSet::kStarawardcfgFieldNumber;
#endif  // !_MSC_VER

WarStarAwardCfgSet::WarStarAwardCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarStarAwardCfgSet::InitAsDefaultInstance() {
}

WarStarAwardCfgSet::WarStarAwardCfgSet(const WarStarAwardCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarStarAwardCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarStarAwardCfgSet::~WarStarAwardCfgSet() {
  SharedDtor();
}

void WarStarAwardCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarStarAwardCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarStarAwardCfgSet& WarStarAwardCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarStarAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarStarAwardCfg_2eproto();
#endif
  return *default_instance_;
}

WarStarAwardCfgSet* WarStarAwardCfgSet::default_instance_ = NULL;

WarStarAwardCfgSet* WarStarAwardCfgSet::New() const {
  return new WarStarAwardCfgSet;
}

void WarStarAwardCfgSet::Clear() {
  starawardcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarStarAwardCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WarStarAwardCfg starawardcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_starawardcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_starawardcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_starawardcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarStarAwardCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WarStarAwardCfg starawardcfg = 1;
  for (int i = 0; i < this->starawardcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->starawardcfg(i), output);
  }

}

int WarStarAwardCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WarStarAwardCfg starawardcfg = 1;
  total_size += 1 * this->starawardcfg_size();
  for (int i = 0; i < this->starawardcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->starawardcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarStarAwardCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarStarAwardCfgSet*>(&from));
}

void WarStarAwardCfgSet::MergeFrom(const WarStarAwardCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  starawardcfg_.MergeFrom(from.starawardcfg_);
}

void WarStarAwardCfgSet::CopyFrom(const WarStarAwardCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarStarAwardCfgSet::IsInitialized() const {

  for (int i = 0; i < starawardcfg_size(); i++) {
    if (!this->starawardcfg(i).IsInitialized()) return false;
  }
  return true;
}

void WarStarAwardCfgSet::Swap(WarStarAwardCfgSet* other) {
  if (other != this) {
    starawardcfg_.Swap(&other->starawardcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarStarAwardCfgSet::GetTypeName() const {
  return "com.cfg.vo.WarStarAwardCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
