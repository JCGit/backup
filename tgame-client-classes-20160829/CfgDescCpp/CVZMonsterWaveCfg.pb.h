// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CVZMonsterWaveCfg.proto

#ifndef PROTOBUF_CVZMonsterWaveCfg_2eproto__INCLUDED
#define PROTOBUF_CVZMonsterWaveCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CVZMonsterWaveCfg_2eproto();
void protobuf_AssignDesc_CVZMonsterWaveCfg_2eproto();
void protobuf_ShutdownFile_CVZMonsterWaveCfg_2eproto();

class CVZMonsterWaveCfg;
class CVZMonsterWaveCfgSet;

// ===================================================================

class CVZMonsterWaveCfg : public ::google::protobuf::MessageLite {
 public:
  CVZMonsterWaveCfg();
  virtual ~CVZMonsterWaveCfg();

  CVZMonsterWaveCfg(const CVZMonsterWaveCfg& from);

  inline CVZMonsterWaveCfg& operator=(const CVZMonsterWaveCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const CVZMonsterWaveCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CVZMonsterWaveCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CVZMonsterWaveCfg* other);

  // implements Message ----------------------------------------------

  CVZMonsterWaveCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CVZMonsterWaveCfg& from);
  void MergeFrom(const CVZMonsterWaveCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 wave = 1;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 1;
  inline ::google::protobuf::uint32 wave() const;
  inline void set_wave(::google::protobuf::uint32 value);

  // required string monsteravatar = 2;
  inline bool has_monsteravatar() const;
  inline void clear_monsteravatar();
  static const int kMonsteravatarFieldNumber = 2;
  inline const ::std::string& monsteravatar() const;
  inline void set_monsteravatar(const ::std::string& value);
  inline void set_monsteravatar(const char* value);
  inline void set_monsteravatar(const char* value, size_t size);
  inline ::std::string* mutable_monsteravatar();
  inline ::std::string* release_monsteravatar();
  inline void set_allocated_monsteravatar(::std::string* monsteravatar);

  // required uint32 MinSpeed = 3;
  inline bool has_minspeed() const;
  inline void clear_minspeed();
  static const int kMinSpeedFieldNumber = 3;
  inline ::google::protobuf::uint32 minspeed() const;
  inline void set_minspeed(::google::protobuf::uint32 value);

  // required uint32 MaxSpeed = 4;
  inline bool has_maxspeed() const;
  inline void clear_maxspeed();
  static const int kMaxSpeedFieldNumber = 4;
  inline ::google::protobuf::uint32 maxspeed() const;
  inline void set_maxspeed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.CVZMonsterWaveCfg)
 private:
  inline void set_has_wave();
  inline void clear_has_wave();
  inline void set_has_monsteravatar();
  inline void clear_has_monsteravatar();
  inline void set_has_minspeed();
  inline void clear_has_minspeed();
  inline void set_has_maxspeed();
  inline void clear_has_maxspeed();

  ::std::string* monsteravatar_;
  ::google::protobuf::uint32 wave_;
  ::google::protobuf::uint32 minspeed_;
  ::google::protobuf::uint32 maxspeed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CVZMonsterWaveCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CVZMonsterWaveCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CVZMonsterWaveCfg_2eproto();
  friend void protobuf_ShutdownFile_CVZMonsterWaveCfg_2eproto();

  void InitAsDefaultInstance();
  static CVZMonsterWaveCfg* default_instance_;
};
// -------------------------------------------------------------------

class CVZMonsterWaveCfgSet : public ::google::protobuf::MessageLite {
 public:
  CVZMonsterWaveCfgSet();
  virtual ~CVZMonsterWaveCfgSet();

  CVZMonsterWaveCfgSet(const CVZMonsterWaveCfgSet& from);

  inline CVZMonsterWaveCfgSet& operator=(const CVZMonsterWaveCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const CVZMonsterWaveCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const CVZMonsterWaveCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(CVZMonsterWaveCfgSet* other);

  // implements Message ----------------------------------------------

  CVZMonsterWaveCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const CVZMonsterWaveCfgSet& from);
  void MergeFrom(const CVZMonsterWaveCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.CVZMonsterWaveCfg monsterWaveCfg = 1;
  inline int monsterwavecfg_size() const;
  inline void clear_monsterwavecfg();
  static const int kMonsterWaveCfgFieldNumber = 1;
  inline const ::com::cfg::vo::CVZMonsterWaveCfg& monsterwavecfg(int index) const;
  inline ::com::cfg::vo::CVZMonsterWaveCfg* mutable_monsterwavecfg(int index);
  inline ::com::cfg::vo::CVZMonsterWaveCfg* add_monsterwavecfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::CVZMonsterWaveCfg >&
      monsterwavecfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::CVZMonsterWaveCfg >*
      mutable_monsterwavecfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.CVZMonsterWaveCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::CVZMonsterWaveCfg > monsterwavecfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_CVZMonsterWaveCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_CVZMonsterWaveCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_CVZMonsterWaveCfg_2eproto();
  friend void protobuf_ShutdownFile_CVZMonsterWaveCfg_2eproto();

  void InitAsDefaultInstance();
  static CVZMonsterWaveCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// CVZMonsterWaveCfg

// required uint32 wave = 1;
inline bool CVZMonsterWaveCfg::has_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CVZMonsterWaveCfg::set_has_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CVZMonsterWaveCfg::clear_has_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CVZMonsterWaveCfg::clear_wave() {
  wave_ = 0u;
  clear_has_wave();
}
inline ::google::protobuf::uint32 CVZMonsterWaveCfg::wave() const {
  return wave_;
}
inline void CVZMonsterWaveCfg::set_wave(::google::protobuf::uint32 value) {
  set_has_wave();
  wave_ = value;
}

// required string monsteravatar = 2;
inline bool CVZMonsterWaveCfg::has_monsteravatar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CVZMonsterWaveCfg::set_has_monsteravatar() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CVZMonsterWaveCfg::clear_has_monsteravatar() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CVZMonsterWaveCfg::clear_monsteravatar() {
  if (monsteravatar_ != &::google::protobuf::internal::kEmptyString) {
    monsteravatar_->clear();
  }
  clear_has_monsteravatar();
}
inline const ::std::string& CVZMonsterWaveCfg::monsteravatar() const {
  return *monsteravatar_;
}
inline void CVZMonsterWaveCfg::set_monsteravatar(const ::std::string& value) {
  set_has_monsteravatar();
  if (monsteravatar_ == &::google::protobuf::internal::kEmptyString) {
    monsteravatar_ = new ::std::string;
  }
  monsteravatar_->assign(value);
}
inline void CVZMonsterWaveCfg::set_monsteravatar(const char* value) {
  set_has_monsteravatar();
  if (monsteravatar_ == &::google::protobuf::internal::kEmptyString) {
    monsteravatar_ = new ::std::string;
  }
  monsteravatar_->assign(value);
}
inline void CVZMonsterWaveCfg::set_monsteravatar(const char* value, size_t size) {
  set_has_monsteravatar();
  if (monsteravatar_ == &::google::protobuf::internal::kEmptyString) {
    monsteravatar_ = new ::std::string;
  }
  monsteravatar_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CVZMonsterWaveCfg::mutable_monsteravatar() {
  set_has_monsteravatar();
  if (monsteravatar_ == &::google::protobuf::internal::kEmptyString) {
    monsteravatar_ = new ::std::string;
  }
  return monsteravatar_;
}
inline ::std::string* CVZMonsterWaveCfg::release_monsteravatar() {
  clear_has_monsteravatar();
  if (monsteravatar_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = monsteravatar_;
    monsteravatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CVZMonsterWaveCfg::set_allocated_monsteravatar(::std::string* monsteravatar) {
  if (monsteravatar_ != &::google::protobuf::internal::kEmptyString) {
    delete monsteravatar_;
  }
  if (monsteravatar) {
    set_has_monsteravatar();
    monsteravatar_ = monsteravatar;
  } else {
    clear_has_monsteravatar();
    monsteravatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 MinSpeed = 3;
inline bool CVZMonsterWaveCfg::has_minspeed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CVZMonsterWaveCfg::set_has_minspeed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CVZMonsterWaveCfg::clear_has_minspeed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CVZMonsterWaveCfg::clear_minspeed() {
  minspeed_ = 0u;
  clear_has_minspeed();
}
inline ::google::protobuf::uint32 CVZMonsterWaveCfg::minspeed() const {
  return minspeed_;
}
inline void CVZMonsterWaveCfg::set_minspeed(::google::protobuf::uint32 value) {
  set_has_minspeed();
  minspeed_ = value;
}

// required uint32 MaxSpeed = 4;
inline bool CVZMonsterWaveCfg::has_maxspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CVZMonsterWaveCfg::set_has_maxspeed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CVZMonsterWaveCfg::clear_has_maxspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CVZMonsterWaveCfg::clear_maxspeed() {
  maxspeed_ = 0u;
  clear_has_maxspeed();
}
inline ::google::protobuf::uint32 CVZMonsterWaveCfg::maxspeed() const {
  return maxspeed_;
}
inline void CVZMonsterWaveCfg::set_maxspeed(::google::protobuf::uint32 value) {
  set_has_maxspeed();
  maxspeed_ = value;
}

// -------------------------------------------------------------------

// CVZMonsterWaveCfgSet

// repeated .com.cfg.vo.CVZMonsterWaveCfg monsterWaveCfg = 1;
inline int CVZMonsterWaveCfgSet::monsterwavecfg_size() const {
  return monsterwavecfg_.size();
}
inline void CVZMonsterWaveCfgSet::clear_monsterwavecfg() {
  monsterwavecfg_.Clear();
}
inline const ::com::cfg::vo::CVZMonsterWaveCfg& CVZMonsterWaveCfgSet::monsterwavecfg(int index) const {
  return monsterwavecfg_.Get(index);
}
inline ::com::cfg::vo::CVZMonsterWaveCfg* CVZMonsterWaveCfgSet::mutable_monsterwavecfg(int index) {
  return monsterwavecfg_.Mutable(index);
}
inline ::com::cfg::vo::CVZMonsterWaveCfg* CVZMonsterWaveCfgSet::add_monsterwavecfg() {
  return monsterwavecfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::CVZMonsterWaveCfg >&
CVZMonsterWaveCfgSet::monsterwavecfg() const {
  return monsterwavecfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::CVZMonsterWaveCfg >*
CVZMonsterWaveCfgSet::mutable_monsterwavecfg() {
  return &monsterwavecfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CVZMonsterWaveCfg_2eproto__INCLUDED
