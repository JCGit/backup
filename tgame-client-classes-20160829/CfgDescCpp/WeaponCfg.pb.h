// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponCfg.proto

#ifndef PROTOBUF_WeaponCfg_2eproto__INCLUDED
#define PROTOBUF_WeaponCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WeaponCfg_2eproto();
void protobuf_AssignDesc_WeaponCfg_2eproto();
void protobuf_ShutdownFile_WeaponCfg_2eproto();

class WeaponCfg;
class WeaponCfgSet;

// ===================================================================

class WeaponCfg : public ::google::protobuf::MessageLite {
 public:
  WeaponCfg();
  virtual ~WeaponCfg();

  WeaponCfg(const WeaponCfg& from);

  inline WeaponCfg& operator=(const WeaponCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const WeaponCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WeaponCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WeaponCfg* other);

  // implements Message ----------------------------------------------

  WeaponCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WeaponCfg& from);
  void MergeFrom(const WeaponCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 CfgID = 1;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgIDFieldNumber = 1;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // required uint32 WeaponID = 2;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 2;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // required string WeaponName = 4;
  inline bool has_weaponname() const;
  inline void clear_weaponname();
  static const int kWeaponNameFieldNumber = 4;
  inline const ::std::string& weaponname() const;
  inline void set_weaponname(const ::std::string& value);
  inline void set_weaponname(const char* value);
  inline void set_weaponname(const char* value, size_t size);
  inline ::std::string* mutable_weaponname();
  inline ::std::string* release_weaponname();
  inline void set_allocated_weaponname(::std::string* weaponname);

  // required uint32 AtkType = 5;
  inline bool has_atktype() const;
  inline void clear_atktype();
  static const int kAtkTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 atktype() const;
  inline void set_atktype(::google::protobuf::uint32 value);

  // required uint32 ATK = 6;
  inline bool has_atk() const;
  inline void clear_atk();
  static const int kATKFieldNumber = 6;
  inline ::google::protobuf::uint32 atk() const;
  inline void set_atk(::google::protobuf::uint32 value);

  // required uint32 AtkAttrType = 7;
  inline bool has_atkattrtype() const;
  inline void clear_atkattrtype();
  static const int kAtkAttrTypeFieldNumber = 7;
  inline ::google::protobuf::uint32 atkattrtype() const;
  inline void set_atkattrtype(::google::protobuf::uint32 value);

  // required uint32 AtkAttrVal = 8;
  inline bool has_atkattrval() const;
  inline void clear_atkattrval();
  static const int kAtkAttrValFieldNumber = 8;
  inline ::google::protobuf::uint32 atkattrval() const;
  inline void set_atkattrval(::google::protobuf::uint32 value);

  // required uint32 PenetrateVal = 9;
  inline bool has_penetrateval() const;
  inline void clear_penetrateval();
  static const int kPenetrateValFieldNumber = 9;
  inline ::google::protobuf::uint32 penetrateval() const;
  inline void set_penetrateval(::google::protobuf::uint32 value);

  // required uint32 DecMoveSpeed = 10;
  inline bool has_decmovespeed() const;
  inline void clear_decmovespeed();
  static const int kDecMoveSpeedFieldNumber = 10;
  inline ::google::protobuf::uint32 decmovespeed() const;
  inline void set_decmovespeed(::google::protobuf::uint32 value);

  // required uint32 ExpMulti = 11;
  inline bool has_expmulti() const;
  inline void clear_expmulti();
  static const int kExpMultiFieldNumber = 11;
  inline ::google::protobuf::uint32 expmulti() const;
  inline void set_expmulti(::google::protobuf::uint32 value);

  // required uint32 InitStar = 12;
  inline bool has_initstar() const;
  inline void clear_initstar();
  static const int kInitStarFieldNumber = 12;
  inline ::google::protobuf::uint32 initstar() const;
  inline void set_initstar(::google::protobuf::uint32 value);

  // required uint32 MaxStar = 13;
  inline bool has_maxstar() const;
  inline void clear_maxstar();
  static const int kMaxStarFieldNumber = 13;
  inline ::google::protobuf::uint32 maxstar() const;
  inline void set_maxstar(::google::protobuf::uint32 value);

  // required uint32 ATKAdd = 14;
  inline bool has_atkadd() const;
  inline void clear_atkadd();
  static const int kATKAddFieldNumber = 14;
  inline ::google::protobuf::uint32 atkadd() const;
  inline void set_atkadd(::google::protobuf::uint32 value);

  // required uint32 AtkAttrValAdd = 15;
  inline bool has_atkattrvaladd() const;
  inline void clear_atkattrvaladd();
  static const int kAtkAttrValAddFieldNumber = 15;
  inline ::google::protobuf::uint32 atkattrvaladd() const;
  inline void set_atkattrvaladd(::google::protobuf::uint32 value);

  // required uint32 PenetrateValAdd = 16;
  inline bool has_penetratevaladd() const;
  inline void clear_penetratevaladd();
  static const int kPenetrateValAddFieldNumber = 16;
  inline ::google::protobuf::uint32 penetratevaladd() const;
  inline void set_penetratevaladd(::google::protobuf::uint32 value);

  // required uint32 InitStep = 17;
  inline bool has_initstep() const;
  inline void clear_initstep();
  static const int kInitStepFieldNumber = 17;
  inline ::google::protobuf::uint32 initstep() const;
  inline void set_initstep(::google::protobuf::uint32 value);

  // required uint32 ShotRange = 18;
  inline bool has_shotrange() const;
  inline void clear_shotrange();
  static const int kShotRangeFieldNumber = 18;
  inline ::google::protobuf::uint32 shotrange() const;
  inline void set_shotrange(::google::protobuf::uint32 value);

  // required uint32 ShotSpeed = 19;
  inline bool has_shotspeed() const;
  inline void clear_shotspeed();
  static const int kShotSpeedFieldNumber = 19;
  inline ::google::protobuf::uint32 shotspeed() const;
  inline void set_shotspeed(::google::protobuf::uint32 value);

  // required uint32 WeaponSuperSkill = 20;
  inline bool has_weaponsuperskill() const;
  inline void clear_weaponsuperskill();
  static const int kWeaponSuperSkillFieldNumber = 20;
  inline ::google::protobuf::uint32 weaponsuperskill() const;
  inline void set_weaponsuperskill(::google::protobuf::uint32 value);

  // required uint32 BulletID = 21;
  inline bool has_bulletid() const;
  inline void clear_bulletid();
  static const int kBulletIDFieldNumber = 21;
  inline ::google::protobuf::uint32 bulletid() const;
  inline void set_bulletid(::google::protobuf::uint32 value);

  // required uint32 Guesture = 22;
  inline bool has_guesture() const;
  inline void clear_guesture();
  static const int kGuestureFieldNumber = 22;
  inline ::google::protobuf::uint32 guesture() const;
  inline void set_guesture(::google::protobuf::uint32 value);

  // required uint32 WeaponDisp = 23;
  inline bool has_weapondisp() const;
  inline void clear_weapondisp();
  static const int kWeaponDispFieldNumber = 23;
  inline ::google::protobuf::uint32 weapondisp() const;
  inline void set_weapondisp(::google::protobuf::uint32 value);

  // required uint32 BaseExp = 24;
  inline bool has_baseexp() const;
  inline void clear_baseexp();
  static const int kBaseExpFieldNumber = 24;
  inline ::google::protobuf::uint32 baseexp() const;
  inline void set_baseexp(::google::protobuf::uint32 value);

  // required string FireSound = 25;
  inline bool has_firesound() const;
  inline void clear_firesound();
  static const int kFireSoundFieldNumber = 25;
  inline const ::std::string& firesound() const;
  inline void set_firesound(const ::std::string& value);
  inline void set_firesound(const char* value);
  inline void set_firesound(const char* value, size_t size);
  inline ::std::string* mutable_firesound();
  inline ::std::string* release_firesound();
  inline void set_allocated_firesound(::std::string* firesound);

  // required uint32 WeaponType = 26;
  inline bool has_weapontype() const;
  inline void clear_weapontype();
  static const int kWeaponTypeFieldNumber = 26;
  inline ::google::protobuf::uint32 weapontype() const;
  inline void set_weapontype(::google::protobuf::uint32 value);

  // required uint32 WeaponLv = 27;
  inline bool has_weaponlv() const;
  inline void clear_weaponlv();
  static const int kWeaponLvFieldNumber = 27;
  inline ::google::protobuf::uint32 weaponlv() const;
  inline void set_weaponlv(::google::protobuf::uint32 value);

  // required string WeaponIcon = 28;
  inline bool has_weaponicon() const;
  inline void clear_weaponicon();
  static const int kWeaponIconFieldNumber = 28;
  inline const ::std::string& weaponicon() const;
  inline void set_weaponicon(const ::std::string& value);
  inline void set_weaponicon(const char* value);
  inline void set_weaponicon(const char* value, size_t size);
  inline ::std::string* mutable_weaponicon();
  inline ::std::string* release_weaponicon();
  inline void set_allocated_weaponicon(::std::string* weaponicon);

  // required string WeaponDesc = 29;
  inline bool has_weapondesc() const;
  inline void clear_weapondesc();
  static const int kWeaponDescFieldNumber = 29;
  inline const ::std::string& weapondesc() const;
  inline void set_weapondesc(const ::std::string& value);
  inline void set_weapondesc(const char* value);
  inline void set_weapondesc(const char* value, size_t size);
  inline ::std::string* mutable_weapondesc();
  inline ::std::string* release_weapondesc();
  inline void set_allocated_weapondesc(::std::string* weapondesc);

  // required uint32 Hit = 30;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHitFieldNumber = 30;
  inline ::google::protobuf::uint32 hit() const;
  inline void set_hit(::google::protobuf::uint32 value);

  // required uint32 Color = 31;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 31;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // required string WeaponPic = 32;
  inline bool has_weaponpic() const;
  inline void clear_weaponpic();
  static const int kWeaponPicFieldNumber = 32;
  inline const ::std::string& weaponpic() const;
  inline void set_weaponpic(const ::std::string& value);
  inline void set_weaponpic(const char* value);
  inline void set_weaponpic(const char* value, size_t size);
  inline ::std::string* mutable_weaponpic();
  inline ::std::string* release_weaponpic();
  inline void set_allocated_weaponpic(::std::string* weaponpic);

  // required uint32 FireSoundType = 33;
  inline bool has_firesoundtype() const;
  inline void clear_firesoundtype();
  static const int kFireSoundTypeFieldNumber = 33;
  inline ::google::protobuf::uint32 firesoundtype() const;
  inline void set_firesoundtype(::google::protobuf::uint32 value);

  // required uint32 FightPowerCoe = 34;
  inline bool has_fightpowercoe() const;
  inline void clear_fightpowercoe();
  static const int kFightPowerCoeFieldNumber = 34;
  inline ::google::protobuf::uint32 fightpowercoe() const;
  inline void set_fightpowercoe(::google::protobuf::uint32 value);

  // required uint32 ScoreAdd = 35;
  inline bool has_scoreadd() const;
  inline void clear_scoreadd();
  static const int kScoreAddFieldNumber = 35;
  inline ::google::protobuf::uint32 scoreadd() const;
  inline void set_scoreadd(::google::protobuf::uint32 value);

  // required uint32 BulletVal = 36;
  inline bool has_bulletval() const;
  inline void clear_bulletval();
  static const int kBulletValFieldNumber = 36;
  inline ::google::protobuf::uint32 bulletval() const;
  inline void set_bulletval(::google::protobuf::uint32 value);

  // required uint32 BulletShowVal = 37;
  inline bool has_bulletshowval() const;
  inline void clear_bulletshowval();
  static const int kBulletShowValFieldNumber = 37;
  inline ::google::protobuf::uint32 bulletshowval() const;
  inline void set_bulletshowval(::google::protobuf::uint32 value);

  // required uint32 WeaponDegree = 38;
  inline bool has_weapondegree() const;
  inline void clear_weapondegree();
  static const int kWeaponDegreeFieldNumber = 38;
  inline ::google::protobuf::uint32 weapondegree() const;
  inline void set_weapondegree(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.WeaponCfg)
 private:
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_weaponname();
  inline void clear_has_weaponname();
  inline void set_has_atktype();
  inline void clear_has_atktype();
  inline void set_has_atk();
  inline void clear_has_atk();
  inline void set_has_atkattrtype();
  inline void clear_has_atkattrtype();
  inline void set_has_atkattrval();
  inline void clear_has_atkattrval();
  inline void set_has_penetrateval();
  inline void clear_has_penetrateval();
  inline void set_has_decmovespeed();
  inline void clear_has_decmovespeed();
  inline void set_has_expmulti();
  inline void clear_has_expmulti();
  inline void set_has_initstar();
  inline void clear_has_initstar();
  inline void set_has_maxstar();
  inline void clear_has_maxstar();
  inline void set_has_atkadd();
  inline void clear_has_atkadd();
  inline void set_has_atkattrvaladd();
  inline void clear_has_atkattrvaladd();
  inline void set_has_penetratevaladd();
  inline void clear_has_penetratevaladd();
  inline void set_has_initstep();
  inline void clear_has_initstep();
  inline void set_has_shotrange();
  inline void clear_has_shotrange();
  inline void set_has_shotspeed();
  inline void clear_has_shotspeed();
  inline void set_has_weaponsuperskill();
  inline void clear_has_weaponsuperskill();
  inline void set_has_bulletid();
  inline void clear_has_bulletid();
  inline void set_has_guesture();
  inline void clear_has_guesture();
  inline void set_has_weapondisp();
  inline void clear_has_weapondisp();
  inline void set_has_baseexp();
  inline void clear_has_baseexp();
  inline void set_has_firesound();
  inline void clear_has_firesound();
  inline void set_has_weapontype();
  inline void clear_has_weapontype();
  inline void set_has_weaponlv();
  inline void clear_has_weaponlv();
  inline void set_has_weaponicon();
  inline void clear_has_weaponicon();
  inline void set_has_weapondesc();
  inline void clear_has_weapondesc();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_weaponpic();
  inline void clear_has_weaponpic();
  inline void set_has_firesoundtype();
  inline void clear_has_firesoundtype();
  inline void set_has_fightpowercoe();
  inline void clear_has_fightpowercoe();
  inline void set_has_scoreadd();
  inline void clear_has_scoreadd();
  inline void set_has_bulletval();
  inline void clear_has_bulletval();
  inline void set_has_bulletshowval();
  inline void clear_has_bulletshowval();
  inline void set_has_weapondegree();
  inline void clear_has_weapondegree();

  ::google::protobuf::uint32 cfgid_;
  ::google::protobuf::uint32 weaponid_;
  ::std::string* weaponname_;
  ::google::protobuf::uint32 atktype_;
  ::google::protobuf::uint32 atk_;
  ::google::protobuf::uint32 atkattrtype_;
  ::google::protobuf::uint32 atkattrval_;
  ::google::protobuf::uint32 penetrateval_;
  ::google::protobuf::uint32 decmovespeed_;
  ::google::protobuf::uint32 expmulti_;
  ::google::protobuf::uint32 initstar_;
  ::google::protobuf::uint32 maxstar_;
  ::google::protobuf::uint32 atkadd_;
  ::google::protobuf::uint32 atkattrvaladd_;
  ::google::protobuf::uint32 penetratevaladd_;
  ::google::protobuf::uint32 initstep_;
  ::google::protobuf::uint32 shotrange_;
  ::google::protobuf::uint32 shotspeed_;
  ::google::protobuf::uint32 weaponsuperskill_;
  ::google::protobuf::uint32 bulletid_;
  ::google::protobuf::uint32 guesture_;
  ::google::protobuf::uint32 weapondisp_;
  ::google::protobuf::uint32 baseexp_;
  ::std::string* firesound_;
  ::google::protobuf::uint32 weapontype_;
  ::google::protobuf::uint32 weaponlv_;
  ::std::string* weaponicon_;
  ::std::string* weapondesc_;
  ::google::protobuf::uint32 hit_;
  ::google::protobuf::uint32 color_;
  ::std::string* weaponpic_;
  ::google::protobuf::uint32 firesoundtype_;
  ::google::protobuf::uint32 fightpowercoe_;
  ::google::protobuf::uint32 scoreadd_;
  ::google::protobuf::uint32 bulletval_;
  ::google::protobuf::uint32 bulletshowval_;
  ::google::protobuf::uint32 weapondegree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WeaponCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WeaponCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WeaponCfg_2eproto();
  friend void protobuf_ShutdownFile_WeaponCfg_2eproto();

  void InitAsDefaultInstance();
  static WeaponCfg* default_instance_;
};
// -------------------------------------------------------------------

class WeaponCfgSet : public ::google::protobuf::MessageLite {
 public:
  WeaponCfgSet();
  virtual ~WeaponCfgSet();

  WeaponCfgSet(const WeaponCfgSet& from);

  inline WeaponCfgSet& operator=(const WeaponCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const WeaponCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WeaponCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WeaponCfgSet* other);

  // implements Message ----------------------------------------------

  WeaponCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WeaponCfgSet& from);
  void MergeFrom(const WeaponCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.WeaponCfg weaponcfg = 1;
  inline int weaponcfg_size() const;
  inline void clear_weaponcfg();
  static const int kWeaponcfgFieldNumber = 1;
  inline const ::com::cfg::vo::WeaponCfg& weaponcfg(int index) const;
  inline ::com::cfg::vo::WeaponCfg* mutable_weaponcfg(int index);
  inline ::com::cfg::vo::WeaponCfg* add_weaponcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponCfg >&
      weaponcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponCfg >*
      mutable_weaponcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.WeaponCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponCfg > weaponcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WeaponCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WeaponCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WeaponCfg_2eproto();
  friend void protobuf_ShutdownFile_WeaponCfg_2eproto();

  void InitAsDefaultInstance();
  static WeaponCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// WeaponCfg

// required uint32 CfgID = 1;
inline bool WeaponCfg::has_cfgid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeaponCfg::set_has_cfgid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeaponCfg::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeaponCfg::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 WeaponCfg::cfgid() const {
  return cfgid_;
}
inline void WeaponCfg::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// required uint32 WeaponID = 2;
inline bool WeaponCfg::has_weaponid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeaponCfg::set_has_weaponid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeaponCfg::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeaponCfg::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 WeaponCfg::weaponid() const {
  return weaponid_;
}
inline void WeaponCfg::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// required string WeaponName = 4;
inline bool WeaponCfg::has_weaponname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeaponCfg::set_has_weaponname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeaponCfg::clear_has_weaponname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeaponCfg::clear_weaponname() {
  if (weaponname_ != &::google::protobuf::internal::kEmptyString) {
    weaponname_->clear();
  }
  clear_has_weaponname();
}
inline const ::std::string& WeaponCfg::weaponname() const {
  return *weaponname_;
}
inline void WeaponCfg::set_weaponname(const ::std::string& value) {
  set_has_weaponname();
  if (weaponname_ == &::google::protobuf::internal::kEmptyString) {
    weaponname_ = new ::std::string;
  }
  weaponname_->assign(value);
}
inline void WeaponCfg::set_weaponname(const char* value) {
  set_has_weaponname();
  if (weaponname_ == &::google::protobuf::internal::kEmptyString) {
    weaponname_ = new ::std::string;
  }
  weaponname_->assign(value);
}
inline void WeaponCfg::set_weaponname(const char* value, size_t size) {
  set_has_weaponname();
  if (weaponname_ == &::google::protobuf::internal::kEmptyString) {
    weaponname_ = new ::std::string;
  }
  weaponname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponCfg::mutable_weaponname() {
  set_has_weaponname();
  if (weaponname_ == &::google::protobuf::internal::kEmptyString) {
    weaponname_ = new ::std::string;
  }
  return weaponname_;
}
inline ::std::string* WeaponCfg::release_weaponname() {
  clear_has_weaponname();
  if (weaponname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weaponname_;
    weaponname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponCfg::set_allocated_weaponname(::std::string* weaponname) {
  if (weaponname_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponname_;
  }
  if (weaponname) {
    set_has_weaponname();
    weaponname_ = weaponname;
  } else {
    clear_has_weaponname();
    weaponname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 AtkType = 5;
inline bool WeaponCfg::has_atktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeaponCfg::set_has_atktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeaponCfg::clear_has_atktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeaponCfg::clear_atktype() {
  atktype_ = 0u;
  clear_has_atktype();
}
inline ::google::protobuf::uint32 WeaponCfg::atktype() const {
  return atktype_;
}
inline void WeaponCfg::set_atktype(::google::protobuf::uint32 value) {
  set_has_atktype();
  atktype_ = value;
}

// required uint32 ATK = 6;
inline bool WeaponCfg::has_atk() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeaponCfg::set_has_atk() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeaponCfg::clear_has_atk() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeaponCfg::clear_atk() {
  atk_ = 0u;
  clear_has_atk();
}
inline ::google::protobuf::uint32 WeaponCfg::atk() const {
  return atk_;
}
inline void WeaponCfg::set_atk(::google::protobuf::uint32 value) {
  set_has_atk();
  atk_ = value;
}

// required uint32 AtkAttrType = 7;
inline bool WeaponCfg::has_atkattrtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeaponCfg::set_has_atkattrtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeaponCfg::clear_has_atkattrtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeaponCfg::clear_atkattrtype() {
  atkattrtype_ = 0u;
  clear_has_atkattrtype();
}
inline ::google::protobuf::uint32 WeaponCfg::atkattrtype() const {
  return atkattrtype_;
}
inline void WeaponCfg::set_atkattrtype(::google::protobuf::uint32 value) {
  set_has_atkattrtype();
  atkattrtype_ = value;
}

// required uint32 AtkAttrVal = 8;
inline bool WeaponCfg::has_atkattrval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeaponCfg::set_has_atkattrval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeaponCfg::clear_has_atkattrval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeaponCfg::clear_atkattrval() {
  atkattrval_ = 0u;
  clear_has_atkattrval();
}
inline ::google::protobuf::uint32 WeaponCfg::atkattrval() const {
  return atkattrval_;
}
inline void WeaponCfg::set_atkattrval(::google::protobuf::uint32 value) {
  set_has_atkattrval();
  atkattrval_ = value;
}

// required uint32 PenetrateVal = 9;
inline bool WeaponCfg::has_penetrateval() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeaponCfg::set_has_penetrateval() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeaponCfg::clear_has_penetrateval() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeaponCfg::clear_penetrateval() {
  penetrateval_ = 0u;
  clear_has_penetrateval();
}
inline ::google::protobuf::uint32 WeaponCfg::penetrateval() const {
  return penetrateval_;
}
inline void WeaponCfg::set_penetrateval(::google::protobuf::uint32 value) {
  set_has_penetrateval();
  penetrateval_ = value;
}

// required uint32 DecMoveSpeed = 10;
inline bool WeaponCfg::has_decmovespeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeaponCfg::set_has_decmovespeed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeaponCfg::clear_has_decmovespeed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeaponCfg::clear_decmovespeed() {
  decmovespeed_ = 0u;
  clear_has_decmovespeed();
}
inline ::google::protobuf::uint32 WeaponCfg::decmovespeed() const {
  return decmovespeed_;
}
inline void WeaponCfg::set_decmovespeed(::google::protobuf::uint32 value) {
  set_has_decmovespeed();
  decmovespeed_ = value;
}

// required uint32 ExpMulti = 11;
inline bool WeaponCfg::has_expmulti() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WeaponCfg::set_has_expmulti() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WeaponCfg::clear_has_expmulti() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WeaponCfg::clear_expmulti() {
  expmulti_ = 0u;
  clear_has_expmulti();
}
inline ::google::protobuf::uint32 WeaponCfg::expmulti() const {
  return expmulti_;
}
inline void WeaponCfg::set_expmulti(::google::protobuf::uint32 value) {
  set_has_expmulti();
  expmulti_ = value;
}

// required uint32 InitStar = 12;
inline bool WeaponCfg::has_initstar() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WeaponCfg::set_has_initstar() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WeaponCfg::clear_has_initstar() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WeaponCfg::clear_initstar() {
  initstar_ = 0u;
  clear_has_initstar();
}
inline ::google::protobuf::uint32 WeaponCfg::initstar() const {
  return initstar_;
}
inline void WeaponCfg::set_initstar(::google::protobuf::uint32 value) {
  set_has_initstar();
  initstar_ = value;
}

// required uint32 MaxStar = 13;
inline bool WeaponCfg::has_maxstar() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WeaponCfg::set_has_maxstar() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WeaponCfg::clear_has_maxstar() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WeaponCfg::clear_maxstar() {
  maxstar_ = 0u;
  clear_has_maxstar();
}
inline ::google::protobuf::uint32 WeaponCfg::maxstar() const {
  return maxstar_;
}
inline void WeaponCfg::set_maxstar(::google::protobuf::uint32 value) {
  set_has_maxstar();
  maxstar_ = value;
}

// required uint32 ATKAdd = 14;
inline bool WeaponCfg::has_atkadd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WeaponCfg::set_has_atkadd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WeaponCfg::clear_has_atkadd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WeaponCfg::clear_atkadd() {
  atkadd_ = 0u;
  clear_has_atkadd();
}
inline ::google::protobuf::uint32 WeaponCfg::atkadd() const {
  return atkadd_;
}
inline void WeaponCfg::set_atkadd(::google::protobuf::uint32 value) {
  set_has_atkadd();
  atkadd_ = value;
}

// required uint32 AtkAttrValAdd = 15;
inline bool WeaponCfg::has_atkattrvaladd() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void WeaponCfg::set_has_atkattrvaladd() {
  _has_bits_[0] |= 0x00002000u;
}
inline void WeaponCfg::clear_has_atkattrvaladd() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void WeaponCfg::clear_atkattrvaladd() {
  atkattrvaladd_ = 0u;
  clear_has_atkattrvaladd();
}
inline ::google::protobuf::uint32 WeaponCfg::atkattrvaladd() const {
  return atkattrvaladd_;
}
inline void WeaponCfg::set_atkattrvaladd(::google::protobuf::uint32 value) {
  set_has_atkattrvaladd();
  atkattrvaladd_ = value;
}

// required uint32 PenetrateValAdd = 16;
inline bool WeaponCfg::has_penetratevaladd() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void WeaponCfg::set_has_penetratevaladd() {
  _has_bits_[0] |= 0x00004000u;
}
inline void WeaponCfg::clear_has_penetratevaladd() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void WeaponCfg::clear_penetratevaladd() {
  penetratevaladd_ = 0u;
  clear_has_penetratevaladd();
}
inline ::google::protobuf::uint32 WeaponCfg::penetratevaladd() const {
  return penetratevaladd_;
}
inline void WeaponCfg::set_penetratevaladd(::google::protobuf::uint32 value) {
  set_has_penetratevaladd();
  penetratevaladd_ = value;
}

// required uint32 InitStep = 17;
inline bool WeaponCfg::has_initstep() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void WeaponCfg::set_has_initstep() {
  _has_bits_[0] |= 0x00008000u;
}
inline void WeaponCfg::clear_has_initstep() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void WeaponCfg::clear_initstep() {
  initstep_ = 0u;
  clear_has_initstep();
}
inline ::google::protobuf::uint32 WeaponCfg::initstep() const {
  return initstep_;
}
inline void WeaponCfg::set_initstep(::google::protobuf::uint32 value) {
  set_has_initstep();
  initstep_ = value;
}

// required uint32 ShotRange = 18;
inline bool WeaponCfg::has_shotrange() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void WeaponCfg::set_has_shotrange() {
  _has_bits_[0] |= 0x00010000u;
}
inline void WeaponCfg::clear_has_shotrange() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void WeaponCfg::clear_shotrange() {
  shotrange_ = 0u;
  clear_has_shotrange();
}
inline ::google::protobuf::uint32 WeaponCfg::shotrange() const {
  return shotrange_;
}
inline void WeaponCfg::set_shotrange(::google::protobuf::uint32 value) {
  set_has_shotrange();
  shotrange_ = value;
}

// required uint32 ShotSpeed = 19;
inline bool WeaponCfg::has_shotspeed() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void WeaponCfg::set_has_shotspeed() {
  _has_bits_[0] |= 0x00020000u;
}
inline void WeaponCfg::clear_has_shotspeed() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void WeaponCfg::clear_shotspeed() {
  shotspeed_ = 0u;
  clear_has_shotspeed();
}
inline ::google::protobuf::uint32 WeaponCfg::shotspeed() const {
  return shotspeed_;
}
inline void WeaponCfg::set_shotspeed(::google::protobuf::uint32 value) {
  set_has_shotspeed();
  shotspeed_ = value;
}

// required uint32 WeaponSuperSkill = 20;
inline bool WeaponCfg::has_weaponsuperskill() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void WeaponCfg::set_has_weaponsuperskill() {
  _has_bits_[0] |= 0x00040000u;
}
inline void WeaponCfg::clear_has_weaponsuperskill() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void WeaponCfg::clear_weaponsuperskill() {
  weaponsuperskill_ = 0u;
  clear_has_weaponsuperskill();
}
inline ::google::protobuf::uint32 WeaponCfg::weaponsuperskill() const {
  return weaponsuperskill_;
}
inline void WeaponCfg::set_weaponsuperskill(::google::protobuf::uint32 value) {
  set_has_weaponsuperskill();
  weaponsuperskill_ = value;
}

// required uint32 BulletID = 21;
inline bool WeaponCfg::has_bulletid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void WeaponCfg::set_has_bulletid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void WeaponCfg::clear_has_bulletid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void WeaponCfg::clear_bulletid() {
  bulletid_ = 0u;
  clear_has_bulletid();
}
inline ::google::protobuf::uint32 WeaponCfg::bulletid() const {
  return bulletid_;
}
inline void WeaponCfg::set_bulletid(::google::protobuf::uint32 value) {
  set_has_bulletid();
  bulletid_ = value;
}

// required uint32 Guesture = 22;
inline bool WeaponCfg::has_guesture() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void WeaponCfg::set_has_guesture() {
  _has_bits_[0] |= 0x00100000u;
}
inline void WeaponCfg::clear_has_guesture() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void WeaponCfg::clear_guesture() {
  guesture_ = 0u;
  clear_has_guesture();
}
inline ::google::protobuf::uint32 WeaponCfg::guesture() const {
  return guesture_;
}
inline void WeaponCfg::set_guesture(::google::protobuf::uint32 value) {
  set_has_guesture();
  guesture_ = value;
}

// required uint32 WeaponDisp = 23;
inline bool WeaponCfg::has_weapondisp() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void WeaponCfg::set_has_weapondisp() {
  _has_bits_[0] |= 0x00200000u;
}
inline void WeaponCfg::clear_has_weapondisp() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void WeaponCfg::clear_weapondisp() {
  weapondisp_ = 0u;
  clear_has_weapondisp();
}
inline ::google::protobuf::uint32 WeaponCfg::weapondisp() const {
  return weapondisp_;
}
inline void WeaponCfg::set_weapondisp(::google::protobuf::uint32 value) {
  set_has_weapondisp();
  weapondisp_ = value;
}

// required uint32 BaseExp = 24;
inline bool WeaponCfg::has_baseexp() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void WeaponCfg::set_has_baseexp() {
  _has_bits_[0] |= 0x00400000u;
}
inline void WeaponCfg::clear_has_baseexp() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void WeaponCfg::clear_baseexp() {
  baseexp_ = 0u;
  clear_has_baseexp();
}
inline ::google::protobuf::uint32 WeaponCfg::baseexp() const {
  return baseexp_;
}
inline void WeaponCfg::set_baseexp(::google::protobuf::uint32 value) {
  set_has_baseexp();
  baseexp_ = value;
}

// required string FireSound = 25;
inline bool WeaponCfg::has_firesound() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void WeaponCfg::set_has_firesound() {
  _has_bits_[0] |= 0x00800000u;
}
inline void WeaponCfg::clear_has_firesound() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void WeaponCfg::clear_firesound() {
  if (firesound_ != &::google::protobuf::internal::kEmptyString) {
    firesound_->clear();
  }
  clear_has_firesound();
}
inline const ::std::string& WeaponCfg::firesound() const {
  return *firesound_;
}
inline void WeaponCfg::set_firesound(const ::std::string& value) {
  set_has_firesound();
  if (firesound_ == &::google::protobuf::internal::kEmptyString) {
    firesound_ = new ::std::string;
  }
  firesound_->assign(value);
}
inline void WeaponCfg::set_firesound(const char* value) {
  set_has_firesound();
  if (firesound_ == &::google::protobuf::internal::kEmptyString) {
    firesound_ = new ::std::string;
  }
  firesound_->assign(value);
}
inline void WeaponCfg::set_firesound(const char* value, size_t size) {
  set_has_firesound();
  if (firesound_ == &::google::protobuf::internal::kEmptyString) {
    firesound_ = new ::std::string;
  }
  firesound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponCfg::mutable_firesound() {
  set_has_firesound();
  if (firesound_ == &::google::protobuf::internal::kEmptyString) {
    firesound_ = new ::std::string;
  }
  return firesound_;
}
inline ::std::string* WeaponCfg::release_firesound() {
  clear_has_firesound();
  if (firesound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firesound_;
    firesound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponCfg::set_allocated_firesound(::std::string* firesound) {
  if (firesound_ != &::google::protobuf::internal::kEmptyString) {
    delete firesound_;
  }
  if (firesound) {
    set_has_firesound();
    firesound_ = firesound;
  } else {
    clear_has_firesound();
    firesound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 WeaponType = 26;
inline bool WeaponCfg::has_weapontype() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void WeaponCfg::set_has_weapontype() {
  _has_bits_[0] |= 0x01000000u;
}
inline void WeaponCfg::clear_has_weapontype() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void WeaponCfg::clear_weapontype() {
  weapontype_ = 0u;
  clear_has_weapontype();
}
inline ::google::protobuf::uint32 WeaponCfg::weapontype() const {
  return weapontype_;
}
inline void WeaponCfg::set_weapontype(::google::protobuf::uint32 value) {
  set_has_weapontype();
  weapontype_ = value;
}

// required uint32 WeaponLv = 27;
inline bool WeaponCfg::has_weaponlv() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void WeaponCfg::set_has_weaponlv() {
  _has_bits_[0] |= 0x02000000u;
}
inline void WeaponCfg::clear_has_weaponlv() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void WeaponCfg::clear_weaponlv() {
  weaponlv_ = 0u;
  clear_has_weaponlv();
}
inline ::google::protobuf::uint32 WeaponCfg::weaponlv() const {
  return weaponlv_;
}
inline void WeaponCfg::set_weaponlv(::google::protobuf::uint32 value) {
  set_has_weaponlv();
  weaponlv_ = value;
}

// required string WeaponIcon = 28;
inline bool WeaponCfg::has_weaponicon() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void WeaponCfg::set_has_weaponicon() {
  _has_bits_[0] |= 0x04000000u;
}
inline void WeaponCfg::clear_has_weaponicon() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void WeaponCfg::clear_weaponicon() {
  if (weaponicon_ != &::google::protobuf::internal::kEmptyString) {
    weaponicon_->clear();
  }
  clear_has_weaponicon();
}
inline const ::std::string& WeaponCfg::weaponicon() const {
  return *weaponicon_;
}
inline void WeaponCfg::set_weaponicon(const ::std::string& value) {
  set_has_weaponicon();
  if (weaponicon_ == &::google::protobuf::internal::kEmptyString) {
    weaponicon_ = new ::std::string;
  }
  weaponicon_->assign(value);
}
inline void WeaponCfg::set_weaponicon(const char* value) {
  set_has_weaponicon();
  if (weaponicon_ == &::google::protobuf::internal::kEmptyString) {
    weaponicon_ = new ::std::string;
  }
  weaponicon_->assign(value);
}
inline void WeaponCfg::set_weaponicon(const char* value, size_t size) {
  set_has_weaponicon();
  if (weaponicon_ == &::google::protobuf::internal::kEmptyString) {
    weaponicon_ = new ::std::string;
  }
  weaponicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponCfg::mutable_weaponicon() {
  set_has_weaponicon();
  if (weaponicon_ == &::google::protobuf::internal::kEmptyString) {
    weaponicon_ = new ::std::string;
  }
  return weaponicon_;
}
inline ::std::string* WeaponCfg::release_weaponicon() {
  clear_has_weaponicon();
  if (weaponicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weaponicon_;
    weaponicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponCfg::set_allocated_weaponicon(::std::string* weaponicon) {
  if (weaponicon_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponicon_;
  }
  if (weaponicon) {
    set_has_weaponicon();
    weaponicon_ = weaponicon;
  } else {
    clear_has_weaponicon();
    weaponicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string WeaponDesc = 29;
inline bool WeaponCfg::has_weapondesc() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void WeaponCfg::set_has_weapondesc() {
  _has_bits_[0] |= 0x08000000u;
}
inline void WeaponCfg::clear_has_weapondesc() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void WeaponCfg::clear_weapondesc() {
  if (weapondesc_ != &::google::protobuf::internal::kEmptyString) {
    weapondesc_->clear();
  }
  clear_has_weapondesc();
}
inline const ::std::string& WeaponCfg::weapondesc() const {
  return *weapondesc_;
}
inline void WeaponCfg::set_weapondesc(const ::std::string& value) {
  set_has_weapondesc();
  if (weapondesc_ == &::google::protobuf::internal::kEmptyString) {
    weapondesc_ = new ::std::string;
  }
  weapondesc_->assign(value);
}
inline void WeaponCfg::set_weapondesc(const char* value) {
  set_has_weapondesc();
  if (weapondesc_ == &::google::protobuf::internal::kEmptyString) {
    weapondesc_ = new ::std::string;
  }
  weapondesc_->assign(value);
}
inline void WeaponCfg::set_weapondesc(const char* value, size_t size) {
  set_has_weapondesc();
  if (weapondesc_ == &::google::protobuf::internal::kEmptyString) {
    weapondesc_ = new ::std::string;
  }
  weapondesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponCfg::mutable_weapondesc() {
  set_has_weapondesc();
  if (weapondesc_ == &::google::protobuf::internal::kEmptyString) {
    weapondesc_ = new ::std::string;
  }
  return weapondesc_;
}
inline ::std::string* WeaponCfg::release_weapondesc() {
  clear_has_weapondesc();
  if (weapondesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weapondesc_;
    weapondesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponCfg::set_allocated_weapondesc(::std::string* weapondesc) {
  if (weapondesc_ != &::google::protobuf::internal::kEmptyString) {
    delete weapondesc_;
  }
  if (weapondesc) {
    set_has_weapondesc();
    weapondesc_ = weapondesc;
  } else {
    clear_has_weapondesc();
    weapondesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 Hit = 30;
inline bool WeaponCfg::has_hit() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void WeaponCfg::set_has_hit() {
  _has_bits_[0] |= 0x10000000u;
}
inline void WeaponCfg::clear_has_hit() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void WeaponCfg::clear_hit() {
  hit_ = 0u;
  clear_has_hit();
}
inline ::google::protobuf::uint32 WeaponCfg::hit() const {
  return hit_;
}
inline void WeaponCfg::set_hit(::google::protobuf::uint32 value) {
  set_has_hit();
  hit_ = value;
}

// required uint32 Color = 31;
inline bool WeaponCfg::has_color() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void WeaponCfg::set_has_color() {
  _has_bits_[0] |= 0x20000000u;
}
inline void WeaponCfg::clear_has_color() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void WeaponCfg::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 WeaponCfg::color() const {
  return color_;
}
inline void WeaponCfg::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// required string WeaponPic = 32;
inline bool WeaponCfg::has_weaponpic() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void WeaponCfg::set_has_weaponpic() {
  _has_bits_[0] |= 0x40000000u;
}
inline void WeaponCfg::clear_has_weaponpic() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void WeaponCfg::clear_weaponpic() {
  if (weaponpic_ != &::google::protobuf::internal::kEmptyString) {
    weaponpic_->clear();
  }
  clear_has_weaponpic();
}
inline const ::std::string& WeaponCfg::weaponpic() const {
  return *weaponpic_;
}
inline void WeaponCfg::set_weaponpic(const ::std::string& value) {
  set_has_weaponpic();
  if (weaponpic_ == &::google::protobuf::internal::kEmptyString) {
    weaponpic_ = new ::std::string;
  }
  weaponpic_->assign(value);
}
inline void WeaponCfg::set_weaponpic(const char* value) {
  set_has_weaponpic();
  if (weaponpic_ == &::google::protobuf::internal::kEmptyString) {
    weaponpic_ = new ::std::string;
  }
  weaponpic_->assign(value);
}
inline void WeaponCfg::set_weaponpic(const char* value, size_t size) {
  set_has_weaponpic();
  if (weaponpic_ == &::google::protobuf::internal::kEmptyString) {
    weaponpic_ = new ::std::string;
  }
  weaponpic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponCfg::mutable_weaponpic() {
  set_has_weaponpic();
  if (weaponpic_ == &::google::protobuf::internal::kEmptyString) {
    weaponpic_ = new ::std::string;
  }
  return weaponpic_;
}
inline ::std::string* WeaponCfg::release_weaponpic() {
  clear_has_weaponpic();
  if (weaponpic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weaponpic_;
    weaponpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponCfg::set_allocated_weaponpic(::std::string* weaponpic) {
  if (weaponpic_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponpic_;
  }
  if (weaponpic) {
    set_has_weaponpic();
    weaponpic_ = weaponpic;
  } else {
    clear_has_weaponpic();
    weaponpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 FireSoundType = 33;
inline bool WeaponCfg::has_firesoundtype() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void WeaponCfg::set_has_firesoundtype() {
  _has_bits_[0] |= 0x80000000u;
}
inline void WeaponCfg::clear_has_firesoundtype() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void WeaponCfg::clear_firesoundtype() {
  firesoundtype_ = 0u;
  clear_has_firesoundtype();
}
inline ::google::protobuf::uint32 WeaponCfg::firesoundtype() const {
  return firesoundtype_;
}
inline void WeaponCfg::set_firesoundtype(::google::protobuf::uint32 value) {
  set_has_firesoundtype();
  firesoundtype_ = value;
}

// required uint32 FightPowerCoe = 34;
inline bool WeaponCfg::has_fightpowercoe() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void WeaponCfg::set_has_fightpowercoe() {
  _has_bits_[1] |= 0x00000001u;
}
inline void WeaponCfg::clear_has_fightpowercoe() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void WeaponCfg::clear_fightpowercoe() {
  fightpowercoe_ = 0u;
  clear_has_fightpowercoe();
}
inline ::google::protobuf::uint32 WeaponCfg::fightpowercoe() const {
  return fightpowercoe_;
}
inline void WeaponCfg::set_fightpowercoe(::google::protobuf::uint32 value) {
  set_has_fightpowercoe();
  fightpowercoe_ = value;
}

// required uint32 ScoreAdd = 35;
inline bool WeaponCfg::has_scoreadd() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void WeaponCfg::set_has_scoreadd() {
  _has_bits_[1] |= 0x00000002u;
}
inline void WeaponCfg::clear_has_scoreadd() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void WeaponCfg::clear_scoreadd() {
  scoreadd_ = 0u;
  clear_has_scoreadd();
}
inline ::google::protobuf::uint32 WeaponCfg::scoreadd() const {
  return scoreadd_;
}
inline void WeaponCfg::set_scoreadd(::google::protobuf::uint32 value) {
  set_has_scoreadd();
  scoreadd_ = value;
}

// required uint32 BulletVal = 36;
inline bool WeaponCfg::has_bulletval() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void WeaponCfg::set_has_bulletval() {
  _has_bits_[1] |= 0x00000004u;
}
inline void WeaponCfg::clear_has_bulletval() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void WeaponCfg::clear_bulletval() {
  bulletval_ = 0u;
  clear_has_bulletval();
}
inline ::google::protobuf::uint32 WeaponCfg::bulletval() const {
  return bulletval_;
}
inline void WeaponCfg::set_bulletval(::google::protobuf::uint32 value) {
  set_has_bulletval();
  bulletval_ = value;
}

// required uint32 BulletShowVal = 37;
inline bool WeaponCfg::has_bulletshowval() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void WeaponCfg::set_has_bulletshowval() {
  _has_bits_[1] |= 0x00000008u;
}
inline void WeaponCfg::clear_has_bulletshowval() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void WeaponCfg::clear_bulletshowval() {
  bulletshowval_ = 0u;
  clear_has_bulletshowval();
}
inline ::google::protobuf::uint32 WeaponCfg::bulletshowval() const {
  return bulletshowval_;
}
inline void WeaponCfg::set_bulletshowval(::google::protobuf::uint32 value) {
  set_has_bulletshowval();
  bulletshowval_ = value;
}

// required uint32 WeaponDegree = 38;
inline bool WeaponCfg::has_weapondegree() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void WeaponCfg::set_has_weapondegree() {
  _has_bits_[1] |= 0x00000010u;
}
inline void WeaponCfg::clear_has_weapondegree() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void WeaponCfg::clear_weapondegree() {
  weapondegree_ = 0u;
  clear_has_weapondegree();
}
inline ::google::protobuf::uint32 WeaponCfg::weapondegree() const {
  return weapondegree_;
}
inline void WeaponCfg::set_weapondegree(::google::protobuf::uint32 value) {
  set_has_weapondegree();
  weapondegree_ = value;
}

// -------------------------------------------------------------------

// WeaponCfgSet

// repeated .com.cfg.vo.WeaponCfg weaponcfg = 1;
inline int WeaponCfgSet::weaponcfg_size() const {
  return weaponcfg_.size();
}
inline void WeaponCfgSet::clear_weaponcfg() {
  weaponcfg_.Clear();
}
inline const ::com::cfg::vo::WeaponCfg& WeaponCfgSet::weaponcfg(int index) const {
  return weaponcfg_.Get(index);
}
inline ::com::cfg::vo::WeaponCfg* WeaponCfgSet::mutable_weaponcfg(int index) {
  return weaponcfg_.Mutable(index);
}
inline ::com::cfg::vo::WeaponCfg* WeaponCfgSet::add_weaponcfg() {
  return weaponcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponCfg >&
WeaponCfgSet::weaponcfg() const {
  return weaponcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponCfg >*
WeaponCfgSet::mutable_weaponcfg() {
  return &weaponcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeaponCfg_2eproto__INCLUDED
