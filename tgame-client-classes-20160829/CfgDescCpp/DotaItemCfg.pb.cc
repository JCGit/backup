// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DotaItemCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DotaItemCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DotaItemCfg_2eproto() {
  delete DotaItemComposeNeed::default_instance_;
  delete DotaItemCfg::default_instance_;
  delete DotaItemCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DotaItemCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DotaItemCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DotaItemComposeNeed::default_instance_ = new DotaItemComposeNeed();
  DotaItemCfg::default_instance_ = new DotaItemCfg();
  DotaItemCfgSet::default_instance_ = new DotaItemCfgSet();
  DotaItemComposeNeed::default_instance_->InitAsDefaultInstance();
  DotaItemCfg::default_instance_->InitAsDefaultInstance();
  DotaItemCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DotaItemCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DotaItemCfg_2eproto_once_);
void protobuf_AddDesc_DotaItemCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DotaItemCfg_2eproto_once_,
                 &protobuf_AddDesc_DotaItemCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DotaItemCfg_2eproto {
  StaticDescriptorInitializer_DotaItemCfg_2eproto() {
    protobuf_AddDesc_DotaItemCfg_2eproto();
  }
} static_descriptor_initializer_DotaItemCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DotaItemComposeNeed::kDotaItemIDFieldNumber;
const int DotaItemComposeNeed::kDotaItemCntFieldNumber;
#endif  // !_MSC_VER

DotaItemComposeNeed::DotaItemComposeNeed()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DotaItemComposeNeed::InitAsDefaultInstance() {
}

DotaItemComposeNeed::DotaItemComposeNeed(const DotaItemComposeNeed& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DotaItemComposeNeed::SharedCtor() {
  _cached_size_ = 0;
  dotaitemid_ = 0u;
  dotaitemcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaItemComposeNeed::~DotaItemComposeNeed() {
  SharedDtor();
}

void DotaItemComposeNeed::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DotaItemComposeNeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DotaItemComposeNeed& DotaItemComposeNeed::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DotaItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DotaItemCfg_2eproto();
#endif
  return *default_instance_;
}

DotaItemComposeNeed* DotaItemComposeNeed::default_instance_ = NULL;

DotaItemComposeNeed* DotaItemComposeNeed::New() const {
  return new DotaItemComposeNeed;
}

void DotaItemComposeNeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dotaitemid_ = 0u;
    dotaitemcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DotaItemComposeNeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DotaItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotaitemid_)));
          set_has_dotaitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_DotaItemCnt;
        break;
      }

      // required uint32 DotaItemCnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DotaItemCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotaitemcnt_)));
          set_has_dotaitemcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaItemComposeNeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DotaItemID = 1;
  if (has_dotaitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dotaitemid(), output);
  }

  // required uint32 DotaItemCnt = 2;
  if (has_dotaitemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dotaitemcnt(), output);
  }

}

int DotaItemComposeNeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DotaItemID = 1;
    if (has_dotaitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dotaitemid());
    }

    // required uint32 DotaItemCnt = 2;
    if (has_dotaitemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dotaitemcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaItemComposeNeed::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DotaItemComposeNeed*>(&from));
}

void DotaItemComposeNeed::MergeFrom(const DotaItemComposeNeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dotaitemid()) {
      set_dotaitemid(from.dotaitemid());
    }
    if (from.has_dotaitemcnt()) {
      set_dotaitemcnt(from.dotaitemcnt());
    }
  }
}

void DotaItemComposeNeed::CopyFrom(const DotaItemComposeNeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaItemComposeNeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DotaItemComposeNeed::Swap(DotaItemComposeNeed* other) {
  if (other != this) {
    std::swap(dotaitemid_, other->dotaitemid_);
    std::swap(dotaitemcnt_, other->dotaitemcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DotaItemComposeNeed::GetTypeName() const {
  return "com.cfg.vo.DotaItemComposeNeed";
}


// ===================================================================

#ifndef _MSC_VER
const int DotaItemCfg::kDotaItemIDFieldNumber;
const int DotaItemCfg::kDotaItemNeedsFieldNumber;
const int DotaItemCfg::kATKFieldNumber;
const int DotaItemCfg::kDEFFieldNumber;
const int DotaItemCfg::kHPFieldNumber;
const int DotaItemCfg::kHITFieldNumber;
const int DotaItemCfg::kDotaItemICONFieldNumber;
const int DotaItemCfg::kDotaItemNameFieldNumber;
const int DotaItemCfg::kDotaItemDescFieldNumber;
const int DotaItemCfg::kDotaItemColorFieldNumber;
#endif  // !_MSC_VER

DotaItemCfg::DotaItemCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DotaItemCfg::InitAsDefaultInstance() {
}

DotaItemCfg::DotaItemCfg(const DotaItemCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DotaItemCfg::SharedCtor() {
  _cached_size_ = 0;
  dotaitemid_ = 0u;
  atk_ = 0u;
  def_ = 0u;
  hp_ = 0u;
  hit_ = 0u;
  dotaitemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dotaitemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dotaitemdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dotaitemcolor_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaItemCfg::~DotaItemCfg() {
  SharedDtor();
}

void DotaItemCfg::SharedDtor() {
  if (dotaitemicon_ != &::google::protobuf::internal::kEmptyString) {
    delete dotaitemicon_;
  }
  if (dotaitemname_ != &::google::protobuf::internal::kEmptyString) {
    delete dotaitemname_;
  }
  if (dotaitemdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete dotaitemdesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DotaItemCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DotaItemCfg& DotaItemCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DotaItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DotaItemCfg_2eproto();
#endif
  return *default_instance_;
}

DotaItemCfg* DotaItemCfg::default_instance_ = NULL;

DotaItemCfg* DotaItemCfg::New() const {
  return new DotaItemCfg;
}

void DotaItemCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dotaitemid_ = 0u;
    atk_ = 0u;
    def_ = 0u;
    hp_ = 0u;
    hit_ = 0u;
    if (has_dotaitemicon()) {
      if (dotaitemicon_ != &::google::protobuf::internal::kEmptyString) {
        dotaitemicon_->clear();
      }
    }
    if (has_dotaitemname()) {
      if (dotaitemname_ != &::google::protobuf::internal::kEmptyString) {
        dotaitemname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_dotaitemdesc()) {
      if (dotaitemdesc_ != &::google::protobuf::internal::kEmptyString) {
        dotaitemdesc_->clear();
      }
    }
    dotaitemcolor_ = 0u;
  }
  dotaitemneeds_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DotaItemCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DotaItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotaitemid_)));
          set_has_dotaitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DotaItemNeeds;
        break;
      }

      // repeated .com.cfg.vo.DotaItemComposeNeed DotaItemNeeds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DotaItemNeeds:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dotaitemneeds()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DotaItemNeeds;
        if (input->ExpectTag(24)) goto parse_ATK;
        break;
      }

      // required uint32 ATK = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DEF;
        break;
      }

      // required uint32 DEF = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HP;
        break;
      }

      // required uint32 HP = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HIT;
        break;
      }

      // required uint32 HIT = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HIT:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_DotaItemICON;
        break;
      }

      // required string DotaItemICON = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DotaItemICON:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dotaitemicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_DotaItemName;
        break;
      }

      // required string DotaItemName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DotaItemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dotaitemname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_DotaItemDesc;
        break;
      }

      // required string DotaItemDesc = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DotaItemDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dotaitemdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DotaItemColor;
        break;
      }

      // required uint32 DotaItemColor = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DotaItemColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotaitemcolor_)));
          set_has_dotaitemcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaItemCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DotaItemID = 1;
  if (has_dotaitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dotaitemid(), output);
  }

  // repeated .com.cfg.vo.DotaItemComposeNeed DotaItemNeeds = 2;
  for (int i = 0; i < this->dotaitemneeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->dotaitemneeds(i), output);
  }

  // required uint32 ATK = 3;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->atk(), output);
  }

  // required uint32 DEF = 4;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def(), output);
  }

  // required uint32 HP = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->hp(), output);
  }

  // required uint32 HIT = 6;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hit(), output);
  }

  // required string DotaItemICON = 7;
  if (has_dotaitemicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->dotaitemicon(), output);
  }

  // required string DotaItemName = 8;
  if (has_dotaitemname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->dotaitemname(), output);
  }

  // required string DotaItemDesc = 9;
  if (has_dotaitemdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dotaitemdesc(), output);
  }

  // required uint32 DotaItemColor = 10;
  if (has_dotaitemcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dotaitemcolor(), output);
  }

}

int DotaItemCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DotaItemID = 1;
    if (has_dotaitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dotaitemid());
    }

    // required uint32 ATK = 3;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 DEF = 4;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }

    // required uint32 HP = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 HIT = 6;
    if (has_hit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // required string DotaItemICON = 7;
    if (has_dotaitemicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dotaitemicon());
    }

    // required string DotaItemName = 8;
    if (has_dotaitemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dotaitemname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string DotaItemDesc = 9;
    if (has_dotaitemdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dotaitemdesc());
    }

    // required uint32 DotaItemColor = 10;
    if (has_dotaitemcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dotaitemcolor());
    }

  }
  // repeated .com.cfg.vo.DotaItemComposeNeed DotaItemNeeds = 2;
  total_size += 1 * this->dotaitemneeds_size();
  for (int i = 0; i < this->dotaitemneeds_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dotaitemneeds(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaItemCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DotaItemCfg*>(&from));
}

void DotaItemCfg::MergeFrom(const DotaItemCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  dotaitemneeds_.MergeFrom(from.dotaitemneeds_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dotaitemid()) {
      set_dotaitemid(from.dotaitemid());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_dotaitemicon()) {
      set_dotaitemicon(from.dotaitemicon());
    }
    if (from.has_dotaitemname()) {
      set_dotaitemname(from.dotaitemname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dotaitemdesc()) {
      set_dotaitemdesc(from.dotaitemdesc());
    }
    if (from.has_dotaitemcolor()) {
      set_dotaitemcolor(from.dotaitemcolor());
    }
  }
}

void DotaItemCfg::CopyFrom(const DotaItemCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaItemCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003fd) != 0x000003fd) return false;

  for (int i = 0; i < dotaitemneeds_size(); i++) {
    if (!this->dotaitemneeds(i).IsInitialized()) return false;
  }
  return true;
}

void DotaItemCfg::Swap(DotaItemCfg* other) {
  if (other != this) {
    std::swap(dotaitemid_, other->dotaitemid_);
    dotaitemneeds_.Swap(&other->dotaitemneeds_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(hp_, other->hp_);
    std::swap(hit_, other->hit_);
    std::swap(dotaitemicon_, other->dotaitemicon_);
    std::swap(dotaitemname_, other->dotaitemname_);
    std::swap(dotaitemdesc_, other->dotaitemdesc_);
    std::swap(dotaitemcolor_, other->dotaitemcolor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DotaItemCfg::GetTypeName() const {
  return "com.cfg.vo.DotaItemCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DotaItemCfgSet::kDotaitemcfgFieldNumber;
#endif  // !_MSC_VER

DotaItemCfgSet::DotaItemCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DotaItemCfgSet::InitAsDefaultInstance() {
}

DotaItemCfgSet::DotaItemCfgSet(const DotaItemCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DotaItemCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DotaItemCfgSet::~DotaItemCfgSet() {
  SharedDtor();
}

void DotaItemCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DotaItemCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DotaItemCfgSet& DotaItemCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DotaItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DotaItemCfg_2eproto();
#endif
  return *default_instance_;
}

DotaItemCfgSet* DotaItemCfgSet::default_instance_ = NULL;

DotaItemCfgSet* DotaItemCfgSet::New() const {
  return new DotaItemCfgSet;
}

void DotaItemCfgSet::Clear() {
  dotaitemcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DotaItemCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DotaItemCfg dotaitemcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dotaitemcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dotaitemcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dotaitemcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DotaItemCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DotaItemCfg dotaitemcfg = 1;
  for (int i = 0; i < this->dotaitemcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dotaitemcfg(i), output);
  }

}

int DotaItemCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DotaItemCfg dotaitemcfg = 1;
  total_size += 1 * this->dotaitemcfg_size();
  for (int i = 0; i < this->dotaitemcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dotaitemcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DotaItemCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DotaItemCfgSet*>(&from));
}

void DotaItemCfgSet::MergeFrom(const DotaItemCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  dotaitemcfg_.MergeFrom(from.dotaitemcfg_);
}

void DotaItemCfgSet::CopyFrom(const DotaItemCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DotaItemCfgSet::IsInitialized() const {

  for (int i = 0; i < dotaitemcfg_size(); i++) {
    if (!this->dotaitemcfg(i).IsInitialized()) return false;
  }
  return true;
}

void DotaItemCfgSet::Swap(DotaItemCfgSet* other) {
  if (other != this) {
    dotaitemcfg_.Swap(&other->dotaitemcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DotaItemCfgSet::GetTypeName() const {
  return "com.cfg.vo.DotaItemCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
