// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EntryCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EntryCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EntryCfg_2eproto() {
  delete EntryCfg::default_instance_;
  delete EntryCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EntryCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EntryCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EntryCfg::default_instance_ = new EntryCfg();
  EntryCfgSet::default_instance_ = new EntryCfgSet();
  EntryCfg::default_instance_->InitAsDefaultInstance();
  EntryCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EntryCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EntryCfg_2eproto_once_);
void protobuf_AddDesc_EntryCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EntryCfg_2eproto_once_,
                 &protobuf_AddDesc_EntryCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EntryCfg_2eproto {
  StaticDescriptorInitializer_EntryCfg_2eproto() {
    protobuf_AddDesc_EntryCfg_2eproto();
  }
} static_descriptor_initializer_EntryCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EntryCfg::kEntryIDFieldNumber;
const int EntryCfg::kEntryNameFieldNumber;
const int EntryCfg::kEntryIconFieldNumber;
const int EntryCfg::kLockedFieldNumber;
const int EntryCfg::kNeedLevelFieldNumber;
const int EntryCfg::kChildEntryIDFieldNumber;
const int EntryCfg::kModuleIDFieldNumber;
#endif  // !_MSC_VER

EntryCfg::EntryCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntryCfg::InitAsDefaultInstance() {
}

EntryCfg::EntryCfg(const EntryCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntryCfg::SharedCtor() {
  _cached_size_ = 0;
  entryid_ = 0u;
  entryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entryicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locked_ = 0u;
  needlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryCfg::~EntryCfg() {
  SharedDtor();
}

void EntryCfg::SharedDtor() {
  if (entryname_ != &::google::protobuf::internal::kEmptyString) {
    delete entryname_;
  }
  if (entryicon_ != &::google::protobuf::internal::kEmptyString) {
    delete entryicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EntryCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntryCfg& EntryCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EntryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EntryCfg_2eproto();
#endif
  return *default_instance_;
}

EntryCfg* EntryCfg::default_instance_ = NULL;

EntryCfg* EntryCfg::New() const {
  return new EntryCfg;
}

void EntryCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entryid_ = 0u;
    if (has_entryname()) {
      if (entryname_ != &::google::protobuf::internal::kEmptyString) {
        entryname_->clear();
      }
    }
    if (has_entryicon()) {
      if (entryicon_ != &::google::protobuf::internal::kEmptyString) {
        entryicon_->clear();
      }
    }
    locked_ = 0u;
    needlevel_ = 0u;
  }
  childentryid_.Clear();
  moduleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntryCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EntryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryid_)));
          set_has_entryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_EntryName;
        break;
      }

      // required string EntryName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EntryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entryname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EntryIcon;
        break;
      }

      // required string EntryIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EntryIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entryicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Locked;
        break;
      }

      // required uint32 Locked = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_NeedLevel;
        break;
      }

      // required uint32 NeedLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needlevel_)));
          set_has_needlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ChildEntryID;
        break;
      }

      // repeated uint32 ChildEntryID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChildEntryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_childentryid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_childentryid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ChildEntryID;
        if (input->ExpectTag(56)) goto parse_ModuleID;
        break;
      }

      // repeated uint32 ModuleID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_moduleid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_moduleid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ModuleID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntryCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EntryID = 1;
  if (has_entryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entryid(), output);
  }

  // required string EntryName = 2;
  if (has_entryname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entryname(), output);
  }

  // required string EntryIcon = 3;
  if (has_entryicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->entryicon(), output);
  }

  // required uint32 Locked = 4;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->locked(), output);
  }

  // required uint32 NeedLevel = 5;
  if (has_needlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->needlevel(), output);
  }

  // repeated uint32 ChildEntryID = 6;
  for (int i = 0; i < this->childentryid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->childentryid(i), output);
  }

  // repeated uint32 ModuleID = 7;
  for (int i = 0; i < this->moduleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->moduleid(i), output);
  }

}

int EntryCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EntryID = 1;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryid());
    }

    // required string EntryName = 2;
    if (has_entryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entryname());
    }

    // required string EntryIcon = 3;
    if (has_entryicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entryicon());
    }

    // required uint32 Locked = 4;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->locked());
    }

    // required uint32 NeedLevel = 5;
    if (has_needlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needlevel());
    }

  }
  // repeated uint32 ChildEntryID = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->childentryid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->childentryid(i));
    }
    total_size += 1 * this->childentryid_size() + data_size;
  }

  // repeated uint32 ModuleID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->moduleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->moduleid(i));
    }
    total_size += 1 * this->moduleid_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntryCfg*>(&from));
}

void EntryCfg::MergeFrom(const EntryCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  childentryid_.MergeFrom(from.childentryid_);
  moduleid_.MergeFrom(from.moduleid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entryid()) {
      set_entryid(from.entryid());
    }
    if (from.has_entryname()) {
      set_entryname(from.entryname());
    }
    if (from.has_entryicon()) {
      set_entryicon(from.entryicon());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_needlevel()) {
      set_needlevel(from.needlevel());
    }
  }
}

void EntryCfg::CopyFrom(const EntryCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void EntryCfg::Swap(EntryCfg* other) {
  if (other != this) {
    std::swap(entryid_, other->entryid_);
    std::swap(entryname_, other->entryname_);
    std::swap(entryicon_, other->entryicon_);
    std::swap(locked_, other->locked_);
    std::swap(needlevel_, other->needlevel_);
    childentryid_.Swap(&other->childentryid_);
    moduleid_.Swap(&other->moduleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntryCfg::GetTypeName() const {
  return "com.cfg.vo.EntryCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EntryCfgSet::kEntrycfgFieldNumber;
#endif  // !_MSC_VER

EntryCfgSet::EntryCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EntryCfgSet::InitAsDefaultInstance() {
}

EntryCfgSet::EntryCfgSet(const EntryCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EntryCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EntryCfgSet::~EntryCfgSet() {
  SharedDtor();
}

void EntryCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EntryCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EntryCfgSet& EntryCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EntryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EntryCfg_2eproto();
#endif
  return *default_instance_;
}

EntryCfgSet* EntryCfgSet::default_instance_ = NULL;

EntryCfgSet* EntryCfgSet::New() const {
  return new EntryCfgSet;
}

void EntryCfgSet::Clear() {
  entrycfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EntryCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EntryCfg entrycfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrycfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrycfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrycfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EntryCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EntryCfg entrycfg = 1;
  for (int i = 0; i < this->entrycfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->entrycfg(i), output);
  }

}

int EntryCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EntryCfg entrycfg = 1;
  total_size += 1 * this->entrycfg_size();
  for (int i = 0; i < this->entrycfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrycfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EntryCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EntryCfgSet*>(&from));
}

void EntryCfgSet::MergeFrom(const EntryCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrycfg_.MergeFrom(from.entrycfg_);
}

void EntryCfgSet::CopyFrom(const EntryCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryCfgSet::IsInitialized() const {

  for (int i = 0; i < entrycfg_size(); i++) {
    if (!this->entrycfg(i).IsInitialized()) return false;
  }
  return true;
}

void EntryCfgSet::Swap(EntryCfgSet* other) {
  if (other != this) {
    entrycfg_.Swap(&other->entrycfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EntryCfgSet::GetTypeName() const {
  return "com.cfg.vo.EntryCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
