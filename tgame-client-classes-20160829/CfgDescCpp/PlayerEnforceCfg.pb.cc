// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayerEnforceCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PlayerEnforceCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_PlayerEnforceCfg_2eproto() {
  delete PlayerEnforceCfg::default_instance_;
  delete PlayerEnforceCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PlayerEnforceCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PlayerEnforceCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PlayerEnforceCfg::default_instance_ = new PlayerEnforceCfg();
  PlayerEnforceCfgSet::default_instance_ = new PlayerEnforceCfgSet();
  PlayerEnforceCfg::default_instance_->InitAsDefaultInstance();
  PlayerEnforceCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PlayerEnforceCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PlayerEnforceCfg_2eproto_once_);
void protobuf_AddDesc_PlayerEnforceCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PlayerEnforceCfg_2eproto_once_,
                 &protobuf_AddDesc_PlayerEnforceCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PlayerEnforceCfg_2eproto {
  StaticDescriptorInitializer_PlayerEnforceCfg_2eproto() {
    protobuf_AddDesc_PlayerEnforceCfg_2eproto();
  }
} static_descriptor_initializer_PlayerEnforceCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PlayerEnforceCfg::kLevelFieldNumber;
const int PlayerEnforceCfg::kEnforceTotalMaxFieldNumber;
const int PlayerEnforceCfg::kRegularCostFieldNumber;
const int PlayerEnforceCfg::kRegularSingleTotalMaxFieldNumber;
const int PlayerEnforceCfg::kRegularSumBelowSingleMaxFieldNumber;
const int PlayerEnforceCfg::kRegularSumUpSingleMaxFieldNumber;
const int PlayerEnforceCfg::kRegularSingleMaxUpMaxFieldNumber;
const int PlayerEnforceCfg::kAdvancedCostFieldNumber;
const int PlayerEnforceCfg::kAdvancedSingleTotalMaxFieldNumber;
const int PlayerEnforceCfg::kAdvancedSumBelowSingleMaxFieldNumber;
const int PlayerEnforceCfg::kAdvanceSumUpSingleMaxFieldNumber;
const int PlayerEnforceCfg::kAdvancedSignleMaxUpMaxFieldNumber;
const int PlayerEnforceCfg::kMasterCostFieldNumber;
const int PlayerEnforceCfg::kMasterSingleTotalMaxFieldNumber;
const int PlayerEnforceCfg::kMasterSumBelowSingleMaxFieldNumber;
const int PlayerEnforceCfg::kMasterSumUpSingleMaxFieldNumber;
const int PlayerEnforceCfg::kMasterSingleMaxUpMaxFieldNumber;
const int PlayerEnforceCfg::kSuperCostFieldNumber;
const int PlayerEnforceCfg::kSuperAddFieldNumber;
const int PlayerEnforceCfg::kHPAddFieldNumber;
const int PlayerEnforceCfg::kAtkAddFieldNumber;
const int PlayerEnforceCfg::kDefAddFieldNumber;
#endif  // !_MSC_VER

PlayerEnforceCfg::PlayerEnforceCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlayerEnforceCfg::InitAsDefaultInstance() {
}

PlayerEnforceCfg::PlayerEnforceCfg(const PlayerEnforceCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnforceCfg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  enforcetotalmax_ = 0;
  regularcost_ = 0u;
  regularsingletotalmax_ = 0u;
  regularsumbelowsinglemax_ = 0u;
  regularsumupsinglemax_ = 0;
  regularsinglemaxupmax_ = 0;
  advancedcost_ = 0u;
  advancedsingletotalmax_ = 0u;
  advancedsumbelowsinglemax_ = 0u;
  advancesumupsinglemax_ = 0;
  advancedsignlemaxupmax_ = 0;
  mastercost_ = 0u;
  mastersingletotalmax_ = 0u;
  mastersumbelowsinglemax_ = 0u;
  mastersumupsinglemax_ = 0;
  mastersinglemaxupmax_ = 0;
  supercost_ = 0u;
  superadd_ = 0;
  hpadd_ = 0u;
  atkadd_ = 0u;
  defadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnforceCfg::~PlayerEnforceCfg() {
  SharedDtor();
}

void PlayerEnforceCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerEnforceCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerEnforceCfg& PlayerEnforceCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PlayerEnforceCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerEnforceCfg_2eproto();
#endif
  return *default_instance_;
}

PlayerEnforceCfg* PlayerEnforceCfg::default_instance_ = NULL;

PlayerEnforceCfg* PlayerEnforceCfg::New() const {
  return new PlayerEnforceCfg;
}

void PlayerEnforceCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    enforcetotalmax_ = 0;
    regularcost_ = 0u;
    regularsingletotalmax_ = 0u;
    regularsumbelowsinglemax_ = 0u;
    regularsumupsinglemax_ = 0;
    regularsinglemaxupmax_ = 0;
    advancedcost_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    advancedsingletotalmax_ = 0u;
    advancedsumbelowsinglemax_ = 0u;
    advancesumupsinglemax_ = 0;
    advancedsignlemaxupmax_ = 0;
    mastercost_ = 0u;
    mastersingletotalmax_ = 0u;
    mastersumbelowsinglemax_ = 0u;
    mastersumupsinglemax_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mastersinglemaxupmax_ = 0;
    supercost_ = 0u;
    superadd_ = 0;
    hpadd_ = 0u;
    atkadd_ = 0u;
    defadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlayerEnforceCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EnforceTotalMax;
        break;
      }

      // required int32 EnforceTotalMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EnforceTotalMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enforcetotalmax_)));
          set_has_enforcetotalmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RegularCost;
        break;
      }

      // required uint32 RegularCost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegularCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regularcost_)));
          set_has_regularcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_RegularSingleTotalMax;
        break;
      }

      // required uint32 RegularSingleTotalMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegularSingleTotalMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regularsingletotalmax_)));
          set_has_regularsingletotalmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RegularSumBelowSingleMax;
        break;
      }

      // required uint32 RegularSumBelowSingleMax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegularSumBelowSingleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regularsumbelowsinglemax_)));
          set_has_regularsumbelowsinglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_RegularSumUpSingleMax;
        break;
      }

      // required int32 RegularSumUpSingleMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegularSumUpSingleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regularsumupsinglemax_)));
          set_has_regularsumupsinglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_RegularSingleMaxUpMax;
        break;
      }

      // required int32 RegularSingleMaxUpMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegularSingleMaxUpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &regularsinglemaxupmax_)));
          set_has_regularsinglemaxupmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AdvancedCost;
        break;
      }

      // required uint32 AdvancedCost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdvancedCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancedcost_)));
          set_has_advancedcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_AdvancedSingleTotalMax;
        break;
      }

      // required uint32 AdvancedSingleTotalMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdvancedSingleTotalMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancedsingletotalmax_)));
          set_has_advancedsingletotalmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_AdvancedSumBelowSingleMax;
        break;
      }

      // required uint32 AdvancedSumBelowSingleMax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdvancedSumBelowSingleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancedsumbelowsinglemax_)));
          set_has_advancedsumbelowsinglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_AdvanceSumUpSingleMax;
        break;
      }

      // required int32 AdvanceSumUpSingleMax = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdvanceSumUpSingleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advancesumupsinglemax_)));
          set_has_advancesumupsinglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_AdvancedSignleMaxUpMax;
        break;
      }

      // required int32 AdvancedSignleMaxUpMax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AdvancedSignleMaxUpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advancedsignlemaxupmax_)));
          set_has_advancedsignlemaxupmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MasterCost;
        break;
      }

      // required uint32 MasterCost = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mastercost_)));
          set_has_mastercost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_MasterSingleTotalMax;
        break;
      }

      // required uint32 MasterSingleTotalMax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterSingleTotalMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mastersingletotalmax_)));
          set_has_mastersingletotalmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_MasterSumBelowSingleMax;
        break;
      }

      // required uint32 MasterSumBelowSingleMax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterSumBelowSingleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mastersumbelowsinglemax_)));
          set_has_mastersumbelowsinglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_MasterSumUpSingleMax;
        break;
      }

      // required int32 MasterSumUpSingleMax = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterSumUpSingleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mastersumupsinglemax_)));
          set_has_mastersumupsinglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_MasterSingleMaxUpMax;
        break;
      }

      // required int32 MasterSingleMaxUpMax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MasterSingleMaxUpMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mastersinglemaxupmax_)));
          set_has_mastersinglemaxupmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SuperCost;
        break;
      }

      // required uint32 SuperCost = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SuperCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supercost_)));
          set_has_supercost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_SuperAdd;
        break;
      }

      // required int32 SuperAdd = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SuperAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &superadd_)));
          set_has_superadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_HPAdd;
        break;
      }

      // required uint32 HPAdd = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HPAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpadd_)));
          set_has_hpadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_AtkAdd;
        break;
      }

      // required uint32 AtkAdd = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkadd_)));
          set_has_atkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_DefAdd;
        break;
      }

      // required uint32 DefAdd = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defadd_)));
          set_has_defadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEnforceCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required int32 EnforceTotalMax = 2;
  if (has_enforcetotalmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enforcetotalmax(), output);
  }

  // required uint32 RegularCost = 3;
  if (has_regularcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->regularcost(), output);
  }

  // required uint32 RegularSingleTotalMax = 4;
  if (has_regularsingletotalmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->regularsingletotalmax(), output);
  }

  // required uint32 RegularSumBelowSingleMax = 5;
  if (has_regularsumbelowsinglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->regularsumbelowsinglemax(), output);
  }

  // required int32 RegularSumUpSingleMax = 6;
  if (has_regularsumupsinglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->regularsumupsinglemax(), output);
  }

  // required int32 RegularSingleMaxUpMax = 7;
  if (has_regularsinglemaxupmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->regularsinglemaxupmax(), output);
  }

  // required uint32 AdvancedCost = 8;
  if (has_advancedcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->advancedcost(), output);
  }

  // required uint32 AdvancedSingleTotalMax = 9;
  if (has_advancedsingletotalmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->advancedsingletotalmax(), output);
  }

  // required uint32 AdvancedSumBelowSingleMax = 10;
  if (has_advancedsumbelowsinglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->advancedsumbelowsinglemax(), output);
  }

  // required int32 AdvanceSumUpSingleMax = 11;
  if (has_advancesumupsinglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->advancesumupsinglemax(), output);
  }

  // required int32 AdvancedSignleMaxUpMax = 12;
  if (has_advancedsignlemaxupmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->advancedsignlemaxupmax(), output);
  }

  // required uint32 MasterCost = 13;
  if (has_mastercost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->mastercost(), output);
  }

  // required uint32 MasterSingleTotalMax = 14;
  if (has_mastersingletotalmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->mastersingletotalmax(), output);
  }

  // required uint32 MasterSumBelowSingleMax = 15;
  if (has_mastersumbelowsinglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->mastersumbelowsinglemax(), output);
  }

  // required int32 MasterSumUpSingleMax = 16;
  if (has_mastersumupsinglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->mastersumupsinglemax(), output);
  }

  // required int32 MasterSingleMaxUpMax = 17;
  if (has_mastersinglemaxupmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->mastersinglemaxupmax(), output);
  }

  // required uint32 SuperCost = 18;
  if (has_supercost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->supercost(), output);
  }

  // required int32 SuperAdd = 19;
  if (has_superadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->superadd(), output);
  }

  // required uint32 HPAdd = 20;
  if (has_hpadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->hpadd(), output);
  }

  // required uint32 AtkAdd = 21;
  if (has_atkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->atkadd(), output);
  }

  // required uint32 DefAdd = 22;
  if (has_defadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->defadd(), output);
  }

}

int PlayerEnforceCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required int32 EnforceTotalMax = 2;
    if (has_enforcetotalmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enforcetotalmax());
    }

    // required uint32 RegularCost = 3;
    if (has_regularcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regularcost());
    }

    // required uint32 RegularSingleTotalMax = 4;
    if (has_regularsingletotalmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regularsingletotalmax());
    }

    // required uint32 RegularSumBelowSingleMax = 5;
    if (has_regularsumbelowsinglemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regularsumbelowsinglemax());
    }

    // required int32 RegularSumUpSingleMax = 6;
    if (has_regularsumupsinglemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regularsumupsinglemax());
    }

    // required int32 RegularSingleMaxUpMax = 7;
    if (has_regularsinglemaxupmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->regularsinglemaxupmax());
    }

    // required uint32 AdvancedCost = 8;
    if (has_advancedcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancedcost());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 AdvancedSingleTotalMax = 9;
    if (has_advancedsingletotalmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancedsingletotalmax());
    }

    // required uint32 AdvancedSumBelowSingleMax = 10;
    if (has_advancedsumbelowsinglemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancedsumbelowsinglemax());
    }

    // required int32 AdvanceSumUpSingleMax = 11;
    if (has_advancesumupsinglemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advancesumupsinglemax());
    }

    // required int32 AdvancedSignleMaxUpMax = 12;
    if (has_advancedsignlemaxupmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advancedsignlemaxupmax());
    }

    // required uint32 MasterCost = 13;
    if (has_mastercost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mastercost());
    }

    // required uint32 MasterSingleTotalMax = 14;
    if (has_mastersingletotalmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mastersingletotalmax());
    }

    // required uint32 MasterSumBelowSingleMax = 15;
    if (has_mastersumbelowsinglemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mastersumbelowsinglemax());
    }

    // required int32 MasterSumUpSingleMax = 16;
    if (has_mastersumupsinglemax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mastersumupsinglemax());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 MasterSingleMaxUpMax = 17;
    if (has_mastersinglemaxupmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mastersinglemaxupmax());
    }

    // required uint32 SuperCost = 18;
    if (has_supercost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supercost());
    }

    // required int32 SuperAdd = 19;
    if (has_superadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->superadd());
    }

    // required uint32 HPAdd = 20;
    if (has_hpadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpadd());
    }

    // required uint32 AtkAdd = 21;
    if (has_atkadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkadd());
    }

    // required uint32 DefAdd = 22;
    if (has_defadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defadd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnforceCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerEnforceCfg*>(&from));
}

void PlayerEnforceCfg::MergeFrom(const PlayerEnforceCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enforcetotalmax()) {
      set_enforcetotalmax(from.enforcetotalmax());
    }
    if (from.has_regularcost()) {
      set_regularcost(from.regularcost());
    }
    if (from.has_regularsingletotalmax()) {
      set_regularsingletotalmax(from.regularsingletotalmax());
    }
    if (from.has_regularsumbelowsinglemax()) {
      set_regularsumbelowsinglemax(from.regularsumbelowsinglemax());
    }
    if (from.has_regularsumupsinglemax()) {
      set_regularsumupsinglemax(from.regularsumupsinglemax());
    }
    if (from.has_regularsinglemaxupmax()) {
      set_regularsinglemaxupmax(from.regularsinglemaxupmax());
    }
    if (from.has_advancedcost()) {
      set_advancedcost(from.advancedcost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_advancedsingletotalmax()) {
      set_advancedsingletotalmax(from.advancedsingletotalmax());
    }
    if (from.has_advancedsumbelowsinglemax()) {
      set_advancedsumbelowsinglemax(from.advancedsumbelowsinglemax());
    }
    if (from.has_advancesumupsinglemax()) {
      set_advancesumupsinglemax(from.advancesumupsinglemax());
    }
    if (from.has_advancedsignlemaxupmax()) {
      set_advancedsignlemaxupmax(from.advancedsignlemaxupmax());
    }
    if (from.has_mastercost()) {
      set_mastercost(from.mastercost());
    }
    if (from.has_mastersingletotalmax()) {
      set_mastersingletotalmax(from.mastersingletotalmax());
    }
    if (from.has_mastersumbelowsinglemax()) {
      set_mastersumbelowsinglemax(from.mastersumbelowsinglemax());
    }
    if (from.has_mastersumupsinglemax()) {
      set_mastersumupsinglemax(from.mastersumupsinglemax());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mastersinglemaxupmax()) {
      set_mastersinglemaxupmax(from.mastersinglemaxupmax());
    }
    if (from.has_supercost()) {
      set_supercost(from.supercost());
    }
    if (from.has_superadd()) {
      set_superadd(from.superadd());
    }
    if (from.has_hpadd()) {
      set_hpadd(from.hpadd());
    }
    if (from.has_atkadd()) {
      set_atkadd(from.atkadd());
    }
    if (from.has_defadd()) {
      set_defadd(from.defadd());
    }
  }
}

void PlayerEnforceCfg::CopyFrom(const PlayerEnforceCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnforceCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void PlayerEnforceCfg::Swap(PlayerEnforceCfg* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(enforcetotalmax_, other->enforcetotalmax_);
    std::swap(regularcost_, other->regularcost_);
    std::swap(regularsingletotalmax_, other->regularsingletotalmax_);
    std::swap(regularsumbelowsinglemax_, other->regularsumbelowsinglemax_);
    std::swap(regularsumupsinglemax_, other->regularsumupsinglemax_);
    std::swap(regularsinglemaxupmax_, other->regularsinglemaxupmax_);
    std::swap(advancedcost_, other->advancedcost_);
    std::swap(advancedsingletotalmax_, other->advancedsingletotalmax_);
    std::swap(advancedsumbelowsinglemax_, other->advancedsumbelowsinglemax_);
    std::swap(advancesumupsinglemax_, other->advancesumupsinglemax_);
    std::swap(advancedsignlemaxupmax_, other->advancedsignlemaxupmax_);
    std::swap(mastercost_, other->mastercost_);
    std::swap(mastersingletotalmax_, other->mastersingletotalmax_);
    std::swap(mastersumbelowsinglemax_, other->mastersumbelowsinglemax_);
    std::swap(mastersumupsinglemax_, other->mastersumupsinglemax_);
    std::swap(mastersinglemaxupmax_, other->mastersinglemaxupmax_);
    std::swap(supercost_, other->supercost_);
    std::swap(superadd_, other->superadd_);
    std::swap(hpadd_, other->hpadd_);
    std::swap(atkadd_, other->atkadd_);
    std::swap(defadd_, other->defadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerEnforceCfg::GetTypeName() const {
  return "com.cfg.vo.PlayerEnforceCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerEnforceCfgSet::kPlayerenforcecfgFieldNumber;
#endif  // !_MSC_VER

PlayerEnforceCfgSet::PlayerEnforceCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PlayerEnforceCfgSet::InitAsDefaultInstance() {
}

PlayerEnforceCfgSet::PlayerEnforceCfgSet(const PlayerEnforceCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerEnforceCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerEnforceCfgSet::~PlayerEnforceCfgSet() {
  SharedDtor();
}

void PlayerEnforceCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PlayerEnforceCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PlayerEnforceCfgSet& PlayerEnforceCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PlayerEnforceCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PlayerEnforceCfg_2eproto();
#endif
  return *default_instance_;
}

PlayerEnforceCfgSet* PlayerEnforceCfgSet::default_instance_ = NULL;

PlayerEnforceCfgSet* PlayerEnforceCfgSet::New() const {
  return new PlayerEnforceCfgSet;
}

void PlayerEnforceCfgSet::Clear() {
  playerenforcecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PlayerEnforceCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.PlayerEnforceCfg playerenforcecfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerenforcecfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerenforcecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerenforcecfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerEnforceCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.PlayerEnforceCfg playerenforcecfg = 1;
  for (int i = 0; i < this->playerenforcecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->playerenforcecfg(i), output);
  }

}

int PlayerEnforceCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.PlayerEnforceCfg playerenforcecfg = 1;
  total_size += 1 * this->playerenforcecfg_size();
  for (int i = 0; i < this->playerenforcecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerenforcecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerEnforceCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PlayerEnforceCfgSet*>(&from));
}

void PlayerEnforceCfgSet::MergeFrom(const PlayerEnforceCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerenforcecfg_.MergeFrom(from.playerenforcecfg_);
}

void PlayerEnforceCfgSet::CopyFrom(const PlayerEnforceCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEnforceCfgSet::IsInitialized() const {

  for (int i = 0; i < playerenforcecfg_size(); i++) {
    if (!this->playerenforcecfg(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerEnforceCfgSet::Swap(PlayerEnforceCfgSet* other) {
  if (other != this) {
    playerenforcecfg_.Swap(&other->playerenforcecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PlayerEnforceCfgSet::GetTypeName() const {
  return "com.cfg.vo.PlayerEnforceCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
