// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EffectSoundCfg.proto

#ifndef PROTOBUF_EffectSoundCfg_2eproto__INCLUDED
#define PROTOBUF_EffectSoundCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EffectSoundCfg_2eproto();
void protobuf_AssignDesc_EffectSoundCfg_2eproto();
void protobuf_ShutdownFile_EffectSoundCfg_2eproto();

class EffectSoundCfg;
class EffectSoundCfgSet;

// ===================================================================

class EffectSoundCfg : public ::google::protobuf::MessageLite {
 public:
  EffectSoundCfg();
  virtual ~EffectSoundCfg();

  EffectSoundCfg(const EffectSoundCfg& from);

  inline EffectSoundCfg& operator=(const EffectSoundCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const EffectSoundCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EffectSoundCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EffectSoundCfg* other);

  // implements Message ----------------------------------------------

  EffectSoundCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EffectSoundCfg& from);
  void MergeFrom(const EffectSoundCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EffectID = 1;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 1;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // required string EffectUrl = 2;
  inline bool has_effecturl() const;
  inline void clear_effecturl();
  static const int kEffectUrlFieldNumber = 2;
  inline const ::std::string& effecturl() const;
  inline void set_effecturl(const ::std::string& value);
  inline void set_effecturl(const char* value);
  inline void set_effecturl(const char* value, size_t size);
  inline ::std::string* mutable_effecturl();
  inline ::std::string* release_effecturl();
  inline void set_allocated_effecturl(::std::string* effecturl);

  // required string SoundUrl = 3;
  inline bool has_soundurl() const;
  inline void clear_soundurl();
  static const int kSoundUrlFieldNumber = 3;
  inline const ::std::string& soundurl() const;
  inline void set_soundurl(const ::std::string& value);
  inline void set_soundurl(const char* value);
  inline void set_soundurl(const char* value, size_t size);
  inline ::std::string* mutable_soundurl();
  inline ::std::string* release_soundurl();
  inline void set_allocated_soundurl(::std::string* soundurl);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.EffectSoundCfg)
 private:
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_effecturl();
  inline void clear_has_effecturl();
  inline void set_has_soundurl();
  inline void clear_has_soundurl();

  ::std::string* effecturl_;
  ::std::string* soundurl_;
  ::google::protobuf::uint32 effectid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EffectSoundCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EffectSoundCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EffectSoundCfg_2eproto();
  friend void protobuf_ShutdownFile_EffectSoundCfg_2eproto();

  void InitAsDefaultInstance();
  static EffectSoundCfg* default_instance_;
};
// -------------------------------------------------------------------

class EffectSoundCfgSet : public ::google::protobuf::MessageLite {
 public:
  EffectSoundCfgSet();
  virtual ~EffectSoundCfgSet();

  EffectSoundCfgSet(const EffectSoundCfgSet& from);

  inline EffectSoundCfgSet& operator=(const EffectSoundCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const EffectSoundCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EffectSoundCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EffectSoundCfgSet* other);

  // implements Message ----------------------------------------------

  EffectSoundCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EffectSoundCfgSet& from);
  void MergeFrom(const EffectSoundCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.EffectSoundCfg effsoundCfg = 1;
  inline int effsoundcfg_size() const;
  inline void clear_effsoundcfg();
  static const int kEffsoundCfgFieldNumber = 1;
  inline const ::com::cfg::vo::EffectSoundCfg& effsoundcfg(int index) const;
  inline ::com::cfg::vo::EffectSoundCfg* mutable_effsoundcfg(int index);
  inline ::com::cfg::vo::EffectSoundCfg* add_effsoundcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EffectSoundCfg >&
      effsoundcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EffectSoundCfg >*
      mutable_effsoundcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.EffectSoundCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EffectSoundCfg > effsoundcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EffectSoundCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EffectSoundCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EffectSoundCfg_2eproto();
  friend void protobuf_ShutdownFile_EffectSoundCfg_2eproto();

  void InitAsDefaultInstance();
  static EffectSoundCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// EffectSoundCfg

// required uint32 EffectID = 1;
inline bool EffectSoundCfg::has_effectid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EffectSoundCfg::set_has_effectid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EffectSoundCfg::clear_has_effectid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EffectSoundCfg::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 EffectSoundCfg::effectid() const {
  return effectid_;
}
inline void EffectSoundCfg::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// required string EffectUrl = 2;
inline bool EffectSoundCfg::has_effecturl() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EffectSoundCfg::set_has_effecturl() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EffectSoundCfg::clear_has_effecturl() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EffectSoundCfg::clear_effecturl() {
  if (effecturl_ != &::google::protobuf::internal::kEmptyString) {
    effecturl_->clear();
  }
  clear_has_effecturl();
}
inline const ::std::string& EffectSoundCfg::effecturl() const {
  return *effecturl_;
}
inline void EffectSoundCfg::set_effecturl(const ::std::string& value) {
  set_has_effecturl();
  if (effecturl_ == &::google::protobuf::internal::kEmptyString) {
    effecturl_ = new ::std::string;
  }
  effecturl_->assign(value);
}
inline void EffectSoundCfg::set_effecturl(const char* value) {
  set_has_effecturl();
  if (effecturl_ == &::google::protobuf::internal::kEmptyString) {
    effecturl_ = new ::std::string;
  }
  effecturl_->assign(value);
}
inline void EffectSoundCfg::set_effecturl(const char* value, size_t size) {
  set_has_effecturl();
  if (effecturl_ == &::google::protobuf::internal::kEmptyString) {
    effecturl_ = new ::std::string;
  }
  effecturl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSoundCfg::mutable_effecturl() {
  set_has_effecturl();
  if (effecturl_ == &::google::protobuf::internal::kEmptyString) {
    effecturl_ = new ::std::string;
  }
  return effecturl_;
}
inline ::std::string* EffectSoundCfg::release_effecturl() {
  clear_has_effecturl();
  if (effecturl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effecturl_;
    effecturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSoundCfg::set_allocated_effecturl(::std::string* effecturl) {
  if (effecturl_ != &::google::protobuf::internal::kEmptyString) {
    delete effecturl_;
  }
  if (effecturl) {
    set_has_effecturl();
    effecturl_ = effecturl;
  } else {
    clear_has_effecturl();
    effecturl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SoundUrl = 3;
inline bool EffectSoundCfg::has_soundurl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EffectSoundCfg::set_has_soundurl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EffectSoundCfg::clear_has_soundurl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EffectSoundCfg::clear_soundurl() {
  if (soundurl_ != &::google::protobuf::internal::kEmptyString) {
    soundurl_->clear();
  }
  clear_has_soundurl();
}
inline const ::std::string& EffectSoundCfg::soundurl() const {
  return *soundurl_;
}
inline void EffectSoundCfg::set_soundurl(const ::std::string& value) {
  set_has_soundurl();
  if (soundurl_ == &::google::protobuf::internal::kEmptyString) {
    soundurl_ = new ::std::string;
  }
  soundurl_->assign(value);
}
inline void EffectSoundCfg::set_soundurl(const char* value) {
  set_has_soundurl();
  if (soundurl_ == &::google::protobuf::internal::kEmptyString) {
    soundurl_ = new ::std::string;
  }
  soundurl_->assign(value);
}
inline void EffectSoundCfg::set_soundurl(const char* value, size_t size) {
  set_has_soundurl();
  if (soundurl_ == &::google::protobuf::internal::kEmptyString) {
    soundurl_ = new ::std::string;
  }
  soundurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EffectSoundCfg::mutable_soundurl() {
  set_has_soundurl();
  if (soundurl_ == &::google::protobuf::internal::kEmptyString) {
    soundurl_ = new ::std::string;
  }
  return soundurl_;
}
inline ::std::string* EffectSoundCfg::release_soundurl() {
  clear_has_soundurl();
  if (soundurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = soundurl_;
    soundurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EffectSoundCfg::set_allocated_soundurl(::std::string* soundurl) {
  if (soundurl_ != &::google::protobuf::internal::kEmptyString) {
    delete soundurl_;
  }
  if (soundurl) {
    set_has_soundurl();
    soundurl_ = soundurl;
  } else {
    clear_has_soundurl();
    soundurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// EffectSoundCfgSet

// repeated .com.cfg.vo.EffectSoundCfg effsoundCfg = 1;
inline int EffectSoundCfgSet::effsoundcfg_size() const {
  return effsoundcfg_.size();
}
inline void EffectSoundCfgSet::clear_effsoundcfg() {
  effsoundcfg_.Clear();
}
inline const ::com::cfg::vo::EffectSoundCfg& EffectSoundCfgSet::effsoundcfg(int index) const {
  return effsoundcfg_.Get(index);
}
inline ::com::cfg::vo::EffectSoundCfg* EffectSoundCfgSet::mutable_effsoundcfg(int index) {
  return effsoundcfg_.Mutable(index);
}
inline ::com::cfg::vo::EffectSoundCfg* EffectSoundCfgSet::add_effsoundcfg() {
  return effsoundcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EffectSoundCfg >&
EffectSoundCfgSet::effsoundcfg() const {
  return effsoundcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EffectSoundCfg >*
EffectSoundCfgSet::mutable_effsoundcfg() {
  return &effsoundcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EffectSoundCfg_2eproto__INCLUDED
