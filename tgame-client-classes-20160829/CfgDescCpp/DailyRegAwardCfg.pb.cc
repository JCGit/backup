// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyRegAwardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DailyRegAwardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DailyRegAwardCfg_2eproto() {
  delete DailyRegAwardElement::default_instance_;
  delete DailyRegAwardCfg::default_instance_;
  delete DailyRegAwardCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DailyRegAwardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DailyRegAwardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DailyRegAwardElement::default_instance_ = new DailyRegAwardElement();
  DailyRegAwardCfg::default_instance_ = new DailyRegAwardCfg();
  DailyRegAwardCfgSet::default_instance_ = new DailyRegAwardCfgSet();
  DailyRegAwardElement::default_instance_->InitAsDefaultInstance();
  DailyRegAwardCfg::default_instance_->InitAsDefaultInstance();
  DailyRegAwardCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DailyRegAwardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DailyRegAwardCfg_2eproto_once_);
void protobuf_AddDesc_DailyRegAwardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DailyRegAwardCfg_2eproto_once_,
                 &protobuf_AddDesc_DailyRegAwardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DailyRegAwardCfg_2eproto {
  StaticDescriptorInitializer_DailyRegAwardCfg_2eproto() {
    protobuf_AddDesc_DailyRegAwardCfg_2eproto();
  }
} static_descriptor_initializer_DailyRegAwardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DailyRegAwardElement::kElementIDFieldNumber;
const int DailyRegAwardElement::kElementTypeFieldNumber;
const int DailyRegAwardElement::kElementCntFieldNumber;
#endif  // !_MSC_VER

DailyRegAwardElement::DailyRegAwardElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyRegAwardElement::InitAsDefaultInstance() {
}

DailyRegAwardElement::DailyRegAwardElement(const DailyRegAwardElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyRegAwardElement::SharedCtor() {
  _cached_size_ = 0;
  elementid_ = 0u;
  elementtype_ = 0u;
  elementcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyRegAwardElement::~DailyRegAwardElement() {
  SharedDtor();
}

void DailyRegAwardElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyRegAwardElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyRegAwardElement& DailyRegAwardElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyRegAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyRegAwardCfg_2eproto();
#endif
  return *default_instance_;
}

DailyRegAwardElement* DailyRegAwardElement::default_instance_ = NULL;

DailyRegAwardElement* DailyRegAwardElement::New() const {
  return new DailyRegAwardElement;
}

void DailyRegAwardElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementid_ = 0u;
    elementtype_ = 0u;
    elementcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyRegAwardElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementType;
        break;
      }

      // required uint32 ElementType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementCnt;
        break;
      }

      // required uint32 ElementCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcnt_)));
          set_has_elementcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyRegAwardElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementID = 1;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementid(), output);
  }

  // required uint32 ElementType = 2;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementtype(), output);
  }

  // required uint32 ElementCnt = 3;
  if (has_elementcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementcnt(), output);
  }

}

int DailyRegAwardElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementID = 1;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementType = 2;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 ElementCnt = 3;
    if (has_elementcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyRegAwardElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyRegAwardElement*>(&from));
}

void DailyRegAwardElement::MergeFrom(const DailyRegAwardElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_elementcnt()) {
      set_elementcnt(from.elementcnt());
    }
  }
}

void DailyRegAwardElement::CopyFrom(const DailyRegAwardElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyRegAwardElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DailyRegAwardElement::Swap(DailyRegAwardElement* other) {
  if (other != this) {
    std::swap(elementid_, other->elementid_);
    std::swap(elementtype_, other->elementtype_);
    std::swap(elementcnt_, other->elementcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyRegAwardElement::GetTypeName() const {
  return "com.cfg.vo.DailyRegAwardElement";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyRegAwardCfg::kDayFieldNumber;
const int DailyRegAwardCfg::kAwardLstFieldNumber;
#endif  // !_MSC_VER

DailyRegAwardCfg::DailyRegAwardCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyRegAwardCfg::InitAsDefaultInstance() {
}

DailyRegAwardCfg::DailyRegAwardCfg(const DailyRegAwardCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyRegAwardCfg::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyRegAwardCfg::~DailyRegAwardCfg() {
  SharedDtor();
}

void DailyRegAwardCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyRegAwardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyRegAwardCfg& DailyRegAwardCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyRegAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyRegAwardCfg_2eproto();
#endif
  return *default_instance_;
}

DailyRegAwardCfg* DailyRegAwardCfg::default_instance_ = NULL;

DailyRegAwardCfg* DailyRegAwardCfg::New() const {
  return new DailyRegAwardCfg;
}

void DailyRegAwardCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  awardlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyRegAwardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardLst;
        break;
      }

      // repeated .com.cfg.vo.DailyRegAwardElement AwardLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_awardlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyRegAwardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated .com.cfg.vo.DailyRegAwardElement AwardLst = 2;
  for (int i = 0; i < this->awardlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->awardlst(i), output);
  }

}

int DailyRegAwardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .com.cfg.vo.DailyRegAwardElement AwardLst = 2;
  total_size += 1 * this->awardlst_size();
  for (int i = 0; i < this->awardlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->awardlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyRegAwardCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyRegAwardCfg*>(&from));
}

void DailyRegAwardCfg::MergeFrom(const DailyRegAwardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardlst_.MergeFrom(from.awardlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
}

void DailyRegAwardCfg::CopyFrom(const DailyRegAwardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyRegAwardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < awardlst_size(); i++) {
    if (!this->awardlst(i).IsInitialized()) return false;
  }
  return true;
}

void DailyRegAwardCfg::Swap(DailyRegAwardCfg* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    awardlst_.Swap(&other->awardlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyRegAwardCfg::GetTypeName() const {
  return "com.cfg.vo.DailyRegAwardCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyRegAwardCfgSet::kDailyregawardcfgFieldNumber;
#endif  // !_MSC_VER

DailyRegAwardCfgSet::DailyRegAwardCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyRegAwardCfgSet::InitAsDefaultInstance() {
}

DailyRegAwardCfgSet::DailyRegAwardCfgSet(const DailyRegAwardCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyRegAwardCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyRegAwardCfgSet::~DailyRegAwardCfgSet() {
  SharedDtor();
}

void DailyRegAwardCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyRegAwardCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyRegAwardCfgSet& DailyRegAwardCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyRegAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyRegAwardCfg_2eproto();
#endif
  return *default_instance_;
}

DailyRegAwardCfgSet* DailyRegAwardCfgSet::default_instance_ = NULL;

DailyRegAwardCfgSet* DailyRegAwardCfgSet::New() const {
  return new DailyRegAwardCfgSet;
}

void DailyRegAwardCfgSet::Clear() {
  dailyregawardcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyRegAwardCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DailyRegAwardCfg dailyregawardcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailyregawardcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailyregawardcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailyregawardcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyRegAwardCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DailyRegAwardCfg dailyregawardcfg = 1;
  for (int i = 0; i < this->dailyregawardcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dailyregawardcfg(i), output);
  }

}

int DailyRegAwardCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DailyRegAwardCfg dailyregawardcfg = 1;
  total_size += 1 * this->dailyregawardcfg_size();
  for (int i = 0; i < this->dailyregawardcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailyregawardcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyRegAwardCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyRegAwardCfgSet*>(&from));
}

void DailyRegAwardCfgSet::MergeFrom(const DailyRegAwardCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailyregawardcfg_.MergeFrom(from.dailyregawardcfg_);
}

void DailyRegAwardCfgSet::CopyFrom(const DailyRegAwardCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyRegAwardCfgSet::IsInitialized() const {

  for (int i = 0; i < dailyregawardcfg_size(); i++) {
    if (!this->dailyregawardcfg(i).IsInitialized()) return false;
  }
  return true;
}

void DailyRegAwardCfgSet::Swap(DailyRegAwardCfgSet* other) {
  if (other != this) {
    dailyregawardcfg_.Swap(&other->dailyregawardcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyRegAwardCfgSet::GetTypeName() const {
  return "com.cfg.vo.DailyRegAwardCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
