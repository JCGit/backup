// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPLvCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VIPLvCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_VIPLvCfg_2eproto() {
  delete VIPLvCfg::default_instance_;
  delete VIPLvCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_VIPLvCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_VIPLvCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  VIPLvCfg::default_instance_ = new VIPLvCfg();
  VIPLvCfgSet::default_instance_ = new VIPLvCfgSet();
  VIPLvCfg::default_instance_->InitAsDefaultInstance();
  VIPLvCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VIPLvCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_VIPLvCfg_2eproto_once_);
void protobuf_AddDesc_VIPLvCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_VIPLvCfg_2eproto_once_,
                 &protobuf_AddDesc_VIPLvCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VIPLvCfg_2eproto {
  StaticDescriptorInitializer_VIPLvCfg_2eproto() {
    protobuf_AddDesc_VIPLvCfg_2eproto();
  }
} static_descriptor_initializer_VIPLvCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int VIPLvCfg::kVIPLvFieldNumber;
const int VIPLvCfg::kNeedGoldFieldNumber;
const int VIPLvCfg::kPackageIDFieldNumber;
const int VIPLvCfg::kDailyGiftPkgIDFieldNumber;
const int VIPLvCfg::kTitleIconFieldNumber;
#endif  // !_MSC_VER

VIPLvCfg::VIPLvCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VIPLvCfg::InitAsDefaultInstance() {
}

VIPLvCfg::VIPLvCfg(const VIPLvCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VIPLvCfg::SharedCtor() {
  _cached_size_ = 0;
  viplv_ = 0u;
  needgold_ = 0u;
  packageid_ = 0u;
  dailygiftpkgid_ = 0u;
  titleicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPLvCfg::~VIPLvCfg() {
  SharedDtor();
}

void VIPLvCfg::SharedDtor() {
  if (titleicon_ != &::google::protobuf::internal::kEmptyString) {
    delete titleicon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPLvCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPLvCfg& VIPLvCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VIPLvCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VIPLvCfg_2eproto();
#endif
  return *default_instance_;
}

VIPLvCfg* VIPLvCfg::default_instance_ = NULL;

VIPLvCfg* VIPLvCfg::New() const {
  return new VIPLvCfg;
}

void VIPLvCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viplv_ = 0u;
    needgold_ = 0u;
    packageid_ = 0u;
    dailygiftpkgid_ = 0u;
    if (has_titleicon()) {
      if (titleicon_ != &::google::protobuf::internal::kEmptyString) {
        titleicon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VIPLvCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 VIPLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NeedGold;
        break;
      }

      // required uint32 NeedGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeedGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needgold_)));
          set_has_needgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PackageID;
        break;
      }

      // required uint32 PackageID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PackageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DailyGiftPkgID;
        break;
      }

      // required uint32 DailyGiftPkgID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyGiftPkgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailygiftpkgid_)));
          set_has_dailygiftpkgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TitleIcon;
        break;
      }

      // required string TitleIcon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPLvCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 VIPLv = 1;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->viplv(), output);
  }

  // required uint32 NeedGold = 2;
  if (has_needgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->needgold(), output);
  }

  // required uint32 PackageID = 3;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packageid(), output);
  }

  // required uint32 DailyGiftPkgID = 4;
  if (has_dailygiftpkgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dailygiftpkgid(), output);
  }

  // required string TitleIcon = 5;
  if (has_titleicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->titleicon(), output);
  }

}

int VIPLvCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 VIPLv = 1;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // required uint32 NeedGold = 2;
    if (has_needgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needgold());
    }

    // required uint32 PackageID = 3;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // required uint32 DailyGiftPkgID = 4;
    if (has_dailygiftpkgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailygiftpkgid());
    }

    // required string TitleIcon = 5;
    if (has_titleicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleicon());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPLvCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPLvCfg*>(&from));
}

void VIPLvCfg::MergeFrom(const VIPLvCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_needgold()) {
      set_needgold(from.needgold());
    }
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_dailygiftpkgid()) {
      set_dailygiftpkgid(from.dailygiftpkgid());
    }
    if (from.has_titleicon()) {
      set_titleicon(from.titleicon());
    }
  }
}

void VIPLvCfg::CopyFrom(const VIPLvCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPLvCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void VIPLvCfg::Swap(VIPLvCfg* other) {
  if (other != this) {
    std::swap(viplv_, other->viplv_);
    std::swap(needgold_, other->needgold_);
    std::swap(packageid_, other->packageid_);
    std::swap(dailygiftpkgid_, other->dailygiftpkgid_);
    std::swap(titleicon_, other->titleicon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPLvCfg::GetTypeName() const {
  return "com.cfg.vo.VIPLvCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int VIPLvCfgSet::kViplvcfgFieldNumber;
#endif  // !_MSC_VER

VIPLvCfgSet::VIPLvCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VIPLvCfgSet::InitAsDefaultInstance() {
}

VIPLvCfgSet::VIPLvCfgSet(const VIPLvCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VIPLvCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPLvCfgSet::~VIPLvCfgSet() {
  SharedDtor();
}

void VIPLvCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPLvCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPLvCfgSet& VIPLvCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VIPLvCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VIPLvCfg_2eproto();
#endif
  return *default_instance_;
}

VIPLvCfgSet* VIPLvCfgSet::default_instance_ = NULL;

VIPLvCfgSet* VIPLvCfgSet::New() const {
  return new VIPLvCfgSet;
}

void VIPLvCfgSet::Clear() {
  viplvcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VIPLvCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.VIPLvCfg viplvcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_viplvcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_viplvcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_viplvcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPLvCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.VIPLvCfg viplvcfg = 1;
  for (int i = 0; i < this->viplvcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->viplvcfg(i), output);
  }

}

int VIPLvCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.VIPLvCfg viplvcfg = 1;
  total_size += 1 * this->viplvcfg_size();
  for (int i = 0; i < this->viplvcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->viplvcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPLvCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPLvCfgSet*>(&from));
}

void VIPLvCfgSet::MergeFrom(const VIPLvCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  viplvcfg_.MergeFrom(from.viplvcfg_);
}

void VIPLvCfgSet::CopyFrom(const VIPLvCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPLvCfgSet::IsInitialized() const {

  for (int i = 0; i < viplvcfg_size(); i++) {
    if (!this->viplvcfg(i).IsInitialized()) return false;
  }
  return true;
}

void VIPLvCfgSet::Swap(VIPLvCfgSet* other) {
  if (other != this) {
    viplvcfg_.Swap(&other->viplvcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPLvCfgSet::GetTypeName() const {
  return "com.cfg.vo.VIPLvCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
