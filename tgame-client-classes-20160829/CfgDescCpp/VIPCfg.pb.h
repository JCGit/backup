// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPCfg.proto

#ifndef PROTOBUF_VIPCfg_2eproto__INCLUDED
#define PROTOBUF_VIPCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_VIPCfg_2eproto();
void protobuf_AssignDesc_VIPCfg_2eproto();
void protobuf_ShutdownFile_VIPCfg_2eproto();

class VIPCfg;
class VIPCfgSet;

// ===================================================================

class VIPCfg : public ::google::protobuf::MessageLite {
 public:
  VIPCfg();
  virtual ~VIPCfg();

  VIPCfg(const VIPCfg& from);

  inline VIPCfg& operator=(const VIPCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const VIPCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VIPCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VIPCfg* other);

  // implements Message ----------------------------------------------

  VIPCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VIPCfg& from);
  void MergeFrom(const VIPCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 VIPModuleID = 1;
  inline bool has_vipmoduleid() const;
  inline void clear_vipmoduleid();
  static const int kVIPModuleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 vipmoduleid() const;
  inline void set_vipmoduleid(::google::protobuf::uint32 value);

  // required string Title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string Desc = 3;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 3;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required string VIPExtraPerm = 4;
  inline bool has_vipextraperm() const;
  inline void clear_vipextraperm();
  static const int kVIPExtraPermFieldNumber = 4;
  inline const ::std::string& vipextraperm() const;
  inline void set_vipextraperm(const ::std::string& value);
  inline void set_vipextraperm(const char* value);
  inline void set_vipextraperm(const char* value, size_t size);
  inline ::std::string* mutable_vipextraperm();
  inline ::std::string* release_vipextraperm();
  inline void set_allocated_vipextraperm(::std::string* vipextraperm);

  // required string TopLvPrompt = 5;
  inline bool has_toplvprompt() const;
  inline void clear_toplvprompt();
  static const int kTopLvPromptFieldNumber = 5;
  inline const ::std::string& toplvprompt() const;
  inline void set_toplvprompt(const ::std::string& value);
  inline void set_toplvprompt(const char* value);
  inline void set_toplvprompt(const char* value, size_t size);
  inline ::std::string* mutable_toplvprompt();
  inline ::std::string* release_toplvprompt();
  inline void set_allocated_toplvprompt(::std::string* toplvprompt);

  // repeated uint32 VIPParam = 6;
  inline int vipparam_size() const;
  inline void clear_vipparam();
  static const int kVIPParamFieldNumber = 6;
  inline ::google::protobuf::uint32 vipparam(int index) const;
  inline void set_vipparam(int index, ::google::protobuf::uint32 value);
  inline void add_vipparam(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      vipparam() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_vipparam();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.VIPCfg)
 private:
  inline void set_has_vipmoduleid();
  inline void clear_has_vipmoduleid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_vipextraperm();
  inline void clear_has_vipextraperm();
  inline void set_has_toplvprompt();
  inline void clear_has_toplvprompt();

  ::std::string* title_;
  ::std::string* desc_;
  ::std::string* vipextraperm_;
  ::std::string* toplvprompt_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > vipparam_;
  ::google::protobuf::uint32 vipmoduleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_VIPCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_VIPCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_VIPCfg_2eproto();
  friend void protobuf_ShutdownFile_VIPCfg_2eproto();

  void InitAsDefaultInstance();
  static VIPCfg* default_instance_;
};
// -------------------------------------------------------------------

class VIPCfgSet : public ::google::protobuf::MessageLite {
 public:
  VIPCfgSet();
  virtual ~VIPCfgSet();

  VIPCfgSet(const VIPCfgSet& from);

  inline VIPCfgSet& operator=(const VIPCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const VIPCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const VIPCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(VIPCfgSet* other);

  // implements Message ----------------------------------------------

  VIPCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const VIPCfgSet& from);
  void MergeFrom(const VIPCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.VIPCfg vipcfg = 1;
  inline int vipcfg_size() const;
  inline void clear_vipcfg();
  static const int kVipcfgFieldNumber = 1;
  inline const ::com::cfg::vo::VIPCfg& vipcfg(int index) const;
  inline ::com::cfg::vo::VIPCfg* mutable_vipcfg(int index);
  inline ::com::cfg::vo::VIPCfg* add_vipcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::VIPCfg >&
      vipcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::VIPCfg >*
      mutable_vipcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.VIPCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::VIPCfg > vipcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_VIPCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_VIPCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_VIPCfg_2eproto();
  friend void protobuf_ShutdownFile_VIPCfg_2eproto();

  void InitAsDefaultInstance();
  static VIPCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// VIPCfg

// required uint32 VIPModuleID = 1;
inline bool VIPCfg::has_vipmoduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VIPCfg::set_has_vipmoduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VIPCfg::clear_has_vipmoduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VIPCfg::clear_vipmoduleid() {
  vipmoduleid_ = 0u;
  clear_has_vipmoduleid();
}
inline ::google::protobuf::uint32 VIPCfg::vipmoduleid() const {
  return vipmoduleid_;
}
inline void VIPCfg::set_vipmoduleid(::google::protobuf::uint32 value) {
  set_has_vipmoduleid();
  vipmoduleid_ = value;
}

// required string Title = 2;
inline bool VIPCfg::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VIPCfg::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VIPCfg::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VIPCfg::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& VIPCfg::title() const {
  return *title_;
}
inline void VIPCfg::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void VIPCfg::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void VIPCfg::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VIPCfg::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* VIPCfg::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VIPCfg::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Desc = 3;
inline bool VIPCfg::has_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VIPCfg::set_has_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VIPCfg::clear_has_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VIPCfg::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& VIPCfg::desc() const {
  return *desc_;
}
inline void VIPCfg::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void VIPCfg::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void VIPCfg::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VIPCfg::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* VIPCfg::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VIPCfg::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string VIPExtraPerm = 4;
inline bool VIPCfg::has_vipextraperm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VIPCfg::set_has_vipextraperm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VIPCfg::clear_has_vipextraperm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VIPCfg::clear_vipextraperm() {
  if (vipextraperm_ != &::google::protobuf::internal::kEmptyString) {
    vipextraperm_->clear();
  }
  clear_has_vipextraperm();
}
inline const ::std::string& VIPCfg::vipextraperm() const {
  return *vipextraperm_;
}
inline void VIPCfg::set_vipextraperm(const ::std::string& value) {
  set_has_vipextraperm();
  if (vipextraperm_ == &::google::protobuf::internal::kEmptyString) {
    vipextraperm_ = new ::std::string;
  }
  vipextraperm_->assign(value);
}
inline void VIPCfg::set_vipextraperm(const char* value) {
  set_has_vipextraperm();
  if (vipextraperm_ == &::google::protobuf::internal::kEmptyString) {
    vipextraperm_ = new ::std::string;
  }
  vipextraperm_->assign(value);
}
inline void VIPCfg::set_vipextraperm(const char* value, size_t size) {
  set_has_vipextraperm();
  if (vipextraperm_ == &::google::protobuf::internal::kEmptyString) {
    vipextraperm_ = new ::std::string;
  }
  vipextraperm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VIPCfg::mutable_vipextraperm() {
  set_has_vipextraperm();
  if (vipextraperm_ == &::google::protobuf::internal::kEmptyString) {
    vipextraperm_ = new ::std::string;
  }
  return vipextraperm_;
}
inline ::std::string* VIPCfg::release_vipextraperm() {
  clear_has_vipextraperm();
  if (vipextraperm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = vipextraperm_;
    vipextraperm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VIPCfg::set_allocated_vipextraperm(::std::string* vipextraperm) {
  if (vipextraperm_ != &::google::protobuf::internal::kEmptyString) {
    delete vipextraperm_;
  }
  if (vipextraperm) {
    set_has_vipextraperm();
    vipextraperm_ = vipextraperm;
  } else {
    clear_has_vipextraperm();
    vipextraperm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TopLvPrompt = 5;
inline bool VIPCfg::has_toplvprompt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VIPCfg::set_has_toplvprompt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VIPCfg::clear_has_toplvprompt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VIPCfg::clear_toplvprompt() {
  if (toplvprompt_ != &::google::protobuf::internal::kEmptyString) {
    toplvprompt_->clear();
  }
  clear_has_toplvprompt();
}
inline const ::std::string& VIPCfg::toplvprompt() const {
  return *toplvprompt_;
}
inline void VIPCfg::set_toplvprompt(const ::std::string& value) {
  set_has_toplvprompt();
  if (toplvprompt_ == &::google::protobuf::internal::kEmptyString) {
    toplvprompt_ = new ::std::string;
  }
  toplvprompt_->assign(value);
}
inline void VIPCfg::set_toplvprompt(const char* value) {
  set_has_toplvprompt();
  if (toplvprompt_ == &::google::protobuf::internal::kEmptyString) {
    toplvprompt_ = new ::std::string;
  }
  toplvprompt_->assign(value);
}
inline void VIPCfg::set_toplvprompt(const char* value, size_t size) {
  set_has_toplvprompt();
  if (toplvprompt_ == &::google::protobuf::internal::kEmptyString) {
    toplvprompt_ = new ::std::string;
  }
  toplvprompt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VIPCfg::mutable_toplvprompt() {
  set_has_toplvprompt();
  if (toplvprompt_ == &::google::protobuf::internal::kEmptyString) {
    toplvprompt_ = new ::std::string;
  }
  return toplvprompt_;
}
inline ::std::string* VIPCfg::release_toplvprompt() {
  clear_has_toplvprompt();
  if (toplvprompt_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = toplvprompt_;
    toplvprompt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void VIPCfg::set_allocated_toplvprompt(::std::string* toplvprompt) {
  if (toplvprompt_ != &::google::protobuf::internal::kEmptyString) {
    delete toplvprompt_;
  }
  if (toplvprompt) {
    set_has_toplvprompt();
    toplvprompt_ = toplvprompt;
  } else {
    clear_has_toplvprompt();
    toplvprompt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 VIPParam = 6;
inline int VIPCfg::vipparam_size() const {
  return vipparam_.size();
}
inline void VIPCfg::clear_vipparam() {
  vipparam_.Clear();
}
inline ::google::protobuf::uint32 VIPCfg::vipparam(int index) const {
  return vipparam_.Get(index);
}
inline void VIPCfg::set_vipparam(int index, ::google::protobuf::uint32 value) {
  vipparam_.Set(index, value);
}
inline void VIPCfg::add_vipparam(::google::protobuf::uint32 value) {
  vipparam_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
VIPCfg::vipparam() const {
  return vipparam_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
VIPCfg::mutable_vipparam() {
  return &vipparam_;
}

// -------------------------------------------------------------------

// VIPCfgSet

// repeated .com.cfg.vo.VIPCfg vipcfg = 1;
inline int VIPCfgSet::vipcfg_size() const {
  return vipcfg_.size();
}
inline void VIPCfgSet::clear_vipcfg() {
  vipcfg_.Clear();
}
inline const ::com::cfg::vo::VIPCfg& VIPCfgSet::vipcfg(int index) const {
  return vipcfg_.Get(index);
}
inline ::com::cfg::vo::VIPCfg* VIPCfgSet::mutable_vipcfg(int index) {
  return vipcfg_.Mutable(index);
}
inline ::com::cfg::vo::VIPCfg* VIPCfgSet::add_vipcfg() {
  return vipcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::VIPCfg >&
VIPCfgSet::vipcfg() const {
  return vipcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::VIPCfg >*
VIPCfgSet::mutable_vipcfg() {
  return &vipcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_VIPCfg_2eproto__INCLUDED
