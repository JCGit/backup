// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WorldBossLvCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WorldBossLvCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WorldBossLvCfg_2eproto() {
  delete WorldBossLvCfg::default_instance_;
  delete WorldBossLvCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WorldBossLvCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WorldBossLvCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::com::cfg::vo::protobuf_AddDesc_MonsterCfg_2eproto();
  ::com::cfg::vo::protobuf_AddDesc_MonsterLevCfg_2eproto();
  WorldBossLvCfg::default_instance_ = new WorldBossLvCfg();
  WorldBossLvCfgSet::default_instance_ = new WorldBossLvCfgSet();
  WorldBossLvCfg::default_instance_->InitAsDefaultInstance();
  WorldBossLvCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WorldBossLvCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WorldBossLvCfg_2eproto_once_);
void protobuf_AddDesc_WorldBossLvCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WorldBossLvCfg_2eproto_once_,
                 &protobuf_AddDesc_WorldBossLvCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WorldBossLvCfg_2eproto {
  StaticDescriptorInitializer_WorldBossLvCfg_2eproto() {
    protobuf_AddDesc_WorldBossLvCfg_2eproto();
  }
} static_descriptor_initializer_WorldBossLvCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WorldBossLvCfg::kLevelFieldNumber;
const int WorldBossLvCfg::kHpFieldNumber;
const int WorldBossLvCfg::kAtkFieldNumber;
const int WorldBossLvCfg::kAtkAttFieldNumber;
const int WorldBossLvCfg::kMaxWalkSpeedFieldNumber;
const int WorldBossLvCfg::kMinWalkSpeedFieldNumber;
const int WorldBossLvCfg::kDefFieldNumber;
const int WorldBossLvCfg::kDefAttsFieldNumber;
#endif  // !_MSC_VER

WorldBossLvCfg::WorldBossLvCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WorldBossLvCfg::InitAsDefaultInstance() {
}

WorldBossLvCfg::WorldBossLvCfg(const WorldBossLvCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossLvCfg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  atk_ = 0u;
  atkatt_ = 0u;
  maxwalkspeed_ = 0u;
  minwalkspeed_ = 0u;
  def_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossLvCfg::~WorldBossLvCfg() {
  SharedDtor();
}

void WorldBossLvCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorldBossLvCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorldBossLvCfg& WorldBossLvCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WorldBossLvCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossLvCfg_2eproto();
#endif
  return *default_instance_;
}

WorldBossLvCfg* WorldBossLvCfg::default_instance_ = NULL;

WorldBossLvCfg* WorldBossLvCfg::New() const {
  return new WorldBossLvCfg;
}

void WorldBossLvCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    hp_ = GOOGLE_ULONGLONG(0);
    atk_ = 0u;
    atkatt_ = 0u;
    maxwalkspeed_ = 0u;
    minwalkspeed_ = 0u;
    def_ = 0u;
  }
  defatts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WorldBossLvCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // required uint64 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_atk;
        break;
      }

      // required uint32 atk = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_atkAtt;
        break;
      }

      // required uint32 atkAtt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkatt_)));
          set_has_atkatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxWalkSpeed;
        break;
      }

      // required uint32 maxWalkSpeed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwalkspeed_)));
          set_has_maxwalkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minWalkSpeed;
        break;
      }

      // required uint32 minWalkSpeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minwalkspeed_)));
          set_has_minwalkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_def;
        break;
      }

      // required uint32 def = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_defAtts;
        break;
      }

      // repeated .com.cfg.vo.DefAttElement defAtts = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defAtts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defatts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_defAtts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossLvCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint64 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hp(), output);
  }

  // required uint32 atk = 3;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->atk(), output);
  }

  // required uint32 atkAtt = 4;
  if (has_atkatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atkatt(), output);
  }

  // required uint32 maxWalkSpeed = 5;
  if (has_maxwalkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxwalkspeed(), output);
  }

  // required uint32 minWalkSpeed = 6;
  if (has_minwalkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->minwalkspeed(), output);
  }

  // required uint32 def = 7;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def(), output);
  }

  // repeated .com.cfg.vo.DefAttElement defAtts = 9;
  for (int i = 0; i < this->defatts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->defatts(i), output);
  }

}

int WorldBossLvCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // required uint32 atk = 3;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 atkAtt = 4;
    if (has_atkatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkatt());
    }

    // required uint32 maxWalkSpeed = 5;
    if (has_maxwalkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwalkspeed());
    }

    // required uint32 minWalkSpeed = 6;
    if (has_minwalkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minwalkspeed());
    }

    // required uint32 def = 7;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }

  }
  // repeated .com.cfg.vo.DefAttElement defAtts = 9;
  total_size += 1 * this->defatts_size();
  for (int i = 0; i < this->defatts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defatts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossLvCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorldBossLvCfg*>(&from));
}

void WorldBossLvCfg::MergeFrom(const WorldBossLvCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  defatts_.MergeFrom(from.defatts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_atkatt()) {
      set_atkatt(from.atkatt());
    }
    if (from.has_maxwalkspeed()) {
      set_maxwalkspeed(from.maxwalkspeed());
    }
    if (from.has_minwalkspeed()) {
      set_minwalkspeed(from.minwalkspeed());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
  }
}

void WorldBossLvCfg::CopyFrom(const WorldBossLvCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossLvCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < defatts_size(); i++) {
    if (!this->defatts(i).IsInitialized()) return false;
  }
  return true;
}

void WorldBossLvCfg::Swap(WorldBossLvCfg* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(atk_, other->atk_);
    std::swap(atkatt_, other->atkatt_);
    std::swap(maxwalkspeed_, other->maxwalkspeed_);
    std::swap(minwalkspeed_, other->minwalkspeed_);
    std::swap(def_, other->def_);
    defatts_.Swap(&other->defatts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorldBossLvCfg::GetTypeName() const {
  return "com.cfg.vo.WorldBossLvCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WorldBossLvCfgSet::kWorldBossLvCfgFieldNumber;
#endif  // !_MSC_VER

WorldBossLvCfgSet::WorldBossLvCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WorldBossLvCfgSet::InitAsDefaultInstance() {
}

WorldBossLvCfgSet::WorldBossLvCfgSet(const WorldBossLvCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WorldBossLvCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldBossLvCfgSet::~WorldBossLvCfgSet() {
  SharedDtor();
}

void WorldBossLvCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WorldBossLvCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WorldBossLvCfgSet& WorldBossLvCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WorldBossLvCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WorldBossLvCfg_2eproto();
#endif
  return *default_instance_;
}

WorldBossLvCfgSet* WorldBossLvCfgSet::default_instance_ = NULL;

WorldBossLvCfgSet* WorldBossLvCfgSet::New() const {
  return new WorldBossLvCfgSet;
}

void WorldBossLvCfgSet::Clear() {
  worldbosslvcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WorldBossLvCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WorldBossLvCfg worldBossLvCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_worldBossLvCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_worldbosslvcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_worldBossLvCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldBossLvCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WorldBossLvCfg worldBossLvCfg = 1;
  for (int i = 0; i < this->worldbosslvcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->worldbosslvcfg(i), output);
  }

}

int WorldBossLvCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WorldBossLvCfg worldBossLvCfg = 1;
  total_size += 1 * this->worldbosslvcfg_size();
  for (int i = 0; i < this->worldbosslvcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->worldbosslvcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldBossLvCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WorldBossLvCfgSet*>(&from));
}

void WorldBossLvCfgSet::MergeFrom(const WorldBossLvCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  worldbosslvcfg_.MergeFrom(from.worldbosslvcfg_);
}

void WorldBossLvCfgSet::CopyFrom(const WorldBossLvCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldBossLvCfgSet::IsInitialized() const {

  for (int i = 0; i < worldbosslvcfg_size(); i++) {
    if (!this->worldbosslvcfg(i).IsInitialized()) return false;
  }
  return true;
}

void WorldBossLvCfgSet::Swap(WorldBossLvCfgSet* other) {
  if (other != this) {
    worldbosslvcfg_.Swap(&other->worldbosslvcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WorldBossLvCfgSet::GetTypeName() const {
  return "com.cfg.vo.WorldBossLvCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
