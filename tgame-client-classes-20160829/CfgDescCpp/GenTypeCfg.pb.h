// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenTypeCfg.proto

#ifndef PROTOBUF_GenTypeCfg_2eproto__INCLUDED
#define PROTOBUF_GenTypeCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GenTypeCfg_2eproto();
void protobuf_AssignDesc_GenTypeCfg_2eproto();
void protobuf_ShutdownFile_GenTypeCfg_2eproto();

class GenTypeCfg;
class GenTypeCfgSet;

// ===================================================================

class GenTypeCfg : public ::google::protobuf::MessageLite {
 public:
  GenTypeCfg();
  virtual ~GenTypeCfg();

  GenTypeCfg(const GenTypeCfg& from);

  inline GenTypeCfg& operator=(const GenTypeCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const GenTypeCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GenTypeCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GenTypeCfg* other);

  // implements Message ----------------------------------------------

  GenTypeCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GenTypeCfg& from);
  void MergeFrom(const GenTypeCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 LimitVipLv = 3;
  inline bool has_limitviplv() const;
  inline void clear_limitviplv();
  static const int kLimitVipLvFieldNumber = 3;
  inline ::google::protobuf::uint32 limitviplv() const;
  inline void set_limitviplv(::google::protobuf::uint32 value);

  // required string LimitVipTip = 4;
  inline bool has_limitviptip() const;
  inline void clear_limitviptip();
  static const int kLimitVipTipFieldNumber = 4;
  inline const ::std::string& limitviptip() const;
  inline void set_limitviptip(const ::std::string& value);
  inline void set_limitviptip(const char* value);
  inline void set_limitviptip(const char* value, size_t size);
  inline ::std::string* mutable_limitviptip();
  inline ::std::string* release_limitviptip();
  inline void set_allocated_limitviptip(::std::string* limitviptip);

  // required string CostTip = 5;
  inline bool has_costtip() const;
  inline void clear_costtip();
  static const int kCostTipFieldNumber = 5;
  inline const ::std::string& costtip() const;
  inline void set_costtip(const ::std::string& value);
  inline void set_costtip(const char* value);
  inline void set_costtip(const char* value, size_t size);
  inline ::std::string* mutable_costtip();
  inline ::std::string* release_costtip();
  inline void set_allocated_costtip(::std::string* costtip);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.GenTypeCfg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_limitviplv();
  inline void clear_has_limitviplv();
  inline void set_has_limitviptip();
  inline void clear_has_limitviptip();
  inline void set_has_costtip();
  inline void clear_has_costtip();

  ::std::string* name_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 limitviplv_;
  ::std::string* limitviptip_;
  ::std::string* costtip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GenTypeCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GenTypeCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_GenTypeCfg_2eproto();
  friend void protobuf_ShutdownFile_GenTypeCfg_2eproto();

  void InitAsDefaultInstance();
  static GenTypeCfg* default_instance_;
};
// -------------------------------------------------------------------

class GenTypeCfgSet : public ::google::protobuf::MessageLite {
 public:
  GenTypeCfgSet();
  virtual ~GenTypeCfgSet();

  GenTypeCfgSet(const GenTypeCfgSet& from);

  inline GenTypeCfgSet& operator=(const GenTypeCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const GenTypeCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const GenTypeCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(GenTypeCfgSet* other);

  // implements Message ----------------------------------------------

  GenTypeCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const GenTypeCfgSet& from);
  void MergeFrom(const GenTypeCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.GenTypeCfg genTypeCfg = 1;
  inline int gentypecfg_size() const;
  inline void clear_gentypecfg();
  static const int kGenTypeCfgFieldNumber = 1;
  inline const ::com::cfg::vo::GenTypeCfg& gentypecfg(int index) const;
  inline ::com::cfg::vo::GenTypeCfg* mutable_gentypecfg(int index);
  inline ::com::cfg::vo::GenTypeCfg* add_gentypecfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::GenTypeCfg >&
      gentypecfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::GenTypeCfg >*
      mutable_gentypecfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.GenTypeCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::GenTypeCfg > gentypecfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_GenTypeCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_GenTypeCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_GenTypeCfg_2eproto();
  friend void protobuf_ShutdownFile_GenTypeCfg_2eproto();

  void InitAsDefaultInstance();
  static GenTypeCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// GenTypeCfg

// required uint32 Type = 1;
inline bool GenTypeCfg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GenTypeCfg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GenTypeCfg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GenTypeCfg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 GenTypeCfg::type() const {
  return type_;
}
inline void GenTypeCfg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required string Name = 2;
inline bool GenTypeCfg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GenTypeCfg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GenTypeCfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GenTypeCfg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GenTypeCfg::name() const {
  return *name_;
}
inline void GenTypeCfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GenTypeCfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GenTypeCfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenTypeCfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GenTypeCfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenTypeCfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 LimitVipLv = 3;
inline bool GenTypeCfg::has_limitviplv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GenTypeCfg::set_has_limitviplv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GenTypeCfg::clear_has_limitviplv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GenTypeCfg::clear_limitviplv() {
  limitviplv_ = 0u;
  clear_has_limitviplv();
}
inline ::google::protobuf::uint32 GenTypeCfg::limitviplv() const {
  return limitviplv_;
}
inline void GenTypeCfg::set_limitviplv(::google::protobuf::uint32 value) {
  set_has_limitviplv();
  limitviplv_ = value;
}

// required string LimitVipTip = 4;
inline bool GenTypeCfg::has_limitviptip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GenTypeCfg::set_has_limitviptip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GenTypeCfg::clear_has_limitviptip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GenTypeCfg::clear_limitviptip() {
  if (limitviptip_ != &::google::protobuf::internal::kEmptyString) {
    limitviptip_->clear();
  }
  clear_has_limitviptip();
}
inline const ::std::string& GenTypeCfg::limitviptip() const {
  return *limitviptip_;
}
inline void GenTypeCfg::set_limitviptip(const ::std::string& value) {
  set_has_limitviptip();
  if (limitviptip_ == &::google::protobuf::internal::kEmptyString) {
    limitviptip_ = new ::std::string;
  }
  limitviptip_->assign(value);
}
inline void GenTypeCfg::set_limitviptip(const char* value) {
  set_has_limitviptip();
  if (limitviptip_ == &::google::protobuf::internal::kEmptyString) {
    limitviptip_ = new ::std::string;
  }
  limitviptip_->assign(value);
}
inline void GenTypeCfg::set_limitviptip(const char* value, size_t size) {
  set_has_limitviptip();
  if (limitviptip_ == &::google::protobuf::internal::kEmptyString) {
    limitviptip_ = new ::std::string;
  }
  limitviptip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenTypeCfg::mutable_limitviptip() {
  set_has_limitviptip();
  if (limitviptip_ == &::google::protobuf::internal::kEmptyString) {
    limitviptip_ = new ::std::string;
  }
  return limitviptip_;
}
inline ::std::string* GenTypeCfg::release_limitviptip() {
  clear_has_limitviptip();
  if (limitviptip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = limitviptip_;
    limitviptip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenTypeCfg::set_allocated_limitviptip(::std::string* limitviptip) {
  if (limitviptip_ != &::google::protobuf::internal::kEmptyString) {
    delete limitviptip_;
  }
  if (limitviptip) {
    set_has_limitviptip();
    limitviptip_ = limitviptip;
  } else {
    clear_has_limitviptip();
    limitviptip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string CostTip = 5;
inline bool GenTypeCfg::has_costtip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GenTypeCfg::set_has_costtip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GenTypeCfg::clear_has_costtip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GenTypeCfg::clear_costtip() {
  if (costtip_ != &::google::protobuf::internal::kEmptyString) {
    costtip_->clear();
  }
  clear_has_costtip();
}
inline const ::std::string& GenTypeCfg::costtip() const {
  return *costtip_;
}
inline void GenTypeCfg::set_costtip(const ::std::string& value) {
  set_has_costtip();
  if (costtip_ == &::google::protobuf::internal::kEmptyString) {
    costtip_ = new ::std::string;
  }
  costtip_->assign(value);
}
inline void GenTypeCfg::set_costtip(const char* value) {
  set_has_costtip();
  if (costtip_ == &::google::protobuf::internal::kEmptyString) {
    costtip_ = new ::std::string;
  }
  costtip_->assign(value);
}
inline void GenTypeCfg::set_costtip(const char* value, size_t size) {
  set_has_costtip();
  if (costtip_ == &::google::protobuf::internal::kEmptyString) {
    costtip_ = new ::std::string;
  }
  costtip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GenTypeCfg::mutable_costtip() {
  set_has_costtip();
  if (costtip_ == &::google::protobuf::internal::kEmptyString) {
    costtip_ = new ::std::string;
  }
  return costtip_;
}
inline ::std::string* GenTypeCfg::release_costtip() {
  clear_has_costtip();
  if (costtip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = costtip_;
    costtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GenTypeCfg::set_allocated_costtip(::std::string* costtip) {
  if (costtip_ != &::google::protobuf::internal::kEmptyString) {
    delete costtip_;
  }
  if (costtip) {
    set_has_costtip();
    costtip_ = costtip;
  } else {
    clear_has_costtip();
    costtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GenTypeCfgSet

// repeated .com.cfg.vo.GenTypeCfg genTypeCfg = 1;
inline int GenTypeCfgSet::gentypecfg_size() const {
  return gentypecfg_.size();
}
inline void GenTypeCfgSet::clear_gentypecfg() {
  gentypecfg_.Clear();
}
inline const ::com::cfg::vo::GenTypeCfg& GenTypeCfgSet::gentypecfg(int index) const {
  return gentypecfg_.Get(index);
}
inline ::com::cfg::vo::GenTypeCfg* GenTypeCfgSet::mutable_gentypecfg(int index) {
  return gentypecfg_.Mutable(index);
}
inline ::com::cfg::vo::GenTypeCfg* GenTypeCfgSet::add_gentypecfg() {
  return gentypecfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::GenTypeCfg >&
GenTypeCfgSet::gentypecfg() const {
  return gentypecfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::GenTypeCfg >*
GenTypeCfgSet::mutable_gentypecfg() {
  return &gentypecfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GenTypeCfg_2eproto__INCLUDED
