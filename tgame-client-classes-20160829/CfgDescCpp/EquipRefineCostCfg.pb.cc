// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipRefineCostCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipRefineCostCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EquipRefineCostCfg_2eproto() {
  delete EquipRefineCostCfg::default_instance_;
  delete EquipRefineCostCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EquipRefineCostCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EquipRefineCostCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EquipRefineCostCfg::default_instance_ = new EquipRefineCostCfg();
  EquipRefineCostCfgSet::default_instance_ = new EquipRefineCostCfgSet();
  EquipRefineCostCfg::default_instance_->InitAsDefaultInstance();
  EquipRefineCostCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipRefineCostCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EquipRefineCostCfg_2eproto_once_);
void protobuf_AddDesc_EquipRefineCostCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EquipRefineCostCfg_2eproto_once_,
                 &protobuf_AddDesc_EquipRefineCostCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipRefineCostCfg_2eproto {
  StaticDescriptorInitializer_EquipRefineCostCfg_2eproto() {
    protobuf_AddDesc_EquipRefineCostCfg_2eproto();
  }
} static_descriptor_initializer_EquipRefineCostCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EquipRefineCostCfg::kRefineLvFieldNumber;
const int EquipRefineCostCfg::kRefineDescFieldNumber;
const int EquipRefineCostCfg::kEquipLvFieldNumber;
const int EquipRefineCostCfg::kPartFieldNumber;
const int EquipRefineCostCfg::kCostItemIDFieldNumber;
const int EquipRefineCostCfg::kCostItemNumFieldNumber;
const int EquipRefineCostCfg::kExtCostGoldFieldNumber;
const int EquipRefineCostCfg::kProbFieldNumber;
const int EquipRefineCostCfg::kColorAttrAddFieldNumber;
const int EquipRefineCostCfg::kTransCostCoinFieldNumber;
const int EquipRefineCostCfg::kCostCoinFieldNumber;
#endif  // !_MSC_VER

EquipRefineCostCfg::EquipRefineCostCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipRefineCostCfg::InitAsDefaultInstance() {
}

EquipRefineCostCfg::EquipRefineCostCfg(const EquipRefineCostCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipRefineCostCfg::SharedCtor() {
  _cached_size_ = 0;
  refinelv_ = 0u;
  refinedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equiplv_ = 0u;
  part_ = 0u;
  costitemid_ = 0u;
  costitemnum_ = 0u;
  extcostgold_ = 0u;
  prob_ = 0u;
  transcostcoin_ = 0u;
  costcoin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRefineCostCfg::~EquipRefineCostCfg() {
  SharedDtor();
}

void EquipRefineCostCfg::SharedDtor() {
  if (refinedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete refinedesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipRefineCostCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipRefineCostCfg& EquipRefineCostCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipRefineCostCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipRefineCostCfg_2eproto();
#endif
  return *default_instance_;
}

EquipRefineCostCfg* EquipRefineCostCfg::default_instance_ = NULL;

EquipRefineCostCfg* EquipRefineCostCfg::New() const {
  return new EquipRefineCostCfg;
}

void EquipRefineCostCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    refinelv_ = 0u;
    if (has_refinedesc()) {
      if (refinedesc_ != &::google::protobuf::internal::kEmptyString) {
        refinedesc_->clear();
      }
    }
    equiplv_ = 0u;
    part_ = 0u;
    costitemid_ = 0u;
    costitemnum_ = 0u;
    extcostgold_ = 0u;
    prob_ = 0u;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    transcostcoin_ = 0u;
    costcoin_ = 0u;
  }
  colorattradd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipRefineCostCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RefineLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_RefineDesc;
        break;
      }

      // required string RefineDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RefineDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refinedesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_EquipLv;
        break;
      }

      // required uint32 EquipLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiplv_)));
          set_has_equiplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Part;
        break;
      }

      // required uint32 Part = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CostItemID;
        break;
      }

      // required uint32 CostItemID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costitemid_)));
          set_has_costitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CostItemNum;
        break;
      }

      // required uint32 CostItemNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costitemnum_)));
          set_has_costitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ExtCostGold;
        break;
      }

      // required uint32 ExtCostGold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExtCostGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extcostgold_)));
          set_has_extcostgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Prob;
        break;
      }

      // required uint32 Prob = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ColorAttrAdd;
        break;
      }

      // repeated uint32 ColorAttrAdd = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ColorAttrAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 80, input, this->mutable_colorattradd())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_colorattradd())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ColorAttrAdd;
        if (input->ExpectTag(88)) goto parse_TransCostCoin;
        break;
      }

      // required uint32 TransCostCoin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TransCostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transcostcoin_)));
          set_has_transcostcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_CostCoin;
        break;
      }

      // required uint32 CostCoin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcoin_)));
          set_has_costcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipRefineCostCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RefineLv = 2;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refinelv(), output);
  }

  // required string RefineDesc = 3;
  if (has_refinedesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->refinedesc(), output);
  }

  // required uint32 EquipLv = 4;
  if (has_equiplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->equiplv(), output);
  }

  // required uint32 Part = 5;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->part(), output);
  }

  // required uint32 CostItemID = 6;
  if (has_costitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->costitemid(), output);
  }

  // required uint32 CostItemNum = 7;
  if (has_costitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->costitemnum(), output);
  }

  // required uint32 ExtCostGold = 8;
  if (has_extcostgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->extcostgold(), output);
  }

  // required uint32 Prob = 9;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prob(), output);
  }

  // repeated uint32 ColorAttrAdd = 10;
  for (int i = 0; i < this->colorattradd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      10, this->colorattradd(i), output);
  }

  // required uint32 TransCostCoin = 11;
  if (has_transcostcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->transcostcoin(), output);
  }

  // required uint32 CostCoin = 12;
  if (has_costcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->costcoin(), output);
  }

}

int EquipRefineCostCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RefineLv = 2;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

    // required string RefineDesc = 3;
    if (has_refinedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refinedesc());
    }

    // required uint32 EquipLv = 4;
    if (has_equiplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiplv());
    }

    // required uint32 Part = 5;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

    // required uint32 CostItemID = 6;
    if (has_costitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costitemid());
    }

    // required uint32 CostItemNum = 7;
    if (has_costitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costitemnum());
    }

    // required uint32 ExtCostGold = 8;
    if (has_extcostgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extcostgold());
    }

    // required uint32 Prob = 9;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // required uint32 TransCostCoin = 11;
    if (has_transcostcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transcostcoin());
    }

    // required uint32 CostCoin = 12;
    if (has_costcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcoin());
    }

  }
  // repeated uint32 ColorAttrAdd = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->colorattradd_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->colorattradd(i));
    }
    total_size += 1 * this->colorattradd_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRefineCostCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipRefineCostCfg*>(&from));
}

void EquipRefineCostCfg::MergeFrom(const EquipRefineCostCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  colorattradd_.MergeFrom(from.colorattradd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
    if (from.has_refinedesc()) {
      set_refinedesc(from.refinedesc());
    }
    if (from.has_equiplv()) {
      set_equiplv(from.equiplv());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_costitemid()) {
      set_costitemid(from.costitemid());
    }
    if (from.has_costitemnum()) {
      set_costitemnum(from.costitemnum());
    }
    if (from.has_extcostgold()) {
      set_extcostgold(from.extcostgold());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_transcostcoin()) {
      set_transcostcoin(from.transcostcoin());
    }
    if (from.has_costcoin()) {
      set_costcoin(from.costcoin());
    }
  }
}

void EquipRefineCostCfg::CopyFrom(const EquipRefineCostCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRefineCostCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000006ff) != 0x000006ff) return false;

  return true;
}

void EquipRefineCostCfg::Swap(EquipRefineCostCfg* other) {
  if (other != this) {
    std::swap(refinelv_, other->refinelv_);
    std::swap(refinedesc_, other->refinedesc_);
    std::swap(equiplv_, other->equiplv_);
    std::swap(part_, other->part_);
    std::swap(costitemid_, other->costitemid_);
    std::swap(costitemnum_, other->costitemnum_);
    std::swap(extcostgold_, other->extcostgold_);
    std::swap(prob_, other->prob_);
    colorattradd_.Swap(&other->colorattradd_);
    std::swap(transcostcoin_, other->transcostcoin_);
    std::swap(costcoin_, other->costcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipRefineCostCfg::GetTypeName() const {
  return "com.cfg.vo.EquipRefineCostCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRefineCostCfgSet::kEquiprefinecostcfgFieldNumber;
#endif  // !_MSC_VER

EquipRefineCostCfgSet::EquipRefineCostCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipRefineCostCfgSet::InitAsDefaultInstance() {
}

EquipRefineCostCfgSet::EquipRefineCostCfgSet(const EquipRefineCostCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipRefineCostCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRefineCostCfgSet::~EquipRefineCostCfgSet() {
  SharedDtor();
}

void EquipRefineCostCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipRefineCostCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipRefineCostCfgSet& EquipRefineCostCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipRefineCostCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipRefineCostCfg_2eproto();
#endif
  return *default_instance_;
}

EquipRefineCostCfgSet* EquipRefineCostCfgSet::default_instance_ = NULL;

EquipRefineCostCfgSet* EquipRefineCostCfgSet::New() const {
  return new EquipRefineCostCfgSet;
}

void EquipRefineCostCfgSet::Clear() {
  equiprefinecostcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipRefineCostCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EquipRefineCostCfg equiprefinecostcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equiprefinecostcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiprefinecostcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equiprefinecostcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipRefineCostCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EquipRefineCostCfg equiprefinecostcfg = 1;
  for (int i = 0; i < this->equiprefinecostcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equiprefinecostcfg(i), output);
  }

}

int EquipRefineCostCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EquipRefineCostCfg equiprefinecostcfg = 1;
  total_size += 1 * this->equiprefinecostcfg_size();
  for (int i = 0; i < this->equiprefinecostcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiprefinecostcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRefineCostCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipRefineCostCfgSet*>(&from));
}

void EquipRefineCostCfgSet::MergeFrom(const EquipRefineCostCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiprefinecostcfg_.MergeFrom(from.equiprefinecostcfg_);
}

void EquipRefineCostCfgSet::CopyFrom(const EquipRefineCostCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRefineCostCfgSet::IsInitialized() const {

  for (int i = 0; i < equiprefinecostcfg_size(); i++) {
    if (!this->equiprefinecostcfg(i).IsInitialized()) return false;
  }
  return true;
}

void EquipRefineCostCfgSet::Swap(EquipRefineCostCfgSet* other) {
  if (other != this) {
    equiprefinecostcfg_.Swap(&other->equiprefinecostcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipRefineCostCfgSet::GetTypeName() const {
  return "com.cfg.vo.EquipRefineCostCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
