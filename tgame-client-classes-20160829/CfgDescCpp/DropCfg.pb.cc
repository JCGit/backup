// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DropCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DropCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DropCfg_2eproto() {
  delete DropElement::default_instance_;
  delete DropCfg::default_instance_;
  delete DropCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DropCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DropCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DropElement::default_instance_ = new DropElement();
  DropCfg::default_instance_ = new DropCfg();
  DropCfgSet::default_instance_ = new DropCfgSet();
  DropElement::default_instance_->InitAsDefaultInstance();
  DropCfg::default_instance_->InitAsDefaultInstance();
  DropCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DropCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DropCfg_2eproto_once_);
void protobuf_AddDesc_DropCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DropCfg_2eproto_once_,
                 &protobuf_AddDesc_DropCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DropCfg_2eproto {
  StaticDescriptorInitializer_DropCfg_2eproto() {
    protobuf_AddDesc_DropCfg_2eproto();
  }
} static_descriptor_initializer_DropCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DropElement::kElementIDFieldNumber;
const int DropElement::kElementTypeFieldNumber;
const int DropElement::kDropProbFieldNumber;
#endif  // !_MSC_VER

DropElement::DropElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DropElement::InitAsDefaultInstance() {
}

DropElement::DropElement(const DropElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DropElement::SharedCtor() {
  _cached_size_ = 0;
  elementid_ = 0u;
  elementtype_ = 0u;
  dropprob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropElement::~DropElement() {
  SharedDtor();
}

void DropElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DropElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DropElement& DropElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DropCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DropCfg_2eproto();
#endif
  return *default_instance_;
}

DropElement* DropElement::default_instance_ = NULL;

DropElement* DropElement::New() const {
  return new DropElement;
}

void DropElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementid_ = 0u;
    elementtype_ = 0u;
    dropprob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DropElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementType;
        break;
      }

      // required uint32 ElementType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DropProb;
        break;
      }

      // required uint32 DropProb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DropProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropprob_)));
          set_has_dropprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementID = 1;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementid(), output);
  }

  // required uint32 ElementType = 2;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementtype(), output);
  }

  // required uint32 DropProb = 5;
  if (has_dropprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dropprob(), output);
  }

}

int DropElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementID = 1;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementType = 2;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 DropProb = 5;
    if (has_dropprob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropprob());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DropElement*>(&from));
}

void DropElement::MergeFrom(const DropElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_dropprob()) {
      set_dropprob(from.dropprob());
    }
  }
}

void DropElement::CopyFrom(const DropElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DropElement::Swap(DropElement* other) {
  if (other != this) {
    std::swap(elementid_, other->elementid_);
    std::swap(elementtype_, other->elementtype_);
    std::swap(dropprob_, other->dropprob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DropElement::GetTypeName() const {
  return "com.cfg.vo.DropElement";
}


// ===================================================================

#ifndef _MSC_VER
const int DropCfg::kDropIDFieldNumber;
const int DropCfg::kElementLstFieldNumber;
#endif  // !_MSC_VER

DropCfg::DropCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DropCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  elementlst_ = const_cast< ::com::cfg::vo::DropElement*>(
      ::com::cfg::vo::DropElement::internal_default_instance());
#else
  elementlst_ = const_cast< ::com::cfg::vo::DropElement*>(&::com::cfg::vo::DropElement::default_instance());
#endif
}

DropCfg::DropCfg(const DropCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DropCfg::SharedCtor() {
  _cached_size_ = 0;
  dropid_ = 0u;
  elementlst_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropCfg::~DropCfg() {
  SharedDtor();
}

void DropCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete elementlst_;
  }
}

void DropCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DropCfg& DropCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DropCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DropCfg_2eproto();
#endif
  return *default_instance_;
}

DropCfg* DropCfg::default_instance_ = NULL;

DropCfg* DropCfg::New() const {
  return new DropCfg;
}

void DropCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dropid_ = 0u;
    if (has_elementlst()) {
      if (elementlst_ != NULL) elementlst_->::com::cfg::vo::DropElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DropCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DropID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ElementLst;
        break;
      }

      // required .com.cfg.vo.DropElement ElementLst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElementLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_elementlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DropID = 1;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropid(), output);
  }

  // required .com.cfg.vo.DropElement ElementLst = 5;
  if (has_elementlst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->elementlst(), output);
  }

}

int DropCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DropID = 1;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }

    // required .com.cfg.vo.DropElement ElementLst = 5;
    if (has_elementlst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elementlst());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DropCfg*>(&from));
}

void DropCfg::MergeFrom(const DropCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
    if (from.has_elementlst()) {
      mutable_elementlst()->::com::cfg::vo::DropElement::MergeFrom(from.elementlst());
    }
  }
}

void DropCfg::CopyFrom(const DropCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_elementlst()) {
    if (!this->elementlst().IsInitialized()) return false;
  }
  return true;
}

void DropCfg::Swap(DropCfg* other) {
  if (other != this) {
    std::swap(dropid_, other->dropid_);
    std::swap(elementlst_, other->elementlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DropCfg::GetTypeName() const {
  return "com.cfg.vo.DropCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DropCfgSet::kDropcfgFieldNumber;
#endif  // !_MSC_VER

DropCfgSet::DropCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DropCfgSet::InitAsDefaultInstance() {
}

DropCfgSet::DropCfgSet(const DropCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DropCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DropCfgSet::~DropCfgSet() {
  SharedDtor();
}

void DropCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DropCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DropCfgSet& DropCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DropCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DropCfg_2eproto();
#endif
  return *default_instance_;
}

DropCfgSet* DropCfgSet::default_instance_ = NULL;

DropCfgSet* DropCfgSet::New() const {
  return new DropCfgSet;
}

void DropCfgSet::Clear() {
  dropcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DropCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DropCfg dropcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dropcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dropcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DropCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DropCfg dropcfg = 1;
  for (int i = 0; i < this->dropcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dropcfg(i), output);
  }

}

int DropCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DropCfg dropcfg = 1;
  total_size += 1 * this->dropcfg_size();
  for (int i = 0; i < this->dropcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dropcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DropCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DropCfgSet*>(&from));
}

void DropCfgSet::MergeFrom(const DropCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  dropcfg_.MergeFrom(from.dropcfg_);
}

void DropCfgSet::CopyFrom(const DropCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DropCfgSet::IsInitialized() const {

  for (int i = 0; i < dropcfg_size(); i++) {
    if (!this->dropcfg(i).IsInitialized()) return false;
  }
  return true;
}

void DropCfgSet::Swap(DropCfgSet* other) {
  if (other != this) {
    dropcfg_.Swap(&other->dropcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DropCfgSet::GetTypeName() const {
  return "com.cfg.vo.DropCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
