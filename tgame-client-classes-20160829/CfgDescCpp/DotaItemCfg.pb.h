// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DotaItemCfg.proto

#ifndef PROTOBUF_DotaItemCfg_2eproto__INCLUDED
#define PROTOBUF_DotaItemCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DotaItemCfg_2eproto();
void protobuf_AssignDesc_DotaItemCfg_2eproto();
void protobuf_ShutdownFile_DotaItemCfg_2eproto();

class DotaItemComposeNeed;
class DotaItemCfg;
class DotaItemCfgSet;

// ===================================================================

class DotaItemComposeNeed : public ::google::protobuf::MessageLite {
 public:
  DotaItemComposeNeed();
  virtual ~DotaItemComposeNeed();

  DotaItemComposeNeed(const DotaItemComposeNeed& from);

  inline DotaItemComposeNeed& operator=(const DotaItemComposeNeed& from) {
    CopyFrom(from);
    return *this;
  }

  static const DotaItemComposeNeed& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DotaItemComposeNeed* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DotaItemComposeNeed* other);

  // implements Message ----------------------------------------------

  DotaItemComposeNeed* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DotaItemComposeNeed& from);
  void MergeFrom(const DotaItemComposeNeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 DotaItemID = 1;
  inline bool has_dotaitemid() const;
  inline void clear_dotaitemid();
  static const int kDotaItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dotaitemid() const;
  inline void set_dotaitemid(::google::protobuf::uint32 value);

  // required uint32 DotaItemCnt = 2;
  inline bool has_dotaitemcnt() const;
  inline void clear_dotaitemcnt();
  static const int kDotaItemCntFieldNumber = 2;
  inline ::google::protobuf::uint32 dotaitemcnt() const;
  inline void set_dotaitemcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DotaItemComposeNeed)
 private:
  inline void set_has_dotaitemid();
  inline void clear_has_dotaitemid();
  inline void set_has_dotaitemcnt();
  inline void clear_has_dotaitemcnt();

  ::google::protobuf::uint32 dotaitemid_;
  ::google::protobuf::uint32 dotaitemcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DotaItemCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DotaItemCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DotaItemCfg_2eproto();
  friend void protobuf_ShutdownFile_DotaItemCfg_2eproto();

  void InitAsDefaultInstance();
  static DotaItemComposeNeed* default_instance_;
};
// -------------------------------------------------------------------

class DotaItemCfg : public ::google::protobuf::MessageLite {
 public:
  DotaItemCfg();
  virtual ~DotaItemCfg();

  DotaItemCfg(const DotaItemCfg& from);

  inline DotaItemCfg& operator=(const DotaItemCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const DotaItemCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DotaItemCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DotaItemCfg* other);

  // implements Message ----------------------------------------------

  DotaItemCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DotaItemCfg& from);
  void MergeFrom(const DotaItemCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 DotaItemID = 1;
  inline bool has_dotaitemid() const;
  inline void clear_dotaitemid();
  static const int kDotaItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 dotaitemid() const;
  inline void set_dotaitemid(::google::protobuf::uint32 value);

  // repeated .com.cfg.vo.DotaItemComposeNeed DotaItemNeeds = 2;
  inline int dotaitemneeds_size() const;
  inline void clear_dotaitemneeds();
  static const int kDotaItemNeedsFieldNumber = 2;
  inline const ::com::cfg::vo::DotaItemComposeNeed& dotaitemneeds(int index) const;
  inline ::com::cfg::vo::DotaItemComposeNeed* mutable_dotaitemneeds(int index);
  inline ::com::cfg::vo::DotaItemComposeNeed* add_dotaitemneeds();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemComposeNeed >&
      dotaitemneeds() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemComposeNeed >*
      mutable_dotaitemneeds();

  // required uint32 ATK = 3;
  inline bool has_atk() const;
  inline void clear_atk();
  static const int kATKFieldNumber = 3;
  inline ::google::protobuf::uint32 atk() const;
  inline void set_atk(::google::protobuf::uint32 value);

  // required uint32 DEF = 4;
  inline bool has_def() const;
  inline void clear_def();
  static const int kDEFFieldNumber = 4;
  inline ::google::protobuf::uint32 def() const;
  inline void set_def(::google::protobuf::uint32 value);

  // required uint32 HP = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHPFieldNumber = 5;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // required uint32 HIT = 6;
  inline bool has_hit() const;
  inline void clear_hit();
  static const int kHITFieldNumber = 6;
  inline ::google::protobuf::uint32 hit() const;
  inline void set_hit(::google::protobuf::uint32 value);

  // required string DotaItemICON = 7;
  inline bool has_dotaitemicon() const;
  inline void clear_dotaitemicon();
  static const int kDotaItemICONFieldNumber = 7;
  inline const ::std::string& dotaitemicon() const;
  inline void set_dotaitemicon(const ::std::string& value);
  inline void set_dotaitemicon(const char* value);
  inline void set_dotaitemicon(const char* value, size_t size);
  inline ::std::string* mutable_dotaitemicon();
  inline ::std::string* release_dotaitemicon();
  inline void set_allocated_dotaitemicon(::std::string* dotaitemicon);

  // required string DotaItemName = 8;
  inline bool has_dotaitemname() const;
  inline void clear_dotaitemname();
  static const int kDotaItemNameFieldNumber = 8;
  inline const ::std::string& dotaitemname() const;
  inline void set_dotaitemname(const ::std::string& value);
  inline void set_dotaitemname(const char* value);
  inline void set_dotaitemname(const char* value, size_t size);
  inline ::std::string* mutable_dotaitemname();
  inline ::std::string* release_dotaitemname();
  inline void set_allocated_dotaitemname(::std::string* dotaitemname);

  // required string DotaItemDesc = 9;
  inline bool has_dotaitemdesc() const;
  inline void clear_dotaitemdesc();
  static const int kDotaItemDescFieldNumber = 9;
  inline const ::std::string& dotaitemdesc() const;
  inline void set_dotaitemdesc(const ::std::string& value);
  inline void set_dotaitemdesc(const char* value);
  inline void set_dotaitemdesc(const char* value, size_t size);
  inline ::std::string* mutable_dotaitemdesc();
  inline ::std::string* release_dotaitemdesc();
  inline void set_allocated_dotaitemdesc(::std::string* dotaitemdesc);

  // required uint32 DotaItemColor = 10;
  inline bool has_dotaitemcolor() const;
  inline void clear_dotaitemcolor();
  static const int kDotaItemColorFieldNumber = 10;
  inline ::google::protobuf::uint32 dotaitemcolor() const;
  inline void set_dotaitemcolor(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DotaItemCfg)
 private:
  inline void set_has_dotaitemid();
  inline void clear_has_dotaitemid();
  inline void set_has_atk();
  inline void clear_has_atk();
  inline void set_has_def();
  inline void clear_has_def();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hit();
  inline void clear_has_hit();
  inline void set_has_dotaitemicon();
  inline void clear_has_dotaitemicon();
  inline void set_has_dotaitemname();
  inline void clear_has_dotaitemname();
  inline void set_has_dotaitemdesc();
  inline void clear_has_dotaitemdesc();
  inline void set_has_dotaitemcolor();
  inline void clear_has_dotaitemcolor();

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemComposeNeed > dotaitemneeds_;
  ::google::protobuf::uint32 dotaitemid_;
  ::google::protobuf::uint32 atk_;
  ::google::protobuf::uint32 def_;
  ::google::protobuf::uint32 hp_;
  ::std::string* dotaitemicon_;
  ::std::string* dotaitemname_;
  ::google::protobuf::uint32 hit_;
  ::google::protobuf::uint32 dotaitemcolor_;
  ::std::string* dotaitemdesc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DotaItemCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DotaItemCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DotaItemCfg_2eproto();
  friend void protobuf_ShutdownFile_DotaItemCfg_2eproto();

  void InitAsDefaultInstance();
  static DotaItemCfg* default_instance_;
};
// -------------------------------------------------------------------

class DotaItemCfgSet : public ::google::protobuf::MessageLite {
 public:
  DotaItemCfgSet();
  virtual ~DotaItemCfgSet();

  DotaItemCfgSet(const DotaItemCfgSet& from);

  inline DotaItemCfgSet& operator=(const DotaItemCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const DotaItemCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const DotaItemCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(DotaItemCfgSet* other);

  // implements Message ----------------------------------------------

  DotaItemCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const DotaItemCfgSet& from);
  void MergeFrom(const DotaItemCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.DotaItemCfg dotaitemcfg = 1;
  inline int dotaitemcfg_size() const;
  inline void clear_dotaitemcfg();
  static const int kDotaitemcfgFieldNumber = 1;
  inline const ::com::cfg::vo::DotaItemCfg& dotaitemcfg(int index) const;
  inline ::com::cfg::vo::DotaItemCfg* mutable_dotaitemcfg(int index);
  inline ::com::cfg::vo::DotaItemCfg* add_dotaitemcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemCfg >&
      dotaitemcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemCfg >*
      mutable_dotaitemcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.DotaItemCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemCfg > dotaitemcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_DotaItemCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_DotaItemCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_DotaItemCfg_2eproto();
  friend void protobuf_ShutdownFile_DotaItemCfg_2eproto();

  void InitAsDefaultInstance();
  static DotaItemCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// DotaItemComposeNeed

// required uint32 DotaItemID = 1;
inline bool DotaItemComposeNeed::has_dotaitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DotaItemComposeNeed::set_has_dotaitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DotaItemComposeNeed::clear_has_dotaitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DotaItemComposeNeed::clear_dotaitemid() {
  dotaitemid_ = 0u;
  clear_has_dotaitemid();
}
inline ::google::protobuf::uint32 DotaItemComposeNeed::dotaitemid() const {
  return dotaitemid_;
}
inline void DotaItemComposeNeed::set_dotaitemid(::google::protobuf::uint32 value) {
  set_has_dotaitemid();
  dotaitemid_ = value;
}

// required uint32 DotaItemCnt = 2;
inline bool DotaItemComposeNeed::has_dotaitemcnt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DotaItemComposeNeed::set_has_dotaitemcnt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DotaItemComposeNeed::clear_has_dotaitemcnt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DotaItemComposeNeed::clear_dotaitemcnt() {
  dotaitemcnt_ = 0u;
  clear_has_dotaitemcnt();
}
inline ::google::protobuf::uint32 DotaItemComposeNeed::dotaitemcnt() const {
  return dotaitemcnt_;
}
inline void DotaItemComposeNeed::set_dotaitemcnt(::google::protobuf::uint32 value) {
  set_has_dotaitemcnt();
  dotaitemcnt_ = value;
}

// -------------------------------------------------------------------

// DotaItemCfg

// required uint32 DotaItemID = 1;
inline bool DotaItemCfg::has_dotaitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DotaItemCfg::set_has_dotaitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DotaItemCfg::clear_has_dotaitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DotaItemCfg::clear_dotaitemid() {
  dotaitemid_ = 0u;
  clear_has_dotaitemid();
}
inline ::google::protobuf::uint32 DotaItemCfg::dotaitemid() const {
  return dotaitemid_;
}
inline void DotaItemCfg::set_dotaitemid(::google::protobuf::uint32 value) {
  set_has_dotaitemid();
  dotaitemid_ = value;
}

// repeated .com.cfg.vo.DotaItemComposeNeed DotaItemNeeds = 2;
inline int DotaItemCfg::dotaitemneeds_size() const {
  return dotaitemneeds_.size();
}
inline void DotaItemCfg::clear_dotaitemneeds() {
  dotaitemneeds_.Clear();
}
inline const ::com::cfg::vo::DotaItemComposeNeed& DotaItemCfg::dotaitemneeds(int index) const {
  return dotaitemneeds_.Get(index);
}
inline ::com::cfg::vo::DotaItemComposeNeed* DotaItemCfg::mutable_dotaitemneeds(int index) {
  return dotaitemneeds_.Mutable(index);
}
inline ::com::cfg::vo::DotaItemComposeNeed* DotaItemCfg::add_dotaitemneeds() {
  return dotaitemneeds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemComposeNeed >&
DotaItemCfg::dotaitemneeds() const {
  return dotaitemneeds_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemComposeNeed >*
DotaItemCfg::mutable_dotaitemneeds() {
  return &dotaitemneeds_;
}

// required uint32 ATK = 3;
inline bool DotaItemCfg::has_atk() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DotaItemCfg::set_has_atk() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DotaItemCfg::clear_has_atk() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DotaItemCfg::clear_atk() {
  atk_ = 0u;
  clear_has_atk();
}
inline ::google::protobuf::uint32 DotaItemCfg::atk() const {
  return atk_;
}
inline void DotaItemCfg::set_atk(::google::protobuf::uint32 value) {
  set_has_atk();
  atk_ = value;
}

// required uint32 DEF = 4;
inline bool DotaItemCfg::has_def() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DotaItemCfg::set_has_def() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DotaItemCfg::clear_has_def() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DotaItemCfg::clear_def() {
  def_ = 0u;
  clear_has_def();
}
inline ::google::protobuf::uint32 DotaItemCfg::def() const {
  return def_;
}
inline void DotaItemCfg::set_def(::google::protobuf::uint32 value) {
  set_has_def();
  def_ = value;
}

// required uint32 HP = 5;
inline bool DotaItemCfg::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DotaItemCfg::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DotaItemCfg::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DotaItemCfg::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 DotaItemCfg::hp() const {
  return hp_;
}
inline void DotaItemCfg::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// required uint32 HIT = 6;
inline bool DotaItemCfg::has_hit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DotaItemCfg::set_has_hit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DotaItemCfg::clear_has_hit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DotaItemCfg::clear_hit() {
  hit_ = 0u;
  clear_has_hit();
}
inline ::google::protobuf::uint32 DotaItemCfg::hit() const {
  return hit_;
}
inline void DotaItemCfg::set_hit(::google::protobuf::uint32 value) {
  set_has_hit();
  hit_ = value;
}

// required string DotaItemICON = 7;
inline bool DotaItemCfg::has_dotaitemicon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DotaItemCfg::set_has_dotaitemicon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DotaItemCfg::clear_has_dotaitemicon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DotaItemCfg::clear_dotaitemicon() {
  if (dotaitemicon_ != &::google::protobuf::internal::kEmptyString) {
    dotaitemicon_->clear();
  }
  clear_has_dotaitemicon();
}
inline const ::std::string& DotaItemCfg::dotaitemicon() const {
  return *dotaitemicon_;
}
inline void DotaItemCfg::set_dotaitemicon(const ::std::string& value) {
  set_has_dotaitemicon();
  if (dotaitemicon_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemicon_ = new ::std::string;
  }
  dotaitemicon_->assign(value);
}
inline void DotaItemCfg::set_dotaitemicon(const char* value) {
  set_has_dotaitemicon();
  if (dotaitemicon_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemicon_ = new ::std::string;
  }
  dotaitemicon_->assign(value);
}
inline void DotaItemCfg::set_dotaitemicon(const char* value, size_t size) {
  set_has_dotaitemicon();
  if (dotaitemicon_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemicon_ = new ::std::string;
  }
  dotaitemicon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DotaItemCfg::mutable_dotaitemicon() {
  set_has_dotaitemicon();
  if (dotaitemicon_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemicon_ = new ::std::string;
  }
  return dotaitemicon_;
}
inline ::std::string* DotaItemCfg::release_dotaitemicon() {
  clear_has_dotaitemicon();
  if (dotaitemicon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dotaitemicon_;
    dotaitemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DotaItemCfg::set_allocated_dotaitemicon(::std::string* dotaitemicon) {
  if (dotaitemicon_ != &::google::protobuf::internal::kEmptyString) {
    delete dotaitemicon_;
  }
  if (dotaitemicon) {
    set_has_dotaitemicon();
    dotaitemicon_ = dotaitemicon;
  } else {
    clear_has_dotaitemicon();
    dotaitemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DotaItemName = 8;
inline bool DotaItemCfg::has_dotaitemname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DotaItemCfg::set_has_dotaitemname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DotaItemCfg::clear_has_dotaitemname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DotaItemCfg::clear_dotaitemname() {
  if (dotaitemname_ != &::google::protobuf::internal::kEmptyString) {
    dotaitemname_->clear();
  }
  clear_has_dotaitemname();
}
inline const ::std::string& DotaItemCfg::dotaitemname() const {
  return *dotaitemname_;
}
inline void DotaItemCfg::set_dotaitemname(const ::std::string& value) {
  set_has_dotaitemname();
  if (dotaitemname_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemname_ = new ::std::string;
  }
  dotaitemname_->assign(value);
}
inline void DotaItemCfg::set_dotaitemname(const char* value) {
  set_has_dotaitemname();
  if (dotaitemname_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemname_ = new ::std::string;
  }
  dotaitemname_->assign(value);
}
inline void DotaItemCfg::set_dotaitemname(const char* value, size_t size) {
  set_has_dotaitemname();
  if (dotaitemname_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemname_ = new ::std::string;
  }
  dotaitemname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DotaItemCfg::mutable_dotaitemname() {
  set_has_dotaitemname();
  if (dotaitemname_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemname_ = new ::std::string;
  }
  return dotaitemname_;
}
inline ::std::string* DotaItemCfg::release_dotaitemname() {
  clear_has_dotaitemname();
  if (dotaitemname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dotaitemname_;
    dotaitemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DotaItemCfg::set_allocated_dotaitemname(::std::string* dotaitemname) {
  if (dotaitemname_ != &::google::protobuf::internal::kEmptyString) {
    delete dotaitemname_;
  }
  if (dotaitemname) {
    set_has_dotaitemname();
    dotaitemname_ = dotaitemname;
  } else {
    clear_has_dotaitemname();
    dotaitemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DotaItemDesc = 9;
inline bool DotaItemCfg::has_dotaitemdesc() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DotaItemCfg::set_has_dotaitemdesc() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DotaItemCfg::clear_has_dotaitemdesc() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DotaItemCfg::clear_dotaitemdesc() {
  if (dotaitemdesc_ != &::google::protobuf::internal::kEmptyString) {
    dotaitemdesc_->clear();
  }
  clear_has_dotaitemdesc();
}
inline const ::std::string& DotaItemCfg::dotaitemdesc() const {
  return *dotaitemdesc_;
}
inline void DotaItemCfg::set_dotaitemdesc(const ::std::string& value) {
  set_has_dotaitemdesc();
  if (dotaitemdesc_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemdesc_ = new ::std::string;
  }
  dotaitemdesc_->assign(value);
}
inline void DotaItemCfg::set_dotaitemdesc(const char* value) {
  set_has_dotaitemdesc();
  if (dotaitemdesc_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemdesc_ = new ::std::string;
  }
  dotaitemdesc_->assign(value);
}
inline void DotaItemCfg::set_dotaitemdesc(const char* value, size_t size) {
  set_has_dotaitemdesc();
  if (dotaitemdesc_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemdesc_ = new ::std::string;
  }
  dotaitemdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DotaItemCfg::mutable_dotaitemdesc() {
  set_has_dotaitemdesc();
  if (dotaitemdesc_ == &::google::protobuf::internal::kEmptyString) {
    dotaitemdesc_ = new ::std::string;
  }
  return dotaitemdesc_;
}
inline ::std::string* DotaItemCfg::release_dotaitemdesc() {
  clear_has_dotaitemdesc();
  if (dotaitemdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dotaitemdesc_;
    dotaitemdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DotaItemCfg::set_allocated_dotaitemdesc(::std::string* dotaitemdesc) {
  if (dotaitemdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete dotaitemdesc_;
  }
  if (dotaitemdesc) {
    set_has_dotaitemdesc();
    dotaitemdesc_ = dotaitemdesc;
  } else {
    clear_has_dotaitemdesc();
    dotaitemdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 DotaItemColor = 10;
inline bool DotaItemCfg::has_dotaitemcolor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DotaItemCfg::set_has_dotaitemcolor() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DotaItemCfg::clear_has_dotaitemcolor() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DotaItemCfg::clear_dotaitemcolor() {
  dotaitemcolor_ = 0u;
  clear_has_dotaitemcolor();
}
inline ::google::protobuf::uint32 DotaItemCfg::dotaitemcolor() const {
  return dotaitemcolor_;
}
inline void DotaItemCfg::set_dotaitemcolor(::google::protobuf::uint32 value) {
  set_has_dotaitemcolor();
  dotaitemcolor_ = value;
}

// -------------------------------------------------------------------

// DotaItemCfgSet

// repeated .com.cfg.vo.DotaItemCfg dotaitemcfg = 1;
inline int DotaItemCfgSet::dotaitemcfg_size() const {
  return dotaitemcfg_.size();
}
inline void DotaItemCfgSet::clear_dotaitemcfg() {
  dotaitemcfg_.Clear();
}
inline const ::com::cfg::vo::DotaItemCfg& DotaItemCfgSet::dotaitemcfg(int index) const {
  return dotaitemcfg_.Get(index);
}
inline ::com::cfg::vo::DotaItemCfg* DotaItemCfgSet::mutable_dotaitemcfg(int index) {
  return dotaitemcfg_.Mutable(index);
}
inline ::com::cfg::vo::DotaItemCfg* DotaItemCfgSet::add_dotaitemcfg() {
  return dotaitemcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemCfg >&
DotaItemCfgSet::dotaitemcfg() const {
  return dotaitemcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::DotaItemCfg >*
DotaItemCfgSet::mutable_dotaitemcfg() {
  return &dotaitemcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DotaItemCfg_2eproto__INCLUDED
