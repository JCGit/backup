// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GenTypeCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GenTypeCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_GenTypeCfg_2eproto() {
  delete GenTypeCfg::default_instance_;
  delete GenTypeCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GenTypeCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GenTypeCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GenTypeCfg::default_instance_ = new GenTypeCfg();
  GenTypeCfgSet::default_instance_ = new GenTypeCfgSet();
  GenTypeCfg::default_instance_->InitAsDefaultInstance();
  GenTypeCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GenTypeCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GenTypeCfg_2eproto_once_);
void protobuf_AddDesc_GenTypeCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GenTypeCfg_2eproto_once_,
                 &protobuf_AddDesc_GenTypeCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GenTypeCfg_2eproto {
  StaticDescriptorInitializer_GenTypeCfg_2eproto() {
    protobuf_AddDesc_GenTypeCfg_2eproto();
  }
} static_descriptor_initializer_GenTypeCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GenTypeCfg::kTypeFieldNumber;
const int GenTypeCfg::kNameFieldNumber;
const int GenTypeCfg::kLimitVipLvFieldNumber;
const int GenTypeCfg::kLimitVipTipFieldNumber;
const int GenTypeCfg::kCostTipFieldNumber;
#endif  // !_MSC_VER

GenTypeCfg::GenTypeCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GenTypeCfg::InitAsDefaultInstance() {
}

GenTypeCfg::GenTypeCfg(const GenTypeCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GenTypeCfg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limitviplv_ = 0u;
  limitviptip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  costtip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenTypeCfg::~GenTypeCfg() {
  SharedDtor();
}

void GenTypeCfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (limitviptip_ != &::google::protobuf::internal::kEmptyString) {
    delete limitviptip_;
  }
  if (costtip_ != &::google::protobuf::internal::kEmptyString) {
    delete costtip_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GenTypeCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GenTypeCfg& GenTypeCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GenTypeCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GenTypeCfg_2eproto();
#endif
  return *default_instance_;
}

GenTypeCfg* GenTypeCfg::default_instance_ = NULL;

GenTypeCfg* GenTypeCfg::New() const {
  return new GenTypeCfg;
}

void GenTypeCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    limitviplv_ = 0u;
    if (has_limitviptip()) {
      if (limitviptip_ != &::google::protobuf::internal::kEmptyString) {
        limitviptip_->clear();
      }
    }
    if (has_costtip()) {
      if (costtip_ != &::google::protobuf::internal::kEmptyString) {
        costtip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GenTypeCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LimitVipLv;
        break;
      }

      // required uint32 LimitVipLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitVipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limitviplv_)));
          set_has_limitviplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_LimitVipTip;
        break;
      }

      // required string LimitVipTip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_LimitVipTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limitviptip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CostTip;
        break;
      }

      // required string CostTip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CostTip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_costtip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenTypeCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 LimitVipLv = 3;
  if (has_limitviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limitviplv(), output);
  }

  // required string LimitVipTip = 4;
  if (has_limitviptip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->limitviptip(), output);
  }

  // required string CostTip = 5;
  if (has_costtip()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->costtip(), output);
  }

}

int GenTypeCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 LimitVipLv = 3;
    if (has_limitviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limitviplv());
    }

    // required string LimitVipTip = 4;
    if (has_limitviptip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->limitviptip());
    }

    // required string CostTip = 5;
    if (has_costtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->costtip());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenTypeCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenTypeCfg*>(&from));
}

void GenTypeCfg::MergeFrom(const GenTypeCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_limitviplv()) {
      set_limitviplv(from.limitviplv());
    }
    if (from.has_limitviptip()) {
      set_limitviptip(from.limitviptip());
    }
    if (from.has_costtip()) {
      set_costtip(from.costtip());
    }
  }
}

void GenTypeCfg::CopyFrom(const GenTypeCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenTypeCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GenTypeCfg::Swap(GenTypeCfg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(limitviplv_, other->limitviplv_);
    std::swap(limitviptip_, other->limitviptip_);
    std::swap(costtip_, other->costtip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GenTypeCfg::GetTypeName() const {
  return "com.cfg.vo.GenTypeCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int GenTypeCfgSet::kGenTypeCfgFieldNumber;
#endif  // !_MSC_VER

GenTypeCfgSet::GenTypeCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GenTypeCfgSet::InitAsDefaultInstance() {
}

GenTypeCfgSet::GenTypeCfgSet(const GenTypeCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GenTypeCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenTypeCfgSet::~GenTypeCfgSet() {
  SharedDtor();
}

void GenTypeCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GenTypeCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GenTypeCfgSet& GenTypeCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GenTypeCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GenTypeCfg_2eproto();
#endif
  return *default_instance_;
}

GenTypeCfgSet* GenTypeCfgSet::default_instance_ = NULL;

GenTypeCfgSet* GenTypeCfgSet::New() const {
  return new GenTypeCfgSet;
}

void GenTypeCfgSet::Clear() {
  gentypecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GenTypeCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.GenTypeCfg genTypeCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genTypeCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gentypecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_genTypeCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenTypeCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.GenTypeCfg genTypeCfg = 1;
  for (int i = 0; i < this->gentypecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->gentypecfg(i), output);
  }

}

int GenTypeCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.GenTypeCfg genTypeCfg = 1;
  total_size += 1 * this->gentypecfg_size();
  for (int i = 0; i < this->gentypecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gentypecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenTypeCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GenTypeCfgSet*>(&from));
}

void GenTypeCfgSet::MergeFrom(const GenTypeCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  gentypecfg_.MergeFrom(from.gentypecfg_);
}

void GenTypeCfgSet::CopyFrom(const GenTypeCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenTypeCfgSet::IsInitialized() const {

  for (int i = 0; i < gentypecfg_size(); i++) {
    if (!this->gentypecfg(i).IsInitialized()) return false;
  }
  return true;
}

void GenTypeCfgSet::Swap(GenTypeCfgSet* other) {
  if (other != this) {
    gentypecfg_.Swap(&other->gentypecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GenTypeCfgSet::GetTypeName() const {
  return "com.cfg.vo.GenTypeCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
