// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WarMapCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WarMapCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WarMapCfg_2eproto() {
  delete MapItem::default_instance_;
  delete MapMonster::default_instance_;
  delete HidenAward::default_instance_;
  delete WarMapCfg::default_instance_;
  delete WarMapCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WarMapCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WarMapCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MapItem::default_instance_ = new MapItem();
  MapMonster::default_instance_ = new MapMonster();
  HidenAward::default_instance_ = new HidenAward();
  WarMapCfg::default_instance_ = new WarMapCfg();
  WarMapCfgSet::default_instance_ = new WarMapCfgSet();
  MapItem::default_instance_->InitAsDefaultInstance();
  MapMonster::default_instance_->InitAsDefaultInstance();
  HidenAward::default_instance_->InitAsDefaultInstance();
  WarMapCfg::default_instance_->InitAsDefaultInstance();
  WarMapCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WarMapCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WarMapCfg_2eproto_once_);
void protobuf_AddDesc_WarMapCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WarMapCfg_2eproto_once_,
                 &protobuf_AddDesc_WarMapCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WarMapCfg_2eproto {
  StaticDescriptorInitializer_WarMapCfg_2eproto() {
    protobuf_AddDesc_WarMapCfg_2eproto();
  }
} static_descriptor_initializer_WarMapCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MapItem::kItemIDFieldNumber;
const int MapItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

MapItem::MapItem()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapItem::InitAsDefaultInstance() {
}

MapItem::MapItem(const MapItem& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapItem::~MapItem() {
  SharedDtor();
}

void MapItem::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapItem& MapItem::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarMapCfg_2eproto();
#endif
  return *default_instance_;
}

MapItem* MapItem::default_instance_ = NULL;

MapItem* MapItem::New() const {
  return new MapItem;
}

void MapItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }

      // required uint32 ItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 ItemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

}

int MapItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapItem*>(&from));
}

void MapItem::MergeFrom(const MapItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
}

void MapItem::CopyFrom(const MapItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapItem::Swap(MapItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapItem::GetTypeName() const {
  return "com.cfg.vo.MapItem";
}


// ===================================================================

#ifndef _MSC_VER
const int MapMonster::kMonsterIDFieldNumber;
const int MapMonster::kMonsterNumFieldNumber;
#endif  // !_MSC_VER

MapMonster::MapMonster()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MapMonster::InitAsDefaultInstance() {
}

MapMonster::MapMonster(const MapMonster& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MapMonster::SharedCtor() {
  _cached_size_ = 0;
  monsterid_ = 0u;
  monsternum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMonster::~MapMonster() {
  SharedDtor();
}

void MapMonster::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MapMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MapMonster& MapMonster::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarMapCfg_2eproto();
#endif
  return *default_instance_;
}

MapMonster* MapMonster::default_instance_ = NULL;

MapMonster* MapMonster::New() const {
  return new MapMonster;
}

void MapMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monsterid_ = 0u;
    monsternum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MapMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MonsterNum;
        break;
      }

      // required uint32 MonsterNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MonsterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsternum_)));
          set_has_monsternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MonsterID = 1;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterid(), output);
  }

  // required uint32 MonsterNum = 2;
  if (has_monsternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monsternum(), output);
  }

}

int MapMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MonsterID = 1;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

    // required uint32 MonsterNum = 2;
    if (has_monsternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsternum());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMonster::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MapMonster*>(&from));
}

void MapMonster::MergeFrom(const MapMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_monsternum()) {
      set_monsternum(from.monsternum());
    }
  }
}

void MapMonster::CopyFrom(const MapMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapMonster::Swap(MapMonster* other) {
  if (other != this) {
    std::swap(monsterid_, other->monsterid_);
    std::swap(monsternum_, other->monsternum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MapMonster::GetTypeName() const {
  return "com.cfg.vo.MapMonster";
}


// ===================================================================

#ifndef _MSC_VER
const int HidenAward::kWinTypeFieldNumber;
const int HidenAward::kWinConditionFieldNumber;
const int HidenAward::kWinAwardIDFieldNumber;
#endif  // !_MSC_VER

HidenAward::HidenAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void HidenAward::InitAsDefaultInstance() {
}

HidenAward::HidenAward(const HidenAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void HidenAward::SharedCtor() {
  _cached_size_ = 0;
  wintype_ = 0u;
  wincondition_ = 0u;
  winawardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HidenAward::~HidenAward() {
  SharedDtor();
}

void HidenAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void HidenAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HidenAward& HidenAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarMapCfg_2eproto();
#endif
  return *default_instance_;
}

HidenAward* HidenAward::default_instance_ = NULL;

HidenAward* HidenAward::New() const {
  return new HidenAward;
}

void HidenAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wintype_ = 0u;
    wincondition_ = 0u;
    winawardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool HidenAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WinType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wintype_)));
          set_has_wintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WinCondition;
        break;
      }

      // required uint32 WinCondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wincondition_)));
          set_has_wincondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WinAwardID;
        break;
      }

      // required uint32 WinAwardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinAwardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winawardid_)));
          set_has_winawardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HidenAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WinType = 1;
  if (has_wintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->wintype(), output);
  }

  // required uint32 WinCondition = 2;
  if (has_wincondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wincondition(), output);
  }

  // required uint32 WinAwardID = 3;
  if (has_winawardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->winawardid(), output);
  }

}

int HidenAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WinType = 1;
    if (has_wintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wintype());
    }

    // required uint32 WinCondition = 2;
    if (has_wincondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wincondition());
    }

    // required uint32 WinAwardID = 3;
    if (has_winawardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winawardid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HidenAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HidenAward*>(&from));
}

void HidenAward::MergeFrom(const HidenAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
    if (from.has_wincondition()) {
      set_wincondition(from.wincondition());
    }
    if (from.has_winawardid()) {
      set_winawardid(from.winawardid());
    }
  }
}

void HidenAward::CopyFrom(const HidenAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HidenAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void HidenAward::Swap(HidenAward* other) {
  if (other != this) {
    std::swap(wintype_, other->wintype_);
    std::swap(wincondition_, other->wincondition_);
    std::swap(winawardid_, other->winawardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string HidenAward::GetTypeName() const {
  return "com.cfg.vo.HidenAward";
}


// ===================================================================

#ifndef _MSC_VER
const int WarMapCfg::kIDFieldNumber;
const int WarMapCfg::kNameFieldNumber;
const int WarMapCfg::kMapIDFieldNumber;
const int WarMapCfg::kItemsFieldNumber;
const int WarMapCfg::kMonstersFieldNumber;
const int WarMapCfg::kBossIDFieldNumber;
const int WarMapCfg::kExpFieldNumber;
const int WarMapCfg::kCoinFieldNumber;
const int WarMapCfg::kWinTypeFieldNumber;
const int WarMapCfg::kStageNumFieldNumber;
const int WarMapCfg::kPackageIDsFieldNumber;
const int WarMapCfg::kWarIDFieldNumber;
const int WarMapCfg::kManualFieldNumber;
const int WarMapCfg::kRepeatNumFieldNumber;
const int WarMapCfg::kCardIDFieldNumber;
const int WarMapCfg::kLevelFieldNumber;
const int WarMapCfg::kLimitTimeFieldNumber;
const int WarMapCfg::kSimpleViewResFieldNumber;
const int WarMapCfg::kWinValue1FieldNumber;
const int WarMapCfg::kWinValue2FieldNumber;
const int WarMapCfg::kHidenAwardsFieldNumber;
const int WarMapCfg::kStarConditionFieldNumber;
#endif  // !_MSC_VER

WarMapCfg::WarMapCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarMapCfg::InitAsDefaultInstance() {
}

WarMapCfg::WarMapCfg(const WarMapCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarMapCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0u;
  bossid_ = 0u;
  exp_ = 0u;
  coin_ = 0u;
  wintype_ = 0u;
  stagenum_ = 0u;
  warid_ = 0u;
  manual_ = 0u;
  repeatnum_ = 0u;
  cardid_ = 0u;
  level_ = 0u;
  limittime_ = 0u;
  simpleviewres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  winvalue1_ = 0u;
  winvalue2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarMapCfg::~WarMapCfg() {
  SharedDtor();
}

void WarMapCfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (simpleviewres_ != &::google::protobuf::internal::kEmptyString) {
    delete simpleviewres_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarMapCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarMapCfg& WarMapCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarMapCfg_2eproto();
#endif
  return *default_instance_;
}

WarMapCfg* WarMapCfg::default_instance_ = NULL;

WarMapCfg* WarMapCfg::New() const {
  return new WarMapCfg;
}

void WarMapCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    mapid_ = 0u;
    bossid_ = 0u;
    exp_ = 0u;
    coin_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    wintype_ = 0u;
    stagenum_ = 0u;
    warid_ = 0u;
    manual_ = 0u;
    repeatnum_ = 0u;
    cardid_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    limittime_ = 0u;
    if (has_simpleviewres()) {
      if (simpleviewres_ != &::google::protobuf::internal::kEmptyString) {
        simpleviewres_->clear();
      }
    }
    winvalue1_ = 0u;
    winvalue2_ = 0u;
  }
  items_.Clear();
  monsters_.Clear();
  packageids_.Clear();
  hidenawards_.Clear();
  starcondition_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarMapCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MapID;
        break;
      }

      // required uint32 MapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Items;
        break;
      }

      // repeated .com.cfg.vo.MapItem Items = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Items;
        if (input->ExpectTag(42)) goto parse_Monsters;
        break;
      }

      // repeated .com.cfg.vo.MapMonster Monsters = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Monsters;
        if (input->ExpectTag(48)) goto parse_BossID;
        break;
      }

      // required uint32 BossID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Exp;
        break;
      }

      // required uint32 Exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_Coin;
        break;
      }

      // required uint32 Coin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WinType;
        break;
      }

      // required uint32 WinType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wintype_)));
          set_has_wintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_StageNum;
        break;
      }

      // required uint32 StageNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stagenum_)));
          set_has_stagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_PackageIDs;
        break;
      }

      // repeated uint32 PackageIDs = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PackageIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_packageids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_packageids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_PackageIDs;
        if (input->ExpectTag(96)) goto parse_WarID;
        break;
      }

      // required uint32 WarID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Manual;
        break;
      }

      // required uint32 Manual = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Manual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manual_)));
          set_has_manual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_RepeatNum;
        break;
      }

      // required uint32 RepeatNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RepeatNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &repeatnum_)));
          set_has_repeatnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_CardID;
        break;
      }

      // required uint32 CardID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Level;
        break;
      }

      // required uint32 Level = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LimitTime;
        break;
      }

      // required uint32 LimitTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limittime_)));
          set_has_limittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_SimpleViewRes;
        break;
      }

      // required string SimpleViewRes = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SimpleViewRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_simpleviewres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_WinValue1;
        break;
      }

      // required uint32 WinValue1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinValue1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winvalue1_)));
          set_has_winvalue1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_WinValue2;
        break;
      }

      // required uint32 WinValue2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinValue2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winvalue2_)));
          set_has_winvalue2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_HidenAwards;
        break;
      }

      // repeated .com.cfg.vo.HidenAward HidenAwards = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HidenAwards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hidenawards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_HidenAwards;
        if (input->ExpectTag(176)) goto parse_StarCondition;
        break;
      }

      // repeated uint32 StarCondition = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StarCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176, input, this->mutable_starcondition())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_starcondition())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_StarCondition;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarMapCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required uint32 MapID = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // repeated .com.cfg.vo.MapItem Items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->items(i), output);
  }

  // repeated .com.cfg.vo.MapMonster Monsters = 5;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->monsters(i), output);
  }

  // required uint32 BossID = 6;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bossid(), output);
  }

  // required uint32 Exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->exp(), output);
  }

  // required uint32 Coin = 8;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coin(), output);
  }

  // required uint32 WinType = 9;
  if (has_wintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->wintype(), output);
  }

  // required uint32 StageNum = 10;
  if (has_stagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->stagenum(), output);
  }

  // repeated uint32 PackageIDs = 11;
  for (int i = 0; i < this->packageids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->packageids(i), output);
  }

  // required uint32 WarID = 12;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->warid(), output);
  }

  // required uint32 Manual = 13;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->manual(), output);
  }

  // required uint32 RepeatNum = 14;
  if (has_repeatnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->repeatnum(), output);
  }

  // required uint32 CardID = 15;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->cardid(), output);
  }

  // required uint32 Level = 16;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->level(), output);
  }

  // required uint32 LimitTime = 17;
  if (has_limittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->limittime(), output);
  }

  // required string SimpleViewRes = 18;
  if (has_simpleviewres()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->simpleviewres(), output);
  }

  // required uint32 WinValue1 = 19;
  if (has_winvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->winvalue1(), output);
  }

  // required uint32 WinValue2 = 20;
  if (has_winvalue2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->winvalue2(), output);
  }

  // repeated .com.cfg.vo.HidenAward HidenAwards = 21;
  for (int i = 0; i < this->hidenawards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->hidenawards(i), output);
  }

  // repeated uint32 StarCondition = 22;
  for (int i = 0; i < this->starcondition_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->starcondition(i), output);
  }

}

int WarMapCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 MapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 BossID = 6;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // required uint32 Exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 Coin = 8;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 WinType = 9;
    if (has_wintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wintype());
    }

    // required uint32 StageNum = 10;
    if (has_stagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stagenum());
    }

    // required uint32 WarID = 12;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

    // required uint32 Manual = 13;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manual());
    }

    // required uint32 RepeatNum = 14;
    if (has_repeatnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->repeatnum());
    }

    // required uint32 CardID = 15;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

    // required uint32 Level = 16;
    if (has_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 LimitTime = 17;
    if (has_limittime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limittime());
    }

    // required string SimpleViewRes = 18;
    if (has_simpleviewres()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->simpleviewres());
    }

    // required uint32 WinValue1 = 19;
    if (has_winvalue1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winvalue1());
    }

    // required uint32 WinValue2 = 20;
    if (has_winvalue2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winvalue2());
    }

  }
  // repeated .com.cfg.vo.MapItem Items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .com.cfg.vo.MapMonster Monsters = 5;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated uint32 PackageIDs = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->packageids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->packageids(i));
    }
    total_size += 1 * this->packageids_size() + data_size;
  }

  // repeated .com.cfg.vo.HidenAward HidenAwards = 21;
  total_size += 2 * this->hidenawards_size();
  for (int i = 0; i < this->hidenawards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hidenawards(i));
  }

  // repeated uint32 StarCondition = 22;
  {
    int data_size = 0;
    for (int i = 0; i < this->starcondition_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->starcondition(i));
    }
    total_size += 2 * this->starcondition_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarMapCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarMapCfg*>(&from));
}

void WarMapCfg::MergeFrom(const WarMapCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  monsters_.MergeFrom(from.monsters_);
  packageids_.MergeFrom(from.packageids_);
  hidenawards_.MergeFrom(from.hidenawards_);
  starcondition_.MergeFrom(from.starcondition_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
    if (from.has_stagenum()) {
      set_stagenum(from.stagenum());
    }
    if (from.has_warid()) {
      set_warid(from.warid());
    }
    if (from.has_manual()) {
      set_manual(from.manual());
    }
    if (from.has_repeatnum()) {
      set_repeatnum(from.repeatnum());
    }
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_limittime()) {
      set_limittime(from.limittime());
    }
    if (from.has_simpleviewres()) {
      set_simpleviewres(from.simpleviewres());
    }
    if (from.has_winvalue1()) {
      set_winvalue1(from.winvalue1());
    }
    if (from.has_winvalue2()) {
      set_winvalue2(from.winvalue2());
    }
  }
}

void WarMapCfg::CopyFrom(const WarMapCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarMapCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000ffbe7) != 0x000ffbe7) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < hidenawards_size(); i++) {
    if (!this->hidenawards(i).IsInitialized()) return false;
  }
  return true;
}

void WarMapCfg::Swap(WarMapCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(mapid_, other->mapid_);
    items_.Swap(&other->items_);
    monsters_.Swap(&other->monsters_);
    std::swap(bossid_, other->bossid_);
    std::swap(exp_, other->exp_);
    std::swap(coin_, other->coin_);
    std::swap(wintype_, other->wintype_);
    std::swap(stagenum_, other->stagenum_);
    packageids_.Swap(&other->packageids_);
    std::swap(warid_, other->warid_);
    std::swap(manual_, other->manual_);
    std::swap(repeatnum_, other->repeatnum_);
    std::swap(cardid_, other->cardid_);
    std::swap(level_, other->level_);
    std::swap(limittime_, other->limittime_);
    std::swap(simpleviewres_, other->simpleviewres_);
    std::swap(winvalue1_, other->winvalue1_);
    std::swap(winvalue2_, other->winvalue2_);
    hidenawards_.Swap(&other->hidenawards_);
    starcondition_.Swap(&other->starcondition_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarMapCfg::GetTypeName() const {
  return "com.cfg.vo.WarMapCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WarMapCfgSet::kWarMapCfgFieldNumber;
#endif  // !_MSC_VER

WarMapCfgSet::WarMapCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WarMapCfgSet::InitAsDefaultInstance() {
}

WarMapCfgSet::WarMapCfgSet(const WarMapCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WarMapCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarMapCfgSet::~WarMapCfgSet() {
  SharedDtor();
}

void WarMapCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WarMapCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WarMapCfgSet& WarMapCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WarMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WarMapCfg_2eproto();
#endif
  return *default_instance_;
}

WarMapCfgSet* WarMapCfgSet::default_instance_ = NULL;

WarMapCfgSet* WarMapCfgSet::New() const {
  return new WarMapCfgSet;
}

void WarMapCfgSet::Clear() {
  warmapcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WarMapCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WarMapCfg warMapCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_warMapCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_warmapcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_warMapCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarMapCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WarMapCfg warMapCfg = 1;
  for (int i = 0; i < this->warmapcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->warmapcfg(i), output);
  }

}

int WarMapCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WarMapCfg warMapCfg = 1;
  total_size += 1 * this->warmapcfg_size();
  for (int i = 0; i < this->warmapcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->warmapcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarMapCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WarMapCfgSet*>(&from));
}

void WarMapCfgSet::MergeFrom(const WarMapCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  warmapcfg_.MergeFrom(from.warmapcfg_);
}

void WarMapCfgSet::CopyFrom(const WarMapCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarMapCfgSet::IsInitialized() const {

  for (int i = 0; i < warmapcfg_size(); i++) {
    if (!this->warmapcfg(i).IsInitialized()) return false;
  }
  return true;
}

void WarMapCfgSet::Swap(WarMapCfgSet* other) {
  if (other != this) {
    warmapcfg_.Swap(&other->warmapcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WarMapCfgSet::GetTypeName() const {
  return "com.cfg.vo.WarMapCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
