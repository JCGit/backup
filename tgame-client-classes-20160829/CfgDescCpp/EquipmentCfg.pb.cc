// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipmentCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipmentCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EquipmentCfg_2eproto() {
  delete EquipAttr::default_instance_;
  delete EquipmentCfg::default_instance_;
  delete EquipmentCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EquipmentCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EquipmentCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EquipAttr::default_instance_ = new EquipAttr();
  EquipmentCfg::default_instance_ = new EquipmentCfg();
  EquipmentCfgSet::default_instance_ = new EquipmentCfgSet();
  EquipAttr::default_instance_->InitAsDefaultInstance();
  EquipmentCfg::default_instance_->InitAsDefaultInstance();
  EquipmentCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipmentCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EquipmentCfg_2eproto_once_);
void protobuf_AddDesc_EquipmentCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EquipmentCfg_2eproto_once_,
                 &protobuf_AddDesc_EquipmentCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipmentCfg_2eproto {
  StaticDescriptorInitializer_EquipmentCfg_2eproto() {
    protobuf_AddDesc_EquipmentCfg_2eproto();
  }
} static_descriptor_initializer_EquipmentCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EquipAttr::kAttrIDFieldNumber;
const int EquipAttr::kAttrValFieldNumber;
#endif  // !_MSC_VER

EquipAttr::EquipAttr()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipAttr::InitAsDefaultInstance() {
}

EquipAttr::EquipAttr(const EquipAttr& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipAttr::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  attrval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipAttr::~EquipAttr() {
  SharedDtor();
}

void EquipAttr::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipAttr& EquipAttr::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipmentCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentCfg_2eproto();
#endif
  return *default_instance_;
}

EquipAttr* EquipAttr::default_instance_ = NULL;

EquipAttr* EquipAttr::New() const {
  return new EquipAttr;
}

void EquipAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attrid_ = 0u;
    attrval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AttrID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AttrVal;
        break;
      }

      // required uint32 AttrVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttrVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrval_)));
          set_has_attrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AttrID = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // required uint32 AttrVal = 2;
  if (has_attrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrval(), output);
  }

}

int EquipAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AttrID = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // required uint32 AttrVal = 2;
    if (has_attrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrval());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipAttr::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipAttr*>(&from));
}

void EquipAttr::MergeFrom(const EquipAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_attrval()) {
      set_attrval(from.attrval());
    }
  }
}

void EquipAttr::CopyFrom(const EquipAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipAttr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipAttr::Swap(EquipAttr* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(attrval_, other->attrval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipAttr::GetTypeName() const {
  return "com.cfg.vo.EquipAttr";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCfg::kEquipCfgIDFieldNumber;
const int EquipmentCfg::kEquipLvFieldNumber;
const int EquipmentCfg::kEquipDescFieldNumber;
const int EquipmentCfg::kEquipNameFieldNumber;
const int EquipmentCfg::kICONFieldNumber;
const int EquipmentCfg::kPartFieldNumber;
const int EquipmentCfg::kCoinPriceFieldNumber;
const int EquipmentCfg::kGoldPriceFieldNumber;
const int EquipmentCfg::kDefTypeFieldNumber;
const int EquipmentCfg::kAttrFieldNumber;
const int EquipmentCfg::kBaseExpFieldNumber;
const int EquipmentCfg::kInitStarFieldNumber;
const int EquipmentCfg::kInitStepFieldNumber;
const int EquipmentCfg::kExpMultiFieldNumber;
const int EquipmentCfg::kEquipIDFieldNumber;
const int EquipmentCfg::kMaxStarFieldNumber;
const int EquipmentCfg::kAttrAddFieldNumber;
const int EquipmentCfg::kColorFieldNumber;
#endif  // !_MSC_VER

EquipmentCfg::EquipmentCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipmentCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  attr_ = const_cast< ::com::cfg::vo::EquipAttr*>(
      ::com::cfg::vo::EquipAttr::internal_default_instance());
#else
  attr_ = const_cast< ::com::cfg::vo::EquipAttr*>(&::com::cfg::vo::EquipAttr::default_instance());
#endif
}

EquipmentCfg::EquipmentCfg(const EquipmentCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentCfg::SharedCtor() {
  _cached_size_ = 0;
  equipcfgid_ = 0u;
  equiplv_ = 0u;
  equipdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  equipname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  part_ = 0u;
  coinprice_ = 0u;
  goldprice_ = 0u;
  deftype_ = 0u;
  attr_ = NULL;
  baseexp_ = 0u;
  initstar_ = 0u;
  initstep_ = 0u;
  expmulti_ = 0u;
  equipid_ = 0u;
  maxstar_ = 0u;
  attradd_ = 0u;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCfg::~EquipmentCfg() {
  SharedDtor();
}

void EquipmentCfg::SharedDtor() {
  if (equipdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete equipdesc_;
  }
  if (equipname_ != &::google::protobuf::internal::kEmptyString) {
    delete equipname_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete attr_;
  }
}

void EquipmentCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentCfg& EquipmentCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipmentCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentCfg_2eproto();
#endif
  return *default_instance_;
}

EquipmentCfg* EquipmentCfg::default_instance_ = NULL;

EquipmentCfg* EquipmentCfg::New() const {
  return new EquipmentCfg;
}

void EquipmentCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equipcfgid_ = 0u;
    equiplv_ = 0u;
    if (has_equipdesc()) {
      if (equipdesc_ != &::google::protobuf::internal::kEmptyString) {
        equipdesc_->clear();
      }
    }
    if (has_equipname()) {
      if (equipname_ != &::google::protobuf::internal::kEmptyString) {
        equipname_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    part_ = 0u;
    coinprice_ = 0u;
    goldprice_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    deftype_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::com::cfg::vo::EquipAttr::Clear();
    }
    baseexp_ = 0u;
    initstar_ = 0u;
    initstep_ = 0u;
    expmulti_ = 0u;
    equipid_ = 0u;
    maxstar_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    attradd_ = 0u;
    color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipmentCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EquipCfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipcfgid_)));
          set_has_equipcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipLv;
        break;
      }

      // required uint32 EquipLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiplv_)));
          set_has_equiplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EquipDesc;
        break;
      }

      // required string EquipDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EquipName;
        break;
      }

      // required string EquipName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_equipname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ICON;
        break;
      }

      // required string ICON = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ICON:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Part;
        break;
      }

      // required uint32 Part = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CoinPrice;
        break;
      }

      // required uint32 CoinPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinprice_)));
          set_has_coinprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GoldPrice;
        break;
      }

      // required uint32 GoldPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldprice_)));
          set_has_goldprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DefType;
        break;
      }

      // required uint32 DefType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Attr;
        break;
      }

      // required .com.cfg.vo.EquipAttr Attr = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_BaseExp;
        break;
      }

      // required uint32 BaseExp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaseExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseexp_)));
          set_has_baseexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_InitStar;
        break;
      }

      // required uint32 InitStar = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initstar_)));
          set_has_initstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_InitStep;
        break;
      }

      // required uint32 InitStep = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initstep_)));
          set_has_initstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ExpMulti;
        break;
      }

      // required uint32 ExpMulti = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExpMulti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expmulti_)));
          set_has_expmulti();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_EquipID;
        break;
      }

      // required uint32 EquipID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipid_)));
          set_has_equipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_MaxStar;
        break;
      }

      // required uint32 MaxStar = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstar_)));
          set_has_maxstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_AttrAdd;
        break;
      }

      // required uint32 AttrAdd = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AttrAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attradd_)));
          set_has_attradd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_Color;
        break;
      }

      // required uint32 Color = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EquipCfgID = 1;
  if (has_equipcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equipcfgid(), output);
  }

  // required uint32 EquipLv = 2;
  if (has_equiplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equiplv(), output);
  }

  // required string EquipDesc = 3;
  if (has_equipdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->equipdesc(), output);
  }

  // required string EquipName = 4;
  if (has_equipname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->equipname(), output);
  }

  // required string ICON = 5;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->icon(), output);
  }

  // required uint32 Part = 7;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->part(), output);
  }

  // required uint32 CoinPrice = 8;
  if (has_coinprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coinprice(), output);
  }

  // required uint32 GoldPrice = 9;
  if (has_goldprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->goldprice(), output);
  }

  // required uint32 DefType = 10;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->deftype(), output);
  }

  // required .com.cfg.vo.EquipAttr Attr = 11;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->attr(), output);
  }

  // required uint32 BaseExp = 12;
  if (has_baseexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->baseexp(), output);
  }

  // required uint32 InitStar = 13;
  if (has_initstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->initstar(), output);
  }

  // required uint32 InitStep = 14;
  if (has_initstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->initstep(), output);
  }

  // required uint32 ExpMulti = 16;
  if (has_expmulti()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->expmulti(), output);
  }

  // required uint32 EquipID = 17;
  if (has_equipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->equipid(), output);
  }

  // required uint32 MaxStar = 18;
  if (has_maxstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->maxstar(), output);
  }

  // required uint32 AttrAdd = 19;
  if (has_attradd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->attradd(), output);
  }

  // required uint32 Color = 20;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->color(), output);
  }

}

int EquipmentCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EquipCfgID = 1;
    if (has_equipcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipcfgid());
    }

    // required uint32 EquipLv = 2;
    if (has_equiplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiplv());
    }

    // required string EquipDesc = 3;
    if (has_equipdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipdesc());
    }

    // required string EquipName = 4;
    if (has_equipname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->equipname());
    }

    // required string ICON = 5;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // required uint32 Part = 7;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

    // required uint32 CoinPrice = 8;
    if (has_coinprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coinprice());
    }

    // required uint32 GoldPrice = 9;
    if (has_goldprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 DefType = 10;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // required .com.cfg.vo.EquipAttr Attr = 11;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // required uint32 BaseExp = 12;
    if (has_baseexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseexp());
    }

    // required uint32 InitStar = 13;
    if (has_initstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initstar());
    }

    // required uint32 InitStep = 14;
    if (has_initstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initstep());
    }

    // required uint32 ExpMulti = 16;
    if (has_expmulti()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expmulti());
    }

    // required uint32 EquipID = 17;
    if (has_equipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipid());
    }

    // required uint32 MaxStar = 18;
    if (has_maxstar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstar());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 AttrAdd = 19;
    if (has_attradd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attradd());
    }

    // required uint32 Color = 20;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentCfg*>(&from));
}

void EquipmentCfg::MergeFrom(const EquipmentCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equipcfgid()) {
      set_equipcfgid(from.equipcfgid());
    }
    if (from.has_equiplv()) {
      set_equiplv(from.equiplv());
    }
    if (from.has_equipdesc()) {
      set_equipdesc(from.equipdesc());
    }
    if (from.has_equipname()) {
      set_equipname(from.equipname());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_coinprice()) {
      set_coinprice(from.coinprice());
    }
    if (from.has_goldprice()) {
      set_goldprice(from.goldprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_attr()) {
      mutable_attr()->::com::cfg::vo::EquipAttr::MergeFrom(from.attr());
    }
    if (from.has_baseexp()) {
      set_baseexp(from.baseexp());
    }
    if (from.has_initstar()) {
      set_initstar(from.initstar());
    }
    if (from.has_initstep()) {
      set_initstep(from.initstep());
    }
    if (from.has_expmulti()) {
      set_expmulti(from.expmulti());
    }
    if (from.has_equipid()) {
      set_equipid(from.equipid());
    }
    if (from.has_maxstar()) {
      set_maxstar(from.maxstar());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_attradd()) {
      set_attradd(from.attradd());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
}

void EquipmentCfg::CopyFrom(const EquipmentCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  return true;
}

void EquipmentCfg::Swap(EquipmentCfg* other) {
  if (other != this) {
    std::swap(equipcfgid_, other->equipcfgid_);
    std::swap(equiplv_, other->equiplv_);
    std::swap(equipdesc_, other->equipdesc_);
    std::swap(equipname_, other->equipname_);
    std::swap(icon_, other->icon_);
    std::swap(part_, other->part_);
    std::swap(coinprice_, other->coinprice_);
    std::swap(goldprice_, other->goldprice_);
    std::swap(deftype_, other->deftype_);
    std::swap(attr_, other->attr_);
    std::swap(baseexp_, other->baseexp_);
    std::swap(initstar_, other->initstar_);
    std::swap(initstep_, other->initstep_);
    std::swap(expmulti_, other->expmulti_);
    std::swap(equipid_, other->equipid_);
    std::swap(maxstar_, other->maxstar_);
    std::swap(attradd_, other->attradd_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentCfg::GetTypeName() const {
  return "com.cfg.vo.EquipmentCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentCfgSet::kEquipCfg1FieldNumber;
#endif  // !_MSC_VER

EquipmentCfgSet::EquipmentCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipmentCfgSet::InitAsDefaultInstance() {
}

EquipmentCfgSet::EquipmentCfgSet(const EquipmentCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentCfgSet::~EquipmentCfgSet() {
  SharedDtor();
}

void EquipmentCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipmentCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipmentCfgSet& EquipmentCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipmentCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipmentCfg_2eproto();
#endif
  return *default_instance_;
}

EquipmentCfgSet* EquipmentCfgSet::default_instance_ = NULL;

EquipmentCfgSet* EquipmentCfgSet::New() const {
  return new EquipmentCfgSet;
}

void EquipmentCfgSet::Clear() {
  equipcfg1_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipmentCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EquipmentCfg EquipCfg1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquipCfg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipcfg1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_EquipCfg1;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EquipmentCfg EquipCfg1 = 1;
  for (int i = 0; i < this->equipcfg1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equipcfg1(i), output);
  }

}

int EquipmentCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EquipmentCfg EquipCfg1 = 1;
  total_size += 1 * this->equipcfg1_size();
  for (int i = 0; i < this->equipcfg1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipcfg1(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipmentCfgSet*>(&from));
}

void EquipmentCfgSet::MergeFrom(const EquipmentCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipcfg1_.MergeFrom(from.equipcfg1_);
}

void EquipmentCfgSet::CopyFrom(const EquipmentCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentCfgSet::IsInitialized() const {

  for (int i = 0; i < equipcfg1_size(); i++) {
    if (!this->equipcfg1(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentCfgSet::Swap(EquipmentCfgSet* other) {
  if (other != this) {
    equipcfg1_.Swap(&other->equipcfg1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipmentCfgSet::GetTypeName() const {
  return "com.cfg.vo.EquipmentCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
