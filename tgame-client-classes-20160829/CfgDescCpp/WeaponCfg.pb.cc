// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeaponCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WeaponCfg_2eproto() {
  delete WeaponCfg::default_instance_;
  delete WeaponCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WeaponCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WeaponCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  WeaponCfg::default_instance_ = new WeaponCfg();
  WeaponCfgSet::default_instance_ = new WeaponCfgSet();
  WeaponCfg::default_instance_->InitAsDefaultInstance();
  WeaponCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeaponCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WeaponCfg_2eproto_once_);
void protobuf_AddDesc_WeaponCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WeaponCfg_2eproto_once_,
                 &protobuf_AddDesc_WeaponCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeaponCfg_2eproto {
  StaticDescriptorInitializer_WeaponCfg_2eproto() {
    protobuf_AddDesc_WeaponCfg_2eproto();
  }
} static_descriptor_initializer_WeaponCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WeaponCfg::kCfgIDFieldNumber;
const int WeaponCfg::kWeaponIDFieldNumber;
const int WeaponCfg::kWeaponNameFieldNumber;
const int WeaponCfg::kAtkTypeFieldNumber;
const int WeaponCfg::kATKFieldNumber;
const int WeaponCfg::kAtkAttrTypeFieldNumber;
const int WeaponCfg::kAtkAttrValFieldNumber;
const int WeaponCfg::kPenetrateValFieldNumber;
const int WeaponCfg::kDecMoveSpeedFieldNumber;
const int WeaponCfg::kExpMultiFieldNumber;
const int WeaponCfg::kInitStarFieldNumber;
const int WeaponCfg::kMaxStarFieldNumber;
const int WeaponCfg::kATKAddFieldNumber;
const int WeaponCfg::kAtkAttrValAddFieldNumber;
const int WeaponCfg::kPenetrateValAddFieldNumber;
const int WeaponCfg::kInitStepFieldNumber;
const int WeaponCfg::kShotRangeFieldNumber;
const int WeaponCfg::kShotSpeedFieldNumber;
const int WeaponCfg::kWeaponSuperSkillFieldNumber;
const int WeaponCfg::kBulletIDFieldNumber;
const int WeaponCfg::kGuestureFieldNumber;
const int WeaponCfg::kWeaponDispFieldNumber;
const int WeaponCfg::kBaseExpFieldNumber;
const int WeaponCfg::kFireSoundFieldNumber;
const int WeaponCfg::kWeaponTypeFieldNumber;
const int WeaponCfg::kWeaponLvFieldNumber;
const int WeaponCfg::kWeaponIconFieldNumber;
const int WeaponCfg::kWeaponDescFieldNumber;
const int WeaponCfg::kHitFieldNumber;
const int WeaponCfg::kColorFieldNumber;
const int WeaponCfg::kWeaponPicFieldNumber;
const int WeaponCfg::kFireSoundTypeFieldNumber;
const int WeaponCfg::kFightPowerCoeFieldNumber;
const int WeaponCfg::kScoreAddFieldNumber;
const int WeaponCfg::kBulletValFieldNumber;
const int WeaponCfg::kBulletShowValFieldNumber;
const int WeaponCfg::kWeaponDegreeFieldNumber;
#endif  // !_MSC_VER

WeaponCfg::WeaponCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponCfg::InitAsDefaultInstance() {
}

WeaponCfg::WeaponCfg(const WeaponCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponCfg::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  weaponid_ = 0u;
  weaponname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atktype_ = 0u;
  atk_ = 0u;
  atkattrtype_ = 0u;
  atkattrval_ = 0u;
  penetrateval_ = 0u;
  decmovespeed_ = 0u;
  expmulti_ = 0u;
  initstar_ = 0u;
  maxstar_ = 0u;
  atkadd_ = 0u;
  atkattrvaladd_ = 0u;
  penetratevaladd_ = 0u;
  initstep_ = 0u;
  shotrange_ = 0u;
  shotspeed_ = 0u;
  weaponsuperskill_ = 0u;
  bulletid_ = 0u;
  guesture_ = 0u;
  weapondisp_ = 0u;
  baseexp_ = 0u;
  firesound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapontype_ = 0u;
  weaponlv_ = 0u;
  weaponicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapondesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hit_ = 0u;
  color_ = 0u;
  weaponpic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  firesoundtype_ = 0u;
  fightpowercoe_ = 0u;
  scoreadd_ = 0u;
  bulletval_ = 0u;
  bulletshowval_ = 0u;
  weapondegree_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponCfg::~WeaponCfg() {
  SharedDtor();
}

void WeaponCfg::SharedDtor() {
  if (weaponname_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponname_;
  }
  if (firesound_ != &::google::protobuf::internal::kEmptyString) {
    delete firesound_;
  }
  if (weaponicon_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponicon_;
  }
  if (weapondesc_ != &::google::protobuf::internal::kEmptyString) {
    delete weapondesc_;
  }
  if (weaponpic_ != &::google::protobuf::internal::kEmptyString) {
    delete weaponpic_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponCfg& WeaponCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponCfg* WeaponCfg::default_instance_ = NULL;

WeaponCfg* WeaponCfg::New() const {
  return new WeaponCfg;
}

void WeaponCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    weaponid_ = 0u;
    if (has_weaponname()) {
      if (weaponname_ != &::google::protobuf::internal::kEmptyString) {
        weaponname_->clear();
      }
    }
    atktype_ = 0u;
    atk_ = 0u;
    atkattrtype_ = 0u;
    atkattrval_ = 0u;
    penetrateval_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    decmovespeed_ = 0u;
    expmulti_ = 0u;
    initstar_ = 0u;
    maxstar_ = 0u;
    atkadd_ = 0u;
    atkattrvaladd_ = 0u;
    penetratevaladd_ = 0u;
    initstep_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    shotrange_ = 0u;
    shotspeed_ = 0u;
    weaponsuperskill_ = 0u;
    bulletid_ = 0u;
    guesture_ = 0u;
    weapondisp_ = 0u;
    baseexp_ = 0u;
    if (has_firesound()) {
      if (firesound_ != &::google::protobuf::internal::kEmptyString) {
        firesound_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    weapontype_ = 0u;
    weaponlv_ = 0u;
    if (has_weaponicon()) {
      if (weaponicon_ != &::google::protobuf::internal::kEmptyString) {
        weaponicon_->clear();
      }
    }
    if (has_weapondesc()) {
      if (weapondesc_ != &::google::protobuf::internal::kEmptyString) {
        weapondesc_->clear();
      }
    }
    hit_ = 0u;
    color_ = 0u;
    if (has_weaponpic()) {
      if (weaponpic_ != &::google::protobuf::internal::kEmptyString) {
        weaponpic_->clear();
      }
    }
    firesoundtype_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    fightpowercoe_ = 0u;
    scoreadd_ = 0u;
    bulletval_ = 0u;
    bulletshowval_ = 0u;
    weapondegree_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WeaponID;
        break;
      }

      // required uint32 WeaponID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_WeaponName;
        break;
      }

      // required string WeaponName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaponname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AtkType;
        break;
      }

      // required uint32 AtkType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atktype_)));
          set_has_atktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ATK;
        break;
      }

      // required uint32 ATK = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_AtkAttrType;
        break;
      }

      // required uint32 AtkAttrType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAttrType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkattrtype_)));
          set_has_atkattrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_AtkAttrVal;
        break;
      }

      // required uint32 AtkAttrVal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAttrVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkattrval_)));
          set_has_atkattrval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_PenetrateVal;
        break;
      }

      // required uint32 PenetrateVal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PenetrateVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penetrateval_)));
          set_has_penetrateval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DecMoveSpeed;
        break;
      }

      // required uint32 DecMoveSpeed = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DecMoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decmovespeed_)));
          set_has_decmovespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ExpMulti;
        break;
      }

      // required uint32 ExpMulti = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExpMulti:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expmulti_)));
          set_has_expmulti();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_InitStar;
        break;
      }

      // required uint32 InitStar = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initstar_)));
          set_has_initstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MaxStar;
        break;
      }

      // required uint32 MaxStar = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxstar_)));
          set_has_maxstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ATKAdd;
        break;
      }

      // required uint32 ATKAdd = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATKAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkadd_)));
          set_has_atkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_AtkAttrValAdd;
        break;
      }

      // required uint32 AtkAttrValAdd = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAttrValAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkattrvaladd_)));
          set_has_atkattrvaladd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_PenetrateValAdd;
        break;
      }

      // required uint32 PenetrateValAdd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PenetrateValAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &penetratevaladd_)));
          set_has_penetratevaladd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_InitStep;
        break;
      }

      // required uint32 InitStep = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initstep_)));
          set_has_initstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_ShotRange;
        break;
      }

      // required uint32 ShotRange = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shotrange_)));
          set_has_shotrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ShotSpeed;
        break;
      }

      // required uint32 ShotSpeed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShotSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shotspeed_)));
          set_has_shotspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_WeaponSuperSkill;
        break;
      }

      // required uint32 WeaponSuperSkill = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponSuperSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponsuperskill_)));
          set_has_weaponsuperskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_BulletID;
        break;
      }

      // required uint32 BulletID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_Guesture;
        break;
      }

      // required uint32 Guesture = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Guesture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guesture_)));
          set_has_guesture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_WeaponDisp;
        break;
      }

      // required uint32 WeaponDisp = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponDisp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapondisp_)));
          set_has_weapondisp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_BaseExp;
        break;
      }

      // required uint32 BaseExp = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BaseExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baseexp_)));
          set_has_baseexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_FireSound;
        break;
      }

      // required string FireSound = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FireSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firesound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_WeaponType;
        break;
      }

      // required uint32 WeaponType = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapontype_)));
          set_has_weapontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_WeaponLv;
        break;
      }

      // required uint32 WeaponLv = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlv_)));
          set_has_weaponlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_WeaponIcon;
        break;
      }

      // required string WeaponIcon = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaponicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_WeaponDesc;
        break;
      }

      // required string WeaponDesc = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weapondesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_Hit;
        break;
      }

      // required uint32 Hit = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_Color;
        break;
      }

      // required uint32 Color = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_WeaponPic;
        break;
      }

      // required string WeaponPic = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WeaponPic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weaponpic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_FireSoundType;
        break;
      }

      // required uint32 FireSoundType = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FireSoundType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firesoundtype_)));
          set_has_firesoundtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_FightPowerCoe;
        break;
      }

      // required uint32 FightPowerCoe = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPowerCoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fightpowercoe_)));
          set_has_fightpowercoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_ScoreAdd;
        break;
      }

      // required uint32 ScoreAdd = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ScoreAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoreadd_)));
          set_has_scoreadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_BulletVal;
        break;
      }

      // required uint32 BulletVal = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletval_)));
          set_has_bulletval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_BulletShowVal;
        break;
      }

      // required uint32 BulletShowVal = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletShowVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletshowval_)));
          set_has_bulletshowval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_WeaponDegree;
        break;
      }

      // required uint32 WeaponDegree = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponDegree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weapondegree_)));
          set_has_weapondegree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CfgID = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required uint32 WeaponID = 2;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weaponid(), output);
  }

  // required string WeaponName = 4;
  if (has_weaponname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->weaponname(), output);
  }

  // required uint32 AtkType = 5;
  if (has_atktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->atktype(), output);
  }

  // required uint32 ATK = 6;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->atk(), output);
  }

  // required uint32 AtkAttrType = 7;
  if (has_atkattrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->atkattrtype(), output);
  }

  // required uint32 AtkAttrVal = 8;
  if (has_atkattrval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->atkattrval(), output);
  }

  // required uint32 PenetrateVal = 9;
  if (has_penetrateval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->penetrateval(), output);
  }

  // required uint32 DecMoveSpeed = 10;
  if (has_decmovespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->decmovespeed(), output);
  }

  // required uint32 ExpMulti = 11;
  if (has_expmulti()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->expmulti(), output);
  }

  // required uint32 InitStar = 12;
  if (has_initstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->initstar(), output);
  }

  // required uint32 MaxStar = 13;
  if (has_maxstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->maxstar(), output);
  }

  // required uint32 ATKAdd = 14;
  if (has_atkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->atkadd(), output);
  }

  // required uint32 AtkAttrValAdd = 15;
  if (has_atkattrvaladd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->atkattrvaladd(), output);
  }

  // required uint32 PenetrateValAdd = 16;
  if (has_penetratevaladd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->penetratevaladd(), output);
  }

  // required uint32 InitStep = 17;
  if (has_initstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->initstep(), output);
  }

  // required uint32 ShotRange = 18;
  if (has_shotrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->shotrange(), output);
  }

  // required uint32 ShotSpeed = 19;
  if (has_shotspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->shotspeed(), output);
  }

  // required uint32 WeaponSuperSkill = 20;
  if (has_weaponsuperskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->weaponsuperskill(), output);
  }

  // required uint32 BulletID = 21;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->bulletid(), output);
  }

  // required uint32 Guesture = 22;
  if (has_guesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->guesture(), output);
  }

  // required uint32 WeaponDisp = 23;
  if (has_weapondisp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->weapondisp(), output);
  }

  // required uint32 BaseExp = 24;
  if (has_baseexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->baseexp(), output);
  }

  // required string FireSound = 25;
  if (has_firesound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->firesound(), output);
  }

  // required uint32 WeaponType = 26;
  if (has_weapontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->weapontype(), output);
  }

  // required uint32 WeaponLv = 27;
  if (has_weaponlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->weaponlv(), output);
  }

  // required string WeaponIcon = 28;
  if (has_weaponicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->weaponicon(), output);
  }

  // required string WeaponDesc = 29;
  if (has_weapondesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->weapondesc(), output);
  }

  // required uint32 Hit = 30;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->hit(), output);
  }

  // required uint32 Color = 31;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->color(), output);
  }

  // required string WeaponPic = 32;
  if (has_weaponpic()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->weaponpic(), output);
  }

  // required uint32 FireSoundType = 33;
  if (has_firesoundtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->firesoundtype(), output);
  }

  // required uint32 FightPowerCoe = 34;
  if (has_fightpowercoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->fightpowercoe(), output);
  }

  // required uint32 ScoreAdd = 35;
  if (has_scoreadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->scoreadd(), output);
  }

  // required uint32 BulletVal = 36;
  if (has_bulletval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->bulletval(), output);
  }

  // required uint32 BulletShowVal = 37;
  if (has_bulletshowval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->bulletshowval(), output);
  }

  // required uint32 WeaponDegree = 38;
  if (has_weapondegree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->weapondegree(), output);
  }

}

int WeaponCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CfgID = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 WeaponID = 2;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // required string WeaponName = 4;
    if (has_weaponname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaponname());
    }

    // required uint32 AtkType = 5;
    if (has_atktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atktype());
    }

    // required uint32 ATK = 6;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 AtkAttrType = 7;
    if (has_atkattrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkattrtype());
    }

    // required uint32 AtkAttrVal = 8;
    if (has_atkattrval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkattrval());
    }

    // required uint32 PenetrateVal = 9;
    if (has_penetrateval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penetrateval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 DecMoveSpeed = 10;
    if (has_decmovespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decmovespeed());
    }

    // required uint32 ExpMulti = 11;
    if (has_expmulti()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expmulti());
    }

    // required uint32 InitStar = 12;
    if (has_initstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initstar());
    }

    // required uint32 MaxStar = 13;
    if (has_maxstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxstar());
    }

    // required uint32 ATKAdd = 14;
    if (has_atkadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkadd());
    }

    // required uint32 AtkAttrValAdd = 15;
    if (has_atkattrvaladd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkattrvaladd());
    }

    // required uint32 PenetrateValAdd = 16;
    if (has_penetratevaladd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->penetratevaladd());
    }

    // required uint32 InitStep = 17;
    if (has_initstep()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initstep());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 ShotRange = 18;
    if (has_shotrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shotrange());
    }

    // required uint32 ShotSpeed = 19;
    if (has_shotspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shotspeed());
    }

    // required uint32 WeaponSuperSkill = 20;
    if (has_weaponsuperskill()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponsuperskill());
    }

    // required uint32 BulletID = 21;
    if (has_bulletid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletid());
    }

    // required uint32 Guesture = 22;
    if (has_guesture()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guesture());
    }

    // required uint32 WeaponDisp = 23;
    if (has_weapondisp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapondisp());
    }

    // required uint32 BaseExp = 24;
    if (has_baseexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baseexp());
    }

    // required string FireSound = 25;
    if (has_firesound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->firesound());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 WeaponType = 26;
    if (has_weapontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapontype());
    }

    // required uint32 WeaponLv = 27;
    if (has_weaponlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlv());
    }

    // required string WeaponIcon = 28;
    if (has_weaponicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaponicon());
    }

    // required string WeaponDesc = 29;
    if (has_weapondesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weapondesc());
    }

    // required uint32 Hit = 30;
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

    // required uint32 Color = 31;
    if (has_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // required string WeaponPic = 32;
    if (has_weaponpic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weaponpic());
    }

    // required uint32 FireSoundType = 33;
    if (has_firesoundtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firesoundtype());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 FightPowerCoe = 34;
    if (has_fightpowercoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fightpowercoe());
    }

    // required uint32 ScoreAdd = 35;
    if (has_scoreadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoreadd());
    }

    // required uint32 BulletVal = 36;
    if (has_bulletval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletval());
    }

    // required uint32 BulletShowVal = 37;
    if (has_bulletshowval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletshowval());
    }

    // required uint32 WeaponDegree = 38;
    if (has_weapondegree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weapondegree());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponCfg*>(&from));
}

void WeaponCfg::MergeFrom(const WeaponCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_weaponname()) {
      set_weaponname(from.weaponname());
    }
    if (from.has_atktype()) {
      set_atktype(from.atktype());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_atkattrtype()) {
      set_atkattrtype(from.atkattrtype());
    }
    if (from.has_atkattrval()) {
      set_atkattrval(from.atkattrval());
    }
    if (from.has_penetrateval()) {
      set_penetrateval(from.penetrateval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_decmovespeed()) {
      set_decmovespeed(from.decmovespeed());
    }
    if (from.has_expmulti()) {
      set_expmulti(from.expmulti());
    }
    if (from.has_initstar()) {
      set_initstar(from.initstar());
    }
    if (from.has_maxstar()) {
      set_maxstar(from.maxstar());
    }
    if (from.has_atkadd()) {
      set_atkadd(from.atkadd());
    }
    if (from.has_atkattrvaladd()) {
      set_atkattrvaladd(from.atkattrvaladd());
    }
    if (from.has_penetratevaladd()) {
      set_penetratevaladd(from.penetratevaladd());
    }
    if (from.has_initstep()) {
      set_initstep(from.initstep());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shotrange()) {
      set_shotrange(from.shotrange());
    }
    if (from.has_shotspeed()) {
      set_shotspeed(from.shotspeed());
    }
    if (from.has_weaponsuperskill()) {
      set_weaponsuperskill(from.weaponsuperskill());
    }
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_guesture()) {
      set_guesture(from.guesture());
    }
    if (from.has_weapondisp()) {
      set_weapondisp(from.weapondisp());
    }
    if (from.has_baseexp()) {
      set_baseexp(from.baseexp());
    }
    if (from.has_firesound()) {
      set_firesound(from.firesound());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_weapontype()) {
      set_weapontype(from.weapontype());
    }
    if (from.has_weaponlv()) {
      set_weaponlv(from.weaponlv());
    }
    if (from.has_weaponicon()) {
      set_weaponicon(from.weaponicon());
    }
    if (from.has_weapondesc()) {
      set_weapondesc(from.weapondesc());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_weaponpic()) {
      set_weaponpic(from.weaponpic());
    }
    if (from.has_firesoundtype()) {
      set_firesoundtype(from.firesoundtype());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_fightpowercoe()) {
      set_fightpowercoe(from.fightpowercoe());
    }
    if (from.has_scoreadd()) {
      set_scoreadd(from.scoreadd());
    }
    if (from.has_bulletval()) {
      set_bulletval(from.bulletval());
    }
    if (from.has_bulletshowval()) {
      set_bulletshowval(from.bulletshowval());
    }
    if (from.has_weapondegree()) {
      set_weapondegree(from.weapondegree());
    }
  }
}

void WeaponCfg::CopyFrom(const WeaponCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void WeaponCfg::Swap(WeaponCfg* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(weaponname_, other->weaponname_);
    std::swap(atktype_, other->atktype_);
    std::swap(atk_, other->atk_);
    std::swap(atkattrtype_, other->atkattrtype_);
    std::swap(atkattrval_, other->atkattrval_);
    std::swap(penetrateval_, other->penetrateval_);
    std::swap(decmovespeed_, other->decmovespeed_);
    std::swap(expmulti_, other->expmulti_);
    std::swap(initstar_, other->initstar_);
    std::swap(maxstar_, other->maxstar_);
    std::swap(atkadd_, other->atkadd_);
    std::swap(atkattrvaladd_, other->atkattrvaladd_);
    std::swap(penetratevaladd_, other->penetratevaladd_);
    std::swap(initstep_, other->initstep_);
    std::swap(shotrange_, other->shotrange_);
    std::swap(shotspeed_, other->shotspeed_);
    std::swap(weaponsuperskill_, other->weaponsuperskill_);
    std::swap(bulletid_, other->bulletid_);
    std::swap(guesture_, other->guesture_);
    std::swap(weapondisp_, other->weapondisp_);
    std::swap(baseexp_, other->baseexp_);
    std::swap(firesound_, other->firesound_);
    std::swap(weapontype_, other->weapontype_);
    std::swap(weaponlv_, other->weaponlv_);
    std::swap(weaponicon_, other->weaponicon_);
    std::swap(weapondesc_, other->weapondesc_);
    std::swap(hit_, other->hit_);
    std::swap(color_, other->color_);
    std::swap(weaponpic_, other->weaponpic_);
    std::swap(firesoundtype_, other->firesoundtype_);
    std::swap(fightpowercoe_, other->fightpowercoe_);
    std::swap(scoreadd_, other->scoreadd_);
    std::swap(bulletval_, other->bulletval_);
    std::swap(bulletshowval_, other->bulletshowval_);
    std::swap(weapondegree_, other->weapondegree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponCfg::GetTypeName() const {
  return "com.cfg.vo.WeaponCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponCfgSet::kWeaponcfgFieldNumber;
#endif  // !_MSC_VER

WeaponCfgSet::WeaponCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponCfgSet::InitAsDefaultInstance() {
}

WeaponCfgSet::WeaponCfgSet(const WeaponCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponCfgSet::~WeaponCfgSet() {
  SharedDtor();
}

void WeaponCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponCfgSet& WeaponCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponCfgSet* WeaponCfgSet::default_instance_ = NULL;

WeaponCfgSet* WeaponCfgSet::New() const {
  return new WeaponCfgSet;
}

void WeaponCfgSet::Clear() {
  weaponcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WeaponCfg weaponcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaponcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaponcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weaponcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WeaponCfg weaponcfg = 1;
  for (int i = 0; i < this->weaponcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->weaponcfg(i), output);
  }

}

int WeaponCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WeaponCfg weaponcfg = 1;
  total_size += 1 * this->weaponcfg_size();
  for (int i = 0; i < this->weaponcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaponcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponCfgSet*>(&from));
}

void WeaponCfgSet::MergeFrom(const WeaponCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaponcfg_.MergeFrom(from.weaponcfg_);
}

void WeaponCfgSet::CopyFrom(const WeaponCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponCfgSet::IsInitialized() const {

  for (int i = 0; i < weaponcfg_size(); i++) {
    if (!this->weaponcfg(i).IsInitialized()) return false;
  }
  return true;
}

void WeaponCfgSet::Swap(WeaponCfgSet* other) {
  if (other != this) {
    weaponcfg_.Swap(&other->weaponcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponCfgSet::GetTypeName() const {
  return "com.cfg.vo.WeaponCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
