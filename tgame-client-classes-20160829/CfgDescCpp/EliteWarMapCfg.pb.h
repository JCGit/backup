// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EliteWarMapCfg.proto

#ifndef PROTOBUF_EliteWarMapCfg_2eproto__INCLUDED
#define PROTOBUF_EliteWarMapCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EliteWarMapCfg_2eproto();
void protobuf_AssignDesc_EliteWarMapCfg_2eproto();
void protobuf_ShutdownFile_EliteWarMapCfg_2eproto();

class EliteWarMapCfg;
class EliteWarMapCfgSet;

// ===================================================================

class EliteWarMapCfg : public ::google::protobuf::MessageLite {
 public:
  EliteWarMapCfg();
  virtual ~EliteWarMapCfg();

  EliteWarMapCfg(const EliteWarMapCfg& from);

  inline EliteWarMapCfg& operator=(const EliteWarMapCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const EliteWarMapCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EliteWarMapCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EliteWarMapCfg* other);

  // implements Message ----------------------------------------------

  EliteWarMapCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EliteWarMapCfg& from);
  void MergeFrom(const EliteWarMapCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 MapID = 3;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 3;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // required uint32 WarID = 4;
  inline bool has_warid() const;
  inline void clear_warid();
  static const int kWarIDFieldNumber = 4;
  inline ::google::protobuf::uint32 warid() const;
  inline void set_warid(::google::protobuf::uint32 value);

  // required uint32 WinType = 5;
  inline bool has_wintype() const;
  inline void clear_wintype();
  static const int kWinTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 wintype() const;
  inline void set_wintype(::google::protobuf::uint32 value);

  // required uint32 WinValue1 = 6;
  inline bool has_winvalue1() const;
  inline void clear_winvalue1();
  static const int kWinValue1FieldNumber = 6;
  inline ::google::protobuf::uint32 winvalue1() const;
  inline void set_winvalue1(::google::protobuf::uint32 value);

  // required uint32 WinValue2 = 7;
  inline bool has_winvalue2() const;
  inline void clear_winvalue2();
  static const int kWinValue2FieldNumber = 7;
  inline ::google::protobuf::uint32 winvalue2() const;
  inline void set_winvalue2(::google::protobuf::uint32 value);

  // required uint32 LimitTime = 8;
  inline bool has_limittime() const;
  inline void clear_limittime();
  static const int kLimitTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 limittime() const;
  inline void set_limittime(::google::protobuf::uint32 value);

  // required uint32 StageNum = 9;
  inline bool has_stagenum() const;
  inline void clear_stagenum();
  static const int kStageNumFieldNumber = 9;
  inline ::google::protobuf::uint32 stagenum() const;
  inline void set_stagenum(::google::protobuf::uint32 value);

  // required uint32 PackageID = 10;
  inline bool has_packageid() const;
  inline void clear_packageid();
  static const int kPackageIDFieldNumber = 10;
  inline ::google::protobuf::uint32 packageid() const;
  inline void set_packageid(::google::protobuf::uint32 value);

  // required uint32 BossID = 11;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIDFieldNumber = 11;
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // required uint32 Level = 12;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 12;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // repeated uint32 StarCondition = 13;
  inline int starcondition_size() const;
  inline void clear_starcondition();
  static const int kStarConditionFieldNumber = 13;
  inline ::google::protobuf::uint32 starcondition(int index) const;
  inline void set_starcondition(int index, ::google::protobuf::uint32 value);
  inline void add_starcondition(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      starcondition() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_starcondition();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.EliteWarMapCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_warid();
  inline void clear_has_warid();
  inline void set_has_wintype();
  inline void clear_has_wintype();
  inline void set_has_winvalue1();
  inline void clear_has_winvalue1();
  inline void set_has_winvalue2();
  inline void clear_has_winvalue2();
  inline void set_has_limittime();
  inline void clear_has_limittime();
  inline void set_has_stagenum();
  inline void clear_has_stagenum();
  inline void set_has_packageid();
  inline void clear_has_packageid();
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_level();
  inline void clear_has_level();

  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 warid_;
  ::google::protobuf::uint32 wintype_;
  ::google::protobuf::uint32 winvalue1_;
  ::google::protobuf::uint32 winvalue2_;
  ::google::protobuf::uint32 limittime_;
  ::google::protobuf::uint32 stagenum_;
  ::google::protobuf::uint32 packageid_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > starcondition_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EliteWarMapCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EliteWarMapCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EliteWarMapCfg_2eproto();
  friend void protobuf_ShutdownFile_EliteWarMapCfg_2eproto();

  void InitAsDefaultInstance();
  static EliteWarMapCfg* default_instance_;
};
// -------------------------------------------------------------------

class EliteWarMapCfgSet : public ::google::protobuf::MessageLite {
 public:
  EliteWarMapCfgSet();
  virtual ~EliteWarMapCfgSet();

  EliteWarMapCfgSet(const EliteWarMapCfgSet& from);

  inline EliteWarMapCfgSet& operator=(const EliteWarMapCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const EliteWarMapCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EliteWarMapCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EliteWarMapCfgSet* other);

  // implements Message ----------------------------------------------

  EliteWarMapCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EliteWarMapCfgSet& from);
  void MergeFrom(const EliteWarMapCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.EliteWarMapCfg elitewarMapCfg = 1;
  inline int elitewarmapcfg_size() const;
  inline void clear_elitewarmapcfg();
  static const int kElitewarMapCfgFieldNumber = 1;
  inline const ::com::cfg::vo::EliteWarMapCfg& elitewarmapcfg(int index) const;
  inline ::com::cfg::vo::EliteWarMapCfg* mutable_elitewarmapcfg(int index);
  inline ::com::cfg::vo::EliteWarMapCfg* add_elitewarmapcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EliteWarMapCfg >&
      elitewarmapcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EliteWarMapCfg >*
      mutable_elitewarmapcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.EliteWarMapCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EliteWarMapCfg > elitewarmapcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EliteWarMapCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EliteWarMapCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EliteWarMapCfg_2eproto();
  friend void protobuf_ShutdownFile_EliteWarMapCfg_2eproto();

  void InitAsDefaultInstance();
  static EliteWarMapCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// EliteWarMapCfg

// required uint32 ID = 1;
inline bool EliteWarMapCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EliteWarMapCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EliteWarMapCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EliteWarMapCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::id() const {
  return id_;
}
inline void EliteWarMapCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string Name = 2;
inline bool EliteWarMapCfg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EliteWarMapCfg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EliteWarMapCfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EliteWarMapCfg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& EliteWarMapCfg::name() const {
  return *name_;
}
inline void EliteWarMapCfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EliteWarMapCfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void EliteWarMapCfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* EliteWarMapCfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* EliteWarMapCfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void EliteWarMapCfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 MapID = 3;
inline bool EliteWarMapCfg::has_mapid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EliteWarMapCfg::set_has_mapid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EliteWarMapCfg::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EliteWarMapCfg::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::mapid() const {
  return mapid_;
}
inline void EliteWarMapCfg::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required uint32 WarID = 4;
inline bool EliteWarMapCfg::has_warid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EliteWarMapCfg::set_has_warid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EliteWarMapCfg::clear_has_warid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EliteWarMapCfg::clear_warid() {
  warid_ = 0u;
  clear_has_warid();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::warid() const {
  return warid_;
}
inline void EliteWarMapCfg::set_warid(::google::protobuf::uint32 value) {
  set_has_warid();
  warid_ = value;
}

// required uint32 WinType = 5;
inline bool EliteWarMapCfg::has_wintype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EliteWarMapCfg::set_has_wintype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EliteWarMapCfg::clear_has_wintype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EliteWarMapCfg::clear_wintype() {
  wintype_ = 0u;
  clear_has_wintype();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::wintype() const {
  return wintype_;
}
inline void EliteWarMapCfg::set_wintype(::google::protobuf::uint32 value) {
  set_has_wintype();
  wintype_ = value;
}

// required uint32 WinValue1 = 6;
inline bool EliteWarMapCfg::has_winvalue1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EliteWarMapCfg::set_has_winvalue1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EliteWarMapCfg::clear_has_winvalue1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EliteWarMapCfg::clear_winvalue1() {
  winvalue1_ = 0u;
  clear_has_winvalue1();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::winvalue1() const {
  return winvalue1_;
}
inline void EliteWarMapCfg::set_winvalue1(::google::protobuf::uint32 value) {
  set_has_winvalue1();
  winvalue1_ = value;
}

// required uint32 WinValue2 = 7;
inline bool EliteWarMapCfg::has_winvalue2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EliteWarMapCfg::set_has_winvalue2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EliteWarMapCfg::clear_has_winvalue2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EliteWarMapCfg::clear_winvalue2() {
  winvalue2_ = 0u;
  clear_has_winvalue2();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::winvalue2() const {
  return winvalue2_;
}
inline void EliteWarMapCfg::set_winvalue2(::google::protobuf::uint32 value) {
  set_has_winvalue2();
  winvalue2_ = value;
}

// required uint32 LimitTime = 8;
inline bool EliteWarMapCfg::has_limittime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void EliteWarMapCfg::set_has_limittime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void EliteWarMapCfg::clear_has_limittime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void EliteWarMapCfg::clear_limittime() {
  limittime_ = 0u;
  clear_has_limittime();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::limittime() const {
  return limittime_;
}
inline void EliteWarMapCfg::set_limittime(::google::protobuf::uint32 value) {
  set_has_limittime();
  limittime_ = value;
}

// required uint32 StageNum = 9;
inline bool EliteWarMapCfg::has_stagenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void EliteWarMapCfg::set_has_stagenum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void EliteWarMapCfg::clear_has_stagenum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void EliteWarMapCfg::clear_stagenum() {
  stagenum_ = 0u;
  clear_has_stagenum();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::stagenum() const {
  return stagenum_;
}
inline void EliteWarMapCfg::set_stagenum(::google::protobuf::uint32 value) {
  set_has_stagenum();
  stagenum_ = value;
}

// required uint32 PackageID = 10;
inline bool EliteWarMapCfg::has_packageid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void EliteWarMapCfg::set_has_packageid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void EliteWarMapCfg::clear_has_packageid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void EliteWarMapCfg::clear_packageid() {
  packageid_ = 0u;
  clear_has_packageid();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::packageid() const {
  return packageid_;
}
inline void EliteWarMapCfg::set_packageid(::google::protobuf::uint32 value) {
  set_has_packageid();
  packageid_ = value;
}

// required uint32 BossID = 11;
inline bool EliteWarMapCfg::has_bossid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void EliteWarMapCfg::set_has_bossid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void EliteWarMapCfg::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void EliteWarMapCfg::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::bossid() const {
  return bossid_;
}
inline void EliteWarMapCfg::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
}

// required uint32 Level = 12;
inline bool EliteWarMapCfg::has_level() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void EliteWarMapCfg::set_has_level() {
  _has_bits_[0] |= 0x00000800u;
}
inline void EliteWarMapCfg::clear_has_level() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void EliteWarMapCfg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::level() const {
  return level_;
}
inline void EliteWarMapCfg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// repeated uint32 StarCondition = 13;
inline int EliteWarMapCfg::starcondition_size() const {
  return starcondition_.size();
}
inline void EliteWarMapCfg::clear_starcondition() {
  starcondition_.Clear();
}
inline ::google::protobuf::uint32 EliteWarMapCfg::starcondition(int index) const {
  return starcondition_.Get(index);
}
inline void EliteWarMapCfg::set_starcondition(int index, ::google::protobuf::uint32 value) {
  starcondition_.Set(index, value);
}
inline void EliteWarMapCfg::add_starcondition(::google::protobuf::uint32 value) {
  starcondition_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
EliteWarMapCfg::starcondition() const {
  return starcondition_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
EliteWarMapCfg::mutable_starcondition() {
  return &starcondition_;
}

// -------------------------------------------------------------------

// EliteWarMapCfgSet

// repeated .com.cfg.vo.EliteWarMapCfg elitewarMapCfg = 1;
inline int EliteWarMapCfgSet::elitewarmapcfg_size() const {
  return elitewarmapcfg_.size();
}
inline void EliteWarMapCfgSet::clear_elitewarmapcfg() {
  elitewarmapcfg_.Clear();
}
inline const ::com::cfg::vo::EliteWarMapCfg& EliteWarMapCfgSet::elitewarmapcfg(int index) const {
  return elitewarmapcfg_.Get(index);
}
inline ::com::cfg::vo::EliteWarMapCfg* EliteWarMapCfgSet::mutable_elitewarmapcfg(int index) {
  return elitewarmapcfg_.Mutable(index);
}
inline ::com::cfg::vo::EliteWarMapCfg* EliteWarMapCfgSet::add_elitewarmapcfg() {
  return elitewarmapcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EliteWarMapCfg >&
EliteWarMapCfgSet::elitewarmapcfg() const {
  return elitewarmapcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EliteWarMapCfg >*
EliteWarMapCfgSet::mutable_elitewarmapcfg() {
  return &elitewarmapcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EliteWarMapCfg_2eproto__INCLUDED
