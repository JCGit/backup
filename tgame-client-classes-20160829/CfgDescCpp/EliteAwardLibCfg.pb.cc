// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EliteAwardLibCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EliteAwardLibCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EliteAwardLibCfg_2eproto() {
  delete EliteAwardLibCfg::default_instance_;
  delete EliteAwardLibCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EliteAwardLibCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EliteAwardLibCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EliteAwardLibCfg::default_instance_ = new EliteAwardLibCfg();
  EliteAwardLibCfgSet::default_instance_ = new EliteAwardLibCfgSet();
  EliteAwardLibCfg::default_instance_->InitAsDefaultInstance();
  EliteAwardLibCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EliteAwardLibCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EliteAwardLibCfg_2eproto_once_);
void protobuf_AddDesc_EliteAwardLibCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EliteAwardLibCfg_2eproto_once_,
                 &protobuf_AddDesc_EliteAwardLibCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EliteAwardLibCfg_2eproto {
  StaticDescriptorInitializer_EliteAwardLibCfg_2eproto() {
    protobuf_AddDesc_EliteAwardLibCfg_2eproto();
  }
} static_descriptor_initializer_EliteAwardLibCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EliteAwardLibCfg::kIDFieldNumber;
const int EliteAwardLibCfg::kWarIDFieldNumber;
const int EliteAwardLibCfg::kIsBossFieldNumber;
const int EliteAwardLibCfg::kAwardTypeFieldNumber;
const int EliteAwardLibCfg::kAwardCfgIDFieldNumber;
const int EliteAwardLibCfg::kAwardCntFieldNumber;
#endif  // !_MSC_VER

EliteAwardLibCfg::EliteAwardLibCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EliteAwardLibCfg::InitAsDefaultInstance() {
}

EliteAwardLibCfg::EliteAwardLibCfg(const EliteAwardLibCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EliteAwardLibCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  warid_ = 0u;
  isboss_ = 0u;
  awardtype_ = 0u;
  awardcfgid_ = 0u;
  awardcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteAwardLibCfg::~EliteAwardLibCfg() {
  SharedDtor();
}

void EliteAwardLibCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EliteAwardLibCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EliteAwardLibCfg& EliteAwardLibCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EliteAwardLibCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EliteAwardLibCfg_2eproto();
#endif
  return *default_instance_;
}

EliteAwardLibCfg* EliteAwardLibCfg::default_instance_ = NULL;

EliteAwardLibCfg* EliteAwardLibCfg::New() const {
  return new EliteAwardLibCfg;
}

void EliteAwardLibCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    warid_ = 0u;
    isboss_ = 0u;
    awardtype_ = 0u;
    awardcfgid_ = 0u;
    awardcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EliteAwardLibCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WarID;
        break;
      }

      // required uint32 WarID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsBoss;
        break;
      }

      // required uint32 IsBoss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isboss_)));
          set_has_isboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardType;
        break;
      }

      // required uint32 AwardType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AwardCfgID;
        break;
      }

      // required uint32 AwardCfgID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcfgid_)));
          set_has_awardcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AwardCnt;
        break;
      }

      // required uint32 AwardCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcnt_)));
          set_has_awardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteAwardLibCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 WarID = 2;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->warid(), output);
  }

  // required uint32 IsBoss = 3;
  if (has_isboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isboss(), output);
  }

  // required uint32 AwardType = 4;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->awardtype(), output);
  }

  // required uint32 AwardCfgID = 5;
  if (has_awardcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->awardcfgid(), output);
  }

  // required uint32 AwardCnt = 6;
  if (has_awardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->awardcnt(), output);
  }

}

int EliteAwardLibCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 WarID = 2;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

    // required uint32 IsBoss = 3;
    if (has_isboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isboss());
    }

    // required uint32 AwardType = 4;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // required uint32 AwardCfgID = 5;
    if (has_awardcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcfgid());
    }

    // required uint32 AwardCnt = 6;
    if (has_awardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteAwardLibCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EliteAwardLibCfg*>(&from));
}

void EliteAwardLibCfg::MergeFrom(const EliteAwardLibCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_warid()) {
      set_warid(from.warid());
    }
    if (from.has_isboss()) {
      set_isboss(from.isboss());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardcfgid()) {
      set_awardcfgid(from.awardcfgid());
    }
    if (from.has_awardcnt()) {
      set_awardcnt(from.awardcnt());
    }
  }
}

void EliteAwardLibCfg::CopyFrom(const EliteAwardLibCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteAwardLibCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void EliteAwardLibCfg::Swap(EliteAwardLibCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(warid_, other->warid_);
    std::swap(isboss_, other->isboss_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardcfgid_, other->awardcfgid_);
    std::swap(awardcnt_, other->awardcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EliteAwardLibCfg::GetTypeName() const {
  return "com.cfg.vo.EliteAwardLibCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EliteAwardLibCfgSet::kEliteawardlibcfgFieldNumber;
#endif  // !_MSC_VER

EliteAwardLibCfgSet::EliteAwardLibCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EliteAwardLibCfgSet::InitAsDefaultInstance() {
}

EliteAwardLibCfgSet::EliteAwardLibCfgSet(const EliteAwardLibCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EliteAwardLibCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteAwardLibCfgSet::~EliteAwardLibCfgSet() {
  SharedDtor();
}

void EliteAwardLibCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EliteAwardLibCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EliteAwardLibCfgSet& EliteAwardLibCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EliteAwardLibCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EliteAwardLibCfg_2eproto();
#endif
  return *default_instance_;
}

EliteAwardLibCfgSet* EliteAwardLibCfgSet::default_instance_ = NULL;

EliteAwardLibCfgSet* EliteAwardLibCfgSet::New() const {
  return new EliteAwardLibCfgSet;
}

void EliteAwardLibCfgSet::Clear() {
  eliteawardlibcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EliteAwardLibCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EliteAwardLibCfg eliteawardlibcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eliteawardlibcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eliteawardlibcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_eliteawardlibcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteAwardLibCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EliteAwardLibCfg eliteawardlibcfg = 1;
  for (int i = 0; i < this->eliteawardlibcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->eliteawardlibcfg(i), output);
  }

}

int EliteAwardLibCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EliteAwardLibCfg eliteawardlibcfg = 1;
  total_size += 1 * this->eliteawardlibcfg_size();
  for (int i = 0; i < this->eliteawardlibcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eliteawardlibcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteAwardLibCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EliteAwardLibCfgSet*>(&from));
}

void EliteAwardLibCfgSet::MergeFrom(const EliteAwardLibCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  eliteawardlibcfg_.MergeFrom(from.eliteawardlibcfg_);
}

void EliteAwardLibCfgSet::CopyFrom(const EliteAwardLibCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteAwardLibCfgSet::IsInitialized() const {

  for (int i = 0; i < eliteawardlibcfg_size(); i++) {
    if (!this->eliteawardlibcfg(i).IsInitialized()) return false;
  }
  return true;
}

void EliteAwardLibCfgSet::Swap(EliteAwardLibCfgSet* other) {
  if (other != this) {
    eliteawardlibcfg_.Swap(&other->eliteawardlibcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EliteAwardLibCfgSet::GetTypeName() const {
  return "com.cfg.vo.EliteAwardLibCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
