// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TaskCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_TaskCfg_2eproto() {
  delete Target::default_instance_;
  delete TaskAward::default_instance_;
  delete TaskCfg::default_instance_;
  delete TaskCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_TaskCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_TaskCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Target::default_instance_ = new Target();
  TaskAward::default_instance_ = new TaskAward();
  TaskCfg::default_instance_ = new TaskCfg();
  TaskCfgSet::default_instance_ = new TaskCfgSet();
  Target::default_instance_->InitAsDefaultInstance();
  TaskAward::default_instance_->InitAsDefaultInstance();
  TaskCfg::default_instance_->InitAsDefaultInstance();
  TaskCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TaskCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TaskCfg_2eproto_once_);
void protobuf_AddDesc_TaskCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TaskCfg_2eproto_once_,
                 &protobuf_AddDesc_TaskCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TaskCfg_2eproto {
  StaticDescriptorInitializer_TaskCfg_2eproto() {
    protobuf_AddDesc_TaskCfg_2eproto();
  }
} static_descriptor_initializer_TaskCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Target::kTargetTypeFieldNumber;
const int Target::kR1FieldNumber;
const int Target::kR2FieldNumber;
const int Target::kR3FieldNumber;
const int Target::kR4FieldNumber;
#endif  // !_MSC_VER

Target::Target()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Target::InitAsDefaultInstance() {
}

Target::Target(const Target& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Target::SharedCtor() {
  _cached_size_ = 0;
  targettype_ = 0u;
  r1_ = 0u;
  r2_ = 0u;
  r3_ = 0u;
  r4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Target::~Target() {
  SharedDtor();
}

void Target::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Target::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Target& Target::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TaskCfg_2eproto();
#endif
  return *default_instance_;
}

Target* Target::default_instance_ = NULL;

Target* Target::New() const {
  return new Target;
}

void Target::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targettype_ = 0u;
    r1_ = 0u;
    r2_ = 0u;
    r3_ = 0u;
    r4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Target::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TargetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_R1;
        break;
      }

      // required uint32 R1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_R2;
        break;
      }

      // required uint32 R2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_R3;
        break;
      }

      // required uint32 R3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r3_)));
          set_has_r3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_R4;
        break;
      }

      // required uint32 R4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r4_)));
          set_has_r4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Target::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TargetType = 1;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targettype(), output);
  }

  // required uint32 R1 = 2;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->r1(), output);
  }

  // required uint32 R2 = 3;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r2(), output);
  }

  // required uint32 R3 = 4;
  if (has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r3(), output);
  }

  // required uint32 R4 = 5;
  if (has_r4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r4(), output);
  }

}

int Target::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TargetType = 1;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // required uint32 R1 = 2;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r1());
    }

    // required uint32 R2 = 3;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r2());
    }

    // required uint32 R3 = 4;
    if (has_r3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r3());
    }

    // required uint32 R4 = 5;
    if (has_r4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r4());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Target::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Target*>(&from));
}

void Target::MergeFrom(const Target& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_r3()) {
      set_r3(from.r3());
    }
    if (from.has_r4()) {
      set_r4(from.r4());
    }
  }
}

void Target::CopyFrom(const Target& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Target::Swap(Target* other) {
  if (other != this) {
    std::swap(targettype_, other->targettype_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(r3_, other->r3_);
    std::swap(r4_, other->r4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Target::GetTypeName() const {
  return "com.cfg.vo.Target";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskAward::kCoinFieldNumber;
const int TaskAward::kExpFieldNumber;
const int TaskAward::kAwardTypeFieldNumber;
const int TaskAward::kAwardCfgIDFieldNumber;
const int TaskAward::kAwardCntFieldNumber;
#endif  // !_MSC_VER

TaskAward::TaskAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskAward::InitAsDefaultInstance() {
}

TaskAward::TaskAward(const TaskAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskAward::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  exp_ = 0u;
  awardtype_ = 0u;
  awardcfgid_ = 0u;
  awardcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskAward::~TaskAward() {
  SharedDtor();
}

void TaskAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskAward& TaskAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TaskCfg_2eproto();
#endif
  return *default_instance_;
}

TaskAward* TaskAward::default_instance_ = NULL;

TaskAward* TaskAward::New() const {
  return new TaskAward;
}

void TaskAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    exp_ = 0u;
    awardtype_ = 0u;
    awardcfgid_ = 0u;
    awardcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // required uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AwardType;
        break;
      }

      // required uint32 AwardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardCfgID;
        break;
      }

      // required uint32 AwardCfgID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcfgid_)));
          set_has_awardcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AwardCnt;
        break;
      }

      // required uint32 AwardCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcnt_)));
          set_has_awardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // required uint32 AwardType = 3;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->awardtype(), output);
  }

  // required uint32 AwardCfgID = 4;
  if (has_awardcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->awardcfgid(), output);
  }

  // required uint32 AwardCnt = 5;
  if (has_awardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->awardcnt(), output);
  }

}

int TaskAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 AwardType = 3;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // required uint32 AwardCfgID = 4;
    if (has_awardcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcfgid());
    }

    // required uint32 AwardCnt = 5;
    if (has_awardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskAward*>(&from));
}

void TaskAward::MergeFrom(const TaskAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardcfgid()) {
      set_awardcfgid(from.awardcfgid());
    }
    if (from.has_awardcnt()) {
      set_awardcnt(from.awardcnt());
    }
  }
}

void TaskAward::CopyFrom(const TaskAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void TaskAward::Swap(TaskAward* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardcfgid_, other->awardcfgid_);
    std::swap(awardcnt_, other->awardcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskAward::GetTypeName() const {
  return "com.cfg.vo.TaskAward";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskCfg::kTaskIDFieldNumber;
const int TaskCfg::kTaskNameFieldNumber;
const int TaskCfg::kTaskDescFieldNumber;
const int TaskCfg::kLeadIDFieldNumber;
const int TaskCfg::kLevelFieldNumber;
const int TaskCfg::kGetNPCIDFieldNumber;
const int TaskCfg::kCommitNPCIDFieldNumber;
const int TaskCfg::kTaskTargetFieldNumber;
const int TaskCfg::kAwardFieldNumber;
const int TaskCfg::kRecvStoryIDFieldNumber;
const int TaskCfg::kCommitStoryIDFieldNumber;
#endif  // !_MSC_VER

TaskCfg::TaskCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tasktarget_ = const_cast< ::com::cfg::vo::Target*>(
      ::com::cfg::vo::Target::internal_default_instance());
#else
  tasktarget_ = const_cast< ::com::cfg::vo::Target*>(&::com::cfg::vo::Target::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  award_ = const_cast< ::com::cfg::vo::TaskAward*>(
      ::com::cfg::vo::TaskAward::internal_default_instance());
#else
  award_ = const_cast< ::com::cfg::vo::TaskAward*>(&::com::cfg::vo::TaskAward::default_instance());
#endif
}

TaskCfg::TaskCfg(const TaskCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskCfg::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leadid_ = 0u;
  level_ = 0u;
  getnpcid_ = 0u;
  commitnpcid_ = 0u;
  tasktarget_ = NULL;
  award_ = NULL;
  recvstoryid_ = 0u;
  commitstoryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCfg::~TaskCfg() {
  SharedDtor();
}

void TaskCfg::SharedDtor() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (taskdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete taskdesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete tasktarget_;
    delete award_;
  }
}

void TaskCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskCfg& TaskCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TaskCfg_2eproto();
#endif
  return *default_instance_;
}

TaskCfg* TaskCfg::default_instance_ = NULL;

TaskCfg* TaskCfg::New() const {
  return new TaskCfg;
}

void TaskCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
    if (has_taskdesc()) {
      if (taskdesc_ != &::google::protobuf::internal::kEmptyString) {
        taskdesc_->clear();
      }
    }
    leadid_ = 0u;
    level_ = 0u;
    getnpcid_ = 0u;
    commitnpcid_ = 0u;
    if (has_tasktarget()) {
      if (tasktarget_ != NULL) tasktarget_->::com::cfg::vo::Target::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_award()) {
      if (award_ != NULL) award_->::com::cfg::vo::TaskAward::Clear();
    }
    recvstoryid_ = 0u;
    commitstoryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TaskName;
        break;
      }

      // required string TaskName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TaskDesc;
        break;
      }

      // required string TaskDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LeadID;
        break;
      }

      // required uint32 LeadID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeadID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadid_)));
          set_has_leadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // required uint32 Level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_GetNPCID;
        break;
      }

      // required uint32 GetNPCID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GetNPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getnpcid_)));
          set_has_getnpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CommitNPCID;
        break;
      }

      // required uint32 CommitNPCID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CommitNPCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commitnpcid_)));
          set_has_commitnpcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_TaskTarget;
        break;
      }

      // required .com.cfg.vo.Target TaskTarget = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TaskTarget:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tasktarget()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Award;
        break;
      }

      // required .com.cfg.vo.TaskAward Award = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_RecvStoryID;
        break;
      }

      // required uint32 RecvStoryID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RecvStoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recvstoryid_)));
          set_has_recvstoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_CommitStoryID;
        break;
      }

      // required uint32 CommitStoryID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CommitStoryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commitstoryid_)));
          set_has_commitstoryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TaskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // required string TaskName = 2;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->taskname(), output);
  }

  // required string TaskDesc = 3;
  if (has_taskdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->taskdesc(), output);
  }

  // required uint32 LeadID = 4;
  if (has_leadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leadid(), output);
  }

  // required uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // required uint32 GetNPCID = 6;
  if (has_getnpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->getnpcid(), output);
  }

  // required uint32 CommitNPCID = 7;
  if (has_commitnpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->commitnpcid(), output);
  }

  // required .com.cfg.vo.Target TaskTarget = 8;
  if (has_tasktarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->tasktarget(), output);
  }

  // required .com.cfg.vo.TaskAward Award = 9;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->award(), output);
  }

  // required uint32 RecvStoryID = 10;
  if (has_recvstoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->recvstoryid(), output);
  }

  // required uint32 CommitStoryID = 11;
  if (has_commitstoryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->commitstoryid(), output);
  }

}

int TaskCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TaskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required string TaskName = 2;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }

    // required string TaskDesc = 3;
    if (has_taskdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskdesc());
    }

    // required uint32 LeadID = 4;
    if (has_leadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadid());
    }

    // required uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 GetNPCID = 6;
    if (has_getnpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getnpcid());
    }

    // required uint32 CommitNPCID = 7;
    if (has_commitnpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commitnpcid());
    }

    // required .com.cfg.vo.Target TaskTarget = 8;
    if (has_tasktarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasktarget());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .com.cfg.vo.TaskAward Award = 9;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }

    // required uint32 RecvStoryID = 10;
    if (has_recvstoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recvstoryid());
    }

    // required uint32 CommitStoryID = 11;
    if (has_commitstoryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commitstoryid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskCfg*>(&from));
}

void TaskCfg::MergeFrom(const TaskCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
    if (from.has_taskdesc()) {
      set_taskdesc(from.taskdesc());
    }
    if (from.has_leadid()) {
      set_leadid(from.leadid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_getnpcid()) {
      set_getnpcid(from.getnpcid());
    }
    if (from.has_commitnpcid()) {
      set_commitnpcid(from.commitnpcid());
    }
    if (from.has_tasktarget()) {
      mutable_tasktarget()->::com::cfg::vo::Target::MergeFrom(from.tasktarget());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_award()) {
      mutable_award()->::com::cfg::vo::TaskAward::MergeFrom(from.award());
    }
    if (from.has_recvstoryid()) {
      set_recvstoryid(from.recvstoryid());
    }
    if (from.has_commitstoryid()) {
      set_commitstoryid(from.commitstoryid());
    }
  }
}

void TaskCfg::CopyFrom(const TaskCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  if (has_tasktarget()) {
    if (!this->tasktarget().IsInitialized()) return false;
  }
  if (has_award()) {
    if (!this->award().IsInitialized()) return false;
  }
  return true;
}

void TaskCfg::Swap(TaskCfg* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(taskname_, other->taskname_);
    std::swap(taskdesc_, other->taskdesc_);
    std::swap(leadid_, other->leadid_);
    std::swap(level_, other->level_);
    std::swap(getnpcid_, other->getnpcid_);
    std::swap(commitnpcid_, other->commitnpcid_);
    std::swap(tasktarget_, other->tasktarget_);
    std::swap(award_, other->award_);
    std::swap(recvstoryid_, other->recvstoryid_);
    std::swap(commitstoryid_, other->commitstoryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskCfg::GetTypeName() const {
  return "com.cfg.vo.TaskCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int TaskCfgSet::kTaskcfgFieldNumber;
#endif  // !_MSC_VER

TaskCfgSet::TaskCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TaskCfgSet::InitAsDefaultInstance() {
}

TaskCfgSet::TaskCfgSet(const TaskCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TaskCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskCfgSet::~TaskCfgSet() {
  SharedDtor();
}

void TaskCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TaskCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskCfgSet& TaskCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TaskCfg_2eproto();
#endif
  return *default_instance_;
}

TaskCfgSet* TaskCfgSet::default_instance_ = NULL;

TaskCfgSet* TaskCfgSet::New() const {
  return new TaskCfgSet;
}

void TaskCfgSet::Clear() {
  taskcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TaskCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.TaskCfg taskcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.TaskCfg taskcfg = 1;
  for (int i = 0; i < this->taskcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->taskcfg(i), output);
  }

}

int TaskCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.TaskCfg taskcfg = 1;
  total_size += 1 * this->taskcfg_size();
  for (int i = 0; i < this->taskcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskCfgSet*>(&from));
}

void TaskCfgSet::MergeFrom(const TaskCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskcfg_.MergeFrom(from.taskcfg_);
}

void TaskCfgSet::CopyFrom(const TaskCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskCfgSet::IsInitialized() const {

  for (int i = 0; i < taskcfg_size(); i++) {
    if (!this->taskcfg(i).IsInitialized()) return false;
  }
  return true;
}

void TaskCfgSet::Swap(TaskCfgSet* other) {
  if (other != this) {
    taskcfg_.Swap(&other->taskcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TaskCfgSet::GetTypeName() const {
  return "com.cfg.vo.TaskCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
