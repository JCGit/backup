// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NihilityMapLibCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NihilityMapLibCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_NihilityMapLibCfg_2eproto() {
  delete NihilityMapLibCfg::default_instance_;
  delete NihilityMapLibCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_NihilityMapLibCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_NihilityMapLibCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NihilityMapLibCfg::default_instance_ = new NihilityMapLibCfg();
  NihilityMapLibCfgSet::default_instance_ = new NihilityMapLibCfgSet();
  NihilityMapLibCfg::default_instance_->InitAsDefaultInstance();
  NihilityMapLibCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NihilityMapLibCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NihilityMapLibCfg_2eproto_once_);
void protobuf_AddDesc_NihilityMapLibCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NihilityMapLibCfg_2eproto_once_,
                 &protobuf_AddDesc_NihilityMapLibCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NihilityMapLibCfg_2eproto {
  StaticDescriptorInitializer_NihilityMapLibCfg_2eproto() {
    protobuf_AddDesc_NihilityMapLibCfg_2eproto();
  }
} static_descriptor_initializer_NihilityMapLibCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int NihilityMapLibCfg::kIDFieldNumber;
const int NihilityMapLibCfg::kBackIDFieldNumber;
const int NihilityMapLibCfg::kMidIDFieldNumber;
const int NihilityMapLibCfg::kForeIDFieldNumber;
const int NihilityMapLibCfg::kFrontIDFieldNumber;
const int NihilityMapLibCfg::kMidPosFieldNumber;
const int NihilityMapLibCfg::kMidWalkHFieldNumber;
const int NihilityMapLibCfg::kCfgIDFieldNumber;
const int NihilityMapLibCfg::kTypeFieldNumber;
const int NihilityMapLibCfg::kLimitTimeFieldNumber;
const int NihilityMapLibCfg::kWinTypeFieldNumber;
const int NihilityMapLibCfg::kWinValue1FieldNumber;
const int NihilityMapLibCfg::kWinValue2FieldNumber;
const int NihilityMapLibCfg::kMinLevelFieldNumber;
const int NihilityMapLibCfg::kMaxLevelFieldNumber;
const int NihilityMapLibCfg::kMidID2FieldNumber;
#endif  // !_MSC_VER

NihilityMapLibCfg::NihilityMapLibCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NihilityMapLibCfg::InitAsDefaultInstance() {
}

NihilityMapLibCfg::NihilityMapLibCfg(const NihilityMapLibCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NihilityMapLibCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midpos_ = 0u;
  midwalkh_ = 0u;
  cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  limittime_ = 0u;
  wintype_ = 0u;
  winvalue1_ = 0u;
  winvalue2_ = 0u;
  minlevel_ = 0u;
  maxlevel_ = 0u;
  midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NihilityMapLibCfg::~NihilityMapLibCfg() {
  SharedDtor();
}

void NihilityMapLibCfg::SharedDtor() {
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    delete backid_;
  }
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    delete midid_;
  }
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    delete foreid_;
  }
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    delete frontid_;
  }
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    delete cfgid_;
  }
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    delete midid2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NihilityMapLibCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NihilityMapLibCfg& NihilityMapLibCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NihilityMapLibCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NihilityMapLibCfg_2eproto();
#endif
  return *default_instance_;
}

NihilityMapLibCfg* NihilityMapLibCfg::default_instance_ = NULL;

NihilityMapLibCfg* NihilityMapLibCfg::New() const {
  return new NihilityMapLibCfg;
}

void NihilityMapLibCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_backid()) {
      if (backid_ != &::google::protobuf::internal::kEmptyString) {
        backid_->clear();
      }
    }
    if (has_midid()) {
      if (midid_ != &::google::protobuf::internal::kEmptyString) {
        midid_->clear();
      }
    }
    if (has_foreid()) {
      if (foreid_ != &::google::protobuf::internal::kEmptyString) {
        foreid_->clear();
      }
    }
    if (has_frontid()) {
      if (frontid_ != &::google::protobuf::internal::kEmptyString) {
        frontid_->clear();
      }
    }
    midpos_ = 0u;
    midwalkh_ = 0u;
    if (has_cfgid()) {
      if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
        cfgid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    type_ = 0u;
    limittime_ = 0u;
    wintype_ = 0u;
    winvalue1_ = 0u;
    winvalue2_ = 0u;
    minlevel_ = 0u;
    maxlevel_ = 0u;
    if (has_midid2()) {
      if (midid2_ != &::google::protobuf::internal::kEmptyString) {
        midid2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NihilityMapLibCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_BackID;
        break;
      }

      // required string BackID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BackID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MidID;
        break;
      }

      // required string MidID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MidID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_midid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ForeID;
        break;
      }

      // required string ForeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foreid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_FrontID;
        break;
      }

      // required string FrontID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FrontID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_MidPos;
        break;
      }

      // required uint32 MidPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MidPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midpos_)));
          set_has_midpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MidWalkH;
        break;
      }

      // required uint32 MidWalkH = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MidWalkH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midwalkh_)));
          set_has_midwalkh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_CfgID;
        break;
      }

      // required string CfgID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CfgID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Type;
        break;
      }

      // required uint32 Type = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LimitTime;
        break;
      }

      // required uint32 LimitTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LimitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limittime_)));
          set_has_limittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_WinType;
        break;
      }

      // required uint32 WinType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wintype_)));
          set_has_wintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_WinValue1;
        break;
      }

      // required uint32 WinValue1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinValue1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winvalue1_)));
          set_has_winvalue1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_WinValue2;
        break;
      }

      // required uint32 WinValue2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinValue2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winvalue2_)));
          set_has_winvalue2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_MinLevel;
        break;
      }

      // required uint32 MinLevel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MinLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minlevel_)));
          set_has_minlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_MaxLevel;
        break;
      }

      // required uint32 MaxLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlevel_)));
          set_has_maxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_MidID2;
        break;
      }

      // required string MidID2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MidID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_midid2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NihilityMapLibCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string BackID = 2;
  if (has_backid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->backid(), output);
  }

  // required string MidID = 3;
  if (has_midid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->midid(), output);
  }

  // required string ForeID = 4;
  if (has_foreid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->foreid(), output);
  }

  // required string FrontID = 5;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->frontid(), output);
  }

  // required uint32 MidPos = 6;
  if (has_midpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->midpos(), output);
  }

  // required uint32 MidWalkH = 7;
  if (has_midwalkh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->midwalkh(), output);
  }

  // required string CfgID = 8;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->cfgid(), output);
  }

  // required uint32 Type = 9;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->type(), output);
  }

  // required uint32 LimitTime = 10;
  if (has_limittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->limittime(), output);
  }

  // required uint32 WinType = 11;
  if (has_wintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wintype(), output);
  }

  // required uint32 WinValue1 = 12;
  if (has_winvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->winvalue1(), output);
  }

  // required uint32 WinValue2 = 13;
  if (has_winvalue2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->winvalue2(), output);
  }

  // required uint32 MinLevel = 14;
  if (has_minlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->minlevel(), output);
  }

  // required uint32 MaxLevel = 15;
  if (has_maxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->maxlevel(), output);
  }

  // required string MidID2 = 16;
  if (has_midid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->midid2(), output);
  }

}

int NihilityMapLibCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string BackID = 2;
    if (has_backid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backid());
    }

    // required string MidID = 3;
    if (has_midid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->midid());
    }

    // required string ForeID = 4;
    if (has_foreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->foreid());
    }

    // required string FrontID = 5;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontid());
    }

    // required uint32 MidPos = 6;
    if (has_midpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->midpos());
    }

    // required uint32 MidWalkH = 7;
    if (has_midwalkh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->midwalkh());
    }

    // required string CfgID = 8;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfgid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 Type = 9;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 LimitTime = 10;
    if (has_limittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limittime());
    }

    // required uint32 WinType = 11;
    if (has_wintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wintype());
    }

    // required uint32 WinValue1 = 12;
    if (has_winvalue1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winvalue1());
    }

    // required uint32 WinValue2 = 13;
    if (has_winvalue2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winvalue2());
    }

    // required uint32 MinLevel = 14;
    if (has_minlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minlevel());
    }

    // required uint32 MaxLevel = 15;
    if (has_maxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlevel());
    }

    // required string MidID2 = 16;
    if (has_midid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->midid2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NihilityMapLibCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NihilityMapLibCfg*>(&from));
}

void NihilityMapLibCfg::MergeFrom(const NihilityMapLibCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_backid()) {
      set_backid(from.backid());
    }
    if (from.has_midid()) {
      set_midid(from.midid());
    }
    if (from.has_foreid()) {
      set_foreid(from.foreid());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_midpos()) {
      set_midpos(from.midpos());
    }
    if (from.has_midwalkh()) {
      set_midwalkh(from.midwalkh());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_limittime()) {
      set_limittime(from.limittime());
    }
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
    if (from.has_winvalue1()) {
      set_winvalue1(from.winvalue1());
    }
    if (from.has_winvalue2()) {
      set_winvalue2(from.winvalue2());
    }
    if (from.has_minlevel()) {
      set_minlevel(from.minlevel());
    }
    if (from.has_maxlevel()) {
      set_maxlevel(from.maxlevel());
    }
    if (from.has_midid2()) {
      set_midid2(from.midid2());
    }
  }
}

void NihilityMapLibCfg::CopyFrom(const NihilityMapLibCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NihilityMapLibCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  return true;
}

void NihilityMapLibCfg::Swap(NihilityMapLibCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(backid_, other->backid_);
    std::swap(midid_, other->midid_);
    std::swap(foreid_, other->foreid_);
    std::swap(frontid_, other->frontid_);
    std::swap(midpos_, other->midpos_);
    std::swap(midwalkh_, other->midwalkh_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(type_, other->type_);
    std::swap(limittime_, other->limittime_);
    std::swap(wintype_, other->wintype_);
    std::swap(winvalue1_, other->winvalue1_);
    std::swap(winvalue2_, other->winvalue2_);
    std::swap(minlevel_, other->minlevel_);
    std::swap(maxlevel_, other->maxlevel_);
    std::swap(midid2_, other->midid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NihilityMapLibCfg::GetTypeName() const {
  return "com.cfg.vo.NihilityMapLibCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int NihilityMapLibCfgSet::kNihilityMapLibCfgFieldNumber;
#endif  // !_MSC_VER

NihilityMapLibCfgSet::NihilityMapLibCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NihilityMapLibCfgSet::InitAsDefaultInstance() {
}

NihilityMapLibCfgSet::NihilityMapLibCfgSet(const NihilityMapLibCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NihilityMapLibCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NihilityMapLibCfgSet::~NihilityMapLibCfgSet() {
  SharedDtor();
}

void NihilityMapLibCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NihilityMapLibCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NihilityMapLibCfgSet& NihilityMapLibCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NihilityMapLibCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NihilityMapLibCfg_2eproto();
#endif
  return *default_instance_;
}

NihilityMapLibCfgSet* NihilityMapLibCfgSet::default_instance_ = NULL;

NihilityMapLibCfgSet* NihilityMapLibCfgSet::New() const {
  return new NihilityMapLibCfgSet;
}

void NihilityMapLibCfgSet::Clear() {
  nihilitymaplibcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NihilityMapLibCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.NihilityMapLibCfg nihilityMapLibCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nihilityMapLibCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nihilitymaplibcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nihilityMapLibCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NihilityMapLibCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.NihilityMapLibCfg nihilityMapLibCfg = 1;
  for (int i = 0; i < this->nihilitymaplibcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->nihilitymaplibcfg(i), output);
  }

}

int NihilityMapLibCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.NihilityMapLibCfg nihilityMapLibCfg = 1;
  total_size += 1 * this->nihilitymaplibcfg_size();
  for (int i = 0; i < this->nihilitymaplibcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nihilitymaplibcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NihilityMapLibCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NihilityMapLibCfgSet*>(&from));
}

void NihilityMapLibCfgSet::MergeFrom(const NihilityMapLibCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  nihilitymaplibcfg_.MergeFrom(from.nihilitymaplibcfg_);
}

void NihilityMapLibCfgSet::CopyFrom(const NihilityMapLibCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NihilityMapLibCfgSet::IsInitialized() const {

  for (int i = 0; i < nihilitymaplibcfg_size(); i++) {
    if (!this->nihilitymaplibcfg(i).IsInitialized()) return false;
  }
  return true;
}

void NihilityMapLibCfgSet::Swap(NihilityMapLibCfgSet* other) {
  if (other != this) {
    nihilitymaplibcfg_.Swap(&other->nihilitymaplibcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NihilityMapLibCfgSet::GetTypeName() const {
  return "com.cfg.vo.NihilityMapLibCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
