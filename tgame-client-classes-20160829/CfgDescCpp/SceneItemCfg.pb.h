// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneItemCfg.proto

#ifndef PROTOBUF_SceneItemCfg_2eproto__INCLUDED
#define PROTOBUF_SceneItemCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneItemCfg_2eproto();
void protobuf_AssignDesc_SceneItemCfg_2eproto();
void protobuf_ShutdownFile_SceneItemCfg_2eproto();

class SceneItemCfg;
class SceneItemCfgSet;

// ===================================================================

class SceneItemCfg : public ::google::protobuf::MessageLite {
 public:
  SceneItemCfg();
  virtual ~SceneItemCfg();

  SceneItemCfg(const SceneItemCfg& from);

  inline SceneItemCfg& operator=(const SceneItemCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const SceneItemCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SceneItemCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SceneItemCfg* other);

  // implements Message ----------------------------------------------

  SceneItemCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SceneItemCfg& from);
  void MergeFrom(const SceneItemCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ItemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // required uint32 ItemType = 2;
  inline bool has_itemtype() const;
  inline void clear_itemtype();
  static const int kItemTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 itemtype() const;
  inline void set_itemtype(::google::protobuf::uint32 value);

  // required string ItemRes = 3;
  inline bool has_itemres() const;
  inline void clear_itemres();
  static const int kItemResFieldNumber = 3;
  inline const ::std::string& itemres() const;
  inline void set_itemres(const ::std::string& value);
  inline void set_itemres(const char* value);
  inline void set_itemres(const char* value, size_t size);
  inline ::std::string* mutable_itemres();
  inline ::std::string* release_itemres();
  inline void set_allocated_itemres(::std::string* itemres);

  // required uint32 HP = 4;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHPFieldNumber = 4;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // required string HurtVoice = 5;
  inline bool has_hurtvoice() const;
  inline void clear_hurtvoice();
  static const int kHurtVoiceFieldNumber = 5;
  inline const ::std::string& hurtvoice() const;
  inline void set_hurtvoice(const ::std::string& value);
  inline void set_hurtvoice(const char* value);
  inline void set_hurtvoice(const char* value, size_t size);
  inline ::std::string* mutable_hurtvoice();
  inline ::std::string* release_hurtvoice();
  inline void set_allocated_hurtvoice(::std::string* hurtvoice);

  // required string DieVoice = 6;
  inline bool has_dievoice() const;
  inline void clear_dievoice();
  static const int kDieVoiceFieldNumber = 6;
  inline const ::std::string& dievoice() const;
  inline void set_dievoice(const ::std::string& value);
  inline void set_dievoice(const char* value);
  inline void set_dievoice(const char* value, size_t size);
  inline ::std::string* mutable_dievoice();
  inline ::std::string* release_dievoice();
  inline void set_allocated_dievoice(::std::string* dievoice);

  // required uint32 Time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.SceneItemCfg)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemtype();
  inline void clear_has_itemtype();
  inline void set_has_itemres();
  inline void clear_has_itemres();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hurtvoice();
  inline void clear_has_hurtvoice();
  inline void set_has_dievoice();
  inline void clear_has_dievoice();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemtype_;
  ::std::string* itemres_;
  ::std::string* hurtvoice_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 time_;
  ::std::string* dievoice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SceneItemCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SceneItemCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_SceneItemCfg_2eproto();
  friend void protobuf_ShutdownFile_SceneItemCfg_2eproto();

  void InitAsDefaultInstance();
  static SceneItemCfg* default_instance_;
};
// -------------------------------------------------------------------

class SceneItemCfgSet : public ::google::protobuf::MessageLite {
 public:
  SceneItemCfgSet();
  virtual ~SceneItemCfgSet();

  SceneItemCfgSet(const SceneItemCfgSet& from);

  inline SceneItemCfgSet& operator=(const SceneItemCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const SceneItemCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SceneItemCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SceneItemCfgSet* other);

  // implements Message ----------------------------------------------

  SceneItemCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SceneItemCfgSet& from);
  void MergeFrom(const SceneItemCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.SceneItemCfg sceneItemCfg = 1;
  inline int sceneitemcfg_size() const;
  inline void clear_sceneitemcfg();
  static const int kSceneItemCfgFieldNumber = 1;
  inline const ::com::cfg::vo::SceneItemCfg& sceneitemcfg(int index) const;
  inline ::com::cfg::vo::SceneItemCfg* mutable_sceneitemcfg(int index);
  inline ::com::cfg::vo::SceneItemCfg* add_sceneitemcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneItemCfg >&
      sceneitemcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneItemCfg >*
      mutable_sceneitemcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.SceneItemCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneItemCfg > sceneitemcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SceneItemCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SceneItemCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_SceneItemCfg_2eproto();
  friend void protobuf_ShutdownFile_SceneItemCfg_2eproto();

  void InitAsDefaultInstance();
  static SceneItemCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneItemCfg

// required uint32 ItemID = 1;
inline bool SceneItemCfg::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneItemCfg::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneItemCfg::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneItemCfg::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 SceneItemCfg::itemid() const {
  return itemid_;
}
inline void SceneItemCfg::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required uint32 ItemType = 2;
inline bool SceneItemCfg::has_itemtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneItemCfg::set_has_itemtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneItemCfg::clear_has_itemtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneItemCfg::clear_itemtype() {
  itemtype_ = 0u;
  clear_has_itemtype();
}
inline ::google::protobuf::uint32 SceneItemCfg::itemtype() const {
  return itemtype_;
}
inline void SceneItemCfg::set_itemtype(::google::protobuf::uint32 value) {
  set_has_itemtype();
  itemtype_ = value;
}

// required string ItemRes = 3;
inline bool SceneItemCfg::has_itemres() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneItemCfg::set_has_itemres() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneItemCfg::clear_has_itemres() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneItemCfg::clear_itemres() {
  if (itemres_ != &::google::protobuf::internal::kEmptyString) {
    itemres_->clear();
  }
  clear_has_itemres();
}
inline const ::std::string& SceneItemCfg::itemres() const {
  return *itemres_;
}
inline void SceneItemCfg::set_itemres(const ::std::string& value) {
  set_has_itemres();
  if (itemres_ == &::google::protobuf::internal::kEmptyString) {
    itemres_ = new ::std::string;
  }
  itemres_->assign(value);
}
inline void SceneItemCfg::set_itemres(const char* value) {
  set_has_itemres();
  if (itemres_ == &::google::protobuf::internal::kEmptyString) {
    itemres_ = new ::std::string;
  }
  itemres_->assign(value);
}
inline void SceneItemCfg::set_itemres(const char* value, size_t size) {
  set_has_itemres();
  if (itemres_ == &::google::protobuf::internal::kEmptyString) {
    itemres_ = new ::std::string;
  }
  itemres_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneItemCfg::mutable_itemres() {
  set_has_itemres();
  if (itemres_ == &::google::protobuf::internal::kEmptyString) {
    itemres_ = new ::std::string;
  }
  return itemres_;
}
inline ::std::string* SceneItemCfg::release_itemres() {
  clear_has_itemres();
  if (itemres_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = itemres_;
    itemres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneItemCfg::set_allocated_itemres(::std::string* itemres) {
  if (itemres_ != &::google::protobuf::internal::kEmptyString) {
    delete itemres_;
  }
  if (itemres) {
    set_has_itemres();
    itemres_ = itemres;
  } else {
    clear_has_itemres();
    itemres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 HP = 4;
inline bool SceneItemCfg::has_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneItemCfg::set_has_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneItemCfg::clear_has_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneItemCfg::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 SceneItemCfg::hp() const {
  return hp_;
}
inline void SceneItemCfg::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// required string HurtVoice = 5;
inline bool SceneItemCfg::has_hurtvoice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneItemCfg::set_has_hurtvoice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneItemCfg::clear_has_hurtvoice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneItemCfg::clear_hurtvoice() {
  if (hurtvoice_ != &::google::protobuf::internal::kEmptyString) {
    hurtvoice_->clear();
  }
  clear_has_hurtvoice();
}
inline const ::std::string& SceneItemCfg::hurtvoice() const {
  return *hurtvoice_;
}
inline void SceneItemCfg::set_hurtvoice(const ::std::string& value) {
  set_has_hurtvoice();
  if (hurtvoice_ == &::google::protobuf::internal::kEmptyString) {
    hurtvoice_ = new ::std::string;
  }
  hurtvoice_->assign(value);
}
inline void SceneItemCfg::set_hurtvoice(const char* value) {
  set_has_hurtvoice();
  if (hurtvoice_ == &::google::protobuf::internal::kEmptyString) {
    hurtvoice_ = new ::std::string;
  }
  hurtvoice_->assign(value);
}
inline void SceneItemCfg::set_hurtvoice(const char* value, size_t size) {
  set_has_hurtvoice();
  if (hurtvoice_ == &::google::protobuf::internal::kEmptyString) {
    hurtvoice_ = new ::std::string;
  }
  hurtvoice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneItemCfg::mutable_hurtvoice() {
  set_has_hurtvoice();
  if (hurtvoice_ == &::google::protobuf::internal::kEmptyString) {
    hurtvoice_ = new ::std::string;
  }
  return hurtvoice_;
}
inline ::std::string* SceneItemCfg::release_hurtvoice() {
  clear_has_hurtvoice();
  if (hurtvoice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hurtvoice_;
    hurtvoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneItemCfg::set_allocated_hurtvoice(::std::string* hurtvoice) {
  if (hurtvoice_ != &::google::protobuf::internal::kEmptyString) {
    delete hurtvoice_;
  }
  if (hurtvoice) {
    set_has_hurtvoice();
    hurtvoice_ = hurtvoice;
  } else {
    clear_has_hurtvoice();
    hurtvoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string DieVoice = 6;
inline bool SceneItemCfg::has_dievoice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SceneItemCfg::set_has_dievoice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SceneItemCfg::clear_has_dievoice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SceneItemCfg::clear_dievoice() {
  if (dievoice_ != &::google::protobuf::internal::kEmptyString) {
    dievoice_->clear();
  }
  clear_has_dievoice();
}
inline const ::std::string& SceneItemCfg::dievoice() const {
  return *dievoice_;
}
inline void SceneItemCfg::set_dievoice(const ::std::string& value) {
  set_has_dievoice();
  if (dievoice_ == &::google::protobuf::internal::kEmptyString) {
    dievoice_ = new ::std::string;
  }
  dievoice_->assign(value);
}
inline void SceneItemCfg::set_dievoice(const char* value) {
  set_has_dievoice();
  if (dievoice_ == &::google::protobuf::internal::kEmptyString) {
    dievoice_ = new ::std::string;
  }
  dievoice_->assign(value);
}
inline void SceneItemCfg::set_dievoice(const char* value, size_t size) {
  set_has_dievoice();
  if (dievoice_ == &::google::protobuf::internal::kEmptyString) {
    dievoice_ = new ::std::string;
  }
  dievoice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneItemCfg::mutable_dievoice() {
  set_has_dievoice();
  if (dievoice_ == &::google::protobuf::internal::kEmptyString) {
    dievoice_ = new ::std::string;
  }
  return dievoice_;
}
inline ::std::string* SceneItemCfg::release_dievoice() {
  clear_has_dievoice();
  if (dievoice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dievoice_;
    dievoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneItemCfg::set_allocated_dievoice(::std::string* dievoice) {
  if (dievoice_ != &::google::protobuf::internal::kEmptyString) {
    delete dievoice_;
  }
  if (dievoice) {
    set_has_dievoice();
    dievoice_ = dievoice;
  } else {
    clear_has_dievoice();
    dievoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 Time = 7;
inline bool SceneItemCfg::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SceneItemCfg::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SceneItemCfg::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SceneItemCfg::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 SceneItemCfg::time() const {
  return time_;
}
inline void SceneItemCfg::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// SceneItemCfgSet

// repeated .com.cfg.vo.SceneItemCfg sceneItemCfg = 1;
inline int SceneItemCfgSet::sceneitemcfg_size() const {
  return sceneitemcfg_.size();
}
inline void SceneItemCfgSet::clear_sceneitemcfg() {
  sceneitemcfg_.Clear();
}
inline const ::com::cfg::vo::SceneItemCfg& SceneItemCfgSet::sceneitemcfg(int index) const {
  return sceneitemcfg_.Get(index);
}
inline ::com::cfg::vo::SceneItemCfg* SceneItemCfgSet::mutable_sceneitemcfg(int index) {
  return sceneitemcfg_.Mutable(index);
}
inline ::com::cfg::vo::SceneItemCfg* SceneItemCfgSet::add_sceneitemcfg() {
  return sceneitemcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneItemCfg >&
SceneItemCfgSet::sceneitemcfg() const {
  return sceneitemcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneItemCfg >*
SceneItemCfgSet::mutable_sceneitemcfg() {
  return &sceneitemcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneItemCfg_2eproto__INCLUDED
