// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneEffCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneEffCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_SceneEffCfg_2eproto() {
  delete SceneEffCfg::default_instance_;
  delete SceneEffCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SceneEffCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SceneEffCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SceneEffCfg::default_instance_ = new SceneEffCfg();
  SceneEffCfgSet::default_instance_ = new SceneEffCfgSet();
  SceneEffCfg::default_instance_->InitAsDefaultInstance();
  SceneEffCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneEffCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SceneEffCfg_2eproto_once_);
void protobuf_AddDesc_SceneEffCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SceneEffCfg_2eproto_once_,
                 &protobuf_AddDesc_SceneEffCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneEffCfg_2eproto {
  StaticDescriptorInitializer_SceneEffCfg_2eproto() {
    protobuf_AddDesc_SceneEffCfg_2eproto();
  }
} static_descriptor_initializer_SceneEffCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SceneEffCfg::kIDFieldNumber;
const int SceneEffCfg::kTypeFieldNumber;
const int SceneEffCfg::kEffResFieldNumber;
const int SceneEffCfg::kEffSoundFieldNumber;
const int SceneEffCfg::kNextEffIDFieldNumber;
#endif  // !_MSC_VER

SceneEffCfg::SceneEffCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SceneEffCfg::InitAsDefaultInstance() {
}

SceneEffCfg::SceneEffCfg(const SceneEffCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SceneEffCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  effres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  effsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nexteffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneEffCfg::~SceneEffCfg() {
  SharedDtor();
}

void SceneEffCfg::SharedDtor() {
  if (effres_ != &::google::protobuf::internal::kEmptyString) {
    delete effres_;
  }
  if (effsound_ != &::google::protobuf::internal::kEmptyString) {
    delete effsound_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SceneEffCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SceneEffCfg& SceneEffCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SceneEffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SceneEffCfg_2eproto();
#endif
  return *default_instance_;
}

SceneEffCfg* SceneEffCfg::default_instance_ = NULL;

SceneEffCfg* SceneEffCfg::New() const {
  return new SceneEffCfg;
}

void SceneEffCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    if (has_effres()) {
      if (effres_ != &::google::protobuf::internal::kEmptyString) {
        effres_->clear();
      }
    }
    if (has_effsound()) {
      if (effsound_ != &::google::protobuf::internal::kEmptyString) {
        effsound_->clear();
      }
    }
    nexteffid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SceneEffCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_EffRes;
        break;
      }

      // required string EffRes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_EffSound;
        break;
      }

      // required string EffSound = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EffSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effsound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_NextEffID;
        break;
      }

      // required uint32 NextEffID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextEffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nexteffid_)));
          set_has_nexteffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneEffCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required string EffRes = 3;
  if (has_effres()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->effres(), output);
  }

  // required string EffSound = 4;
  if (has_effsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->effsound(), output);
  }

  // required uint32 NextEffID = 5;
  if (has_nexteffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->nexteffid(), output);
  }

}

int SceneEffCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string EffRes = 3;
    if (has_effres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effres());
    }

    // required string EffSound = 4;
    if (has_effsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effsound());
    }

    // required uint32 NextEffID = 5;
    if (has_nexteffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nexteffid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneEffCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SceneEffCfg*>(&from));
}

void SceneEffCfg::MergeFrom(const SceneEffCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_effres()) {
      set_effres(from.effres());
    }
    if (from.has_effsound()) {
      set_effsound(from.effsound());
    }
    if (from.has_nexteffid()) {
      set_nexteffid(from.nexteffid());
    }
  }
}

void SceneEffCfg::CopyFrom(const SceneEffCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEffCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void SceneEffCfg::Swap(SceneEffCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(effres_, other->effres_);
    std::swap(effsound_, other->effsound_);
    std::swap(nexteffid_, other->nexteffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SceneEffCfg::GetTypeName() const {
  return "com.cfg.vo.SceneEffCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int SceneEffCfgSet::kSceneEffCfgFieldNumber;
#endif  // !_MSC_VER

SceneEffCfgSet::SceneEffCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SceneEffCfgSet::InitAsDefaultInstance() {
}

SceneEffCfgSet::SceneEffCfgSet(const SceneEffCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SceneEffCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneEffCfgSet::~SceneEffCfgSet() {
  SharedDtor();
}

void SceneEffCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SceneEffCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SceneEffCfgSet& SceneEffCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SceneEffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SceneEffCfg_2eproto();
#endif
  return *default_instance_;
}

SceneEffCfgSet* SceneEffCfgSet::default_instance_ = NULL;

SceneEffCfgSet* SceneEffCfgSet::New() const {
  return new SceneEffCfgSet;
}

void SceneEffCfgSet::Clear() {
  sceneeffcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SceneEffCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.SceneEffCfg sceneEffCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sceneEffCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sceneeffcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sceneEffCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneEffCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.SceneEffCfg sceneEffCfg = 1;
  for (int i = 0; i < this->sceneeffcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sceneeffcfg(i), output);
  }

}

int SceneEffCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.SceneEffCfg sceneEffCfg = 1;
  total_size += 1 * this->sceneeffcfg_size();
  for (int i = 0; i < this->sceneeffcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sceneeffcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneEffCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SceneEffCfgSet*>(&from));
}

void SceneEffCfgSet::MergeFrom(const SceneEffCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  sceneeffcfg_.MergeFrom(from.sceneeffcfg_);
}

void SceneEffCfgSet::CopyFrom(const SceneEffCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneEffCfgSet::IsInitialized() const {

  for (int i = 0; i < sceneeffcfg_size(); i++) {
    if (!this->sceneeffcfg(i).IsInitialized()) return false;
  }
  return true;
}

void SceneEffCfgSet::Swap(SceneEffCfgSet* other) {
  if (other != this) {
    sceneeffcfg_.Swap(&other->sceneeffcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SceneEffCfgSet::GetTypeName() const {
  return "com.cfg.vo.SceneEffCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
