// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPAwardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VIPAwardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_VIPAwardCfg_2eproto() {
  delete VIPAwardCfg::default_instance_;
  delete VIPAwardCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_VIPAwardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_VIPAwardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  VIPAwardCfg::default_instance_ = new VIPAwardCfg();
  VIPAwardCfgSet::default_instance_ = new VIPAwardCfgSet();
  VIPAwardCfg::default_instance_->InitAsDefaultInstance();
  VIPAwardCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VIPAwardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_VIPAwardCfg_2eproto_once_);
void protobuf_AddDesc_VIPAwardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_VIPAwardCfg_2eproto_once_,
                 &protobuf_AddDesc_VIPAwardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VIPAwardCfg_2eproto {
  StaticDescriptorInitializer_VIPAwardCfg_2eproto() {
    protobuf_AddDesc_VIPAwardCfg_2eproto();
  }
} static_descriptor_initializer_VIPAwardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int VIPAwardCfg::kPlayerLvFieldNumber;
const int VIPAwardCfg::kVIPLvFieldNumber;
const int VIPAwardCfg::kCoinFieldNumber;
const int VIPAwardCfg::kGoldFieldNumber;
#endif  // !_MSC_VER

VIPAwardCfg::VIPAwardCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VIPAwardCfg::InitAsDefaultInstance() {
}

VIPAwardCfg::VIPAwardCfg(const VIPAwardCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VIPAwardCfg::SharedCtor() {
  _cached_size_ = 0;
  playerlv_ = 0u;
  viplv_ = 0u;
  coin_ = 0u;
  gold_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPAwardCfg::~VIPAwardCfg() {
  SharedDtor();
}

void VIPAwardCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPAwardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPAwardCfg& VIPAwardCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VIPAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VIPAwardCfg_2eproto();
#endif
  return *default_instance_;
}

VIPAwardCfg* VIPAwardCfg::default_instance_ = NULL;

VIPAwardCfg* VIPAwardCfg::New() const {
  return new VIPAwardCfg;
}

void VIPAwardCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerlv_ = 0u;
    viplv_ = 0u;
    coin_ = 0u;
    gold_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VIPAwardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlayerLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_VIPLv;
        break;
      }

      // required uint32 VIPLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Coin;
        break;
      }

      // required uint32 Coin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Coin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Gold;
        break;
      }

      // required uint32 Gold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPAwardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlayerLv = 1;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerlv(), output);
  }

  // required uint32 VIPLv = 2;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viplv(), output);
  }

  // required uint32 Coin = 3;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->coin(), output);
  }

  // required uint32 Gold = 4;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gold(), output);
  }

}

int VIPAwardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlayerLv = 1;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlv());
    }

    // required uint32 VIPLv = 2;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // required uint32 Coin = 3;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Gold = 4;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPAwardCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPAwardCfg*>(&from));
}

void VIPAwardCfg::MergeFrom(const VIPAwardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
  }
}

void VIPAwardCfg::CopyFrom(const VIPAwardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPAwardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void VIPAwardCfg::Swap(VIPAwardCfg* other) {
  if (other != this) {
    std::swap(playerlv_, other->playerlv_);
    std::swap(viplv_, other->viplv_);
    std::swap(coin_, other->coin_);
    std::swap(gold_, other->gold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPAwardCfg::GetTypeName() const {
  return "com.cfg.vo.VIPAwardCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int VIPAwardCfgSet::kVipawardcfgFieldNumber;
#endif  // !_MSC_VER

VIPAwardCfgSet::VIPAwardCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VIPAwardCfgSet::InitAsDefaultInstance() {
}

VIPAwardCfgSet::VIPAwardCfgSet(const VIPAwardCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VIPAwardCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPAwardCfgSet::~VIPAwardCfgSet() {
  SharedDtor();
}

void VIPAwardCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPAwardCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPAwardCfgSet& VIPAwardCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VIPAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VIPAwardCfg_2eproto();
#endif
  return *default_instance_;
}

VIPAwardCfgSet* VIPAwardCfgSet::default_instance_ = NULL;

VIPAwardCfgSet* VIPAwardCfgSet::New() const {
  return new VIPAwardCfgSet;
}

void VIPAwardCfgSet::Clear() {
  vipawardcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VIPAwardCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.VIPAwardCfg vipawardcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipawardcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipawardcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipawardcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPAwardCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.VIPAwardCfg vipawardcfg = 1;
  for (int i = 0; i < this->vipawardcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->vipawardcfg(i), output);
  }

}

int VIPAwardCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.VIPAwardCfg vipawardcfg = 1;
  total_size += 1 * this->vipawardcfg_size();
  for (int i = 0; i < this->vipawardcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipawardcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPAwardCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPAwardCfgSet*>(&from));
}

void VIPAwardCfgSet::MergeFrom(const VIPAwardCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipawardcfg_.MergeFrom(from.vipawardcfg_);
}

void VIPAwardCfgSet::CopyFrom(const VIPAwardCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPAwardCfgSet::IsInitialized() const {

  for (int i = 0; i < vipawardcfg_size(); i++) {
    if (!this->vipawardcfg(i).IsInitialized()) return false;
  }
  return true;
}

void VIPAwardCfgSet::Swap(VIPAwardCfgSet* other) {
  if (other != this) {
    vipawardcfg_.Swap(&other->vipawardcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPAwardCfgSet::GetTypeName() const {
  return "com.cfg.vo.VIPAwardCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
