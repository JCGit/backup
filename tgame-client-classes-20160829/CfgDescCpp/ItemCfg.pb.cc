// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ItemCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ItemCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_ItemCfg_2eproto() {
  delete ItemCfg::default_instance_;
  delete ItemCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ItemCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ItemCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ItemCfg::default_instance_ = new ItemCfg();
  ItemCfgSet::default_instance_ = new ItemCfgSet();
  ItemCfg::default_instance_->InitAsDefaultInstance();
  ItemCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ItemCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ItemCfg_2eproto_once_);
void protobuf_AddDesc_ItemCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ItemCfg_2eproto_once_,
                 &protobuf_AddDesc_ItemCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ItemCfg_2eproto {
  StaticDescriptorInitializer_ItemCfg_2eproto() {
    protobuf_AddDesc_ItemCfg_2eproto();
  }
} static_descriptor_initializer_ItemCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ItemCfg::kItemIDFieldNumber;
const int ItemCfg::kItemNameFieldNumber;
const int ItemCfg::kItemColorFieldNumber;
const int ItemCfg::kItemIconFieldNumber;
const int ItemCfg::kItemDescFieldNumber;
const int ItemCfg::kUsableFieldNumber;
const int ItemCfg::kItemMaxFieldNumber;
const int ItemCfg::kCoinPriceFieldNumber;
const int ItemCfg::kGoldPriceFieldNumber;
const int ItemCfg::kCanSellFieldNumber;
const int ItemCfg::kWarTypeFieldNumber;
const int ItemCfg::kWarIDFieldNumber;
const int ItemCfg::kPlayerLvFieldNumber;
const int ItemCfg::kItemTypeFieldNumber;
const int ItemCfg::kBuyPriceFieldNumber;
const int ItemCfg::kBuyPriceTypeFieldNumber;
const int ItemCfg::kDiscountThresholdFieldNumber;
const int ItemCfg::kDiscountFieldNumber;
#endif  // !_MSC_VER

ItemCfg::ItemCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemCfg::InitAsDefaultInstance() {
}

ItemCfg::ItemCfg(const ItemCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemCfg::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemcolor_ = 0u;
  itemicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  usable_ = 0u;
  itemmax_ = 0u;
  coinprice_ = 0u;
  goldprice_ = 0u;
  cansell_ = 0u;
  wartype_ = 0u;
  warid_ = 0u;
  playerlv_ = 0u;
  itemtype_ = 0u;
  buyprice_ = 0u;
  buypricetype_ = 0u;
  discountthreshold_ = 0u;
  discount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemCfg::~ItemCfg() {
  SharedDtor();
}

void ItemCfg::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (itemicon_ != &::google::protobuf::internal::kEmptyString) {
    delete itemicon_;
  }
  if (itemdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete itemdesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemCfg& ItemCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemCfg_2eproto();
#endif
  return *default_instance_;
}

ItemCfg* ItemCfg::default_instance_ = NULL;

ItemCfg* ItemCfg::New() const {
  return new ItemCfg;
}

void ItemCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    itemcolor_ = 0u;
    if (has_itemicon()) {
      if (itemicon_ != &::google::protobuf::internal::kEmptyString) {
        itemicon_->clear();
      }
    }
    if (has_itemdesc()) {
      if (itemdesc_ != &::google::protobuf::internal::kEmptyString) {
        itemdesc_->clear();
      }
    }
    usable_ = 0u;
    itemmax_ = 0u;
    coinprice_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    goldprice_ = 0u;
    cansell_ = 0u;
    wartype_ = 0u;
    warid_ = 0u;
    playerlv_ = 0u;
    itemtype_ = 0u;
    buyprice_ = 0u;
    buypricetype_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    discountthreshold_ = 0u;
    discount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ItemName;
        break;
      }

      // required string ItemName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemColor;
        break;
      }

      // required uint32 ItemColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcolor_)));
          set_has_itemcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ItemIcon;
        break;
      }

      // required string ItemIcon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ItemDesc;
        break;
      }

      // required string ItemDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Usable;
        break;
      }

      // required uint32 Usable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Usable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usable_)));
          set_has_usable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ItemMax;
        break;
      }

      // required uint32 ItemMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemmax_)));
          set_has_itemmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_CoinPrice;
        break;
      }

      // required uint32 CoinPrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CoinPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coinprice_)));
          set_has_coinprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_GoldPrice;
        break;
      }

      // required uint32 GoldPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldprice_)));
          set_has_goldprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_CanSell;
        break;
      }

      // required uint32 CanSell = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CanSell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cansell_)));
          set_has_cansell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_WarType;
        break;
      }

      // required uint32 WarType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wartype_)));
          set_has_wartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_WarID;
        break;
      }

      // required uint32 WarID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WarID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warid_)));
          set_has_warid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PlayerLv;
        break;
      }

      // required uint32 PlayerLv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PlayerLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerlv_)));
          set_has_playerlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ItemType;
        break;
      }

      // required uint32 ItemType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemtype_)));
          set_has_itemtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_BuyPrice;
        break;
      }

      // required uint32 BuyPrice = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyprice_)));
          set_has_buyprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_BuyPriceType;
        break;
      }

      // required uint32 BuyPriceType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyPriceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buypricetype_)));
          set_has_buypricetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_DiscountThreshold;
        break;
      }

      // required uint32 DiscountThreshold = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DiscountThreshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discountthreshold_)));
          set_has_discountthreshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_Discount;
        break;
      }

      // required uint32 Discount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required string ItemName = 2;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->itemname(), output);
  }

  // required uint32 ItemColor = 3;
  if (has_itemcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemcolor(), output);
  }

  // required string ItemIcon = 4;
  if (has_itemicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->itemicon(), output);
  }

  // required string ItemDesc = 5;
  if (has_itemdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->itemdesc(), output);
  }

  // required uint32 Usable = 6;
  if (has_usable()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->usable(), output);
  }

  // required uint32 ItemMax = 7;
  if (has_itemmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->itemmax(), output);
  }

  // required uint32 CoinPrice = 8;
  if (has_coinprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->coinprice(), output);
  }

  // required uint32 GoldPrice = 9;
  if (has_goldprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->goldprice(), output);
  }

  // required uint32 CanSell = 10;
  if (has_cansell()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cansell(), output);
  }

  // required uint32 WarType = 11;
  if (has_wartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wartype(), output);
  }

  // required uint32 WarID = 12;
  if (has_warid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->warid(), output);
  }

  // required uint32 PlayerLv = 14;
  if (has_playerlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->playerlv(), output);
  }

  // required uint32 ItemType = 15;
  if (has_itemtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->itemtype(), output);
  }

  // required uint32 BuyPrice = 16;
  if (has_buyprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->buyprice(), output);
  }

  // required uint32 BuyPriceType = 17;
  if (has_buypricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->buypricetype(), output);
  }

  // required uint32 DiscountThreshold = 18;
  if (has_discountthreshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->discountthreshold(), output);
  }

  // required uint32 Discount = 19;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->discount(), output);
  }

}

int ItemCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required string ItemName = 2;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // required uint32 ItemColor = 3;
    if (has_itemcolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcolor());
    }

    // required string ItemIcon = 4;
    if (has_itemicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemicon());
    }

    // required string ItemDesc = 5;
    if (has_itemdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemdesc());
    }

    // required uint32 Usable = 6;
    if (has_usable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usable());
    }

    // required uint32 ItemMax = 7;
    if (has_itemmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemmax());
    }

    // required uint32 CoinPrice = 8;
    if (has_coinprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coinprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 GoldPrice = 9;
    if (has_goldprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldprice());
    }

    // required uint32 CanSell = 10;
    if (has_cansell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cansell());
    }

    // required uint32 WarType = 11;
    if (has_wartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wartype());
    }

    // required uint32 WarID = 12;
    if (has_warid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warid());
    }

    // required uint32 PlayerLv = 14;
    if (has_playerlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerlv());
    }

    // required uint32 ItemType = 15;
    if (has_itemtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemtype());
    }

    // required uint32 BuyPrice = 16;
    if (has_buyprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyprice());
    }

    // required uint32 BuyPriceType = 17;
    if (has_buypricetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buypricetype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 DiscountThreshold = 18;
    if (has_discountthreshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discountthreshold());
    }

    // required uint32 Discount = 19;
    if (has_discount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->discount());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemCfg*>(&from));
}

void ItemCfg::MergeFrom(const ItemCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_itemcolor()) {
      set_itemcolor(from.itemcolor());
    }
    if (from.has_itemicon()) {
      set_itemicon(from.itemicon());
    }
    if (from.has_itemdesc()) {
      set_itemdesc(from.itemdesc());
    }
    if (from.has_usable()) {
      set_usable(from.usable());
    }
    if (from.has_itemmax()) {
      set_itemmax(from.itemmax());
    }
    if (from.has_coinprice()) {
      set_coinprice(from.coinprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_goldprice()) {
      set_goldprice(from.goldprice());
    }
    if (from.has_cansell()) {
      set_cansell(from.cansell());
    }
    if (from.has_wartype()) {
      set_wartype(from.wartype());
    }
    if (from.has_warid()) {
      set_warid(from.warid());
    }
    if (from.has_playerlv()) {
      set_playerlv(from.playerlv());
    }
    if (from.has_itemtype()) {
      set_itemtype(from.itemtype());
    }
    if (from.has_buyprice()) {
      set_buyprice(from.buyprice());
    }
    if (from.has_buypricetype()) {
      set_buypricetype(from.buypricetype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_discountthreshold()) {
      set_discountthreshold(from.discountthreshold());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
  }
}

void ItemCfg::CopyFrom(const ItemCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0003ffff) != 0x0003ffff) return false;

  return true;
}

void ItemCfg::Swap(ItemCfg* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemname_, other->itemname_);
    std::swap(itemcolor_, other->itemcolor_);
    std::swap(itemicon_, other->itemicon_);
    std::swap(itemdesc_, other->itemdesc_);
    std::swap(usable_, other->usable_);
    std::swap(itemmax_, other->itemmax_);
    std::swap(coinprice_, other->coinprice_);
    std::swap(goldprice_, other->goldprice_);
    std::swap(cansell_, other->cansell_);
    std::swap(wartype_, other->wartype_);
    std::swap(warid_, other->warid_);
    std::swap(playerlv_, other->playerlv_);
    std::swap(itemtype_, other->itemtype_);
    std::swap(buyprice_, other->buyprice_);
    std::swap(buypricetype_, other->buypricetype_);
    std::swap(discountthreshold_, other->discountthreshold_);
    std::swap(discount_, other->discount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemCfg::GetTypeName() const {
  return "com.cfg.vo.ItemCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int ItemCfgSet::kItemcfgFieldNumber;
#endif  // !_MSC_VER

ItemCfgSet::ItemCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ItemCfgSet::InitAsDefaultInstance() {
}

ItemCfgSet::ItemCfgSet(const ItemCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ItemCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemCfgSet::~ItemCfgSet() {
  SharedDtor();
}

void ItemCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ItemCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ItemCfgSet& ItemCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ItemCfg_2eproto();
#endif
  return *default_instance_;
}

ItemCfgSet* ItemCfgSet::default_instance_ = NULL;

ItemCfgSet* ItemCfgSet::New() const {
  return new ItemCfgSet;
}

void ItemCfgSet::Clear() {
  itemcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ItemCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.ItemCfg itemcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.ItemCfg itemcfg = 1;
  for (int i = 0; i < this->itemcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->itemcfg(i), output);
  }

}

int ItemCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.ItemCfg itemcfg = 1;
  total_size += 1 * this->itemcfg_size();
  for (int i = 0; i < this->itemcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ItemCfgSet*>(&from));
}

void ItemCfgSet::MergeFrom(const ItemCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemcfg_.MergeFrom(from.itemcfg_);
}

void ItemCfgSet::CopyFrom(const ItemCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemCfgSet::IsInitialized() const {

  for (int i = 0; i < itemcfg_size(); i++) {
    if (!this->itemcfg(i).IsInitialized()) return false;
  }
  return true;
}

void ItemCfgSet::Swap(ItemCfgSet* other) {
  if (other != this) {
    itemcfg_.Swap(&other->itemcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ItemCfgSet::GetTypeName() const {
  return "com.cfg.vo.ItemCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
