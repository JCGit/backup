// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: OSDCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "OSDCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_OSDCfg_2eproto() {
  delete OSDCfg::default_instance_;
  delete OSDCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_OSDCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_OSDCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  OSDCfg::default_instance_ = new OSDCfg();
  OSDCfgSet::default_instance_ = new OSDCfgSet();
  OSDCfg::default_instance_->InitAsDefaultInstance();
  OSDCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_OSDCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_OSDCfg_2eproto_once_);
void protobuf_AddDesc_OSDCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_OSDCfg_2eproto_once_,
                 &protobuf_AddDesc_OSDCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_OSDCfg_2eproto {
  StaticDescriptorInitializer_OSDCfg_2eproto() {
    protobuf_AddDesc_OSDCfg_2eproto();
  }
} static_descriptor_initializer_OSDCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int OSDCfg::kSceneIDFieldNumber;
const int OSDCfg::kCfgIDFieldNumber;
const int OSDCfg::kTaskIDFieldNumber;
const int OSDCfg::kNPCLstFieldNumber;
const int OSDCfg::kFrontIDFieldNumber;
const int OSDCfg::kForeIDFieldNumber;
const int OSDCfg::kBackIDFieldNumber;
const int OSDCfg::kWalkHeghtFieldNumber;
const int OSDCfg::kSceneEffectIDFieldNumber;
const int OSDCfg::kMidIDFieldNumber;
const int OSDCfg::kMidID2FieldNumber;
const int OSDCfg::kMidPosFieldNumber;
#endif  // !_MSC_VER

OSDCfg::OSDCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OSDCfg::InitAsDefaultInstance() {
}

OSDCfg::OSDCfg(const OSDCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OSDCfg::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskid_ = 0u;
  frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  walkheght_ = 0u;
  sceneeffectid_ = 0u;
  midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OSDCfg::~OSDCfg() {
  SharedDtor();
}

void OSDCfg::SharedDtor() {
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    delete cfgid_;
  }
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    delete frontid_;
  }
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    delete foreid_;
  }
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    delete backid_;
  }
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    delete midid_;
  }
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    delete midid2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OSDCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OSDCfg& OSDCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_OSDCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_OSDCfg_2eproto();
#endif
  return *default_instance_;
}

OSDCfg* OSDCfg::default_instance_ = NULL;

OSDCfg* OSDCfg::New() const {
  return new OSDCfg;
}

void OSDCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    if (has_cfgid()) {
      if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
        cfgid_->clear();
      }
    }
    taskid_ = 0u;
    if (has_frontid()) {
      if (frontid_ != &::google::protobuf::internal::kEmptyString) {
        frontid_->clear();
      }
    }
    if (has_foreid()) {
      if (foreid_ != &::google::protobuf::internal::kEmptyString) {
        foreid_->clear();
      }
    }
    if (has_backid()) {
      if (backid_ != &::google::protobuf::internal::kEmptyString) {
        backid_->clear();
      }
    }
    walkheght_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sceneeffectid_ = 0u;
    if (has_midid()) {
      if (midid_ != &::google::protobuf::internal::kEmptyString) {
        midid_->clear();
      }
    }
    if (has_midid2()) {
      if (midid2_ != &::google::protobuf::internal::kEmptyString) {
        midid2_->clear();
      }
    }
    midpos_ = 0u;
  }
  npclst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OSDCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CfgID;
        break;
      }

      // required string CfgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CfgID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TaskID;
        break;
      }

      // required uint32 TaskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NPCLst;
        break;
      }

      // repeated uint32 NPCLst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NPCLst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_npclst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npclst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_NPCLst;
        if (input->ExpectTag(50)) goto parse_FrontID;
        break;
      }

      // required string FrontID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FrontID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ForeID;
        break;
      }

      // required string ForeID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foreid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_BackID;
        break;
      }

      // required string BackID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BackID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WalkHeght;
        break;
      }

      // required uint32 WalkHeght = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WalkHeght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &walkheght_)));
          set_has_walkheght();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_SceneEffectID;
        break;
      }

      // required uint32 SceneEffectID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneEffectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneeffectid_)));
          set_has_sceneeffectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_MidID;
        break;
      }

      // required string MidID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MidID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_midid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_MidID2;
        break;
      }

      // required string MidID2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MidID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_midid2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_MidPos;
        break;
      }

      // required uint32 MidPos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MidPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midpos_)));
          set_has_midpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OSDCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // required string CfgID = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cfgid(), output);
  }

  // required uint32 TaskID = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  // repeated uint32 NPCLst = 4;
  for (int i = 0; i < this->npclst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->npclst(i), output);
  }

  // required string FrontID = 6;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->frontid(), output);
  }

  // required string ForeID = 7;
  if (has_foreid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->foreid(), output);
  }

  // required string BackID = 8;
  if (has_backid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->backid(), output);
  }

  // required uint32 WalkHeght = 9;
  if (has_walkheght()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->walkheght(), output);
  }

  // required uint32 SceneEffectID = 10;
  if (has_sceneeffectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sceneeffectid(), output);
  }

  // required string MidID = 11;
  if (has_midid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->midid(), output);
  }

  // required string MidID2 = 12;
  if (has_midid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->midid2(), output);
  }

  // required uint32 MidPos = 13;
  if (has_midpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->midpos(), output);
  }

}

int OSDCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required string CfgID = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfgid());
    }

    // required uint32 TaskID = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required string FrontID = 6;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontid());
    }

    // required string ForeID = 7;
    if (has_foreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->foreid());
    }

    // required string BackID = 8;
    if (has_backid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backid());
    }

    // required uint32 WalkHeght = 9;
    if (has_walkheght()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->walkheght());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 SceneEffectID = 10;
    if (has_sceneeffectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneeffectid());
    }

    // required string MidID = 11;
    if (has_midid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->midid());
    }

    // required string MidID2 = 12;
    if (has_midid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->midid2());
    }

    // required uint32 MidPos = 13;
    if (has_midpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->midpos());
    }

  }
  // repeated uint32 NPCLst = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->npclst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npclst(i));
    }
    total_size += 1 * this->npclst_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSDCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OSDCfg*>(&from));
}

void OSDCfg::MergeFrom(const OSDCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  npclst_.MergeFrom(from.npclst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_foreid()) {
      set_foreid(from.foreid());
    }
    if (from.has_backid()) {
      set_backid(from.backid());
    }
    if (from.has_walkheght()) {
      set_walkheght(from.walkheght());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sceneeffectid()) {
      set_sceneeffectid(from.sceneeffectid());
    }
    if (from.has_midid()) {
      set_midid(from.midid());
    }
    if (from.has_midid2()) {
      set_midid2(from.midid2());
    }
    if (from.has_midpos()) {
      set_midpos(from.midpos());
    }
  }
}

void OSDCfg::CopyFrom(const OSDCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSDCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000ff7) != 0x00000ff7) return false;

  return true;
}

void OSDCfg::Swap(OSDCfg* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(taskid_, other->taskid_);
    npclst_.Swap(&other->npclst_);
    std::swap(frontid_, other->frontid_);
    std::swap(foreid_, other->foreid_);
    std::swap(backid_, other->backid_);
    std::swap(walkheght_, other->walkheght_);
    std::swap(sceneeffectid_, other->sceneeffectid_);
    std::swap(midid_, other->midid_);
    std::swap(midid2_, other->midid2_);
    std::swap(midpos_, other->midpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OSDCfg::GetTypeName() const {
  return "com.cfg.vo.OSDCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int OSDCfgSet::kOsdcfgFieldNumber;
#endif  // !_MSC_VER

OSDCfgSet::OSDCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void OSDCfgSet::InitAsDefaultInstance() {
}

OSDCfgSet::OSDCfgSet(const OSDCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void OSDCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OSDCfgSet::~OSDCfgSet() {
  SharedDtor();
}

void OSDCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void OSDCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OSDCfgSet& OSDCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_OSDCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_OSDCfg_2eproto();
#endif
  return *default_instance_;
}

OSDCfgSet* OSDCfgSet::default_instance_ = NULL;

OSDCfgSet* OSDCfgSet::New() const {
  return new OSDCfgSet;
}

void OSDCfgSet::Clear() {
  osdcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool OSDCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.OSDCfg osdcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_osdcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_osdcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_osdcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OSDCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.OSDCfg osdcfg = 1;
  for (int i = 0; i < this->osdcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->osdcfg(i), output);
  }

}

int OSDCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.OSDCfg osdcfg = 1;
  total_size += 1 * this->osdcfg_size();
  for (int i = 0; i < this->osdcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->osdcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OSDCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OSDCfgSet*>(&from));
}

void OSDCfgSet::MergeFrom(const OSDCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  osdcfg_.MergeFrom(from.osdcfg_);
}

void OSDCfgSet::CopyFrom(const OSDCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OSDCfgSet::IsInitialized() const {

  for (int i = 0; i < osdcfg_size(); i++) {
    if (!this->osdcfg(i).IsInitialized()) return false;
  }
  return true;
}

void OSDCfgSet::Swap(OSDCfgSet* other) {
  if (other != this) {
    osdcfg_.Swap(&other->osdcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string OSDCfgSet::GetTypeName() const {
  return "com.cfg.vo.OSDCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
