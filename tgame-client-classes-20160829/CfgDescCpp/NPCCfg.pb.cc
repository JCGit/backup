// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NPCCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NPCCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_NPCCfg_2eproto() {
  delete NPCCfg::default_instance_;
  delete NPCCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_NPCCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_NPCCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NPCCfg::default_instance_ = new NPCCfg();
  NPCCfgSet::default_instance_ = new NPCCfgSet();
  NPCCfg::default_instance_->InitAsDefaultInstance();
  NPCCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NPCCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NPCCfg_2eproto_once_);
void protobuf_AddDesc_NPCCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NPCCfg_2eproto_once_,
                 &protobuf_AddDesc_NPCCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NPCCfg_2eproto {
  StaticDescriptorInitializer_NPCCfg_2eproto() {
    protobuf_AddDesc_NPCCfg_2eproto();
  }
} static_descriptor_initializer_NPCCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int NPCCfg::kNPCIDFieldNumber;
const int NPCCfg::kNPCNameFieldNumber;
const int NPCCfg::kNPCDescFieldNumber;
const int NPCCfg::kShowIDFieldNumber;
const int NPCCfg::kDefaultWordsFieldNumber;
const int NPCCfg::kBubbleIdFieldNumber;
#endif  // !_MSC_VER

NPCCfg::NPCCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NPCCfg::InitAsDefaultInstance() {
}

NPCCfg::NPCCfg(const NPCCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NPCCfg::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  npcname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  npcdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  showid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaultwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bubbleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCCfg::~NPCCfg() {
  SharedDtor();
}

void NPCCfg::SharedDtor() {
  if (npcname_ != &::google::protobuf::internal::kEmptyString) {
    delete npcname_;
  }
  if (npcdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete npcdesc_;
  }
  if (showid_ != &::google::protobuf::internal::kEmptyString) {
    delete showid_;
  }
  if (defaultwords_ != &::google::protobuf::internal::kEmptyString) {
    delete defaultwords_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NPCCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NPCCfg& NPCCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NPCCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NPCCfg_2eproto();
#endif
  return *default_instance_;
}

NPCCfg* NPCCfg::default_instance_ = NULL;

NPCCfg* NPCCfg::New() const {
  return new NPCCfg;
}

void NPCCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0u;
    if (has_npcname()) {
      if (npcname_ != &::google::protobuf::internal::kEmptyString) {
        npcname_->clear();
      }
    }
    if (has_npcdesc()) {
      if (npcdesc_ != &::google::protobuf::internal::kEmptyString) {
        npcdesc_->clear();
      }
    }
    if (has_showid()) {
      if (showid_ != &::google::protobuf::internal::kEmptyString) {
        showid_->clear();
      }
    }
    if (has_defaultwords()) {
      if (defaultwords_ != &::google::protobuf::internal::kEmptyString) {
        defaultwords_->clear();
      }
    }
    bubbleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NPCCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NPCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NPCName;
        break;
      }

      // required string NPCName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NPCName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npcname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_NPCDesc;
        break;
      }

      // required string NPCDesc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NPCDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_npcdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ShowID;
        break;
      }

      // required string ShowID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShowID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_showid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DefaultWords;
        break;
      }

      // required string DefaultWords = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DefaultWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultwords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bubbleId;
        break;
      }

      // required uint32 bubbleId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bubbleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bubbleid_)));
          set_has_bubbleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 NPCID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // required string NPCName = 2;
  if (has_npcname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->npcname(), output);
  }

  // required string NPCDesc = 3;
  if (has_npcdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->npcdesc(), output);
  }

  // required string ShowID = 4;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->showid(), output);
  }

  // required string DefaultWords = 5;
  if (has_defaultwords()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->defaultwords(), output);
  }

  // required uint32 bubbleId = 6;
  if (has_bubbleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bubbleid(), output);
  }

}

int NPCCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 NPCID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // required string NPCName = 2;
    if (has_npcname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npcname());
    }

    // required string NPCDesc = 3;
    if (has_npcdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->npcdesc());
    }

    // required string ShowID = 4;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->showid());
    }

    // required string DefaultWords = 5;
    if (has_defaultwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultwords());
    }

    // required uint32 bubbleId = 6;
    if (has_bubbleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bubbleid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NPCCfg*>(&from));
}

void NPCCfg::MergeFrom(const NPCCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_npcname()) {
      set_npcname(from.npcname());
    }
    if (from.has_npcdesc()) {
      set_npcdesc(from.npcdesc());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_defaultwords()) {
      set_defaultwords(from.defaultwords());
    }
    if (from.has_bubbleid()) {
      set_bubbleid(from.bubbleid());
    }
  }
}

void NPCCfg::CopyFrom(const NPCCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void NPCCfg::Swap(NPCCfg* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(npcname_, other->npcname_);
    std::swap(npcdesc_, other->npcdesc_);
    std::swap(showid_, other->showid_);
    std::swap(defaultwords_, other->defaultwords_);
    std::swap(bubbleid_, other->bubbleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NPCCfg::GetTypeName() const {
  return "com.cfg.vo.NPCCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int NPCCfgSet::kNpccfgFieldNumber;
#endif  // !_MSC_VER

NPCCfgSet::NPCCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NPCCfgSet::InitAsDefaultInstance() {
}

NPCCfgSet::NPCCfgSet(const NPCCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NPCCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NPCCfgSet::~NPCCfgSet() {
  SharedDtor();
}

void NPCCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NPCCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NPCCfgSet& NPCCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NPCCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NPCCfg_2eproto();
#endif
  return *default_instance_;
}

NPCCfgSet* NPCCfgSet::default_instance_ = NULL;

NPCCfgSet* NPCCfgSet::New() const {
  return new NPCCfgSet;
}

void NPCCfgSet::Clear() {
  npccfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NPCCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.NPCCfg npccfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_npccfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npccfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_npccfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NPCCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.NPCCfg npccfg = 1;
  for (int i = 0; i < this->npccfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->npccfg(i), output);
  }

}

int NPCCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.NPCCfg npccfg = 1;
  total_size += 1 * this->npccfg_size();
  for (int i = 0; i < this->npccfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npccfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NPCCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NPCCfgSet*>(&from));
}

void NPCCfgSet::MergeFrom(const NPCCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  npccfg_.MergeFrom(from.npccfg_);
}

void NPCCfgSet::CopyFrom(const NPCCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NPCCfgSet::IsInitialized() const {

  for (int i = 0; i < npccfg_size(); i++) {
    if (!this->npccfg(i).IsInitialized()) return false;
  }
  return true;
}

void NPCCfgSet::Swap(NPCCfgSet* other) {
  if (other != this) {
    npccfg_.Swap(&other->npccfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NPCCfgSet::GetTypeName() const {
  return "com.cfg.vo.NPCCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
