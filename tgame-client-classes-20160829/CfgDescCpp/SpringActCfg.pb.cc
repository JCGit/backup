// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SpringActCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SpringActCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_SpringActCfg_2eproto() {
  delete SpringActCfg::default_instance_;
  delete SpringActCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SpringActCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SpringActCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SpringActCfg::default_instance_ = new SpringActCfg();
  SpringActCfgSet::default_instance_ = new SpringActCfgSet();
  SpringActCfg::default_instance_->InitAsDefaultInstance();
  SpringActCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SpringActCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SpringActCfg_2eproto_once_);
void protobuf_AddDesc_SpringActCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SpringActCfg_2eproto_once_,
                 &protobuf_AddDesc_SpringActCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SpringActCfg_2eproto {
  StaticDescriptorInitializer_SpringActCfg_2eproto() {
    protobuf_AddDesc_SpringActCfg_2eproto();
  }
} static_descriptor_initializer_SpringActCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SpringActCfg::kDayFieldNumber;
const int SpringActCfg::kPkgIDFieldNumber;
const int SpringActCfg::kStartTimeFieldNumber;
const int SpringActCfg::kStopTimeFieldNumber;
#endif  // !_MSC_VER

SpringActCfg::SpringActCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpringActCfg::InitAsDefaultInstance() {
}

SpringActCfg::SpringActCfg(const SpringActCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpringActCfg::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  pkgid_ = 0u;
  starttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stoptime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpringActCfg::~SpringActCfg() {
  SharedDtor();
}

void SpringActCfg::SharedDtor() {
  if (starttime_ != &::google::protobuf::internal::kEmptyString) {
    delete starttime_;
  }
  if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
    delete stoptime_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpringActCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpringActCfg& SpringActCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpringActCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpringActCfg_2eproto();
#endif
  return *default_instance_;
}

SpringActCfg* SpringActCfg::default_instance_ = NULL;

SpringActCfg* SpringActCfg::New() const {
  return new SpringActCfg;
}

void SpringActCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    pkgid_ = 0u;
    if (has_starttime()) {
      if (starttime_ != &::google::protobuf::internal::kEmptyString) {
        starttime_->clear();
      }
    }
    if (has_stoptime()) {
      if (stoptime_ != &::google::protobuf::internal::kEmptyString) {
        stoptime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpringActCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PkgID;
        break;
      }

      // required uint32 PkgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PkgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pkgid_)));
          set_has_pkgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StartTime;
        break;
      }

      // required string StartTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StartTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_starttime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_StopTime;
        break;
      }

      // required string StopTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StopTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stoptime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpringActCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // required uint32 PkgID = 2;
  if (has_pkgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pkgid(), output);
  }

  // required string StartTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->starttime(), output);
  }

  // required string StopTime = 4;
  if (has_stoptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->stoptime(), output);
  }

}

int SpringActCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // required uint32 PkgID = 2;
    if (has_pkgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pkgid());
    }

    // required string StartTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->starttime());
    }

    // required string StopTime = 4;
    if (has_stoptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stoptime());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpringActCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpringActCfg*>(&from));
}

void SpringActCfg::MergeFrom(const SpringActCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_pkgid()) {
      set_pkgid(from.pkgid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_stoptime()) {
      set_stoptime(from.stoptime());
    }
  }
}

void SpringActCfg::CopyFrom(const SpringActCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpringActCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SpringActCfg::Swap(SpringActCfg* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(pkgid_, other->pkgid_);
    std::swap(starttime_, other->starttime_);
    std::swap(stoptime_, other->stoptime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpringActCfg::GetTypeName() const {
  return "com.cfg.vo.SpringActCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int SpringActCfgSet::kSpringactcfgFieldNumber;
#endif  // !_MSC_VER

SpringActCfgSet::SpringActCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpringActCfgSet::InitAsDefaultInstance() {
}

SpringActCfgSet::SpringActCfgSet(const SpringActCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpringActCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpringActCfgSet::~SpringActCfgSet() {
  SharedDtor();
}

void SpringActCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SpringActCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpringActCfgSet& SpringActCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SpringActCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SpringActCfg_2eproto();
#endif
  return *default_instance_;
}

SpringActCfgSet* SpringActCfgSet::default_instance_ = NULL;

SpringActCfgSet* SpringActCfgSet::New() const {
  return new SpringActCfgSet;
}

void SpringActCfgSet::Clear() {
  springactcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpringActCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.SpringActCfg springactcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_springactcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_springactcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_springactcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpringActCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.SpringActCfg springactcfg = 1;
  for (int i = 0; i < this->springactcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->springactcfg(i), output);
  }

}

int SpringActCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.SpringActCfg springactcfg = 1;
  total_size += 1 * this->springactcfg_size();
  for (int i = 0; i < this->springactcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->springactcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpringActCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpringActCfgSet*>(&from));
}

void SpringActCfgSet::MergeFrom(const SpringActCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  springactcfg_.MergeFrom(from.springactcfg_);
}

void SpringActCfgSet::CopyFrom(const SpringActCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpringActCfgSet::IsInitialized() const {

  for (int i = 0; i < springactcfg_size(); i++) {
    if (!this->springactcfg(i).IsInitialized()) return false;
  }
  return true;
}

void SpringActCfgSet::Swap(SpringActCfgSet* other) {
  if (other != this) {
    springactcfg_.Swap(&other->springactcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpringActCfgSet::GetTypeName() const {
  return "com.cfg.vo.SpringActCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
