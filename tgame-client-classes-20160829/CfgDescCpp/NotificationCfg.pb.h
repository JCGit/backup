// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NotificationCfg.proto

#ifndef PROTOBUF_NotificationCfg_2eproto__INCLUDED
#define PROTOBUF_NotificationCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NotificationCfg_2eproto();
void protobuf_AssignDesc_NotificationCfg_2eproto();
void protobuf_ShutdownFile_NotificationCfg_2eproto();

class Notification;
class NotificationCfg;
class NotificationCfgSet;

// ===================================================================

class Notification : public ::google::protobuf::MessageLite {
 public:
  Notification();
  virtual ~Notification();

  Notification(const Notification& from);

  inline Notification& operator=(const Notification& from) {
    CopyFrom(from);
    return *this;
  }

  static const Notification& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Notification* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Notification* other);

  // implements Message ----------------------------------------------

  Notification* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Notification& from);
  void MergeFrom(const Notification& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EntryID = 1;
  inline bool has_entryid() const;
  inline void clear_entryid();
  static const int kEntryIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entryid() const;
  inline void set_entryid(::google::protobuf::uint32 value);

  // required uint32 Tag = 2;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 2;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // required uint32 RemindWay = 3;
  inline bool has_remindway() const;
  inline void clear_remindway();
  static const int kRemindWayFieldNumber = 3;
  inline ::google::protobuf::uint32 remindway() const;
  inline void set_remindway(::google::protobuf::uint32 value);

  // optional uint32 BadgeNum = 4;
  inline bool has_badgenum() const;
  inline void clear_badgenum();
  static const int kBadgeNumFieldNumber = 4;
  inline ::google::protobuf::uint32 badgenum() const;
  inline void set_badgenum(::google::protobuf::uint32 value);

  // optional string Words = 5;
  inline bool has_words() const;
  inline void clear_words();
  static const int kWordsFieldNumber = 5;
  inline const ::std::string& words() const;
  inline void set_words(const ::std::string& value);
  inline void set_words(const char* value);
  inline void set_words(const char* value, size_t size);
  inline ::std::string* mutable_words();
  inline ::std::string* release_words();
  inline void set_allocated_words(::std::string* words);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.Notification)
 private:
  inline void set_has_entryid();
  inline void clear_has_entryid();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_remindway();
  inline void clear_has_remindway();
  inline void set_has_badgenum();
  inline void clear_has_badgenum();
  inline void set_has_words();
  inline void clear_has_words();

  ::google::protobuf::uint32 entryid_;
  ::google::protobuf::uint32 tag_;
  ::google::protobuf::uint32 remindway_;
  ::google::protobuf::uint32 badgenum_;
  ::std::string* words_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NotificationCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NotificationCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NotificationCfg_2eproto();
  friend void protobuf_ShutdownFile_NotificationCfg_2eproto();

  void InitAsDefaultInstance();
  static Notification* default_instance_;
};
// -------------------------------------------------------------------

class NotificationCfg : public ::google::protobuf::MessageLite {
 public:
  NotificationCfg();
  virtual ~NotificationCfg();

  NotificationCfg(const NotificationCfg& from);

  inline NotificationCfg& operator=(const NotificationCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotificationCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotificationCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotificationCfg* other);

  // implements Message ----------------------------------------------

  NotificationCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotificationCfg& from);
  void MergeFrom(const NotificationCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 EntryID = 1;
  inline bool has_entryid() const;
  inline void clear_entryid();
  static const int kEntryIDFieldNumber = 1;
  inline ::google::protobuf::uint32 entryid() const;
  inline void set_entryid(::google::protobuf::uint32 value);

  // required uint32 Tag = 2;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 2;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // required uint32 Locked = 3;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 3;
  inline ::google::protobuf::uint32 locked() const;
  inline void set_locked(::google::protobuf::uint32 value);

  // required uint32 ModuleID = 4;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIDFieldNumber = 4;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);

  // required uint32 RemindWay = 5;
  inline bool has_remindway() const;
  inline void clear_remindway();
  static const int kRemindWayFieldNumber = 5;
  inline ::google::protobuf::uint32 remindway() const;
  inline void set_remindway(::google::protobuf::uint32 value);

  // required string Words = 6;
  inline bool has_words() const;
  inline void clear_words();
  static const int kWordsFieldNumber = 6;
  inline const ::std::string& words() const;
  inline void set_words(const ::std::string& value);
  inline void set_words(const char* value);
  inline void set_words(const char* value, size_t size);
  inline ::std::string* mutable_words();
  inline ::std::string* release_words();
  inline void set_allocated_words(::std::string* words);

  // repeated uint32 WordsParams = 7;
  inline int wordsparams_size() const;
  inline void clear_wordsparams();
  static const int kWordsParamsFieldNumber = 7;
  inline ::google::protobuf::uint32 wordsparams(int index) const;
  inline void set_wordsparams(int index, ::google::protobuf::uint32 value);
  inline void add_wordsparams(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      wordsparams() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_wordsparams();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.NotificationCfg)
 private:
  inline void set_has_entryid();
  inline void clear_has_entryid();
  inline void set_has_tag();
  inline void clear_has_tag();
  inline void set_has_locked();
  inline void clear_has_locked();
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_remindway();
  inline void clear_has_remindway();
  inline void set_has_words();
  inline void clear_has_words();

  ::google::protobuf::uint32 entryid_;
  ::google::protobuf::uint32 tag_;
  ::google::protobuf::uint32 locked_;
  ::google::protobuf::uint32 moduleid_;
  ::std::string* words_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > wordsparams_;
  ::google::protobuf::uint32 remindway_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NotificationCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NotificationCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NotificationCfg_2eproto();
  friend void protobuf_ShutdownFile_NotificationCfg_2eproto();

  void InitAsDefaultInstance();
  static NotificationCfg* default_instance_;
};
// -------------------------------------------------------------------

class NotificationCfgSet : public ::google::protobuf::MessageLite {
 public:
  NotificationCfgSet();
  virtual ~NotificationCfgSet();

  NotificationCfgSet(const NotificationCfgSet& from);

  inline NotificationCfgSet& operator=(const NotificationCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const NotificationCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NotificationCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NotificationCfgSet* other);

  // implements Message ----------------------------------------------

  NotificationCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NotificationCfgSet& from);
  void MergeFrom(const NotificationCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.NotificationCfg notificationcfg = 1;
  inline int notificationcfg_size() const;
  inline void clear_notificationcfg();
  static const int kNotificationcfgFieldNumber = 1;
  inline const ::com::cfg::vo::NotificationCfg& notificationcfg(int index) const;
  inline ::com::cfg::vo::NotificationCfg* mutable_notificationcfg(int index);
  inline ::com::cfg::vo::NotificationCfg* add_notificationcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NotificationCfg >&
      notificationcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NotificationCfg >*
      mutable_notificationcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.NotificationCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NotificationCfg > notificationcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NotificationCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NotificationCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NotificationCfg_2eproto();
  friend void protobuf_ShutdownFile_NotificationCfg_2eproto();

  void InitAsDefaultInstance();
  static NotificationCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// Notification

// required uint32 EntryID = 1;
inline bool Notification::has_entryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Notification::set_has_entryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Notification::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Notification::clear_entryid() {
  entryid_ = 0u;
  clear_has_entryid();
}
inline ::google::protobuf::uint32 Notification::entryid() const {
  return entryid_;
}
inline void Notification::set_entryid(::google::protobuf::uint32 value) {
  set_has_entryid();
  entryid_ = value;
}

// required uint32 Tag = 2;
inline bool Notification::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Notification::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Notification::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Notification::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 Notification::tag() const {
  return tag_;
}
inline void Notification::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// required uint32 RemindWay = 3;
inline bool Notification::has_remindway() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Notification::set_has_remindway() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Notification::clear_has_remindway() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Notification::clear_remindway() {
  remindway_ = 0u;
  clear_has_remindway();
}
inline ::google::protobuf::uint32 Notification::remindway() const {
  return remindway_;
}
inline void Notification::set_remindway(::google::protobuf::uint32 value) {
  set_has_remindway();
  remindway_ = value;
}

// optional uint32 BadgeNum = 4;
inline bool Notification::has_badgenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Notification::set_has_badgenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Notification::clear_has_badgenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Notification::clear_badgenum() {
  badgenum_ = 0u;
  clear_has_badgenum();
}
inline ::google::protobuf::uint32 Notification::badgenum() const {
  return badgenum_;
}
inline void Notification::set_badgenum(::google::protobuf::uint32 value) {
  set_has_badgenum();
  badgenum_ = value;
}

// optional string Words = 5;
inline bool Notification::has_words() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Notification::set_has_words() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Notification::clear_has_words() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Notification::clear_words() {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    words_->clear();
  }
  clear_has_words();
}
inline const ::std::string& Notification::words() const {
  return *words_;
}
inline void Notification::set_words(const ::std::string& value) {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  words_->assign(value);
}
inline void Notification::set_words(const char* value) {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  words_->assign(value);
}
inline void Notification::set_words(const char* value, size_t size) {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  words_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Notification::mutable_words() {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  return words_;
}
inline ::std::string* Notification::release_words() {
  clear_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = words_;
    words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Notification::set_allocated_words(::std::string* words) {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    delete words_;
  }
  if (words) {
    set_has_words();
    words_ = words;
  } else {
    clear_has_words();
    words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NotificationCfg

// required uint32 EntryID = 1;
inline bool NotificationCfg::has_entryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotificationCfg::set_has_entryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotificationCfg::clear_has_entryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotificationCfg::clear_entryid() {
  entryid_ = 0u;
  clear_has_entryid();
}
inline ::google::protobuf::uint32 NotificationCfg::entryid() const {
  return entryid_;
}
inline void NotificationCfg::set_entryid(::google::protobuf::uint32 value) {
  set_has_entryid();
  entryid_ = value;
}

// required uint32 Tag = 2;
inline bool NotificationCfg::has_tag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotificationCfg::set_has_tag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotificationCfg::clear_has_tag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotificationCfg::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 NotificationCfg::tag() const {
  return tag_;
}
inline void NotificationCfg::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// required uint32 Locked = 3;
inline bool NotificationCfg::has_locked() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotificationCfg::set_has_locked() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotificationCfg::clear_has_locked() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotificationCfg::clear_locked() {
  locked_ = 0u;
  clear_has_locked();
}
inline ::google::protobuf::uint32 NotificationCfg::locked() const {
  return locked_;
}
inline void NotificationCfg::set_locked(::google::protobuf::uint32 value) {
  set_has_locked();
  locked_ = value;
}

// required uint32 ModuleID = 4;
inline bool NotificationCfg::has_moduleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotificationCfg::set_has_moduleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotificationCfg::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotificationCfg::clear_moduleid() {
  moduleid_ = 0u;
  clear_has_moduleid();
}
inline ::google::protobuf::uint32 NotificationCfg::moduleid() const {
  return moduleid_;
}
inline void NotificationCfg::set_moduleid(::google::protobuf::uint32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// required uint32 RemindWay = 5;
inline bool NotificationCfg::has_remindway() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotificationCfg::set_has_remindway() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotificationCfg::clear_has_remindway() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotificationCfg::clear_remindway() {
  remindway_ = 0u;
  clear_has_remindway();
}
inline ::google::protobuf::uint32 NotificationCfg::remindway() const {
  return remindway_;
}
inline void NotificationCfg::set_remindway(::google::protobuf::uint32 value) {
  set_has_remindway();
  remindway_ = value;
}

// required string Words = 6;
inline bool NotificationCfg::has_words() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotificationCfg::set_has_words() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotificationCfg::clear_has_words() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotificationCfg::clear_words() {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    words_->clear();
  }
  clear_has_words();
}
inline const ::std::string& NotificationCfg::words() const {
  return *words_;
}
inline void NotificationCfg::set_words(const ::std::string& value) {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  words_->assign(value);
}
inline void NotificationCfg::set_words(const char* value) {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  words_->assign(value);
}
inline void NotificationCfg::set_words(const char* value, size_t size) {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  words_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotificationCfg::mutable_words() {
  set_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    words_ = new ::std::string;
  }
  return words_;
}
inline ::std::string* NotificationCfg::release_words() {
  clear_has_words();
  if (words_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = words_;
    words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotificationCfg::set_allocated_words(::std::string* words) {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    delete words_;
  }
  if (words) {
    set_has_words();
    words_ = words;
  } else {
    clear_has_words();
    words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated uint32 WordsParams = 7;
inline int NotificationCfg::wordsparams_size() const {
  return wordsparams_.size();
}
inline void NotificationCfg::clear_wordsparams() {
  wordsparams_.Clear();
}
inline ::google::protobuf::uint32 NotificationCfg::wordsparams(int index) const {
  return wordsparams_.Get(index);
}
inline void NotificationCfg::set_wordsparams(int index, ::google::protobuf::uint32 value) {
  wordsparams_.Set(index, value);
}
inline void NotificationCfg::add_wordsparams(::google::protobuf::uint32 value) {
  wordsparams_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NotificationCfg::wordsparams() const {
  return wordsparams_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NotificationCfg::mutable_wordsparams() {
  return &wordsparams_;
}

// -------------------------------------------------------------------

// NotificationCfgSet

// repeated .com.cfg.vo.NotificationCfg notificationcfg = 1;
inline int NotificationCfgSet::notificationcfg_size() const {
  return notificationcfg_.size();
}
inline void NotificationCfgSet::clear_notificationcfg() {
  notificationcfg_.Clear();
}
inline const ::com::cfg::vo::NotificationCfg& NotificationCfgSet::notificationcfg(int index) const {
  return notificationcfg_.Get(index);
}
inline ::com::cfg::vo::NotificationCfg* NotificationCfgSet::mutable_notificationcfg(int index) {
  return notificationcfg_.Mutable(index);
}
inline ::com::cfg::vo::NotificationCfg* NotificationCfgSet::add_notificationcfg() {
  return notificationcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NotificationCfg >&
NotificationCfgSet::notificationcfg() const {
  return notificationcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NotificationCfg >*
NotificationCfgSet::mutable_notificationcfg() {
  return &notificationcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NotificationCfg_2eproto__INCLUDED
