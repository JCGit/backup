// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FloorBuffCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FloorBuffCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_FloorBuffCfg_2eproto() {
  delete FloorBuffCfg::default_instance_;
  delete FloorBuffCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_FloorBuffCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_FloorBuffCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FloorBuffCfg::default_instance_ = new FloorBuffCfg();
  FloorBuffCfgSet::default_instance_ = new FloorBuffCfgSet();
  FloorBuffCfg::default_instance_->InitAsDefaultInstance();
  FloorBuffCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FloorBuffCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FloorBuffCfg_2eproto_once_);
void protobuf_AddDesc_FloorBuffCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FloorBuffCfg_2eproto_once_,
                 &protobuf_AddDesc_FloorBuffCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FloorBuffCfg_2eproto {
  StaticDescriptorInitializer_FloorBuffCfg_2eproto() {
    protobuf_AddDesc_FloorBuffCfg_2eproto();
  }
} static_descriptor_initializer_FloorBuffCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FloorBuffCfg::kIDFieldNumber;
const int FloorBuffCfg::kNameFieldNumber;
const int FloorBuffCfg::kDescFieldNumber;
const int FloorBuffCfg::kResFieldNumber;
const int FloorBuffCfg::kTimeFieldNumber;
const int FloorBuffCfg::kBuffIDFieldNumber;
const int FloorBuffCfg::kTargetTypeFieldNumber;
const int FloorBuffCfg::kBuffTypeFieldNumber;
const int FloorBuffCfg::kModelTypeFieldNumber;
#endif  // !_MSC_VER

FloorBuffCfg::FloorBuffCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FloorBuffCfg::InitAsDefaultInstance() {
}

FloorBuffCfg::FloorBuffCfg(const FloorBuffCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FloorBuffCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0u;
  buffid_ = 0u;
  targettype_ = 0u;
  bufftype_ = 0u;
  modeltype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloorBuffCfg::~FloorBuffCfg() {
  SharedDtor();
}

void FloorBuffCfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FloorBuffCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FloorBuffCfg& FloorBuffCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FloorBuffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FloorBuffCfg_2eproto();
#endif
  return *default_instance_;
}

FloorBuffCfg* FloorBuffCfg::default_instance_ = NULL;

FloorBuffCfg* FloorBuffCfg::New() const {
  return new FloorBuffCfg;
}

void FloorBuffCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
    time_ = 0u;
    buffid_ = 0u;
    targettype_ = 0u;
    bufftype_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modeltype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FloorBuffCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // required string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Res;
        break;
      }

      // required string Res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Time;
        break;
      }

      // required uint32 Time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BuffID;
        break;
      }

      // required uint32 BuffID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TargetType;
        break;
      }

      // required uint32 TargetType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BuffType;
        break;
      }

      // required uint32 BuffType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ModelType;
        break;
      }

      // required uint32 ModelType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modeltype_)));
          set_has_modeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloorBuffCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required string Res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->res(), output);
  }

  // required uint32 Time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // required uint32 BuffID = 6;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buffid(), output);
  }

  // required uint32 TargetType = 7;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->targettype(), output);
  }

  // required uint32 BuffType = 8;
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bufftype(), output);
  }

  // required uint32 ModelType = 9;
  if (has_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->modeltype(), output);
  }

}

int FloorBuffCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string Res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // required uint32 Time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 BuffID = 6;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

    // required uint32 TargetType = 7;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // required uint32 BuffType = 8;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufftype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ModelType = 9;
    if (has_modeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modeltype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloorBuffCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FloorBuffCfg*>(&from));
}

void FloorBuffCfg::MergeFrom(const FloorBuffCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modeltype()) {
      set_modeltype(from.modeltype());
    }
  }
}

void FloorBuffCfg::CopyFrom(const FloorBuffCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloorBuffCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void FloorBuffCfg::Swap(FloorBuffCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(res_, other->res_);
    std::swap(time_, other->time_);
    std::swap(buffid_, other->buffid_);
    std::swap(targettype_, other->targettype_);
    std::swap(bufftype_, other->bufftype_);
    std::swap(modeltype_, other->modeltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FloorBuffCfg::GetTypeName() const {
  return "com.cfg.vo.FloorBuffCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int FloorBuffCfgSet::kFloorBuffCfgFieldNumber;
#endif  // !_MSC_VER

FloorBuffCfgSet::FloorBuffCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FloorBuffCfgSet::InitAsDefaultInstance() {
}

FloorBuffCfgSet::FloorBuffCfgSet(const FloorBuffCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FloorBuffCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FloorBuffCfgSet::~FloorBuffCfgSet() {
  SharedDtor();
}

void FloorBuffCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FloorBuffCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FloorBuffCfgSet& FloorBuffCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FloorBuffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FloorBuffCfg_2eproto();
#endif
  return *default_instance_;
}

FloorBuffCfgSet* FloorBuffCfgSet::default_instance_ = NULL;

FloorBuffCfgSet* FloorBuffCfgSet::New() const {
  return new FloorBuffCfgSet;
}

void FloorBuffCfgSet::Clear() {
  floorbuffcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FloorBuffCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.FloorBuffCfg floorBuffCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_floorBuffCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_floorbuffcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_floorBuffCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FloorBuffCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.FloorBuffCfg floorBuffCfg = 1;
  for (int i = 0; i < this->floorbuffcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->floorbuffcfg(i), output);
  }

}

int FloorBuffCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.FloorBuffCfg floorBuffCfg = 1;
  total_size += 1 * this->floorbuffcfg_size();
  for (int i = 0; i < this->floorbuffcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->floorbuffcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FloorBuffCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FloorBuffCfgSet*>(&from));
}

void FloorBuffCfgSet::MergeFrom(const FloorBuffCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  floorbuffcfg_.MergeFrom(from.floorbuffcfg_);
}

void FloorBuffCfgSet::CopyFrom(const FloorBuffCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloorBuffCfgSet::IsInitialized() const {

  for (int i = 0; i < floorbuffcfg_size(); i++) {
    if (!this->floorbuffcfg(i).IsInitialized()) return false;
  }
  return true;
}

void FloorBuffCfgSet::Swap(FloorBuffCfgSet* other) {
  if (other != this) {
    floorbuffcfg_.Swap(&other->floorbuffcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FloorBuffCfgSet::GetTypeName() const {
  return "com.cfg.vo.FloorBuffCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
