// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DebrisCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DebrisCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DebrisCfg_2eproto() {
  delete DebrisCfg::default_instance_;
  delete DebrisCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DebrisCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DebrisCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DebrisCfg::default_instance_ = new DebrisCfg();
  DebrisCfgSet::default_instance_ = new DebrisCfgSet();
  DebrisCfg::default_instance_->InitAsDefaultInstance();
  DebrisCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DebrisCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DebrisCfg_2eproto_once_);
void protobuf_AddDesc_DebrisCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DebrisCfg_2eproto_once_,
                 &protobuf_AddDesc_DebrisCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DebrisCfg_2eproto {
  StaticDescriptorInitializer_DebrisCfg_2eproto() {
    protobuf_AddDesc_DebrisCfg_2eproto();
  }
} static_descriptor_initializer_DebrisCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DebrisCfg::kDebrisIDFieldNumber;
const int DebrisCfg::kDebrisNameFieldNumber;
const int DebrisCfg::kDebrisColorFieldNumber;
const int DebrisCfg::kDebrisIconFieldNumber;
const int DebrisCfg::kDebrisDescFieldNumber;
const int DebrisCfg::kComposeNeedCntFieldNumber;
const int DebrisCfg::kComposeTypeFieldNumber;
const int DebrisCfg::kComposeCfgIDFieldNumber;
const int DebrisCfg::kCostCoinFieldNumber;
#endif  // !_MSC_VER

DebrisCfg::DebrisCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DebrisCfg::InitAsDefaultInstance() {
}

DebrisCfg::DebrisCfg(const DebrisCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DebrisCfg::SharedCtor() {
  _cached_size_ = 0;
  debrisid_ = 0u;
  debrisname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debriscolor_ = 0u;
  debrisicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  debrisdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  composeneedcnt_ = 0u;
  composetype_ = 0u;
  composecfgid_ = 0u;
  costcoin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebrisCfg::~DebrisCfg() {
  SharedDtor();
}

void DebrisCfg::SharedDtor() {
  if (debrisname_ != &::google::protobuf::internal::kEmptyString) {
    delete debrisname_;
  }
  if (debrisicon_ != &::google::protobuf::internal::kEmptyString) {
    delete debrisicon_;
  }
  if (debrisdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete debrisdesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DebrisCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebrisCfg& DebrisCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DebrisCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DebrisCfg_2eproto();
#endif
  return *default_instance_;
}

DebrisCfg* DebrisCfg::default_instance_ = NULL;

DebrisCfg* DebrisCfg::New() const {
  return new DebrisCfg;
}

void DebrisCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    debrisid_ = 0u;
    if (has_debrisname()) {
      if (debrisname_ != &::google::protobuf::internal::kEmptyString) {
        debrisname_->clear();
      }
    }
    debriscolor_ = 0u;
    if (has_debrisicon()) {
      if (debrisicon_ != &::google::protobuf::internal::kEmptyString) {
        debrisicon_->clear();
      }
    }
    if (has_debrisdesc()) {
      if (debrisdesc_ != &::google::protobuf::internal::kEmptyString) {
        debrisdesc_->clear();
      }
    }
    composeneedcnt_ = 0u;
    composetype_ = 0u;
    composecfgid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    costcoin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DebrisCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 DebrisID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debrisid_)));
          set_has_debrisid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DebrisName;
        break;
      }

      // required string DebrisName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DebrisName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debrisname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DebrisColor;
        break;
      }

      // required uint32 DebrisColor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DebrisColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &debriscolor_)));
          set_has_debriscolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DebrisIcon;
        break;
      }

      // required string DebrisIcon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DebrisIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debrisicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DebrisDesc;
        break;
      }

      // required string DebrisDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DebrisDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debrisdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ComposeNeedCnt;
        break;
      }

      // required uint32 ComposeNeedCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComposeNeedCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &composeneedcnt_)));
          set_has_composeneedcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ComposeType;
        break;
      }

      // required uint32 ComposeType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComposeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &composetype_)));
          set_has_composetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ComposeCfgID;
        break;
      }

      // required uint32 ComposeCfgID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ComposeCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &composecfgid_)));
          set_has_composecfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_CostCoin;
        break;
      }

      // required uint32 CostCoin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcoin_)));
          set_has_costcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebrisCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 DebrisID = 1;
  if (has_debrisid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->debrisid(), output);
  }

  // required string DebrisName = 2;
  if (has_debrisname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->debrisname(), output);
  }

  // required uint32 DebrisColor = 3;
  if (has_debriscolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->debriscolor(), output);
  }

  // required string DebrisIcon = 4;
  if (has_debrisicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->debrisicon(), output);
  }

  // required string DebrisDesc = 5;
  if (has_debrisdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->debrisdesc(), output);
  }

  // required uint32 ComposeNeedCnt = 6;
  if (has_composeneedcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->composeneedcnt(), output);
  }

  // required uint32 ComposeType = 7;
  if (has_composetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->composetype(), output);
  }

  // required uint32 ComposeCfgID = 8;
  if (has_composecfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->composecfgid(), output);
  }

  // required uint32 CostCoin = 9;
  if (has_costcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->costcoin(), output);
  }

}

int DebrisCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 DebrisID = 1;
    if (has_debrisid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debrisid());
    }

    // required string DebrisName = 2;
    if (has_debrisname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debrisname());
    }

    // required uint32 DebrisColor = 3;
    if (has_debriscolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->debriscolor());
    }

    // required string DebrisIcon = 4;
    if (has_debrisicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debrisicon());
    }

    // required string DebrisDesc = 5;
    if (has_debrisdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debrisdesc());
    }

    // required uint32 ComposeNeedCnt = 6;
    if (has_composeneedcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->composeneedcnt());
    }

    // required uint32 ComposeType = 7;
    if (has_composetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->composetype());
    }

    // required uint32 ComposeCfgID = 8;
    if (has_composecfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->composecfgid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 CostCoin = 9;
    if (has_costcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcoin());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebrisCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebrisCfg*>(&from));
}

void DebrisCfg::MergeFrom(const DebrisCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_debrisid()) {
      set_debrisid(from.debrisid());
    }
    if (from.has_debrisname()) {
      set_debrisname(from.debrisname());
    }
    if (from.has_debriscolor()) {
      set_debriscolor(from.debriscolor());
    }
    if (from.has_debrisicon()) {
      set_debrisicon(from.debrisicon());
    }
    if (from.has_debrisdesc()) {
      set_debrisdesc(from.debrisdesc());
    }
    if (from.has_composeneedcnt()) {
      set_composeneedcnt(from.composeneedcnt());
    }
    if (from.has_composetype()) {
      set_composetype(from.composetype());
    }
    if (from.has_composecfgid()) {
      set_composecfgid(from.composecfgid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_costcoin()) {
      set_costcoin(from.costcoin());
    }
  }
}

void DebrisCfg::CopyFrom(const DebrisCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebrisCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void DebrisCfg::Swap(DebrisCfg* other) {
  if (other != this) {
    std::swap(debrisid_, other->debrisid_);
    std::swap(debrisname_, other->debrisname_);
    std::swap(debriscolor_, other->debriscolor_);
    std::swap(debrisicon_, other->debrisicon_);
    std::swap(debrisdesc_, other->debrisdesc_);
    std::swap(composeneedcnt_, other->composeneedcnt_);
    std::swap(composetype_, other->composetype_);
    std::swap(composecfgid_, other->composecfgid_);
    std::swap(costcoin_, other->costcoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DebrisCfg::GetTypeName() const {
  return "com.cfg.vo.DebrisCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DebrisCfgSet::kDebriscfgFieldNumber;
#endif  // !_MSC_VER

DebrisCfgSet::DebrisCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DebrisCfgSet::InitAsDefaultInstance() {
}

DebrisCfgSet::DebrisCfgSet(const DebrisCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DebrisCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DebrisCfgSet::~DebrisCfgSet() {
  SharedDtor();
}

void DebrisCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DebrisCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DebrisCfgSet& DebrisCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DebrisCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DebrisCfg_2eproto();
#endif
  return *default_instance_;
}

DebrisCfgSet* DebrisCfgSet::default_instance_ = NULL;

DebrisCfgSet* DebrisCfgSet::New() const {
  return new DebrisCfgSet;
}

void DebrisCfgSet::Clear() {
  debriscfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DebrisCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DebrisCfg debriscfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debriscfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_debriscfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_debriscfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DebrisCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DebrisCfg debriscfg = 1;
  for (int i = 0; i < this->debriscfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->debriscfg(i), output);
  }

}

int DebrisCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DebrisCfg debriscfg = 1;
  total_size += 1 * this->debriscfg_size();
  for (int i = 0; i < this->debriscfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->debriscfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DebrisCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DebrisCfgSet*>(&from));
}

void DebrisCfgSet::MergeFrom(const DebrisCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  debriscfg_.MergeFrom(from.debriscfg_);
}

void DebrisCfgSet::CopyFrom(const DebrisCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebrisCfgSet::IsInitialized() const {

  for (int i = 0; i < debriscfg_size(); i++) {
    if (!this->debriscfg(i).IsInitialized()) return false;
  }
  return true;
}

void DebrisCfgSet::Swap(DebrisCfgSet* other) {
  if (other != this) {
    debriscfg_.Swap(&other->debriscfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DebrisCfgSet::GetTypeName() const {
  return "com.cfg.vo.DebrisCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
