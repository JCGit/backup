// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PackageCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PackageCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_PackageCfg_2eproto() {
  delete PackageElmt::default_instance_;
  delete PackageCfg::default_instance_;
  delete PackageCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_PackageCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_PackageCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  PackageElmt::default_instance_ = new PackageElmt();
  PackageCfg::default_instance_ = new PackageCfg();
  PackageCfgSet::default_instance_ = new PackageCfgSet();
  PackageElmt::default_instance_->InitAsDefaultInstance();
  PackageCfg::default_instance_->InitAsDefaultInstance();
  PackageCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PackageCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_PackageCfg_2eproto_once_);
void protobuf_AddDesc_PackageCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_PackageCfg_2eproto_once_,
                 &protobuf_AddDesc_PackageCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PackageCfg_2eproto {
  StaticDescriptorInitializer_PackageCfg_2eproto() {
    protobuf_AddDesc_PackageCfg_2eproto();
  }
} static_descriptor_initializer_PackageCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int PackageElmt::kElementTypeFieldNumber;
const int PackageElmt::kElementIDFieldNumber;
const int PackageElmt::kElementCntMinFieldNumber;
const int PackageElmt::kElementCntMaxFieldNumber;
#endif  // !_MSC_VER

PackageElmt::PackageElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PackageElmt::InitAsDefaultInstance() {
}

PackageElmt::PackageElmt(const PackageElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PackageElmt::SharedCtor() {
  _cached_size_ = 0;
  elementtype_ = 0u;
  elementid_ = 0u;
  elementcntmin_ = 0u;
  elementcntmax_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageElmt::~PackageElmt() {
  SharedDtor();
}

void PackageElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PackageElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PackageElmt& PackageElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PackageCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PackageCfg_2eproto();
#endif
  return *default_instance_;
}

PackageElmt* PackageElmt::default_instance_ = NULL;

PackageElmt* PackageElmt::New() const {
  return new PackageElmt;
}

void PackageElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementtype_ = 0u;
    elementid_ = 0u;
    elementcntmin_ = 0u;
    elementcntmax_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PackageElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementID;
        break;
      }

      // required uint32 ElementID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementCntMin;
        break;
      }

      // required uint32 ElementCntMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCntMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcntmin_)));
          set_has_elementcntmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ElementCntMax;
        break;
      }

      // required uint32 ElementCntMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCntMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcntmax_)));
          set_has_elementcntmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementtype(), output);
  }

  // required uint32 ElementID = 2;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementid(), output);
  }

  // required uint32 ElementCntMin = 3;
  if (has_elementcntmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementcntmin(), output);
  }

  // required uint32 ElementCntMax = 4;
  if (has_elementcntmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->elementcntmax(), output);
  }

}

int PackageElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 ElementID = 2;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementCntMin = 3;
    if (has_elementcntmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcntmin());
    }

    // required uint32 ElementCntMax = 4;
    if (has_elementcntmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcntmax());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PackageElmt*>(&from));
}

void PackageElmt::MergeFrom(const PackageElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementcntmin()) {
      set_elementcntmin(from.elementcntmin());
    }
    if (from.has_elementcntmax()) {
      set_elementcntmax(from.elementcntmax());
    }
  }
}

void PackageElmt::CopyFrom(const PackageElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PackageElmt::Swap(PackageElmt* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(elementid_, other->elementid_);
    std::swap(elementcntmin_, other->elementcntmin_);
    std::swap(elementcntmax_, other->elementcntmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PackageElmt::GetTypeName() const {
  return "com.cfg.vo.PackageElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int PackageCfg::kPackageIDFieldNumber;
const int PackageCfg::kOpenLvFieldNumber;
const int PackageCfg::kElmtLstFieldNumber;
#endif  // !_MSC_VER

PackageCfg::PackageCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PackageCfg::InitAsDefaultInstance() {
}

PackageCfg::PackageCfg(const PackageCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PackageCfg::SharedCtor() {
  _cached_size_ = 0;
  packageid_ = 0u;
  openlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageCfg::~PackageCfg() {
  SharedDtor();
}

void PackageCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PackageCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PackageCfg& PackageCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PackageCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PackageCfg_2eproto();
#endif
  return *default_instance_;
}

PackageCfg* PackageCfg::default_instance_ = NULL;

PackageCfg* PackageCfg::New() const {
  return new PackageCfg;
}

void PackageCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packageid_ = 0u;
    openlv_ = 0u;
  }
  elmtlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PackageCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PackageID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packageid_)));
          set_has_packageid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OpenLv;
        break;
      }

      // required uint32 OpenLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openlv_)));
          set_has_openlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ElmtLst;
        break;
      }

      // repeated .com.cfg.vo.PackageElmt ElmtLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElmtLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elmtlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ElmtLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PackageID = 1;
  if (has_packageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packageid(), output);
  }

  // required uint32 OpenLv = 2;
  if (has_openlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->openlv(), output);
  }

  // repeated .com.cfg.vo.PackageElmt ElmtLst = 3;
  for (int i = 0; i < this->elmtlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->elmtlst(i), output);
  }

}

int PackageCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PackageID = 1;
    if (has_packageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packageid());
    }

    // required uint32 OpenLv = 2;
    if (has_openlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openlv());
    }

  }
  // repeated .com.cfg.vo.PackageElmt ElmtLst = 3;
  total_size += 1 * this->elmtlst_size();
  for (int i = 0; i < this->elmtlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elmtlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PackageCfg*>(&from));
}

void PackageCfg::MergeFrom(const PackageCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  elmtlst_.MergeFrom(from.elmtlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packageid()) {
      set_packageid(from.packageid());
    }
    if (from.has_openlv()) {
      set_openlv(from.openlv());
    }
  }
}

void PackageCfg::CopyFrom(const PackageCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < elmtlst_size(); i++) {
    if (!this->elmtlst(i).IsInitialized()) return false;
  }
  return true;
}

void PackageCfg::Swap(PackageCfg* other) {
  if (other != this) {
    std::swap(packageid_, other->packageid_);
    std::swap(openlv_, other->openlv_);
    elmtlst_.Swap(&other->elmtlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PackageCfg::GetTypeName() const {
  return "com.cfg.vo.PackageCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int PackageCfgSet::kPackagecfgFieldNumber;
#endif  // !_MSC_VER

PackageCfgSet::PackageCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PackageCfgSet::InitAsDefaultInstance() {
}

PackageCfgSet::PackageCfgSet(const PackageCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PackageCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageCfgSet::~PackageCfgSet() {
  SharedDtor();
}

void PackageCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void PackageCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PackageCfgSet& PackageCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_PackageCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_PackageCfg_2eproto();
#endif
  return *default_instance_;
}

PackageCfgSet* PackageCfgSet::default_instance_ = NULL;

PackageCfgSet* PackageCfgSet::New() const {
  return new PackageCfgSet;
}

void PackageCfgSet::Clear() {
  packagecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PackageCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.PackageCfg packagecfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packagecfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_packagecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_packagecfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.PackageCfg packagecfg = 1;
  for (int i = 0; i < this->packagecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->packagecfg(i), output);
  }

}

int PackageCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.PackageCfg packagecfg = 1;
  total_size += 1 * this->packagecfg_size();
  for (int i = 0; i < this->packagecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->packagecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PackageCfgSet*>(&from));
}

void PackageCfgSet::MergeFrom(const PackageCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  packagecfg_.MergeFrom(from.packagecfg_);
}

void PackageCfgSet::CopyFrom(const PackageCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageCfgSet::IsInitialized() const {

  for (int i = 0; i < packagecfg_size(); i++) {
    if (!this->packagecfg(i).IsInitialized()) return false;
  }
  return true;
}

void PackageCfgSet::Swap(PackageCfgSet* other) {
  if (other != this) {
    packagecfg_.Swap(&other->packagecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PackageCfgSet::GetTypeName() const {
  return "com.cfg.vo.PackageCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
