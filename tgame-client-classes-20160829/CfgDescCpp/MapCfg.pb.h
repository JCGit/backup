// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MapCfg.proto

#ifndef PROTOBUF_MapCfg_2eproto__INCLUDED
#define PROTOBUF_MapCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MapCfg_2eproto();
void protobuf_AssignDesc_MapCfg_2eproto();
void protobuf_ShutdownFile_MapCfg_2eproto();

class MapCfg;
class MapCfgSet;

// ===================================================================

class MapCfg : public ::google::protobuf::MessageLite {
 public:
  MapCfg();
  virtual ~MapCfg();

  MapCfg(const MapCfg& from);

  inline MapCfg& operator=(const MapCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const MapCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MapCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MapCfg* other);

  // implements Message ----------------------------------------------

  MapCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MapCfg& from);
  void MergeFrom(const MapCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string BackID = 2;
  inline bool has_backid() const;
  inline void clear_backid();
  static const int kBackIDFieldNumber = 2;
  inline const ::std::string& backid() const;
  inline void set_backid(const ::std::string& value);
  inline void set_backid(const char* value);
  inline void set_backid(const char* value, size_t size);
  inline ::std::string* mutable_backid();
  inline ::std::string* release_backid();
  inline void set_allocated_backid(::std::string* backid);

  // required string MidID = 3;
  inline bool has_midid() const;
  inline void clear_midid();
  static const int kMidIDFieldNumber = 3;
  inline const ::std::string& midid() const;
  inline void set_midid(const ::std::string& value);
  inline void set_midid(const char* value);
  inline void set_midid(const char* value, size_t size);
  inline ::std::string* mutable_midid();
  inline ::std::string* release_midid();
  inline void set_allocated_midid(::std::string* midid);

  // required string ForeID = 4;
  inline bool has_foreid() const;
  inline void clear_foreid();
  static const int kForeIDFieldNumber = 4;
  inline const ::std::string& foreid() const;
  inline void set_foreid(const ::std::string& value);
  inline void set_foreid(const char* value);
  inline void set_foreid(const char* value, size_t size);
  inline ::std::string* mutable_foreid();
  inline ::std::string* release_foreid();
  inline void set_allocated_foreid(::std::string* foreid);

  // required string FrontID = 5;
  inline bool has_frontid() const;
  inline void clear_frontid();
  static const int kFrontIDFieldNumber = 5;
  inline const ::std::string& frontid() const;
  inline void set_frontid(const ::std::string& value);
  inline void set_frontid(const char* value);
  inline void set_frontid(const char* value, size_t size);
  inline ::std::string* mutable_frontid();
  inline ::std::string* release_frontid();
  inline void set_allocated_frontid(::std::string* frontid);

  // required uint32 MidPos = 6;
  inline bool has_midpos() const;
  inline void clear_midpos();
  static const int kMidPosFieldNumber = 6;
  inline ::google::protobuf::uint32 midpos() const;
  inline void set_midpos(::google::protobuf::uint32 value);

  // required uint32 MidWalkH = 7;
  inline bool has_midwalkh() const;
  inline void clear_midwalkh();
  static const int kMidWalkHFieldNumber = 7;
  inline ::google::protobuf::uint32 midwalkh() const;
  inline void set_midwalkh(::google::protobuf::uint32 value);

  // required string CfgID = 8;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgIDFieldNumber = 8;
  inline const ::std::string& cfgid() const;
  inline void set_cfgid(const ::std::string& value);
  inline void set_cfgid(const char* value);
  inline void set_cfgid(const char* value, size_t size);
  inline ::std::string* mutable_cfgid();
  inline ::std::string* release_cfgid();
  inline void set_allocated_cfgid(::std::string* cfgid);

  // required string MidID2 = 9;
  inline bool has_midid2() const;
  inline void clear_midid2();
  static const int kMidID2FieldNumber = 9;
  inline const ::std::string& midid2() const;
  inline void set_midid2(const ::std::string& value);
  inline void set_midid2(const char* value);
  inline void set_midid2(const char* value, size_t size);
  inline ::std::string* mutable_midid2();
  inline ::std::string* release_midid2();
  inline void set_allocated_midid2(::std::string* midid2);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.MapCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_backid();
  inline void clear_has_backid();
  inline void set_has_midid();
  inline void clear_has_midid();
  inline void set_has_foreid();
  inline void clear_has_foreid();
  inline void set_has_frontid();
  inline void clear_has_frontid();
  inline void set_has_midpos();
  inline void clear_has_midpos();
  inline void set_has_midwalkh();
  inline void clear_has_midwalkh();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_midid2();
  inline void clear_has_midid2();

  ::std::string* backid_;
  ::std::string* midid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 midpos_;
  ::std::string* foreid_;
  ::std::string* frontid_;
  ::std::string* cfgid_;
  ::std::string* midid2_;
  ::google::protobuf::uint32 midwalkh_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapCfg_2eproto();
  friend void protobuf_ShutdownFile_MapCfg_2eproto();

  void InitAsDefaultInstance();
  static MapCfg* default_instance_;
};
// -------------------------------------------------------------------

class MapCfgSet : public ::google::protobuf::MessageLite {
 public:
  MapCfgSet();
  virtual ~MapCfgSet();

  MapCfgSet(const MapCfgSet& from);

  inline MapCfgSet& operator=(const MapCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const MapCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const MapCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(MapCfgSet* other);

  // implements Message ----------------------------------------------

  MapCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const MapCfgSet& from);
  void MergeFrom(const MapCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.MapCfg mapCfg = 1;
  inline int mapcfg_size() const;
  inline void clear_mapcfg();
  static const int kMapCfgFieldNumber = 1;
  inline const ::com::cfg::vo::MapCfg& mapcfg(int index) const;
  inline ::com::cfg::vo::MapCfg* mutable_mapcfg(int index);
  inline ::com::cfg::vo::MapCfg* add_mapcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::MapCfg >&
      mapcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::MapCfg >*
      mutable_mapcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.MapCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::MapCfg > mapcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_MapCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_MapCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_MapCfg_2eproto();
  friend void protobuf_ShutdownFile_MapCfg_2eproto();

  void InitAsDefaultInstance();
  static MapCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// MapCfg

// required uint32 ID = 1;
inline bool MapCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 MapCfg::id() const {
  return id_;
}
inline void MapCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string BackID = 2;
inline bool MapCfg::has_backid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapCfg::set_has_backid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapCfg::clear_has_backid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapCfg::clear_backid() {
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    backid_->clear();
  }
  clear_has_backid();
}
inline const ::std::string& MapCfg::backid() const {
  return *backid_;
}
inline void MapCfg::set_backid(const ::std::string& value) {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  backid_->assign(value);
}
inline void MapCfg::set_backid(const char* value) {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  backid_->assign(value);
}
inline void MapCfg::set_backid(const char* value, size_t size) {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  backid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapCfg::mutable_backid() {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  return backid_;
}
inline ::std::string* MapCfg::release_backid() {
  clear_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = backid_;
    backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapCfg::set_allocated_backid(::std::string* backid) {
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    delete backid_;
  }
  if (backid) {
    set_has_backid();
    backid_ = backid;
  } else {
    clear_has_backid();
    backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MidID = 3;
inline bool MapCfg::has_midid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MapCfg::set_has_midid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MapCfg::clear_has_midid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MapCfg::clear_midid() {
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    midid_->clear();
  }
  clear_has_midid();
}
inline const ::std::string& MapCfg::midid() const {
  return *midid_;
}
inline void MapCfg::set_midid(const ::std::string& value) {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  midid_->assign(value);
}
inline void MapCfg::set_midid(const char* value) {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  midid_->assign(value);
}
inline void MapCfg::set_midid(const char* value, size_t size) {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  midid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapCfg::mutable_midid() {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  return midid_;
}
inline ::std::string* MapCfg::release_midid() {
  clear_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midid_;
    midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapCfg::set_allocated_midid(::std::string* midid) {
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    delete midid_;
  }
  if (midid) {
    set_has_midid();
    midid_ = midid;
  } else {
    clear_has_midid();
    midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ForeID = 4;
inline bool MapCfg::has_foreid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MapCfg::set_has_foreid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MapCfg::clear_has_foreid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MapCfg::clear_foreid() {
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    foreid_->clear();
  }
  clear_has_foreid();
}
inline const ::std::string& MapCfg::foreid() const {
  return *foreid_;
}
inline void MapCfg::set_foreid(const ::std::string& value) {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  foreid_->assign(value);
}
inline void MapCfg::set_foreid(const char* value) {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  foreid_->assign(value);
}
inline void MapCfg::set_foreid(const char* value, size_t size) {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  foreid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapCfg::mutable_foreid() {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  return foreid_;
}
inline ::std::string* MapCfg::release_foreid() {
  clear_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = foreid_;
    foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapCfg::set_allocated_foreid(::std::string* foreid) {
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    delete foreid_;
  }
  if (foreid) {
    set_has_foreid();
    foreid_ = foreid;
  } else {
    clear_has_foreid();
    foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FrontID = 5;
inline bool MapCfg::has_frontid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MapCfg::set_has_frontid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MapCfg::clear_has_frontid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MapCfg::clear_frontid() {
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    frontid_->clear();
  }
  clear_has_frontid();
}
inline const ::std::string& MapCfg::frontid() const {
  return *frontid_;
}
inline void MapCfg::set_frontid(const ::std::string& value) {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  frontid_->assign(value);
}
inline void MapCfg::set_frontid(const char* value) {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  frontid_->assign(value);
}
inline void MapCfg::set_frontid(const char* value, size_t size) {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  frontid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapCfg::mutable_frontid() {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  return frontid_;
}
inline ::std::string* MapCfg::release_frontid() {
  clear_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frontid_;
    frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapCfg::set_allocated_frontid(::std::string* frontid) {
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    delete frontid_;
  }
  if (frontid) {
    set_has_frontid();
    frontid_ = frontid;
  } else {
    clear_has_frontid();
    frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 MidPos = 6;
inline bool MapCfg::has_midpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MapCfg::set_has_midpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MapCfg::clear_has_midpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MapCfg::clear_midpos() {
  midpos_ = 0u;
  clear_has_midpos();
}
inline ::google::protobuf::uint32 MapCfg::midpos() const {
  return midpos_;
}
inline void MapCfg::set_midpos(::google::protobuf::uint32 value) {
  set_has_midpos();
  midpos_ = value;
}

// required uint32 MidWalkH = 7;
inline bool MapCfg::has_midwalkh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MapCfg::set_has_midwalkh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MapCfg::clear_has_midwalkh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MapCfg::clear_midwalkh() {
  midwalkh_ = 0u;
  clear_has_midwalkh();
}
inline ::google::protobuf::uint32 MapCfg::midwalkh() const {
  return midwalkh_;
}
inline void MapCfg::set_midwalkh(::google::protobuf::uint32 value) {
  set_has_midwalkh();
  midwalkh_ = value;
}

// required string CfgID = 8;
inline bool MapCfg::has_cfgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MapCfg::set_has_cfgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MapCfg::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MapCfg::clear_cfgid() {
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    cfgid_->clear();
  }
  clear_has_cfgid();
}
inline const ::std::string& MapCfg::cfgid() const {
  return *cfgid_;
}
inline void MapCfg::set_cfgid(const ::std::string& value) {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  cfgid_->assign(value);
}
inline void MapCfg::set_cfgid(const char* value) {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  cfgid_->assign(value);
}
inline void MapCfg::set_cfgid(const char* value, size_t size) {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  cfgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapCfg::mutable_cfgid() {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  return cfgid_;
}
inline ::std::string* MapCfg::release_cfgid() {
  clear_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cfgid_;
    cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapCfg::set_allocated_cfgid(::std::string* cfgid) {
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    delete cfgid_;
  }
  if (cfgid) {
    set_has_cfgid();
    cfgid_ = cfgid;
  } else {
    clear_has_cfgid();
    cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MidID2 = 9;
inline bool MapCfg::has_midid2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MapCfg::set_has_midid2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MapCfg::clear_has_midid2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MapCfg::clear_midid2() {
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    midid2_->clear();
  }
  clear_has_midid2();
}
inline const ::std::string& MapCfg::midid2() const {
  return *midid2_;
}
inline void MapCfg::set_midid2(const ::std::string& value) {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  midid2_->assign(value);
}
inline void MapCfg::set_midid2(const char* value) {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  midid2_->assign(value);
}
inline void MapCfg::set_midid2(const char* value, size_t size) {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  midid2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MapCfg::mutable_midid2() {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  return midid2_;
}
inline ::std::string* MapCfg::release_midid2() {
  clear_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midid2_;
    midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MapCfg::set_allocated_midid2(::std::string* midid2) {
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    delete midid2_;
  }
  if (midid2) {
    set_has_midid2();
    midid2_ = midid2;
  } else {
    clear_has_midid2();
    midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MapCfgSet

// repeated .com.cfg.vo.MapCfg mapCfg = 1;
inline int MapCfgSet::mapcfg_size() const {
  return mapcfg_.size();
}
inline void MapCfgSet::clear_mapcfg() {
  mapcfg_.Clear();
}
inline const ::com::cfg::vo::MapCfg& MapCfgSet::mapcfg(int index) const {
  return mapcfg_.Get(index);
}
inline ::com::cfg::vo::MapCfg* MapCfgSet::mutable_mapcfg(int index) {
  return mapcfg_.Mutable(index);
}
inline ::com::cfg::vo::MapCfg* MapCfgSet::add_mapcfg() {
  return mapcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::MapCfg >&
MapCfgSet::mapcfg() const {
  return mapcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::MapCfg >*
MapCfgSet::mutable_mapcfg() {
  return &mapcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MapCfg_2eproto__INCLUDED
