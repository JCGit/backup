// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightGuideMapCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightGuideMapCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_FightGuideMapCfg_2eproto() {
  delete FightGuideMapCfg::default_instance_;
  delete FightGuideMapCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_FightGuideMapCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_FightGuideMapCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FightGuideMapCfg::default_instance_ = new FightGuideMapCfg();
  FightGuideMapCfgSet::default_instance_ = new FightGuideMapCfgSet();
  FightGuideMapCfg::default_instance_->InitAsDefaultInstance();
  FightGuideMapCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FightGuideMapCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FightGuideMapCfg_2eproto_once_);
void protobuf_AddDesc_FightGuideMapCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FightGuideMapCfg_2eproto_once_,
                 &protobuf_AddDesc_FightGuideMapCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FightGuideMapCfg_2eproto {
  StaticDescriptorInitializer_FightGuideMapCfg_2eproto() {
    protobuf_AddDesc_FightGuideMapCfg_2eproto();
  }
} static_descriptor_initializer_FightGuideMapCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FightGuideMapCfg::kMapIDFieldNumber;
const int FightGuideMapCfg::kBossIDFieldNumber;
const int FightGuideMapCfg::kStageNumFieldNumber;
const int FightGuideMapCfg::kWinTypeFieldNumber;
const int FightGuideMapCfg::kWinValue1FieldNumber;
const int FightGuideMapCfg::kWinValue2FieldNumber;
const int FightGuideMapCfg::kBackIDFieldNumber;
const int FightGuideMapCfg::kMidIDFieldNumber;
const int FightGuideMapCfg::kForeIDFieldNumber;
const int FightGuideMapCfg::kFrontIDFieldNumber;
const int FightGuideMapCfg::kMidPosFieldNumber;
const int FightGuideMapCfg::kMidWalkHFieldNumber;
const int FightGuideMapCfg::kCfgIDFieldNumber;
const int FightGuideMapCfg::kNameFieldNumber;
const int FightGuideMapCfg::kMidID2FieldNumber;
#endif  // !_MSC_VER

FightGuideMapCfg::FightGuideMapCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGuideMapCfg::InitAsDefaultInstance() {
}

FightGuideMapCfg::FightGuideMapCfg(const FightGuideMapCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGuideMapCfg::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  bossid_ = 0u;
  stagenum_ = 0u;
  wintype_ = 0u;
  winvalue1_ = 0u;
  winvalue2_ = 0u;
  backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midpos_ = 0u;
  midwalkh_ = 0u;
  cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGuideMapCfg::~FightGuideMapCfg() {
  SharedDtor();
}

void FightGuideMapCfg::SharedDtor() {
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    delete backid_;
  }
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    delete midid_;
  }
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    delete foreid_;
  }
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    delete frontid_;
  }
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    delete cfgid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    delete midid2_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightGuideMapCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGuideMapCfg& FightGuideMapCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightGuideMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightGuideMapCfg_2eproto();
#endif
  return *default_instance_;
}

FightGuideMapCfg* FightGuideMapCfg::default_instance_ = NULL;

FightGuideMapCfg* FightGuideMapCfg::New() const {
  return new FightGuideMapCfg;
}

void FightGuideMapCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    bossid_ = 0u;
    stagenum_ = 0u;
    wintype_ = 0u;
    winvalue1_ = 0u;
    winvalue2_ = 0u;
    if (has_backid()) {
      if (backid_ != &::google::protobuf::internal::kEmptyString) {
        backid_->clear();
      }
    }
    if (has_midid()) {
      if (midid_ != &::google::protobuf::internal::kEmptyString) {
        midid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_foreid()) {
      if (foreid_ != &::google::protobuf::internal::kEmptyString) {
        foreid_->clear();
      }
    }
    if (has_frontid()) {
      if (frontid_ != &::google::protobuf::internal::kEmptyString) {
        frontid_->clear();
      }
    }
    midpos_ = 0u;
    midwalkh_ = 0u;
    if (has_cfgid()) {
      if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
        cfgid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_midid2()) {
      if (midid2_ != &::google::protobuf::internal::kEmptyString) {
        midid2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGuideMapCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BossID;
        break;
      }

      // required uint32 BossID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StageNum;
        break;
      }

      // required uint32 StageNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stagenum_)));
          set_has_stagenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WinType;
        break;
      }

      // required uint32 WinType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wintype_)));
          set_has_wintype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_WinValue1;
        break;
      }

      // required uint32 WinValue1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinValue1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winvalue1_)));
          set_has_winvalue1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_WinValue2;
        break;
      }

      // required uint32 WinValue2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WinValue2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winvalue2_)));
          set_has_winvalue2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_BackID;
        break;
      }

      // required string BackID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BackID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_MidID;
        break;
      }

      // required string MidID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MidID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_midid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ForeID;
        break;
      }

      // required string ForeID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ForeID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_foreid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_FrontID;
        break;
      }

      // required string FrontID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FrontID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_MidPos;
        break;
      }

      // required uint32 MidPos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MidPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midpos_)));
          set_has_midpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_MidWalkH;
        break;
      }

      // required uint32 MidWalkH = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MidWalkH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &midwalkh_)));
          set_has_midwalkh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_CfgID;
        break;
      }

      // required string CfgID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CfgID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cfgid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Name;
        break;
      }

      // required string Name = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_MidID2;
        break;
      }

      // required string MidID2 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MidID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_midid2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGuideMapCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // required uint32 BossID = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // required uint32 StageNum = 3;
  if (has_stagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stagenum(), output);
  }

  // required uint32 WinType = 4;
  if (has_wintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wintype(), output);
  }

  // required uint32 WinValue1 = 5;
  if (has_winvalue1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->winvalue1(), output);
  }

  // required uint32 WinValue2 = 6;
  if (has_winvalue2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->winvalue2(), output);
  }

  // required string BackID = 7;
  if (has_backid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->backid(), output);
  }

  // required string MidID = 8;
  if (has_midid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->midid(), output);
  }

  // required string ForeID = 9;
  if (has_foreid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->foreid(), output);
  }

  // required string FrontID = 10;
  if (has_frontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->frontid(), output);
  }

  // required uint32 MidPos = 11;
  if (has_midpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->midpos(), output);
  }

  // required uint32 MidWalkH = 12;
  if (has_midwalkh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->midwalkh(), output);
  }

  // required string CfgID = 13;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->cfgid(), output);
  }

  // required string Name = 14;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->name(), output);
  }

  // required string MidID2 = 15;
  if (has_midid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->midid2(), output);
  }

}

int FightGuideMapCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // required uint32 BossID = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // required uint32 StageNum = 3;
    if (has_stagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stagenum());
    }

    // required uint32 WinType = 4;
    if (has_wintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wintype());
    }

    // required uint32 WinValue1 = 5;
    if (has_winvalue1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winvalue1());
    }

    // required uint32 WinValue2 = 6;
    if (has_winvalue2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winvalue2());
    }

    // required string BackID = 7;
    if (has_backid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backid());
    }

    // required string MidID = 8;
    if (has_midid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->midid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string ForeID = 9;
    if (has_foreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->foreid());
    }

    // required string FrontID = 10;
    if (has_frontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontid());
    }

    // required uint32 MidPos = 11;
    if (has_midpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->midpos());
    }

    // required uint32 MidWalkH = 12;
    if (has_midwalkh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->midwalkh());
    }

    // required string CfgID = 13;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cfgid());
    }

    // required string Name = 14;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string MidID2 = 15;
    if (has_midid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->midid2());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuideMapCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGuideMapCfg*>(&from));
}

void FightGuideMapCfg::MergeFrom(const FightGuideMapCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_stagenum()) {
      set_stagenum(from.stagenum());
    }
    if (from.has_wintype()) {
      set_wintype(from.wintype());
    }
    if (from.has_winvalue1()) {
      set_winvalue1(from.winvalue1());
    }
    if (from.has_winvalue2()) {
      set_winvalue2(from.winvalue2());
    }
    if (from.has_backid()) {
      set_backid(from.backid());
    }
    if (from.has_midid()) {
      set_midid(from.midid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_foreid()) {
      set_foreid(from.foreid());
    }
    if (from.has_frontid()) {
      set_frontid(from.frontid());
    }
    if (from.has_midpos()) {
      set_midpos(from.midpos());
    }
    if (from.has_midwalkh()) {
      set_midwalkh(from.midwalkh());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_midid2()) {
      set_midid2(from.midid2());
    }
  }
}

void FightGuideMapCfg::CopyFrom(const FightGuideMapCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuideMapCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void FightGuideMapCfg::Swap(FightGuideMapCfg* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(bossid_, other->bossid_);
    std::swap(stagenum_, other->stagenum_);
    std::swap(wintype_, other->wintype_);
    std::swap(winvalue1_, other->winvalue1_);
    std::swap(winvalue2_, other->winvalue2_);
    std::swap(backid_, other->backid_);
    std::swap(midid_, other->midid_);
    std::swap(foreid_, other->foreid_);
    std::swap(frontid_, other->frontid_);
    std::swap(midpos_, other->midpos_);
    std::swap(midwalkh_, other->midwalkh_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(name_, other->name_);
    std::swap(midid2_, other->midid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGuideMapCfg::GetTypeName() const {
  return "com.cfg.vo.FightGuideMapCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int FightGuideMapCfgSet::kFightGuideMapCfgFieldNumber;
#endif  // !_MSC_VER

FightGuideMapCfgSet::FightGuideMapCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGuideMapCfgSet::InitAsDefaultInstance() {
}

FightGuideMapCfgSet::FightGuideMapCfgSet(const FightGuideMapCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGuideMapCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGuideMapCfgSet::~FightGuideMapCfgSet() {
  SharedDtor();
}

void FightGuideMapCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightGuideMapCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGuideMapCfgSet& FightGuideMapCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightGuideMapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightGuideMapCfg_2eproto();
#endif
  return *default_instance_;
}

FightGuideMapCfgSet* FightGuideMapCfgSet::default_instance_ = NULL;

FightGuideMapCfgSet* FightGuideMapCfgSet::New() const {
  return new FightGuideMapCfgSet;
}

void FightGuideMapCfgSet::Clear() {
  fightguidemapcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGuideMapCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.FightGuideMapCfg fightGuideMapCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightGuideMapCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightguidemapcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fightGuideMapCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGuideMapCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.FightGuideMapCfg fightGuideMapCfg = 1;
  for (int i = 0; i < this->fightguidemapcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fightguidemapcfg(i), output);
  }

}

int FightGuideMapCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.FightGuideMapCfg fightGuideMapCfg = 1;
  total_size += 1 * this->fightguidemapcfg_size();
  for (int i = 0; i < this->fightguidemapcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightguidemapcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuideMapCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGuideMapCfgSet*>(&from));
}

void FightGuideMapCfgSet::MergeFrom(const FightGuideMapCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightguidemapcfg_.MergeFrom(from.fightguidemapcfg_);
}

void FightGuideMapCfgSet::CopyFrom(const FightGuideMapCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuideMapCfgSet::IsInitialized() const {

  for (int i = 0; i < fightguidemapcfg_size(); i++) {
    if (!this->fightguidemapcfg(i).IsInitialized()) return false;
  }
  return true;
}

void FightGuideMapCfgSet::Swap(FightGuideMapCfgSet* other) {
  if (other != this) {
    fightguidemapcfg_.Swap(&other->fightguidemapcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGuideMapCfgSet::GetTypeName() const {
  return "com.cfg.vo.FightGuideMapCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
