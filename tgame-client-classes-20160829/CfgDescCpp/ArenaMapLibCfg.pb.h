// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaMapLibCfg.proto

#ifndef PROTOBUF_ArenaMapLibCfg_2eproto__INCLUDED
#define PROTOBUF_ArenaMapLibCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ArenaMapLibCfg_2eproto();
void protobuf_AssignDesc_ArenaMapLibCfg_2eproto();
void protobuf_ShutdownFile_ArenaMapLibCfg_2eproto();

class ArenaMapLibCfg;
class ArenaMapLibCfgSet;

// ===================================================================

class ArenaMapLibCfg : public ::google::protobuf::MessageLite {
 public:
  ArenaMapLibCfg();
  virtual ~ArenaMapLibCfg();

  ArenaMapLibCfg(const ArenaMapLibCfg& from);

  inline ArenaMapLibCfg& operator=(const ArenaMapLibCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ArenaMapLibCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArenaMapLibCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArenaMapLibCfg* other);

  // implements Message ----------------------------------------------

  ArenaMapLibCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArenaMapLibCfg& from);
  void MergeFrom(const ArenaMapLibCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string BackID = 2;
  inline bool has_backid() const;
  inline void clear_backid();
  static const int kBackIDFieldNumber = 2;
  inline const ::std::string& backid() const;
  inline void set_backid(const ::std::string& value);
  inline void set_backid(const char* value);
  inline void set_backid(const char* value, size_t size);
  inline ::std::string* mutable_backid();
  inline ::std::string* release_backid();
  inline void set_allocated_backid(::std::string* backid);

  // required string MidID = 3;
  inline bool has_midid() const;
  inline void clear_midid();
  static const int kMidIDFieldNumber = 3;
  inline const ::std::string& midid() const;
  inline void set_midid(const ::std::string& value);
  inline void set_midid(const char* value);
  inline void set_midid(const char* value, size_t size);
  inline ::std::string* mutable_midid();
  inline ::std::string* release_midid();
  inline void set_allocated_midid(::std::string* midid);

  // required string ForeID = 4;
  inline bool has_foreid() const;
  inline void clear_foreid();
  static const int kForeIDFieldNumber = 4;
  inline const ::std::string& foreid() const;
  inline void set_foreid(const ::std::string& value);
  inline void set_foreid(const char* value);
  inline void set_foreid(const char* value, size_t size);
  inline ::std::string* mutable_foreid();
  inline ::std::string* release_foreid();
  inline void set_allocated_foreid(::std::string* foreid);

  // required string FrontID = 5;
  inline bool has_frontid() const;
  inline void clear_frontid();
  static const int kFrontIDFieldNumber = 5;
  inline const ::std::string& frontid() const;
  inline void set_frontid(const ::std::string& value);
  inline void set_frontid(const char* value);
  inline void set_frontid(const char* value, size_t size);
  inline ::std::string* mutable_frontid();
  inline ::std::string* release_frontid();
  inline void set_allocated_frontid(::std::string* frontid);

  // required uint32 MidPos = 6;
  inline bool has_midpos() const;
  inline void clear_midpos();
  static const int kMidPosFieldNumber = 6;
  inline ::google::protobuf::uint32 midpos() const;
  inline void set_midpos(::google::protobuf::uint32 value);

  // required uint32 MidWalkH = 7;
  inline bool has_midwalkh() const;
  inline void clear_midwalkh();
  static const int kMidWalkHFieldNumber = 7;
  inline ::google::protobuf::uint32 midwalkh() const;
  inline void set_midwalkh(::google::protobuf::uint32 value);

  // required string CfgID = 8;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgIDFieldNumber = 8;
  inline const ::std::string& cfgid() const;
  inline void set_cfgid(const ::std::string& value);
  inline void set_cfgid(const char* value);
  inline void set_cfgid(const char* value, size_t size);
  inline ::std::string* mutable_cfgid();
  inline ::std::string* release_cfgid();
  inline void set_allocated_cfgid(::std::string* cfgid);

  // required uint32 LimitTime = 9;
  inline bool has_limittime() const;
  inline void clear_limittime();
  static const int kLimitTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 limittime() const;
  inline void set_limittime(::google::protobuf::uint32 value);

  // required uint32 ArenaLv = 10;
  inline bool has_arenalv() const;
  inline void clear_arenalv();
  static const int kArenaLvFieldNumber = 10;
  inline ::google::protobuf::uint32 arenalv() const;
  inline void set_arenalv(::google::protobuf::uint32 value);

  // required uint32 StageNum = 11;
  inline bool has_stagenum() const;
  inline void clear_stagenum();
  static const int kStageNumFieldNumber = 11;
  inline ::google::protobuf::uint32 stagenum() const;
  inline void set_stagenum(::google::protobuf::uint32 value);

  // repeated uint32 PassBossID1 = 12;
  inline int passbossid1_size() const;
  inline void clear_passbossid1();
  static const int kPassBossID1FieldNumber = 12;
  inline ::google::protobuf::uint32 passbossid1(int index) const;
  inline void set_passbossid1(int index, ::google::protobuf::uint32 value);
  inline void add_passbossid1(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      passbossid1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_passbossid1();

  // repeated uint32 PassBossID2 = 13;
  inline int passbossid2_size() const;
  inline void clear_passbossid2();
  static const int kPassBossID2FieldNumber = 13;
  inline ::google::protobuf::uint32 passbossid2(int index) const;
  inline void set_passbossid2(int index, ::google::protobuf::uint32 value);
  inline void add_passbossid2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      passbossid2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_passbossid2();

  // repeated uint32 PassBossID3 = 14;
  inline int passbossid3_size() const;
  inline void clear_passbossid3();
  static const int kPassBossID3FieldNumber = 14;
  inline ::google::protobuf::uint32 passbossid3(int index) const;
  inline void set_passbossid3(int index, ::google::protobuf::uint32 value);
  inline void add_passbossid3(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      passbossid3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_passbossid3();

  // required string MidID2 = 15;
  inline bool has_midid2() const;
  inline void clear_midid2();
  static const int kMidID2FieldNumber = 15;
  inline const ::std::string& midid2() const;
  inline void set_midid2(const ::std::string& value);
  inline void set_midid2(const char* value);
  inline void set_midid2(const char* value, size_t size);
  inline ::std::string* mutable_midid2();
  inline ::std::string* release_midid2();
  inline void set_allocated_midid2(::std::string* midid2);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.ArenaMapLibCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_backid();
  inline void clear_has_backid();
  inline void set_has_midid();
  inline void clear_has_midid();
  inline void set_has_foreid();
  inline void clear_has_foreid();
  inline void set_has_frontid();
  inline void clear_has_frontid();
  inline void set_has_midpos();
  inline void clear_has_midpos();
  inline void set_has_midwalkh();
  inline void clear_has_midwalkh();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_limittime();
  inline void clear_has_limittime();
  inline void set_has_arenalv();
  inline void clear_has_arenalv();
  inline void set_has_stagenum();
  inline void clear_has_stagenum();
  inline void set_has_midid2();
  inline void clear_has_midid2();

  ::std::string* backid_;
  ::std::string* midid_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 midpos_;
  ::std::string* foreid_;
  ::std::string* frontid_;
  ::std::string* cfgid_;
  ::google::protobuf::uint32 midwalkh_;
  ::google::protobuf::uint32 limittime_;
  ::google::protobuf::uint32 arenalv_;
  ::google::protobuf::uint32 stagenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > passbossid1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > passbossid2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > passbossid3_;
  ::std::string* midid2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ArenaMapLibCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ArenaMapLibCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ArenaMapLibCfg_2eproto();
  friend void protobuf_ShutdownFile_ArenaMapLibCfg_2eproto();

  void InitAsDefaultInstance();
  static ArenaMapLibCfg* default_instance_;
};
// -------------------------------------------------------------------

class ArenaMapLibCfgSet : public ::google::protobuf::MessageLite {
 public:
  ArenaMapLibCfgSet();
  virtual ~ArenaMapLibCfgSet();

  ArenaMapLibCfgSet(const ArenaMapLibCfgSet& from);

  inline ArenaMapLibCfgSet& operator=(const ArenaMapLibCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ArenaMapLibCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ArenaMapLibCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ArenaMapLibCfgSet* other);

  // implements Message ----------------------------------------------

  ArenaMapLibCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ArenaMapLibCfgSet& from);
  void MergeFrom(const ArenaMapLibCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.ArenaMapLibCfg arenaMapLibCfg = 1;
  inline int arenamaplibcfg_size() const;
  inline void clear_arenamaplibcfg();
  static const int kArenaMapLibCfgFieldNumber = 1;
  inline const ::com::cfg::vo::ArenaMapLibCfg& arenamaplibcfg(int index) const;
  inline ::com::cfg::vo::ArenaMapLibCfg* mutable_arenamaplibcfg(int index);
  inline ::com::cfg::vo::ArenaMapLibCfg* add_arenamaplibcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ArenaMapLibCfg >&
      arenamaplibcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ArenaMapLibCfg >*
      mutable_arenamaplibcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.ArenaMapLibCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ArenaMapLibCfg > arenamaplibcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ArenaMapLibCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ArenaMapLibCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ArenaMapLibCfg_2eproto();
  friend void protobuf_ShutdownFile_ArenaMapLibCfg_2eproto();

  void InitAsDefaultInstance();
  static ArenaMapLibCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// ArenaMapLibCfg

// required uint32 ID = 1;
inline bool ArenaMapLibCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ArenaMapLibCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ArenaMapLibCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ArenaMapLibCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::id() const {
  return id_;
}
inline void ArenaMapLibCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string BackID = 2;
inline bool ArenaMapLibCfg::has_backid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ArenaMapLibCfg::set_has_backid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ArenaMapLibCfg::clear_has_backid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ArenaMapLibCfg::clear_backid() {
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    backid_->clear();
  }
  clear_has_backid();
}
inline const ::std::string& ArenaMapLibCfg::backid() const {
  return *backid_;
}
inline void ArenaMapLibCfg::set_backid(const ::std::string& value) {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  backid_->assign(value);
}
inline void ArenaMapLibCfg::set_backid(const char* value) {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  backid_->assign(value);
}
inline void ArenaMapLibCfg::set_backid(const char* value, size_t size) {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  backid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaMapLibCfg::mutable_backid() {
  set_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    backid_ = new ::std::string;
  }
  return backid_;
}
inline ::std::string* ArenaMapLibCfg::release_backid() {
  clear_has_backid();
  if (backid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = backid_;
    backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaMapLibCfg::set_allocated_backid(::std::string* backid) {
  if (backid_ != &::google::protobuf::internal::kEmptyString) {
    delete backid_;
  }
  if (backid) {
    set_has_backid();
    backid_ = backid;
  } else {
    clear_has_backid();
    backid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string MidID = 3;
inline bool ArenaMapLibCfg::has_midid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ArenaMapLibCfg::set_has_midid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ArenaMapLibCfg::clear_has_midid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ArenaMapLibCfg::clear_midid() {
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    midid_->clear();
  }
  clear_has_midid();
}
inline const ::std::string& ArenaMapLibCfg::midid() const {
  return *midid_;
}
inline void ArenaMapLibCfg::set_midid(const ::std::string& value) {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  midid_->assign(value);
}
inline void ArenaMapLibCfg::set_midid(const char* value) {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  midid_->assign(value);
}
inline void ArenaMapLibCfg::set_midid(const char* value, size_t size) {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  midid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaMapLibCfg::mutable_midid() {
  set_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    midid_ = new ::std::string;
  }
  return midid_;
}
inline ::std::string* ArenaMapLibCfg::release_midid() {
  clear_has_midid();
  if (midid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midid_;
    midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaMapLibCfg::set_allocated_midid(::std::string* midid) {
  if (midid_ != &::google::protobuf::internal::kEmptyString) {
    delete midid_;
  }
  if (midid) {
    set_has_midid();
    midid_ = midid;
  } else {
    clear_has_midid();
    midid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string ForeID = 4;
inline bool ArenaMapLibCfg::has_foreid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ArenaMapLibCfg::set_has_foreid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ArenaMapLibCfg::clear_has_foreid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ArenaMapLibCfg::clear_foreid() {
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    foreid_->clear();
  }
  clear_has_foreid();
}
inline const ::std::string& ArenaMapLibCfg::foreid() const {
  return *foreid_;
}
inline void ArenaMapLibCfg::set_foreid(const ::std::string& value) {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  foreid_->assign(value);
}
inline void ArenaMapLibCfg::set_foreid(const char* value) {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  foreid_->assign(value);
}
inline void ArenaMapLibCfg::set_foreid(const char* value, size_t size) {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  foreid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaMapLibCfg::mutable_foreid() {
  set_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    foreid_ = new ::std::string;
  }
  return foreid_;
}
inline ::std::string* ArenaMapLibCfg::release_foreid() {
  clear_has_foreid();
  if (foreid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = foreid_;
    foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaMapLibCfg::set_allocated_foreid(::std::string* foreid) {
  if (foreid_ != &::google::protobuf::internal::kEmptyString) {
    delete foreid_;
  }
  if (foreid) {
    set_has_foreid();
    foreid_ = foreid;
  } else {
    clear_has_foreid();
    foreid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string FrontID = 5;
inline bool ArenaMapLibCfg::has_frontid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ArenaMapLibCfg::set_has_frontid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ArenaMapLibCfg::clear_has_frontid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ArenaMapLibCfg::clear_frontid() {
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    frontid_->clear();
  }
  clear_has_frontid();
}
inline const ::std::string& ArenaMapLibCfg::frontid() const {
  return *frontid_;
}
inline void ArenaMapLibCfg::set_frontid(const ::std::string& value) {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  frontid_->assign(value);
}
inline void ArenaMapLibCfg::set_frontid(const char* value) {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  frontid_->assign(value);
}
inline void ArenaMapLibCfg::set_frontid(const char* value, size_t size) {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  frontid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaMapLibCfg::mutable_frontid() {
  set_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    frontid_ = new ::std::string;
  }
  return frontid_;
}
inline ::std::string* ArenaMapLibCfg::release_frontid() {
  clear_has_frontid();
  if (frontid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frontid_;
    frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaMapLibCfg::set_allocated_frontid(::std::string* frontid) {
  if (frontid_ != &::google::protobuf::internal::kEmptyString) {
    delete frontid_;
  }
  if (frontid) {
    set_has_frontid();
    frontid_ = frontid;
  } else {
    clear_has_frontid();
    frontid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 MidPos = 6;
inline bool ArenaMapLibCfg::has_midpos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ArenaMapLibCfg::set_has_midpos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ArenaMapLibCfg::clear_has_midpos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ArenaMapLibCfg::clear_midpos() {
  midpos_ = 0u;
  clear_has_midpos();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::midpos() const {
  return midpos_;
}
inline void ArenaMapLibCfg::set_midpos(::google::protobuf::uint32 value) {
  set_has_midpos();
  midpos_ = value;
}

// required uint32 MidWalkH = 7;
inline bool ArenaMapLibCfg::has_midwalkh() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ArenaMapLibCfg::set_has_midwalkh() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ArenaMapLibCfg::clear_has_midwalkh() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ArenaMapLibCfg::clear_midwalkh() {
  midwalkh_ = 0u;
  clear_has_midwalkh();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::midwalkh() const {
  return midwalkh_;
}
inline void ArenaMapLibCfg::set_midwalkh(::google::protobuf::uint32 value) {
  set_has_midwalkh();
  midwalkh_ = value;
}

// required string CfgID = 8;
inline bool ArenaMapLibCfg::has_cfgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ArenaMapLibCfg::set_has_cfgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ArenaMapLibCfg::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ArenaMapLibCfg::clear_cfgid() {
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    cfgid_->clear();
  }
  clear_has_cfgid();
}
inline const ::std::string& ArenaMapLibCfg::cfgid() const {
  return *cfgid_;
}
inline void ArenaMapLibCfg::set_cfgid(const ::std::string& value) {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  cfgid_->assign(value);
}
inline void ArenaMapLibCfg::set_cfgid(const char* value) {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  cfgid_->assign(value);
}
inline void ArenaMapLibCfg::set_cfgid(const char* value, size_t size) {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  cfgid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaMapLibCfg::mutable_cfgid() {
  set_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    cfgid_ = new ::std::string;
  }
  return cfgid_;
}
inline ::std::string* ArenaMapLibCfg::release_cfgid() {
  clear_has_cfgid();
  if (cfgid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cfgid_;
    cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaMapLibCfg::set_allocated_cfgid(::std::string* cfgid) {
  if (cfgid_ != &::google::protobuf::internal::kEmptyString) {
    delete cfgid_;
  }
  if (cfgid) {
    set_has_cfgid();
    cfgid_ = cfgid;
  } else {
    clear_has_cfgid();
    cfgid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 LimitTime = 9;
inline bool ArenaMapLibCfg::has_limittime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ArenaMapLibCfg::set_has_limittime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ArenaMapLibCfg::clear_has_limittime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ArenaMapLibCfg::clear_limittime() {
  limittime_ = 0u;
  clear_has_limittime();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::limittime() const {
  return limittime_;
}
inline void ArenaMapLibCfg::set_limittime(::google::protobuf::uint32 value) {
  set_has_limittime();
  limittime_ = value;
}

// required uint32 ArenaLv = 10;
inline bool ArenaMapLibCfg::has_arenalv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ArenaMapLibCfg::set_has_arenalv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ArenaMapLibCfg::clear_has_arenalv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ArenaMapLibCfg::clear_arenalv() {
  arenalv_ = 0u;
  clear_has_arenalv();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::arenalv() const {
  return arenalv_;
}
inline void ArenaMapLibCfg::set_arenalv(::google::protobuf::uint32 value) {
  set_has_arenalv();
  arenalv_ = value;
}

// required uint32 StageNum = 11;
inline bool ArenaMapLibCfg::has_stagenum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ArenaMapLibCfg::set_has_stagenum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ArenaMapLibCfg::clear_has_stagenum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ArenaMapLibCfg::clear_stagenum() {
  stagenum_ = 0u;
  clear_has_stagenum();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::stagenum() const {
  return stagenum_;
}
inline void ArenaMapLibCfg::set_stagenum(::google::protobuf::uint32 value) {
  set_has_stagenum();
  stagenum_ = value;
}

// repeated uint32 PassBossID1 = 12;
inline int ArenaMapLibCfg::passbossid1_size() const {
  return passbossid1_.size();
}
inline void ArenaMapLibCfg::clear_passbossid1() {
  passbossid1_.Clear();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::passbossid1(int index) const {
  return passbossid1_.Get(index);
}
inline void ArenaMapLibCfg::set_passbossid1(int index, ::google::protobuf::uint32 value) {
  passbossid1_.Set(index, value);
}
inline void ArenaMapLibCfg::add_passbossid1(::google::protobuf::uint32 value) {
  passbossid1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ArenaMapLibCfg::passbossid1() const {
  return passbossid1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ArenaMapLibCfg::mutable_passbossid1() {
  return &passbossid1_;
}

// repeated uint32 PassBossID2 = 13;
inline int ArenaMapLibCfg::passbossid2_size() const {
  return passbossid2_.size();
}
inline void ArenaMapLibCfg::clear_passbossid2() {
  passbossid2_.Clear();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::passbossid2(int index) const {
  return passbossid2_.Get(index);
}
inline void ArenaMapLibCfg::set_passbossid2(int index, ::google::protobuf::uint32 value) {
  passbossid2_.Set(index, value);
}
inline void ArenaMapLibCfg::add_passbossid2(::google::protobuf::uint32 value) {
  passbossid2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ArenaMapLibCfg::passbossid2() const {
  return passbossid2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ArenaMapLibCfg::mutable_passbossid2() {
  return &passbossid2_;
}

// repeated uint32 PassBossID3 = 14;
inline int ArenaMapLibCfg::passbossid3_size() const {
  return passbossid3_.size();
}
inline void ArenaMapLibCfg::clear_passbossid3() {
  passbossid3_.Clear();
}
inline ::google::protobuf::uint32 ArenaMapLibCfg::passbossid3(int index) const {
  return passbossid3_.Get(index);
}
inline void ArenaMapLibCfg::set_passbossid3(int index, ::google::protobuf::uint32 value) {
  passbossid3_.Set(index, value);
}
inline void ArenaMapLibCfg::add_passbossid3(::google::protobuf::uint32 value) {
  passbossid3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ArenaMapLibCfg::passbossid3() const {
  return passbossid3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ArenaMapLibCfg::mutable_passbossid3() {
  return &passbossid3_;
}

// required string MidID2 = 15;
inline bool ArenaMapLibCfg::has_midid2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ArenaMapLibCfg::set_has_midid2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ArenaMapLibCfg::clear_has_midid2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ArenaMapLibCfg::clear_midid2() {
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    midid2_->clear();
  }
  clear_has_midid2();
}
inline const ::std::string& ArenaMapLibCfg::midid2() const {
  return *midid2_;
}
inline void ArenaMapLibCfg::set_midid2(const ::std::string& value) {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  midid2_->assign(value);
}
inline void ArenaMapLibCfg::set_midid2(const char* value) {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  midid2_->assign(value);
}
inline void ArenaMapLibCfg::set_midid2(const char* value, size_t size) {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  midid2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ArenaMapLibCfg::mutable_midid2() {
  set_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    midid2_ = new ::std::string;
  }
  return midid2_;
}
inline ::std::string* ArenaMapLibCfg::release_midid2() {
  clear_has_midid2();
  if (midid2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = midid2_;
    midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ArenaMapLibCfg::set_allocated_midid2(::std::string* midid2) {
  if (midid2_ != &::google::protobuf::internal::kEmptyString) {
    delete midid2_;
  }
  if (midid2) {
    set_has_midid2();
    midid2_ = midid2;
  } else {
    clear_has_midid2();
    midid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ArenaMapLibCfgSet

// repeated .com.cfg.vo.ArenaMapLibCfg arenaMapLibCfg = 1;
inline int ArenaMapLibCfgSet::arenamaplibcfg_size() const {
  return arenamaplibcfg_.size();
}
inline void ArenaMapLibCfgSet::clear_arenamaplibcfg() {
  arenamaplibcfg_.Clear();
}
inline const ::com::cfg::vo::ArenaMapLibCfg& ArenaMapLibCfgSet::arenamaplibcfg(int index) const {
  return arenamaplibcfg_.Get(index);
}
inline ::com::cfg::vo::ArenaMapLibCfg* ArenaMapLibCfgSet::mutable_arenamaplibcfg(int index) {
  return arenamaplibcfg_.Mutable(index);
}
inline ::com::cfg::vo::ArenaMapLibCfg* ArenaMapLibCfgSet::add_arenamaplibcfg() {
  return arenamaplibcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ArenaMapLibCfg >&
ArenaMapLibCfgSet::arenamaplibcfg() const {
  return arenamaplibcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ArenaMapLibCfg >*
ArenaMapLibCfgSet::mutable_arenamaplibcfg() {
  return &arenamaplibcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ArenaMapLibCfg_2eproto__INCLUDED
