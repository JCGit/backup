// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonsterCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MonsterCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_MonsterCfg_2eproto() {
  delete DefAttElement::default_instance_;
  delete Movement::default_instance_;
  delete MonsterCfg::default_instance_;
  delete MonsterCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MonsterCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MonsterCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DefAttElement::default_instance_ = new DefAttElement();
  Movement::default_instance_ = new Movement();
  MonsterCfg::default_instance_ = new MonsterCfg();
  MonsterCfgSet::default_instance_ = new MonsterCfgSet();
  DefAttElement::default_instance_->InitAsDefaultInstance();
  Movement::default_instance_->InitAsDefaultInstance();
  MonsterCfg::default_instance_->InitAsDefaultInstance();
  MonsterCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MonsterCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MonsterCfg_2eproto_once_);
void protobuf_AddDesc_MonsterCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MonsterCfg_2eproto_once_,
                 &protobuf_AddDesc_MonsterCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MonsterCfg_2eproto {
  StaticDescriptorInitializer_MonsterCfg_2eproto() {
    protobuf_AddDesc_MonsterCfg_2eproto();
  }
} static_descriptor_initializer_MonsterCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DefAttElement::kDefAttFieldNumber;
const int DefAttElement::kDefAttTypeFieldNumber;
#endif  // !_MSC_VER

DefAttElement::DefAttElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DefAttElement::InitAsDefaultInstance() {
}

DefAttElement::DefAttElement(const DefAttElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DefAttElement::SharedCtor() {
  _cached_size_ = 0;
  defatt_ = 0u;
  defatttype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DefAttElement::~DefAttElement() {
  SharedDtor();
}

void DefAttElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DefAttElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DefAttElement& DefAttElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterCfg_2eproto();
#endif
  return *default_instance_;
}

DefAttElement* DefAttElement::default_instance_ = NULL;

DefAttElement* DefAttElement::New() const {
  return new DefAttElement;
}

void DefAttElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    defatt_ = 0u;
    defatttype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DefAttElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 defAtt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defatt_)));
          set_has_defatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_defAttType;
        break;
      }

      // required uint32 defAttType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defAttType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defatttype_)));
          set_has_defatttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DefAttElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 defAtt = 1;
  if (has_defatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->defatt(), output);
  }

  // required uint32 defAttType = 2;
  if (has_defatttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defatttype(), output);
  }

}

int DefAttElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 defAtt = 1;
    if (has_defatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defatt());
    }

    // required uint32 defAttType = 2;
    if (has_defatttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defatttype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DefAttElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DefAttElement*>(&from));
}

void DefAttElement::MergeFrom(const DefAttElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defatt()) {
      set_defatt(from.defatt());
    }
    if (from.has_defatttype()) {
      set_defatttype(from.defatttype());
    }
  }
}

void DefAttElement::CopyFrom(const DefAttElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefAttElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DefAttElement::Swap(DefAttElement* other) {
  if (other != this) {
    std::swap(defatt_, other->defatt_);
    std::swap(defatttype_, other->defatttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DefAttElement::GetTypeName() const {
  return "com.cfg.vo.DefAttElement";
}


// ===================================================================

#ifndef _MSC_VER
const int Movement::kEmergeFieldNumber;
#endif  // !_MSC_VER

Movement::Movement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Movement::InitAsDefaultInstance() {
}

Movement::Movement(const Movement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Movement::SharedCtor() {
  _cached_size_ = 0;
  emerge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Movement::~Movement() {
  SharedDtor();
}

void Movement::SharedDtor() {
  if (emerge_ != &::google::protobuf::internal::kEmptyString) {
    delete emerge_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Movement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Movement& Movement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterCfg_2eproto();
#endif
  return *default_instance_;
}

Movement* Movement::default_instance_ = NULL;

Movement* Movement::New() const {
  return new Movement;
}

void Movement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_emerge()) {
      if (emerge_ != &::google::protobuf::internal::kEmptyString) {
        emerge_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Movement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string emerge = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emerge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Movement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string emerge = 1;
  if (has_emerge()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->emerge(), output);
  }

}

int Movement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string emerge = 1;
    if (has_emerge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emerge());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Movement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Movement*>(&from));
}

void Movement::MergeFrom(const Movement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emerge()) {
      set_emerge(from.emerge());
    }
  }
}

void Movement::CopyFrom(const Movement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Movement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Movement::Swap(Movement* other) {
  if (other != this) {
    std::swap(emerge_, other->emerge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Movement::GetTypeName() const {
  return "com.cfg.vo.Movement";
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterCfg::kIdFieldNumber;
const int MonsterCfg::kMonsternameFieldNumber;
const int MonsterCfg::kDescFieldNumber;
const int MonsterCfg::kAvatarFieldNumber;
const int MonsterCfg::kCampFieldNumber;
const int MonsterCfg::kMonstertypeFieldNumber;
const int MonsterCfg::kLevelFieldNumber;
const int MonsterCfg::kHpFieldNumber;
const int MonsterCfg::kAttackFieldNumber;
const int MonsterCfg::kDefenceFieldNumber;
const int MonsterCfg::kAtktypeFieldNumber;
const int MonsterCfg::kDeftypeFieldNumber;
const int MonsterCfg::kBallisticFieldNumber;
const int MonsterCfg::kSkillsFieldNumber;
const int MonsterCfg::kDropIdFieldNumber;
const int MonsterCfg::kHighSpeedFieldNumber;
const int MonsterCfg::kEmergeVoiceFieldNumber;
const int MonsterCfg::kHurtVoiceFieldNumber;
const int MonsterCfg::kDieVoiceFieldNumber;
const int MonsterCfg::kAiLuaFileFieldNumber;
const int MonsterCfg::kAtkAttFieldNumber;
const int MonsterCfg::kAtkAttTypeFieldNumber;
const int MonsterCfg::kDefAttsFieldNumber;
const int MonsterCfg::kWalkTypeFieldNumber;
const int MonsterCfg::kHurtActionCDFieldNumber;
const int MonsterCfg::kDieAnimationFieldNumber;
const int MonsterCfg::kMinWalkSpeedFieldNumber;
const int MonsterCfg::kMaxWalkSpeedFieldNumber;
const int MonsterCfg::kBubbleIdFieldNumber;
const int MonsterCfg::kHurtAnimationFieldNumber;
const int MonsterCfg::kFloorBuffIdFieldNumber;
const int MonsterCfg::kAiIDFieldNumber;
const int MonsterCfg::kPatrolAreaFieldNumber;
const int MonsterCfg::kHurtColorFieldNumber;
const int MonsterCfg::kInitScaleFieldNumber;
const int MonsterCfg::kIsBlockFieldNumber;
const int MonsterCfg::kActionsFieldNumber;
const int MonsterCfg::kDropCoinFieldNumber;
const int MonsterCfg::kHeadImgFieldNumber;
#endif  // !_MSC_VER

MonsterCfg::MonsterCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MonsterCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actions_ = const_cast< ::com::cfg::vo::Movement*>(
      ::com::cfg::vo::Movement::internal_default_instance());
#else
  actions_ = const_cast< ::com::cfg::vo::Movement*>(&::com::cfg::vo::Movement::default_instance());
#endif
}

MonsterCfg::MonsterCfg(const MonsterCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  camp_ = 0u;
  monstertype_ = 0u;
  level_ = 0u;
  hp_ = GOOGLE_ULONGLONG(0);
  attack_ = 0u;
  defence_ = 0u;
  atktype_ = 0u;
  deftype_ = 0u;
  ballistic_ = 0u;
  dropid_ = 0u;
  highspeed_ = 0u;
  emergevoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hurtvoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dievoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ailuafile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atkatt_ = 0u;
  atkatttype_ = 0u;
  walktype_ = 0u;
  hurtactioncd_ = 0u;
  dieanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minwalkspeed_ = 0u;
  maxwalkspeed_ = 0u;
  bubbleid_ = 0u;
  hurtanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  floorbuffid_ = 0u;
  aiid_ = 0u;
  patrolarea_ = 0u;
  hurtcolor_ = 0u;
  initscale_ = 0u;
  isblock_ = 0u;
  actions_ = NULL;
  dropcoin_ = 0u;
  headimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterCfg::~MonsterCfg() {
  SharedDtor();
}

void MonsterCfg::SharedDtor() {
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (emergevoice_ != &::google::protobuf::internal::kEmptyString) {
    delete emergevoice_;
  }
  if (hurtvoice_ != &::google::protobuf::internal::kEmptyString) {
    delete hurtvoice_;
  }
  if (dievoice_ != &::google::protobuf::internal::kEmptyString) {
    delete dievoice_;
  }
  if (ailuafile_ != &::google::protobuf::internal::kEmptyString) {
    delete ailuafile_;
  }
  if (dieanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete dieanimation_;
  }
  if (hurtanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete hurtanimation_;
  }
  if (headimg_ != &::google::protobuf::internal::kEmptyString) {
    delete headimg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete actions_;
  }
}

void MonsterCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonsterCfg& MonsterCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterCfg_2eproto();
#endif
  return *default_instance_;
}

MonsterCfg* MonsterCfg::default_instance_ = NULL;

MonsterCfg* MonsterCfg::New() const {
  return new MonsterCfg;
}

void MonsterCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_monstername()) {
      if (monstername_ != &::google::protobuf::internal::kEmptyString) {
        monstername_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    camp_ = 0u;
    monstertype_ = 0u;
    level_ = 0u;
    hp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    attack_ = 0u;
    defence_ = 0u;
    atktype_ = 0u;
    deftype_ = 0u;
    ballistic_ = 0u;
    dropid_ = 0u;
    highspeed_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_emergevoice()) {
      if (emergevoice_ != &::google::protobuf::internal::kEmptyString) {
        emergevoice_->clear();
      }
    }
    if (has_hurtvoice()) {
      if (hurtvoice_ != &::google::protobuf::internal::kEmptyString) {
        hurtvoice_->clear();
      }
    }
    if (has_dievoice()) {
      if (dievoice_ != &::google::protobuf::internal::kEmptyString) {
        dievoice_->clear();
      }
    }
    if (has_ailuafile()) {
      if (ailuafile_ != &::google::protobuf::internal::kEmptyString) {
        ailuafile_->clear();
      }
    }
    atkatt_ = 0u;
    atkatttype_ = 0u;
    walktype_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    hurtactioncd_ = 0u;
    if (has_dieanimation()) {
      if (dieanimation_ != &::google::protobuf::internal::kEmptyString) {
        dieanimation_->clear();
      }
    }
    minwalkspeed_ = 0u;
    maxwalkspeed_ = 0u;
    bubbleid_ = 0u;
    if (has_hurtanimation()) {
      if (hurtanimation_ != &::google::protobuf::internal::kEmptyString) {
        hurtanimation_->clear();
      }
    }
    floorbuffid_ = 0u;
    aiid_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    patrolarea_ = 0u;
    hurtcolor_ = 0u;
    initscale_ = 0u;
    isblock_ = 0u;
    if (has_actions()) {
      if (actions_ != NULL) actions_->::com::cfg::vo::Movement::Clear();
    }
    dropcoin_ = 0u;
    if (has_headimg()) {
      if (headimg_ != &::google::protobuf::internal::kEmptyString) {
        headimg_->clear();
      }
    }
  }
  skills_.Clear();
  defatts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MonsterCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monstername;
        break;
      }

      // required string monstername = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monstername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // required string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_avatar;
        break;
      }

      // required string avatar = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_camp;
        break;
      }

      // required uint32 camp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_camp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camp_)));
          set_has_camp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monstertype;
        break;
      }

      // required uint32 monstertype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monstertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monstertype_)));
          set_has_monstertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // required uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hp;
        break;
      }

      // required uint64 hp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_attack;
        break;
      }

      // required uint32 attack = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_defence;
        break;
      }

      // required uint32 defence = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defence_)));
          set_has_defence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_atktype;
        break;
      }

      // required uint32 atktype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atktype_)));
          set_has_atktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_deftype;
        break;
      }

      // required uint32 deftype = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deftype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ballistic;
        break;
      }

      // required uint32 ballistic = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballistic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ballistic_)));
          set_has_ballistic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_skills;
        break;
      }

      // repeated uint32 skills = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 112, input, this->mutable_skills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_skills;
        if (input->ExpectTag(120)) goto parse_dropId;
        break;
      }

      // required uint32 dropId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_highSpeed;
        break;
      }

      // required uint32 highSpeed = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highspeed_)));
          set_has_highspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_emergeVoice;
        break;
      }

      // required string emergeVoice = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emergeVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emergevoice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_hurtVoice;
        break;
      }

      // required string hurtVoice = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurtVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hurtvoice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_dieVoice;
        break;
      }

      // required string dieVoice = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dieVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dievoice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_aiLuaFile;
        break;
      }

      // required string aiLuaFile = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aiLuaFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ailuafile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_atkAtt;
        break;
      }

      // required uint32 atkAtt = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkatt_)));
          set_has_atkatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_atkAttType;
        break;
      }

      // required uint32 atkAttType = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkAttType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkatttype_)));
          set_has_atkatttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_defAtts;
        break;
      }

      // repeated .com.cfg.vo.DefAttElement defAtts = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defAtts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defatts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_defAtts;
        if (input->ExpectTag(200)) goto parse_walkType;
        break;
      }

      // required uint32 walkType = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_walkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &walktype_)));
          set_has_walktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hurtActionCD;
        break;
      }

      // required uint32 hurtActionCD = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtActionCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtactioncd_)));
          set_has_hurtactioncd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_dieAnimation;
        break;
      }

      // required string dieAnimation = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dieAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dieanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_minWalkSpeed;
        break;
      }

      // required uint32 minWalkSpeed = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minwalkspeed_)));
          set_has_minwalkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_maxWalkSpeed;
        break;
      }

      // required uint32 maxWalkSpeed = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwalkspeed_)));
          set_has_maxwalkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_bubbleId;
        break;
      }

      // required uint32 bubbleId = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bubbleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bubbleid_)));
          set_has_bubbleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_hurtAnimation;
        break;
      }

      // required string hurtAnimation = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurtAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hurtanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_floorBuffId;
        break;
      }

      // required uint32 floorBuffId = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floorBuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floorbuffid_)));
          set_has_floorbuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_aiID;
        break;
      }

      // required uint32 aiID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_patrolArea;
        break;
      }

      // required uint32 patrolArea = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patrolArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrolarea_)));
          set_has_patrolarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_HurtColor;
        break;
      }

      // required uint32 HurtColor = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtcolor_)));
          set_has_hurtcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_InitScale;
        break;
      }

      // required uint32 InitScale = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initscale_)));
          set_has_initscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_IsBlock;
        break;
      }

      // required uint32 IsBlock = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isblock_)));
          set_has_isblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_actions;
        break;
      }

      // required .com.cfg.vo.Movement actions = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_dropCoin;
        break;
      }

      // required uint32 dropCoin = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropcoin_)));
          set_has_dropcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_headImg;
        break;
      }

      // required string headImg = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string monstername = 2;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->monstername(), output);
  }

  // required string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required string avatar = 4;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->avatar(), output);
  }

  // required uint32 camp = 5;
  if (has_camp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->camp(), output);
  }

  // required uint32 monstertype = 6;
  if (has_monstertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->monstertype(), output);
  }

  // required uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // required uint64 hp = 8;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->hp(), output);
  }

  // required uint32 attack = 9;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->attack(), output);
  }

  // required uint32 defence = 10;
  if (has_defence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->defence(), output);
  }

  // required uint32 atktype = 11;
  if (has_atktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->atktype(), output);
  }

  // required uint32 deftype = 12;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->deftype(), output);
  }

  // required uint32 ballistic = 13;
  if (has_ballistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->ballistic(), output);
  }

  // repeated uint32 skills = 14;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      14, this->skills(i), output);
  }

  // required uint32 dropId = 15;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->dropid(), output);
  }

  // required uint32 highSpeed = 17;
  if (has_highspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->highspeed(), output);
  }

  // required string emergeVoice = 18;
  if (has_emergevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->emergevoice(), output);
  }

  // required string hurtVoice = 19;
  if (has_hurtvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->hurtvoice(), output);
  }

  // required string dieVoice = 20;
  if (has_dievoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->dievoice(), output);
  }

  // required string aiLuaFile = 21;
  if (has_ailuafile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->ailuafile(), output);
  }

  // required uint32 atkAtt = 22;
  if (has_atkatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->atkatt(), output);
  }

  // required uint32 atkAttType = 23;
  if (has_atkatttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->atkatttype(), output);
  }

  // repeated .com.cfg.vo.DefAttElement defAtts = 24;
  for (int i = 0; i < this->defatts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      24, this->defatts(i), output);
  }

  // required uint32 walkType = 25;
  if (has_walktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->walktype(), output);
  }

  // required uint32 hurtActionCD = 26;
  if (has_hurtactioncd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->hurtactioncd(), output);
  }

  // required string dieAnimation = 27;
  if (has_dieanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->dieanimation(), output);
  }

  // required uint32 minWalkSpeed = 28;
  if (has_minwalkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->minwalkspeed(), output);
  }

  // required uint32 maxWalkSpeed = 29;
  if (has_maxwalkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->maxwalkspeed(), output);
  }

  // required uint32 bubbleId = 30;
  if (has_bubbleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->bubbleid(), output);
  }

  // required string hurtAnimation = 31;
  if (has_hurtanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->hurtanimation(), output);
  }

  // required uint32 floorBuffId = 32;
  if (has_floorbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->floorbuffid(), output);
  }

  // required uint32 aiID = 33;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->aiid(), output);
  }

  // required uint32 patrolArea = 34;
  if (has_patrolarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->patrolarea(), output);
  }

  // required uint32 HurtColor = 35;
  if (has_hurtcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->hurtcolor(), output);
  }

  // required uint32 InitScale = 36;
  if (has_initscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->initscale(), output);
  }

  // required uint32 IsBlock = 37;
  if (has_isblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->isblock(), output);
  }

  // required .com.cfg.vo.Movement actions = 38;
  if (has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      38, this->actions(), output);
  }

  // required uint32 dropCoin = 39;
  if (has_dropcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->dropcoin(), output);
  }

  // required string headImg = 40;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->headimg(), output);
  }

}

int MonsterCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string monstername = 2;
    if (has_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monstername());
    }

    // required string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string avatar = 4;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // required uint32 camp = 5;
    if (has_camp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camp());
    }

    // required uint32 monstertype = 6;
    if (has_monstertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monstertype());
    }

    // required uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint64 hp = 8;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 attack = 9;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attack());
    }

    // required uint32 defence = 10;
    if (has_defence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defence());
    }

    // required uint32 atktype = 11;
    if (has_atktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atktype());
    }

    // required uint32 deftype = 12;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // required uint32 ballistic = 13;
    if (has_ballistic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ballistic());
    }

    // required uint32 dropId = 15;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }

    // required uint32 highSpeed = 17;
    if (has_highspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highspeed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string emergeVoice = 18;
    if (has_emergevoice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emergevoice());
    }

    // required string hurtVoice = 19;
    if (has_hurtvoice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hurtvoice());
    }

    // required string dieVoice = 20;
    if (has_dievoice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dievoice());
    }

    // required string aiLuaFile = 21;
    if (has_ailuafile()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ailuafile());
    }

    // required uint32 atkAtt = 22;
    if (has_atkatt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkatt());
    }

    // required uint32 atkAttType = 23;
    if (has_atkatttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkatttype());
    }

    // required uint32 walkType = 25;
    if (has_walktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->walktype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 hurtActionCD = 26;
    if (has_hurtactioncd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtactioncd());
    }

    // required string dieAnimation = 27;
    if (has_dieanimation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dieanimation());
    }

    // required uint32 minWalkSpeed = 28;
    if (has_minwalkspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minwalkspeed());
    }

    // required uint32 maxWalkSpeed = 29;
    if (has_maxwalkspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwalkspeed());
    }

    // required uint32 bubbleId = 30;
    if (has_bubbleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bubbleid());
    }

    // required string hurtAnimation = 31;
    if (has_hurtanimation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hurtanimation());
    }

    // required uint32 floorBuffId = 32;
    if (has_floorbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floorbuffid());
    }

    // required uint32 aiID = 33;
    if (has_aiid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aiid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 patrolArea = 34;
    if (has_patrolarea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrolarea());
    }

    // required uint32 HurtColor = 35;
    if (has_hurtcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtcolor());
    }

    // required uint32 InitScale = 36;
    if (has_initscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initscale());
    }

    // required uint32 IsBlock = 37;
    if (has_isblock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isblock());
    }

    // required .com.cfg.vo.Movement actions = 38;
    if (has_actions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions());
    }

    // required uint32 dropCoin = 39;
    if (has_dropcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropcoin());
    }

    // required string headImg = 40;
    if (has_headimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimg());
    }

  }
  // repeated uint32 skills = 14;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skills(i));
    }
    total_size += 1 * this->skills_size() + data_size;
  }

  // repeated .com.cfg.vo.DefAttElement defAtts = 24;
  total_size += 2 * this->defatts_size();
  for (int i = 0; i < this->defatts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defatts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonsterCfg*>(&from));
}

void MonsterCfg::MergeFrom(const MonsterCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  defatts_.MergeFrom(from.defatts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_monstername()) {
      set_monstername(from.monstername());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_camp()) {
      set_camp(from.camp());
    }
    if (from.has_monstertype()) {
      set_monstertype(from.monstertype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_attack()) {
      set_attack(from.attack());
    }
    if (from.has_defence()) {
      set_defence(from.defence());
    }
    if (from.has_atktype()) {
      set_atktype(from.atktype());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_ballistic()) {
      set_ballistic(from.ballistic());
    }
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
    if (from.has_highspeed()) {
      set_highspeed(from.highspeed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_emergevoice()) {
      set_emergevoice(from.emergevoice());
    }
    if (from.has_hurtvoice()) {
      set_hurtvoice(from.hurtvoice());
    }
    if (from.has_dievoice()) {
      set_dievoice(from.dievoice());
    }
    if (from.has_ailuafile()) {
      set_ailuafile(from.ailuafile());
    }
    if (from.has_atkatt()) {
      set_atkatt(from.atkatt());
    }
    if (from.has_atkatttype()) {
      set_atkatttype(from.atkatttype());
    }
    if (from.has_walktype()) {
      set_walktype(from.walktype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hurtactioncd()) {
      set_hurtactioncd(from.hurtactioncd());
    }
    if (from.has_dieanimation()) {
      set_dieanimation(from.dieanimation());
    }
    if (from.has_minwalkspeed()) {
      set_minwalkspeed(from.minwalkspeed());
    }
    if (from.has_maxwalkspeed()) {
      set_maxwalkspeed(from.maxwalkspeed());
    }
    if (from.has_bubbleid()) {
      set_bubbleid(from.bubbleid());
    }
    if (from.has_hurtanimation()) {
      set_hurtanimation(from.hurtanimation());
    }
    if (from.has_floorbuffid()) {
      set_floorbuffid(from.floorbuffid());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_patrolarea()) {
      set_patrolarea(from.patrolarea());
    }
    if (from.has_hurtcolor()) {
      set_hurtcolor(from.hurtcolor());
    }
    if (from.has_initscale()) {
      set_initscale(from.initscale());
    }
    if (from.has_isblock()) {
      set_isblock(from.isblock());
    }
    if (from.has_actions()) {
      mutable_actions()->::com::cfg::vo::Movement::MergeFrom(from.actions());
    }
    if (from.has_dropcoin()) {
      set_dropcoin(from.dropcoin());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
  }
}

void MonsterCfg::CopyFrom(const MonsterCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0xffbfdfff) != 0xffbfdfff) return false;
  if ((_has_bits_[1] & 0x0000007f) != 0x0000007f) return false;

  for (int i = 0; i < defatts_size(); i++) {
    if (!this->defatts(i).IsInitialized()) return false;
  }
  if (has_actions()) {
    if (!this->actions().IsInitialized()) return false;
  }
  return true;
}

void MonsterCfg::Swap(MonsterCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(monstername_, other->monstername_);
    std::swap(desc_, other->desc_);
    std::swap(avatar_, other->avatar_);
    std::swap(camp_, other->camp_);
    std::swap(monstertype_, other->monstertype_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(attack_, other->attack_);
    std::swap(defence_, other->defence_);
    std::swap(atktype_, other->atktype_);
    std::swap(deftype_, other->deftype_);
    std::swap(ballistic_, other->ballistic_);
    skills_.Swap(&other->skills_);
    std::swap(dropid_, other->dropid_);
    std::swap(highspeed_, other->highspeed_);
    std::swap(emergevoice_, other->emergevoice_);
    std::swap(hurtvoice_, other->hurtvoice_);
    std::swap(dievoice_, other->dievoice_);
    std::swap(ailuafile_, other->ailuafile_);
    std::swap(atkatt_, other->atkatt_);
    std::swap(atkatttype_, other->atkatttype_);
    defatts_.Swap(&other->defatts_);
    std::swap(walktype_, other->walktype_);
    std::swap(hurtactioncd_, other->hurtactioncd_);
    std::swap(dieanimation_, other->dieanimation_);
    std::swap(minwalkspeed_, other->minwalkspeed_);
    std::swap(maxwalkspeed_, other->maxwalkspeed_);
    std::swap(bubbleid_, other->bubbleid_);
    std::swap(hurtanimation_, other->hurtanimation_);
    std::swap(floorbuffid_, other->floorbuffid_);
    std::swap(aiid_, other->aiid_);
    std::swap(patrolarea_, other->patrolarea_);
    std::swap(hurtcolor_, other->hurtcolor_);
    std::swap(initscale_, other->initscale_);
    std::swap(isblock_, other->isblock_);
    std::swap(actions_, other->actions_);
    std::swap(dropcoin_, other->dropcoin_);
    std::swap(headimg_, other->headimg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonsterCfg::GetTypeName() const {
  return "com.cfg.vo.MonsterCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterCfgSet::kMonstercfgFieldNumber;
#endif  // !_MSC_VER

MonsterCfgSet::MonsterCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MonsterCfgSet::InitAsDefaultInstance() {
}

MonsterCfgSet::MonsterCfgSet(const MonsterCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterCfgSet::~MonsterCfgSet() {
  SharedDtor();
}

void MonsterCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MonsterCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonsterCfgSet& MonsterCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MonsterCfg_2eproto();
#endif
  return *default_instance_;
}

MonsterCfgSet* MonsterCfgSet::default_instance_ = NULL;

MonsterCfgSet* MonsterCfgSet::New() const {
  return new MonsterCfgSet;
}

void MonsterCfgSet::Clear() {
  monstercfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MonsterCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.MonsterCfg monstercfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstercfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monstercfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monstercfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.MonsterCfg monstercfg = 1;
  for (int i = 0; i < this->monstercfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->monstercfg(i), output);
  }

}

int MonsterCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.MonsterCfg monstercfg = 1;
  total_size += 1 * this->monstercfg_size();
  for (int i = 0; i < this->monstercfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monstercfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonsterCfgSet*>(&from));
}

void MonsterCfgSet::MergeFrom(const MonsterCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  monstercfg_.MergeFrom(from.monstercfg_);
}

void MonsterCfgSet::CopyFrom(const MonsterCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterCfgSet::IsInitialized() const {

  for (int i = 0; i < monstercfg_size(); i++) {
    if (!this->monstercfg(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterCfgSet::Swap(MonsterCfgSet* other) {
  if (other != this) {
    monstercfg_.Swap(&other->monstercfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MonsterCfgSet::GetTypeName() const {
  return "com.cfg.vo.MonsterCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
