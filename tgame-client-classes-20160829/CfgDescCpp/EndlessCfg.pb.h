// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EndlessCfg.proto

#ifndef PROTOBUF_EndlessCfg_2eproto__INCLUDED
#define PROTOBUF_EndlessCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_EndlessCfg_2eproto();
void protobuf_AssignDesc_EndlessCfg_2eproto();
void protobuf_ShutdownFile_EndlessCfg_2eproto();

class Round;
class EndlessCfg;
class EndlessCfgSet;

// ===================================================================

class Round : public ::google::protobuf::MessageLite {
 public:
  Round();
  virtual ~Round();

  Round(const Round& from);

  inline Round& operator=(const Round& from) {
    CopyFrom(from);
    return *this;
  }

  static const Round& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Round* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Round* other);

  // implements Message ----------------------------------------------

  Round* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Round& from);
  void MergeFrom(const Round& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // required uint32 Time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // required uint32 ExtraType = 3;
  inline bool has_extratype() const;
  inline void clear_extratype();
  static const int kExtraTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 extratype() const;
  inline void set_extratype(::google::protobuf::uint32 value);

  // required uint32 ExtraNum = 4;
  inline bool has_extranum() const;
  inline void clear_extranum();
  static const int kExtraNumFieldNumber = 4;
  inline ::google::protobuf::uint32 extranum() const;
  inline void set_extranum(::google::protobuf::uint32 value);

  // required uint32 ExtraProb = 5;
  inline bool has_extraprob() const;
  inline void clear_extraprob();
  static const int kExtraProbFieldNumber = 5;
  inline ::google::protobuf::uint32 extraprob() const;
  inline void set_extraprob(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.Round)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_extratype();
  inline void clear_has_extratype();
  inline void set_has_extranum();
  inline void clear_has_extranum();
  inline void set_has_extraprob();
  inline void clear_has_extraprob();

  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 extratype_;
  ::google::protobuf::uint32 extranum_;
  ::google::protobuf::uint32 extraprob_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EndlessCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EndlessCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EndlessCfg_2eproto();
  friend void protobuf_ShutdownFile_EndlessCfg_2eproto();

  void InitAsDefaultInstance();
  static Round* default_instance_;
};
// -------------------------------------------------------------------

class EndlessCfg : public ::google::protobuf::MessageLite {
 public:
  EndlessCfg();
  virtual ~EndlessCfg();

  EndlessCfg(const EndlessCfg& from);

  inline EndlessCfg& operator=(const EndlessCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const EndlessCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EndlessCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EndlessCfg* other);

  // implements Message ----------------------------------------------

  EndlessCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EndlessCfg& from);
  void MergeFrom(const EndlessCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 AddLev = 3;
  inline bool has_addlev() const;
  inline void clear_addlev();
  static const int kAddLevFieldNumber = 3;
  inline ::google::protobuf::uint32 addlev() const;
  inline void set_addlev(::google::protobuf::uint32 value);

  // repeated .com.cfg.vo.Round RoundInfo = 4;
  inline int roundinfo_size() const;
  inline void clear_roundinfo();
  static const int kRoundInfoFieldNumber = 4;
  inline const ::com::cfg::vo::Round& roundinfo(int index) const;
  inline ::com::cfg::vo::Round* mutable_roundinfo(int index);
  inline ::com::cfg::vo::Round* add_roundinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::Round >&
      roundinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::Round >*
      mutable_roundinfo();

  // required uint32 LimitNum = 5;
  inline bool has_limitnum() const;
  inline void clear_limitnum();
  static const int kLimitNumFieldNumber = 5;
  inline ::google::protobuf::uint32 limitnum() const;
  inline void set_limitnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.EndlessCfg)
 private:
  inline void set_has_addlev();
  inline void clear_has_addlev();
  inline void set_has_limitnum();
  inline void clear_has_limitnum();

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::Round > roundinfo_;
  ::google::protobuf::uint32 addlev_;
  ::google::protobuf::uint32 limitnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EndlessCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EndlessCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EndlessCfg_2eproto();
  friend void protobuf_ShutdownFile_EndlessCfg_2eproto();

  void InitAsDefaultInstance();
  static EndlessCfg* default_instance_;
};
// -------------------------------------------------------------------

class EndlessCfgSet : public ::google::protobuf::MessageLite {
 public:
  EndlessCfgSet();
  virtual ~EndlessCfgSet();

  EndlessCfgSet(const EndlessCfgSet& from);

  inline EndlessCfgSet& operator=(const EndlessCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const EndlessCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const EndlessCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(EndlessCfgSet* other);

  // implements Message ----------------------------------------------

  EndlessCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const EndlessCfgSet& from);
  void MergeFrom(const EndlessCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.EndlessCfg endlessCfg = 1;
  inline int endlesscfg_size() const;
  inline void clear_endlesscfg();
  static const int kEndlessCfgFieldNumber = 1;
  inline const ::com::cfg::vo::EndlessCfg& endlesscfg(int index) const;
  inline ::com::cfg::vo::EndlessCfg* mutable_endlesscfg(int index);
  inline ::com::cfg::vo::EndlessCfg* add_endlesscfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EndlessCfg >&
      endlesscfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EndlessCfg >*
      mutable_endlesscfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.EndlessCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EndlessCfg > endlesscfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_EndlessCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_EndlessCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_EndlessCfg_2eproto();
  friend void protobuf_ShutdownFile_EndlessCfg_2eproto();

  void InitAsDefaultInstance();
  static EndlessCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// Round

// required uint32 Num = 1;
inline bool Round::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Round::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Round::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Round::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 Round::num() const {
  return num_;
}
inline void Round::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// required uint32 Time = 2;
inline bool Round::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Round::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Round::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Round::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 Round::time() const {
  return time_;
}
inline void Round::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// required uint32 ExtraType = 3;
inline bool Round::has_extratype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Round::set_has_extratype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Round::clear_has_extratype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Round::clear_extratype() {
  extratype_ = 0u;
  clear_has_extratype();
}
inline ::google::protobuf::uint32 Round::extratype() const {
  return extratype_;
}
inline void Round::set_extratype(::google::protobuf::uint32 value) {
  set_has_extratype();
  extratype_ = value;
}

// required uint32 ExtraNum = 4;
inline bool Round::has_extranum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Round::set_has_extranum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Round::clear_has_extranum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Round::clear_extranum() {
  extranum_ = 0u;
  clear_has_extranum();
}
inline ::google::protobuf::uint32 Round::extranum() const {
  return extranum_;
}
inline void Round::set_extranum(::google::protobuf::uint32 value) {
  set_has_extranum();
  extranum_ = value;
}

// required uint32 ExtraProb = 5;
inline bool Round::has_extraprob() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Round::set_has_extraprob() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Round::clear_has_extraprob() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Round::clear_extraprob() {
  extraprob_ = 0u;
  clear_has_extraprob();
}
inline ::google::protobuf::uint32 Round::extraprob() const {
  return extraprob_;
}
inline void Round::set_extraprob(::google::protobuf::uint32 value) {
  set_has_extraprob();
  extraprob_ = value;
}

// -------------------------------------------------------------------

// EndlessCfg

// required uint32 AddLev = 3;
inline bool EndlessCfg::has_addlev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndlessCfg::set_has_addlev() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndlessCfg::clear_has_addlev() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndlessCfg::clear_addlev() {
  addlev_ = 0u;
  clear_has_addlev();
}
inline ::google::protobuf::uint32 EndlessCfg::addlev() const {
  return addlev_;
}
inline void EndlessCfg::set_addlev(::google::protobuf::uint32 value) {
  set_has_addlev();
  addlev_ = value;
}

// repeated .com.cfg.vo.Round RoundInfo = 4;
inline int EndlessCfg::roundinfo_size() const {
  return roundinfo_.size();
}
inline void EndlessCfg::clear_roundinfo() {
  roundinfo_.Clear();
}
inline const ::com::cfg::vo::Round& EndlessCfg::roundinfo(int index) const {
  return roundinfo_.Get(index);
}
inline ::com::cfg::vo::Round* EndlessCfg::mutable_roundinfo(int index) {
  return roundinfo_.Mutable(index);
}
inline ::com::cfg::vo::Round* EndlessCfg::add_roundinfo() {
  return roundinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::Round >&
EndlessCfg::roundinfo() const {
  return roundinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::Round >*
EndlessCfg::mutable_roundinfo() {
  return &roundinfo_;
}

// required uint32 LimitNum = 5;
inline bool EndlessCfg::has_limitnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndlessCfg::set_has_limitnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndlessCfg::clear_has_limitnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndlessCfg::clear_limitnum() {
  limitnum_ = 0u;
  clear_has_limitnum();
}
inline ::google::protobuf::uint32 EndlessCfg::limitnum() const {
  return limitnum_;
}
inline void EndlessCfg::set_limitnum(::google::protobuf::uint32 value) {
  set_has_limitnum();
  limitnum_ = value;
}

// -------------------------------------------------------------------

// EndlessCfgSet

// repeated .com.cfg.vo.EndlessCfg endlessCfg = 1;
inline int EndlessCfgSet::endlesscfg_size() const {
  return endlesscfg_.size();
}
inline void EndlessCfgSet::clear_endlesscfg() {
  endlesscfg_.Clear();
}
inline const ::com::cfg::vo::EndlessCfg& EndlessCfgSet::endlesscfg(int index) const {
  return endlesscfg_.Get(index);
}
inline ::com::cfg::vo::EndlessCfg* EndlessCfgSet::mutable_endlesscfg(int index) {
  return endlesscfg_.Mutable(index);
}
inline ::com::cfg::vo::EndlessCfg* EndlessCfgSet::add_endlesscfg() {
  return endlesscfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EndlessCfg >&
EndlessCfgSet::endlesscfg() const {
  return endlesscfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::EndlessCfg >*
EndlessCfgSet::mutable_endlesscfg() {
  return &endlesscfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_EndlessCfg_2eproto__INCLUDED
