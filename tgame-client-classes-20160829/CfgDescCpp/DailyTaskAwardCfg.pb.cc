// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyTaskAwardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DailyTaskAwardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DailyTaskAwardCfg_2eproto() {
  delete DailyTaskAward::default_instance_;
  delete DailyTaskAwardCfg::default_instance_;
  delete DailyTaskAwardCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DailyTaskAwardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DailyTaskAwardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DailyTaskAward::default_instance_ = new DailyTaskAward();
  DailyTaskAwardCfg::default_instance_ = new DailyTaskAwardCfg();
  DailyTaskAwardCfgSet::default_instance_ = new DailyTaskAwardCfgSet();
  DailyTaskAward::default_instance_->InitAsDefaultInstance();
  DailyTaskAwardCfg::default_instance_->InitAsDefaultInstance();
  DailyTaskAwardCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DailyTaskAwardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DailyTaskAwardCfg_2eproto_once_);
void protobuf_AddDesc_DailyTaskAwardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DailyTaskAwardCfg_2eproto_once_,
                 &protobuf_AddDesc_DailyTaskAwardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DailyTaskAwardCfg_2eproto {
  StaticDescriptorInitializer_DailyTaskAwardCfg_2eproto() {
    protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
  }
} static_descriptor_initializer_DailyTaskAwardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DailyTaskAward::kCoinFieldNumber;
const int DailyTaskAward::kExpFieldNumber;
const int DailyTaskAward::kGoldFieldNumber;
const int DailyTaskAward::kAwardTypeFieldNumber;
const int DailyTaskAward::kAwardCfgIDFieldNumber;
const int DailyTaskAward::kAwardCntFieldNumber;
#endif  // !_MSC_VER

DailyTaskAward::DailyTaskAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyTaskAward::InitAsDefaultInstance() {
}

DailyTaskAward::DailyTaskAward(const DailyTaskAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskAward::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  awardtype_ = 0u;
  awardcfgid_ = 0u;
  awardcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskAward::~DailyTaskAward() {
  SharedDtor();
}

void DailyTaskAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyTaskAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyTaskAward& DailyTaskAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
#endif
  return *default_instance_;
}

DailyTaskAward* DailyTaskAward::default_instance_ = NULL;

DailyTaskAward* DailyTaskAward::New() const {
  return new DailyTaskAward;
}

void DailyTaskAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    exp_ = 0u;
    gold_ = 0u;
    awardtype_ = 0u;
    awardcfgid_ = 0u;
    awardcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyTaskAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // required uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Gold;
        break;
      }

      // required uint32 Gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardType;
        break;
      }

      // required uint32 AwardType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AwardCfgID;
        break;
      }

      // required uint32 AwardCfgID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcfgid_)));
          set_has_awardcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AwardCnt;
        break;
      }

      // required uint32 AwardCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcnt_)));
          set_has_awardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // required uint32 Gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold(), output);
  }

  // required uint32 AwardType = 4;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->awardtype(), output);
  }

  // required uint32 AwardCfgID = 5;
  if (has_awardcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->awardcfgid(), output);
  }

  // required uint32 AwardCnt = 6;
  if (has_awardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->awardcnt(), output);
  }

}

int DailyTaskAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 Gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 AwardType = 4;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // required uint32 AwardCfgID = 5;
    if (has_awardcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcfgid());
    }

    // required uint32 AwardCnt = 6;
    if (has_awardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyTaskAward*>(&from));
}

void DailyTaskAward::MergeFrom(const DailyTaskAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardcfgid()) {
      set_awardcfgid(from.awardcfgid());
    }
    if (from.has_awardcnt()) {
      set_awardcnt(from.awardcnt());
    }
  }
}

void DailyTaskAward::CopyFrom(const DailyTaskAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DailyTaskAward::Swap(DailyTaskAward* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardcfgid_, other->awardcfgid_);
    std::swap(awardcnt_, other->awardcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyTaskAward::GetTypeName() const {
  return "com.cfg.vo.DailyTaskAward";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskAwardCfg::kStartLvFieldNumber;
const int DailyTaskAwardCfg::kEndLvFieldNumber;
const int DailyTaskAwardCfg::kMainAwardTypeFieldNumber;
const int DailyTaskAwardCfg::kAwardFieldNumber;
#endif  // !_MSC_VER

DailyTaskAwardCfg::DailyTaskAwardCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyTaskAwardCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  award_ = const_cast< ::com::cfg::vo::DailyTaskAward*>(
      ::com::cfg::vo::DailyTaskAward::internal_default_instance());
#else
  award_ = const_cast< ::com::cfg::vo::DailyTaskAward*>(&::com::cfg::vo::DailyTaskAward::default_instance());
#endif
}

DailyTaskAwardCfg::DailyTaskAwardCfg(const DailyTaskAwardCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskAwardCfg::SharedCtor() {
  _cached_size_ = 0;
  startlv_ = 0u;
  endlv_ = 0u;
  mainawardtype_ = 0u;
  award_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskAwardCfg::~DailyTaskAwardCfg() {
  SharedDtor();
}

void DailyTaskAwardCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete award_;
  }
}

void DailyTaskAwardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyTaskAwardCfg& DailyTaskAwardCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
#endif
  return *default_instance_;
}

DailyTaskAwardCfg* DailyTaskAwardCfg::default_instance_ = NULL;

DailyTaskAwardCfg* DailyTaskAwardCfg::New() const {
  return new DailyTaskAwardCfg;
}

void DailyTaskAwardCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    startlv_ = 0u;
    endlv_ = 0u;
    mainawardtype_ = 0u;
    if (has_award()) {
      if (award_ != NULL) award_->::com::cfg::vo::DailyTaskAward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyTaskAwardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StartLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startlv_)));
          set_has_startlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EndLv;
        break;
      }

      // required uint32 EndLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endlv_)));
          set_has_endlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_MainAwardType;
        break;
      }

      // required uint32 MainAwardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MainAwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainawardtype_)));
          set_has_mainawardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Award;
        break;
      }

      // required .com.cfg.vo.DailyTaskAward Award = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskAwardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StartLv = 1;
  if (has_startlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->startlv(), output);
  }

  // required uint32 EndLv = 2;
  if (has_endlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->endlv(), output);
  }

  // required uint32 MainAwardType = 3;
  if (has_mainawardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mainawardtype(), output);
  }

  // required .com.cfg.vo.DailyTaskAward Award = 4;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->award(), output);
  }

}

int DailyTaskAwardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StartLv = 1;
    if (has_startlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startlv());
    }

    // required uint32 EndLv = 2;
    if (has_endlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endlv());
    }

    // required uint32 MainAwardType = 3;
    if (has_mainawardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mainawardtype());
    }

    // required .com.cfg.vo.DailyTaskAward Award = 4;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskAwardCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyTaskAwardCfg*>(&from));
}

void DailyTaskAwardCfg::MergeFrom(const DailyTaskAwardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_startlv()) {
      set_startlv(from.startlv());
    }
    if (from.has_endlv()) {
      set_endlv(from.endlv());
    }
    if (from.has_mainawardtype()) {
      set_mainawardtype(from.mainawardtype());
    }
    if (from.has_award()) {
      mutable_award()->::com::cfg::vo::DailyTaskAward::MergeFrom(from.award());
    }
  }
}

void DailyTaskAwardCfg::CopyFrom(const DailyTaskAwardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskAwardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_award()) {
    if (!this->award().IsInitialized()) return false;
  }
  return true;
}

void DailyTaskAwardCfg::Swap(DailyTaskAwardCfg* other) {
  if (other != this) {
    std::swap(startlv_, other->startlv_);
    std::swap(endlv_, other->endlv_);
    std::swap(mainawardtype_, other->mainawardtype_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyTaskAwardCfg::GetTypeName() const {
  return "com.cfg.vo.DailyTaskAwardCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskAwardCfgSet::kDailytaskawardcfgFieldNumber;
#endif  // !_MSC_VER

DailyTaskAwardCfgSet::DailyTaskAwardCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyTaskAwardCfgSet::InitAsDefaultInstance() {
}

DailyTaskAwardCfgSet::DailyTaskAwardCfgSet(const DailyTaskAwardCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskAwardCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskAwardCfgSet::~DailyTaskAwardCfgSet() {
  SharedDtor();
}

void DailyTaskAwardCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyTaskAwardCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyTaskAwardCfgSet& DailyTaskAwardCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskAwardCfg_2eproto();
#endif
  return *default_instance_;
}

DailyTaskAwardCfgSet* DailyTaskAwardCfgSet::default_instance_ = NULL;

DailyTaskAwardCfgSet* DailyTaskAwardCfgSet::New() const {
  return new DailyTaskAwardCfgSet;
}

void DailyTaskAwardCfgSet::Clear() {
  dailytaskawardcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyTaskAwardCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DailyTaskAwardCfg dailytaskawardcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailytaskawardcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailytaskawardcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailytaskawardcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskAwardCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DailyTaskAwardCfg dailytaskawardcfg = 1;
  for (int i = 0; i < this->dailytaskawardcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dailytaskawardcfg(i), output);
  }

}

int DailyTaskAwardCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DailyTaskAwardCfg dailytaskawardcfg = 1;
  total_size += 1 * this->dailytaskawardcfg_size();
  for (int i = 0; i < this->dailytaskawardcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailytaskawardcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskAwardCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyTaskAwardCfgSet*>(&from));
}

void DailyTaskAwardCfgSet::MergeFrom(const DailyTaskAwardCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailytaskawardcfg_.MergeFrom(from.dailytaskawardcfg_);
}

void DailyTaskAwardCfgSet::CopyFrom(const DailyTaskAwardCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskAwardCfgSet::IsInitialized() const {

  for (int i = 0; i < dailytaskawardcfg_size(); i++) {
    if (!this->dailytaskawardcfg(i).IsInitialized()) return false;
  }
  return true;
}

void DailyTaskAwardCfgSet::Swap(DailyTaskAwardCfgSet* other) {
  if (other != this) {
    dailytaskawardcfg_.Swap(&other->dailytaskawardcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyTaskAwardCfgSet::GetTypeName() const {
  return "com.cfg.vo.DailyTaskAwardCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
