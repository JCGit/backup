// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponTypeCfg.proto

#ifndef PROTOBUF_WeaponTypeCfg_2eproto__INCLUDED
#define PROTOBUF_WeaponTypeCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WeaponTypeCfg_2eproto();
void protobuf_AssignDesc_WeaponTypeCfg_2eproto();
void protobuf_ShutdownFile_WeaponTypeCfg_2eproto();

class WeaponTypeCfg;
class WeaponTypeCfgSet;

// ===================================================================

class WeaponTypeCfg : public ::google::protobuf::MessageLite {
 public:
  WeaponTypeCfg();
  virtual ~WeaponTypeCfg();

  WeaponTypeCfg(const WeaponTypeCfg& from);

  inline WeaponTypeCfg& operator=(const WeaponTypeCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const WeaponTypeCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WeaponTypeCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WeaponTypeCfg* other);

  // implements Message ----------------------------------------------

  WeaponTypeCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WeaponTypeCfg& from);
  void MergeFrom(const WeaponTypeCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required string Desc = 2;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 2;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // required string Icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.WeaponTypeCfg)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_desc();
  inline void clear_has_desc();
  inline void set_has_icon();
  inline void clear_has_icon();

  ::std::string* desc_;
  ::std::string* icon_;
  ::google::protobuf::uint32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WeaponTypeCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WeaponTypeCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WeaponTypeCfg_2eproto();
  friend void protobuf_ShutdownFile_WeaponTypeCfg_2eproto();

  void InitAsDefaultInstance();
  static WeaponTypeCfg* default_instance_;
};
// -------------------------------------------------------------------

class WeaponTypeCfgSet : public ::google::protobuf::MessageLite {
 public:
  WeaponTypeCfgSet();
  virtual ~WeaponTypeCfgSet();

  WeaponTypeCfgSet(const WeaponTypeCfgSet& from);

  inline WeaponTypeCfgSet& operator=(const WeaponTypeCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const WeaponTypeCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const WeaponTypeCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(WeaponTypeCfgSet* other);

  // implements Message ----------------------------------------------

  WeaponTypeCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const WeaponTypeCfgSet& from);
  void MergeFrom(const WeaponTypeCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.WeaponTypeCfg weaponTypeCfg = 1;
  inline int weapontypecfg_size() const;
  inline void clear_weapontypecfg();
  static const int kWeaponTypeCfgFieldNumber = 1;
  inline const ::com::cfg::vo::WeaponTypeCfg& weapontypecfg(int index) const;
  inline ::com::cfg::vo::WeaponTypeCfg* mutable_weapontypecfg(int index);
  inline ::com::cfg::vo::WeaponTypeCfg* add_weapontypecfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponTypeCfg >&
      weapontypecfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponTypeCfg >*
      mutable_weapontypecfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.WeaponTypeCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponTypeCfg > weapontypecfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_WeaponTypeCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_WeaponTypeCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_WeaponTypeCfg_2eproto();
  friend void protobuf_ShutdownFile_WeaponTypeCfg_2eproto();

  void InitAsDefaultInstance();
  static WeaponTypeCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// WeaponTypeCfg

// required uint32 Type = 1;
inline bool WeaponTypeCfg::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeaponTypeCfg::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeaponTypeCfg::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeaponTypeCfg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 WeaponTypeCfg::type() const {
  return type_;
}
inline void WeaponTypeCfg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required string Desc = 2;
inline bool WeaponTypeCfg::has_desc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeaponTypeCfg::set_has_desc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeaponTypeCfg::clear_has_desc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeaponTypeCfg::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& WeaponTypeCfg::desc() const {
  return *desc_;
}
inline void WeaponTypeCfg::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void WeaponTypeCfg::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void WeaponTypeCfg::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponTypeCfg::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* WeaponTypeCfg::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponTypeCfg::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string Icon = 3;
inline bool WeaponTypeCfg::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeaponTypeCfg::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeaponTypeCfg::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeaponTypeCfg::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& WeaponTypeCfg::icon() const {
  return *icon_;
}
inline void WeaponTypeCfg::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void WeaponTypeCfg::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void WeaponTypeCfg::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WeaponTypeCfg::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* WeaponTypeCfg::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WeaponTypeCfg::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WeaponTypeCfgSet

// repeated .com.cfg.vo.WeaponTypeCfg weaponTypeCfg = 1;
inline int WeaponTypeCfgSet::weapontypecfg_size() const {
  return weapontypecfg_.size();
}
inline void WeaponTypeCfgSet::clear_weapontypecfg() {
  weapontypecfg_.Clear();
}
inline const ::com::cfg::vo::WeaponTypeCfg& WeaponTypeCfgSet::weapontypecfg(int index) const {
  return weapontypecfg_.Get(index);
}
inline ::com::cfg::vo::WeaponTypeCfg* WeaponTypeCfgSet::mutable_weapontypecfg(int index) {
  return weapontypecfg_.Mutable(index);
}
inline ::com::cfg::vo::WeaponTypeCfg* WeaponTypeCfgSet::add_weapontypecfg() {
  return weapontypecfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponTypeCfg >&
WeaponTypeCfgSet::weapontypecfg() const {
  return weapontypecfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::WeaponTypeCfg >*
WeaponTypeCfgSet::mutable_weapontypecfg() {
  return &weapontypecfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeaponTypeCfg_2eproto__INCLUDED
