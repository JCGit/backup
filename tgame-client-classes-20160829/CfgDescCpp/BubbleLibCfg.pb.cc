// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BubbleLibCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BubbleLibCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_BubbleLibCfg_2eproto() {
  delete BubbleLibCfg::default_instance_;
  delete BubbleLibCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BubbleLibCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BubbleLibCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BubbleLibCfg::default_instance_ = new BubbleLibCfg();
  BubbleLibCfgSet::default_instance_ = new BubbleLibCfgSet();
  BubbleLibCfg::default_instance_->InitAsDefaultInstance();
  BubbleLibCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BubbleLibCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BubbleLibCfg_2eproto_once_);
void protobuf_AddDesc_BubbleLibCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BubbleLibCfg_2eproto_once_,
                 &protobuf_AddDesc_BubbleLibCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BubbleLibCfg_2eproto {
  StaticDescriptorInitializer_BubbleLibCfg_2eproto() {
    protobuf_AddDesc_BubbleLibCfg_2eproto();
  }
} static_descriptor_initializer_BubbleLibCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int BubbleLibCfg::kIDFieldNumber;
const int BubbleLibCfg::kCDTimeFieldNumber;
const int BubbleLibCfg::kProbFieldNumber;
const int BubbleLibCfg::kWordsFieldNumber;
#endif  // !_MSC_VER

BubbleLibCfg::BubbleLibCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BubbleLibCfg::InitAsDefaultInstance() {
}

BubbleLibCfg::BubbleLibCfg(const BubbleLibCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BubbleLibCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cdtime_ = 0u;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BubbleLibCfg::~BubbleLibCfg() {
  SharedDtor();
}

void BubbleLibCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BubbleLibCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BubbleLibCfg& BubbleLibCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BubbleLibCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BubbleLibCfg_2eproto();
#endif
  return *default_instance_;
}

BubbleLibCfg* BubbleLibCfg::default_instance_ = NULL;

BubbleLibCfg* BubbleLibCfg::New() const {
  return new BubbleLibCfg;
}

void BubbleLibCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cdtime_ = 0u;
    prob_ = 0u;
  }
  words_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BubbleLibCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CDTime;
        break;
      }

      // required uint32 CDTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CDTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Prob;
        break;
      }

      // required uint32 Prob = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Words;
        break;
      }

      // repeated string Words = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_words()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Words;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BubbleLibCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 CDTime = 2;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cdtime(), output);
  }

  // required uint32 Prob = 3;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prob(), output);
  }

  // repeated string Words = 4;
  for (int i = 0; i < this->words_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->words(i), output);
  }

}

int BubbleLibCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 CDTime = 2;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required uint32 Prob = 3;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  // repeated string Words = 4;
  total_size += 1 * this->words_size();
  for (int i = 0; i < this->words_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->words(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BubbleLibCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BubbleLibCfg*>(&from));
}

void BubbleLibCfg::MergeFrom(const BubbleLibCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  words_.MergeFrom(from.words_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
}

void BubbleLibCfg::CopyFrom(const BubbleLibCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BubbleLibCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BubbleLibCfg::Swap(BubbleLibCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(prob_, other->prob_);
    words_.Swap(&other->words_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BubbleLibCfg::GetTypeName() const {
  return "com.cfg.vo.BubbleLibCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int BubbleLibCfgSet::kBubbleLibCfgFieldNumber;
#endif  // !_MSC_VER

BubbleLibCfgSet::BubbleLibCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BubbleLibCfgSet::InitAsDefaultInstance() {
}

BubbleLibCfgSet::BubbleLibCfgSet(const BubbleLibCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BubbleLibCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BubbleLibCfgSet::~BubbleLibCfgSet() {
  SharedDtor();
}

void BubbleLibCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BubbleLibCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BubbleLibCfgSet& BubbleLibCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BubbleLibCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BubbleLibCfg_2eproto();
#endif
  return *default_instance_;
}

BubbleLibCfgSet* BubbleLibCfgSet::default_instance_ = NULL;

BubbleLibCfgSet* BubbleLibCfgSet::New() const {
  return new BubbleLibCfgSet;
}

void BubbleLibCfgSet::Clear() {
  bubblelibcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BubbleLibCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.BubbleLibCfg bubbleLibCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bubbleLibCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bubblelibcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bubbleLibCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BubbleLibCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.BubbleLibCfg bubbleLibCfg = 1;
  for (int i = 0; i < this->bubblelibcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bubblelibcfg(i), output);
  }

}

int BubbleLibCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.BubbleLibCfg bubbleLibCfg = 1;
  total_size += 1 * this->bubblelibcfg_size();
  for (int i = 0; i < this->bubblelibcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bubblelibcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BubbleLibCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BubbleLibCfgSet*>(&from));
}

void BubbleLibCfgSet::MergeFrom(const BubbleLibCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bubblelibcfg_.MergeFrom(from.bubblelibcfg_);
}

void BubbleLibCfgSet::CopyFrom(const BubbleLibCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BubbleLibCfgSet::IsInitialized() const {

  for (int i = 0; i < bubblelibcfg_size(); i++) {
    if (!this->bubblelibcfg(i).IsInitialized()) return false;
  }
  return true;
}

void BubbleLibCfgSet::Swap(BubbleLibCfgSet* other) {
  if (other != this) {
    bubblelibcfg_.Swap(&other->bubblelibcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BubbleLibCfgSet::GetTypeName() const {
  return "com.cfg.vo.BubbleLibCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
