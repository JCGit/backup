// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginWhiteList.proto

#ifndef PROTOBUF_LoginWhiteList_2eproto__INCLUDED
#define PROTOBUF_LoginWhiteList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LoginWhiteList_2eproto();
void protobuf_AssignDesc_LoginWhiteList_2eproto();
void protobuf_ShutdownFile_LoginWhiteList_2eproto();

class LoginWhiteList;

// ===================================================================

class LoginWhiteList : public ::google::protobuf::MessageLite {
 public:
  LoginWhiteList();
  virtual ~LoginWhiteList();

  LoginWhiteList(const LoginWhiteList& from);

  inline LoginWhiteList& operator=(const LoginWhiteList& from) {
    CopyFrom(from);
    return *this;
  }

  static const LoginWhiteList& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const LoginWhiteList* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(LoginWhiteList* other);

  // implements Message ----------------------------------------------

  LoginWhiteList* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const LoginWhiteList& from);
  void MergeFrom(const LoginWhiteList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool Enable = 1;
  inline bool has_enable() const;
  inline void clear_enable();
  static const int kEnableFieldNumber = 1;
  inline bool enable() const;
  inline void set_enable(bool value);

  // repeated string OpenID = 2;
  inline int openid_size() const;
  inline void clear_openid();
  static const int kOpenIDFieldNumber = 2;
  inline const ::std::string& openid(int index) const;
  inline ::std::string* mutable_openid(int index);
  inline void set_openid(int index, const ::std::string& value);
  inline void set_openid(int index, const char* value);
  inline void set_openid(int index, const char* value, size_t size);
  inline ::std::string* add_openid();
  inline void add_openid(const ::std::string& value);
  inline void add_openid(const char* value);
  inline void add_openid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& openid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_openid();

  // @@protoc_insertion_point(class_scope:LoginWhiteList)
 private:
  inline void set_has_enable();
  inline void clear_has_enable();

  ::google::protobuf::RepeatedPtrField< ::std::string> openid_;
  bool enable_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_LoginWhiteList_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_LoginWhiteList_2eproto();
  #endif
  friend void protobuf_AssignDesc_LoginWhiteList_2eproto();
  friend void protobuf_ShutdownFile_LoginWhiteList_2eproto();

  void InitAsDefaultInstance();
  static LoginWhiteList* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginWhiteList

// required bool Enable = 1;
inline bool LoginWhiteList::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginWhiteList::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginWhiteList::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginWhiteList::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
inline bool LoginWhiteList::enable() const {
  return enable_;
}
inline void LoginWhiteList::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
}

// repeated string OpenID = 2;
inline int LoginWhiteList::openid_size() const {
  return openid_.size();
}
inline void LoginWhiteList::clear_openid() {
  openid_.Clear();
}
inline const ::std::string& LoginWhiteList::openid(int index) const {
  return openid_.Get(index);
}
inline ::std::string* LoginWhiteList::mutable_openid(int index) {
  return openid_.Mutable(index);
}
inline void LoginWhiteList::set_openid(int index, const ::std::string& value) {
  openid_.Mutable(index)->assign(value);
}
inline void LoginWhiteList::set_openid(int index, const char* value) {
  openid_.Mutable(index)->assign(value);
}
inline void LoginWhiteList::set_openid(int index, const char* value, size_t size) {
  openid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginWhiteList::add_openid() {
  return openid_.Add();
}
inline void LoginWhiteList::add_openid(const ::std::string& value) {
  openid_.Add()->assign(value);
}
inline void LoginWhiteList::add_openid(const char* value) {
  openid_.Add()->assign(value);
}
inline void LoginWhiteList::add_openid(const char* value, size_t size) {
  openid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LoginWhiteList::openid() const {
  return openid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LoginWhiteList::mutable_openid() {
  return &openid_;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LoginWhiteList_2eproto__INCLUDED
