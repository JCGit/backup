// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TaskCfg.proto

#ifndef PROTOBUF_TaskCfg_2eproto__INCLUDED
#define PROTOBUF_TaskCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TaskCfg_2eproto();
void protobuf_AssignDesc_TaskCfg_2eproto();
void protobuf_ShutdownFile_TaskCfg_2eproto();

class Target;
class TaskAward;
class TaskCfg;
class TaskCfgSet;

// ===================================================================

class Target : public ::google::protobuf::MessageLite {
 public:
  Target();
  virtual ~Target();

  Target(const Target& from);

  inline Target& operator=(const Target& from) {
    CopyFrom(from);
    return *this;
  }

  static const Target& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const Target* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(Target* other);

  // implements Message ----------------------------------------------

  Target* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const Target& from);
  void MergeFrom(const Target& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 TargetType = 1;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 targettype() const;
  inline void set_targettype(::google::protobuf::uint32 value);

  // required uint32 R1 = 2;
  inline bool has_r1() const;
  inline void clear_r1();
  static const int kR1FieldNumber = 2;
  inline ::google::protobuf::uint32 r1() const;
  inline void set_r1(::google::protobuf::uint32 value);

  // required uint32 R2 = 3;
  inline bool has_r2() const;
  inline void clear_r2();
  static const int kR2FieldNumber = 3;
  inline ::google::protobuf::uint32 r2() const;
  inline void set_r2(::google::protobuf::uint32 value);

  // required uint32 R3 = 4;
  inline bool has_r3() const;
  inline void clear_r3();
  static const int kR3FieldNumber = 4;
  inline ::google::protobuf::uint32 r3() const;
  inline void set_r3(::google::protobuf::uint32 value);

  // required uint32 R4 = 5;
  inline bool has_r4() const;
  inline void clear_r4();
  static const int kR4FieldNumber = 5;
  inline ::google::protobuf::uint32 r4() const;
  inline void set_r4(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.Target)
 private:
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_r1();
  inline void clear_has_r1();
  inline void set_has_r2();
  inline void clear_has_r2();
  inline void set_has_r3();
  inline void clear_has_r3();
  inline void set_has_r4();
  inline void clear_has_r4();

  ::google::protobuf::uint32 targettype_;
  ::google::protobuf::uint32 r1_;
  ::google::protobuf::uint32 r2_;
  ::google::protobuf::uint32 r3_;
  ::google::protobuf::uint32 r4_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_TaskCfg_2eproto();
  friend void protobuf_ShutdownFile_TaskCfg_2eproto();

  void InitAsDefaultInstance();
  static Target* default_instance_;
};
// -------------------------------------------------------------------

class TaskAward : public ::google::protobuf::MessageLite {
 public:
  TaskAward();
  virtual ~TaskAward();

  TaskAward(const TaskAward& from);

  inline TaskAward& operator=(const TaskAward& from) {
    CopyFrom(from);
    return *this;
  }

  static const TaskAward& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TaskAward* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TaskAward* other);

  // implements Message ----------------------------------------------

  TaskAward* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TaskAward& from);
  void MergeFrom(const TaskAward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Coin = 1;
  inline bool has_coin() const;
  inline void clear_coin();
  static const int kCoinFieldNumber = 1;
  inline ::google::protobuf::uint32 coin() const;
  inline void set_coin(::google::protobuf::uint32 value);

  // required uint32 Exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // required uint32 AwardType = 3;
  inline bool has_awardtype() const;
  inline void clear_awardtype();
  static const int kAwardTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 awardtype() const;
  inline void set_awardtype(::google::protobuf::uint32 value);

  // required uint32 AwardCfgID = 4;
  inline bool has_awardcfgid() const;
  inline void clear_awardcfgid();
  static const int kAwardCfgIDFieldNumber = 4;
  inline ::google::protobuf::uint32 awardcfgid() const;
  inline void set_awardcfgid(::google::protobuf::uint32 value);

  // required uint32 AwardCnt = 5;
  inline bool has_awardcnt() const;
  inline void clear_awardcnt();
  static const int kAwardCntFieldNumber = 5;
  inline ::google::protobuf::uint32 awardcnt() const;
  inline void set_awardcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.TaskAward)
 private:
  inline void set_has_coin();
  inline void clear_has_coin();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_awardtype();
  inline void clear_has_awardtype();
  inline void set_has_awardcfgid();
  inline void clear_has_awardcfgid();
  inline void set_has_awardcnt();
  inline void clear_has_awardcnt();

  ::google::protobuf::uint32 coin_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 awardtype_;
  ::google::protobuf::uint32 awardcfgid_;
  ::google::protobuf::uint32 awardcnt_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_TaskCfg_2eproto();
  friend void protobuf_ShutdownFile_TaskCfg_2eproto();

  void InitAsDefaultInstance();
  static TaskAward* default_instance_;
};
// -------------------------------------------------------------------

class TaskCfg : public ::google::protobuf::MessageLite {
 public:
  TaskCfg();
  virtual ~TaskCfg();

  TaskCfg(const TaskCfg& from);

  inline TaskCfg& operator=(const TaskCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const TaskCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TaskCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TaskCfg* other);

  // implements Message ----------------------------------------------

  TaskCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TaskCfg& from);
  void MergeFrom(const TaskCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 TaskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required string TaskName = 2;
  inline bool has_taskname() const;
  inline void clear_taskname();
  static const int kTaskNameFieldNumber = 2;
  inline const ::std::string& taskname() const;
  inline void set_taskname(const ::std::string& value);
  inline void set_taskname(const char* value);
  inline void set_taskname(const char* value, size_t size);
  inline ::std::string* mutable_taskname();
  inline ::std::string* release_taskname();
  inline void set_allocated_taskname(::std::string* taskname);

  // required string TaskDesc = 3;
  inline bool has_taskdesc() const;
  inline void clear_taskdesc();
  static const int kTaskDescFieldNumber = 3;
  inline const ::std::string& taskdesc() const;
  inline void set_taskdesc(const ::std::string& value);
  inline void set_taskdesc(const char* value);
  inline void set_taskdesc(const char* value, size_t size);
  inline ::std::string* mutable_taskdesc();
  inline ::std::string* release_taskdesc();
  inline void set_allocated_taskdesc(::std::string* taskdesc);

  // required uint32 LeadID = 4;
  inline bool has_leadid() const;
  inline void clear_leadid();
  static const int kLeadIDFieldNumber = 4;
  inline ::google::protobuf::uint32 leadid() const;
  inline void set_leadid(::google::protobuf::uint32 value);

  // required uint32 Level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // required uint32 GetNPCID = 6;
  inline bool has_getnpcid() const;
  inline void clear_getnpcid();
  static const int kGetNPCIDFieldNumber = 6;
  inline ::google::protobuf::uint32 getnpcid() const;
  inline void set_getnpcid(::google::protobuf::uint32 value);

  // required uint32 CommitNPCID = 7;
  inline bool has_commitnpcid() const;
  inline void clear_commitnpcid();
  static const int kCommitNPCIDFieldNumber = 7;
  inline ::google::protobuf::uint32 commitnpcid() const;
  inline void set_commitnpcid(::google::protobuf::uint32 value);

  // required .com.cfg.vo.Target TaskTarget = 8;
  inline bool has_tasktarget() const;
  inline void clear_tasktarget();
  static const int kTaskTargetFieldNumber = 8;
  inline const ::com::cfg::vo::Target& tasktarget() const;
  inline ::com::cfg::vo::Target* mutable_tasktarget();
  inline ::com::cfg::vo::Target* release_tasktarget();
  inline void set_allocated_tasktarget(::com::cfg::vo::Target* tasktarget);

  // required .com.cfg.vo.TaskAward Award = 9;
  inline bool has_award() const;
  inline void clear_award();
  static const int kAwardFieldNumber = 9;
  inline const ::com::cfg::vo::TaskAward& award() const;
  inline ::com::cfg::vo::TaskAward* mutable_award();
  inline ::com::cfg::vo::TaskAward* release_award();
  inline void set_allocated_award(::com::cfg::vo::TaskAward* award);

  // required uint32 RecvStoryID = 10;
  inline bool has_recvstoryid() const;
  inline void clear_recvstoryid();
  static const int kRecvStoryIDFieldNumber = 10;
  inline ::google::protobuf::uint32 recvstoryid() const;
  inline void set_recvstoryid(::google::protobuf::uint32 value);

  // required uint32 CommitStoryID = 11;
  inline bool has_commitstoryid() const;
  inline void clear_commitstoryid();
  static const int kCommitStoryIDFieldNumber = 11;
  inline ::google::protobuf::uint32 commitstoryid() const;
  inline void set_commitstoryid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.TaskCfg)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_taskname();
  inline void clear_has_taskname();
  inline void set_has_taskdesc();
  inline void clear_has_taskdesc();
  inline void set_has_leadid();
  inline void clear_has_leadid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_getnpcid();
  inline void clear_has_getnpcid();
  inline void set_has_commitnpcid();
  inline void clear_has_commitnpcid();
  inline void set_has_tasktarget();
  inline void clear_has_tasktarget();
  inline void set_has_award();
  inline void clear_has_award();
  inline void set_has_recvstoryid();
  inline void clear_has_recvstoryid();
  inline void set_has_commitstoryid();
  inline void clear_has_commitstoryid();

  ::std::string* taskname_;
  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 leadid_;
  ::std::string* taskdesc_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 getnpcid_;
  ::com::cfg::vo::Target* tasktarget_;
  ::google::protobuf::uint32 commitnpcid_;
  ::google::protobuf::uint32 recvstoryid_;
  ::com::cfg::vo::TaskAward* award_;
  ::google::protobuf::uint32 commitstoryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_TaskCfg_2eproto();
  friend void protobuf_ShutdownFile_TaskCfg_2eproto();

  void InitAsDefaultInstance();
  static TaskCfg* default_instance_;
};
// -------------------------------------------------------------------

class TaskCfgSet : public ::google::protobuf::MessageLite {
 public:
  TaskCfgSet();
  virtual ~TaskCfgSet();

  TaskCfgSet(const TaskCfgSet& from);

  inline TaskCfgSet& operator=(const TaskCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const TaskCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const TaskCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(TaskCfgSet* other);

  // implements Message ----------------------------------------------

  TaskCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const TaskCfgSet& from);
  void MergeFrom(const TaskCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.TaskCfg taskcfg = 1;
  inline int taskcfg_size() const;
  inline void clear_taskcfg();
  static const int kTaskcfgFieldNumber = 1;
  inline const ::com::cfg::vo::TaskCfg& taskcfg(int index) const;
  inline ::com::cfg::vo::TaskCfg* mutable_taskcfg(int index);
  inline ::com::cfg::vo::TaskCfg* add_taskcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::TaskCfg >&
      taskcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::TaskCfg >*
      mutable_taskcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.TaskCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::TaskCfg > taskcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_TaskCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_TaskCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_TaskCfg_2eproto();
  friend void protobuf_ShutdownFile_TaskCfg_2eproto();

  void InitAsDefaultInstance();
  static TaskCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// Target

// required uint32 TargetType = 1;
inline bool Target::has_targettype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Target::set_has_targettype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Target::clear_has_targettype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Target::clear_targettype() {
  targettype_ = 0u;
  clear_has_targettype();
}
inline ::google::protobuf::uint32 Target::targettype() const {
  return targettype_;
}
inline void Target::set_targettype(::google::protobuf::uint32 value) {
  set_has_targettype();
  targettype_ = value;
}

// required uint32 R1 = 2;
inline bool Target::has_r1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Target::set_has_r1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Target::clear_has_r1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Target::clear_r1() {
  r1_ = 0u;
  clear_has_r1();
}
inline ::google::protobuf::uint32 Target::r1() const {
  return r1_;
}
inline void Target::set_r1(::google::protobuf::uint32 value) {
  set_has_r1();
  r1_ = value;
}

// required uint32 R2 = 3;
inline bool Target::has_r2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Target::set_has_r2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Target::clear_has_r2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Target::clear_r2() {
  r2_ = 0u;
  clear_has_r2();
}
inline ::google::protobuf::uint32 Target::r2() const {
  return r2_;
}
inline void Target::set_r2(::google::protobuf::uint32 value) {
  set_has_r2();
  r2_ = value;
}

// required uint32 R3 = 4;
inline bool Target::has_r3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Target::set_has_r3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Target::clear_has_r3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Target::clear_r3() {
  r3_ = 0u;
  clear_has_r3();
}
inline ::google::protobuf::uint32 Target::r3() const {
  return r3_;
}
inline void Target::set_r3(::google::protobuf::uint32 value) {
  set_has_r3();
  r3_ = value;
}

// required uint32 R4 = 5;
inline bool Target::has_r4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Target::set_has_r4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Target::clear_has_r4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Target::clear_r4() {
  r4_ = 0u;
  clear_has_r4();
}
inline ::google::protobuf::uint32 Target::r4() const {
  return r4_;
}
inline void Target::set_r4(::google::protobuf::uint32 value) {
  set_has_r4();
  r4_ = value;
}

// -------------------------------------------------------------------

// TaskAward

// required uint32 Coin = 1;
inline bool TaskAward::has_coin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskAward::set_has_coin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskAward::clear_has_coin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskAward::clear_coin() {
  coin_ = 0u;
  clear_has_coin();
}
inline ::google::protobuf::uint32 TaskAward::coin() const {
  return coin_;
}
inline void TaskAward::set_coin(::google::protobuf::uint32 value) {
  set_has_coin();
  coin_ = value;
}

// required uint32 Exp = 2;
inline bool TaskAward::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskAward::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskAward::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskAward::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 TaskAward::exp() const {
  return exp_;
}
inline void TaskAward::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// required uint32 AwardType = 3;
inline bool TaskAward::has_awardtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskAward::set_has_awardtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskAward::clear_has_awardtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskAward::clear_awardtype() {
  awardtype_ = 0u;
  clear_has_awardtype();
}
inline ::google::protobuf::uint32 TaskAward::awardtype() const {
  return awardtype_;
}
inline void TaskAward::set_awardtype(::google::protobuf::uint32 value) {
  set_has_awardtype();
  awardtype_ = value;
}

// required uint32 AwardCfgID = 4;
inline bool TaskAward::has_awardcfgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskAward::set_has_awardcfgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskAward::clear_has_awardcfgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskAward::clear_awardcfgid() {
  awardcfgid_ = 0u;
  clear_has_awardcfgid();
}
inline ::google::protobuf::uint32 TaskAward::awardcfgid() const {
  return awardcfgid_;
}
inline void TaskAward::set_awardcfgid(::google::protobuf::uint32 value) {
  set_has_awardcfgid();
  awardcfgid_ = value;
}

// required uint32 AwardCnt = 5;
inline bool TaskAward::has_awardcnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskAward::set_has_awardcnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskAward::clear_has_awardcnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskAward::clear_awardcnt() {
  awardcnt_ = 0u;
  clear_has_awardcnt();
}
inline ::google::protobuf::uint32 TaskAward::awardcnt() const {
  return awardcnt_;
}
inline void TaskAward::set_awardcnt(::google::protobuf::uint32 value) {
  set_has_awardcnt();
  awardcnt_ = value;
}

// -------------------------------------------------------------------

// TaskCfg

// required uint32 TaskID = 1;
inline bool TaskCfg::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskCfg::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskCfg::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskCfg::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 TaskCfg::taskid() const {
  return taskid_;
}
inline void TaskCfg::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required string TaskName = 2;
inline bool TaskCfg::has_taskname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskCfg::set_has_taskname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskCfg::clear_has_taskname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskCfg::clear_taskname() {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    taskname_->clear();
  }
  clear_has_taskname();
}
inline const ::std::string& TaskCfg::taskname() const {
  return *taskname_;
}
inline void TaskCfg::set_taskname(const ::std::string& value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void TaskCfg::set_taskname(const char* value) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(value);
}
inline void TaskCfg::set_taskname(const char* value, size_t size) {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  taskname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskCfg::mutable_taskname() {
  set_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    taskname_ = new ::std::string;
  }
  return taskname_;
}
inline ::std::string* TaskCfg::release_taskname() {
  clear_has_taskname();
  if (taskname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskname_;
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskCfg::set_allocated_taskname(::std::string* taskname) {
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (taskname) {
    set_has_taskname();
    taskname_ = taskname;
  } else {
    clear_has_taskname();
    taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string TaskDesc = 3;
inline bool TaskCfg::has_taskdesc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskCfg::set_has_taskdesc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskCfg::clear_has_taskdesc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskCfg::clear_taskdesc() {
  if (taskdesc_ != &::google::protobuf::internal::kEmptyString) {
    taskdesc_->clear();
  }
  clear_has_taskdesc();
}
inline const ::std::string& TaskCfg::taskdesc() const {
  return *taskdesc_;
}
inline void TaskCfg::set_taskdesc(const ::std::string& value) {
  set_has_taskdesc();
  if (taskdesc_ == &::google::protobuf::internal::kEmptyString) {
    taskdesc_ = new ::std::string;
  }
  taskdesc_->assign(value);
}
inline void TaskCfg::set_taskdesc(const char* value) {
  set_has_taskdesc();
  if (taskdesc_ == &::google::protobuf::internal::kEmptyString) {
    taskdesc_ = new ::std::string;
  }
  taskdesc_->assign(value);
}
inline void TaskCfg::set_taskdesc(const char* value, size_t size) {
  set_has_taskdesc();
  if (taskdesc_ == &::google::protobuf::internal::kEmptyString) {
    taskdesc_ = new ::std::string;
  }
  taskdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskCfg::mutable_taskdesc() {
  set_has_taskdesc();
  if (taskdesc_ == &::google::protobuf::internal::kEmptyString) {
    taskdesc_ = new ::std::string;
  }
  return taskdesc_;
}
inline ::std::string* TaskCfg::release_taskdesc() {
  clear_has_taskdesc();
  if (taskdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = taskdesc_;
    taskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TaskCfg::set_allocated_taskdesc(::std::string* taskdesc) {
  if (taskdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete taskdesc_;
  }
  if (taskdesc) {
    set_has_taskdesc();
    taskdesc_ = taskdesc;
  } else {
    clear_has_taskdesc();
    taskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 LeadID = 4;
inline bool TaskCfg::has_leadid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskCfg::set_has_leadid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskCfg::clear_has_leadid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskCfg::clear_leadid() {
  leadid_ = 0u;
  clear_has_leadid();
}
inline ::google::protobuf::uint32 TaskCfg::leadid() const {
  return leadid_;
}
inline void TaskCfg::set_leadid(::google::protobuf::uint32 value) {
  set_has_leadid();
  leadid_ = value;
}

// required uint32 Level = 5;
inline bool TaskCfg::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskCfg::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskCfg::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskCfg::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TaskCfg::level() const {
  return level_;
}
inline void TaskCfg::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// required uint32 GetNPCID = 6;
inline bool TaskCfg::has_getnpcid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskCfg::set_has_getnpcid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskCfg::clear_has_getnpcid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskCfg::clear_getnpcid() {
  getnpcid_ = 0u;
  clear_has_getnpcid();
}
inline ::google::protobuf::uint32 TaskCfg::getnpcid() const {
  return getnpcid_;
}
inline void TaskCfg::set_getnpcid(::google::protobuf::uint32 value) {
  set_has_getnpcid();
  getnpcid_ = value;
}

// required uint32 CommitNPCID = 7;
inline bool TaskCfg::has_commitnpcid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskCfg::set_has_commitnpcid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskCfg::clear_has_commitnpcid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskCfg::clear_commitnpcid() {
  commitnpcid_ = 0u;
  clear_has_commitnpcid();
}
inline ::google::protobuf::uint32 TaskCfg::commitnpcid() const {
  return commitnpcid_;
}
inline void TaskCfg::set_commitnpcid(::google::protobuf::uint32 value) {
  set_has_commitnpcid();
  commitnpcid_ = value;
}

// required .com.cfg.vo.Target TaskTarget = 8;
inline bool TaskCfg::has_tasktarget() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskCfg::set_has_tasktarget() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskCfg::clear_has_tasktarget() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskCfg::clear_tasktarget() {
  if (tasktarget_ != NULL) tasktarget_->::com::cfg::vo::Target::Clear();
  clear_has_tasktarget();
}
inline const ::com::cfg::vo::Target& TaskCfg::tasktarget() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return tasktarget_ != NULL ? *tasktarget_ : *default_instance().tasktarget_;
#else
  return tasktarget_ != NULL ? *tasktarget_ : *default_instance_->tasktarget_;
#endif
}
inline ::com::cfg::vo::Target* TaskCfg::mutable_tasktarget() {
  set_has_tasktarget();
  if (tasktarget_ == NULL) tasktarget_ = new ::com::cfg::vo::Target;
  return tasktarget_;
}
inline ::com::cfg::vo::Target* TaskCfg::release_tasktarget() {
  clear_has_tasktarget();
  ::com::cfg::vo::Target* temp = tasktarget_;
  tasktarget_ = NULL;
  return temp;
}
inline void TaskCfg::set_allocated_tasktarget(::com::cfg::vo::Target* tasktarget) {
  delete tasktarget_;
  tasktarget_ = tasktarget;
  if (tasktarget) {
    set_has_tasktarget();
  } else {
    clear_has_tasktarget();
  }
}

// required .com.cfg.vo.TaskAward Award = 9;
inline bool TaskCfg::has_award() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TaskCfg::set_has_award() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TaskCfg::clear_has_award() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TaskCfg::clear_award() {
  if (award_ != NULL) award_->::com::cfg::vo::TaskAward::Clear();
  clear_has_award();
}
inline const ::com::cfg::vo::TaskAward& TaskCfg::award() const {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  return award_ != NULL ? *award_ : *default_instance().award_;
#else
  return award_ != NULL ? *award_ : *default_instance_->award_;
#endif
}
inline ::com::cfg::vo::TaskAward* TaskCfg::mutable_award() {
  set_has_award();
  if (award_ == NULL) award_ = new ::com::cfg::vo::TaskAward;
  return award_;
}
inline ::com::cfg::vo::TaskAward* TaskCfg::release_award() {
  clear_has_award();
  ::com::cfg::vo::TaskAward* temp = award_;
  award_ = NULL;
  return temp;
}
inline void TaskCfg::set_allocated_award(::com::cfg::vo::TaskAward* award) {
  delete award_;
  award_ = award;
  if (award) {
    set_has_award();
  } else {
    clear_has_award();
  }
}

// required uint32 RecvStoryID = 10;
inline bool TaskCfg::has_recvstoryid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TaskCfg::set_has_recvstoryid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TaskCfg::clear_has_recvstoryid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TaskCfg::clear_recvstoryid() {
  recvstoryid_ = 0u;
  clear_has_recvstoryid();
}
inline ::google::protobuf::uint32 TaskCfg::recvstoryid() const {
  return recvstoryid_;
}
inline void TaskCfg::set_recvstoryid(::google::protobuf::uint32 value) {
  set_has_recvstoryid();
  recvstoryid_ = value;
}

// required uint32 CommitStoryID = 11;
inline bool TaskCfg::has_commitstoryid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TaskCfg::set_has_commitstoryid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TaskCfg::clear_has_commitstoryid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TaskCfg::clear_commitstoryid() {
  commitstoryid_ = 0u;
  clear_has_commitstoryid();
}
inline ::google::protobuf::uint32 TaskCfg::commitstoryid() const {
  return commitstoryid_;
}
inline void TaskCfg::set_commitstoryid(::google::protobuf::uint32 value) {
  set_has_commitstoryid();
  commitstoryid_ = value;
}

// -------------------------------------------------------------------

// TaskCfgSet

// repeated .com.cfg.vo.TaskCfg taskcfg = 1;
inline int TaskCfgSet::taskcfg_size() const {
  return taskcfg_.size();
}
inline void TaskCfgSet::clear_taskcfg() {
  taskcfg_.Clear();
}
inline const ::com::cfg::vo::TaskCfg& TaskCfgSet::taskcfg(int index) const {
  return taskcfg_.Get(index);
}
inline ::com::cfg::vo::TaskCfg* TaskCfgSet::mutable_taskcfg(int index) {
  return taskcfg_.Mutable(index);
}
inline ::com::cfg::vo::TaskCfg* TaskCfgSet::add_taskcfg() {
  return taskcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::TaskCfg >&
TaskCfgSet::taskcfg() const {
  return taskcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::TaskCfg >*
TaskCfgSet::mutable_taskcfg() {
  return &taskcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TaskCfg_2eproto__INCLUDED
