// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MilestoneCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MilestoneCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_MilestoneCfg_2eproto() {
  delete MilestoneTarget::default_instance_;
  delete MilestoneAward::default_instance_;
  delete MilestoneCfg::default_instance_;
  delete MilestoneCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_MilestoneCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_MilestoneCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  MilestoneTarget::default_instance_ = new MilestoneTarget();
  MilestoneAward::default_instance_ = new MilestoneAward();
  MilestoneCfg::default_instance_ = new MilestoneCfg();
  MilestoneCfgSet::default_instance_ = new MilestoneCfgSet();
  MilestoneTarget::default_instance_->InitAsDefaultInstance();
  MilestoneAward::default_instance_->InitAsDefaultInstance();
  MilestoneCfg::default_instance_->InitAsDefaultInstance();
  MilestoneCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MilestoneCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_MilestoneCfg_2eproto_once_);
void protobuf_AddDesc_MilestoneCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_MilestoneCfg_2eproto_once_,
                 &protobuf_AddDesc_MilestoneCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MilestoneCfg_2eproto {
  StaticDescriptorInitializer_MilestoneCfg_2eproto() {
    protobuf_AddDesc_MilestoneCfg_2eproto();
  }
} static_descriptor_initializer_MilestoneCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int MilestoneTarget::kTargetTypeFieldNumber;
const int MilestoneTarget::kR1FieldNumber;
const int MilestoneTarget::kR2FieldNumber;
const int MilestoneTarget::kR3FieldNumber;
const int MilestoneTarget::kR4FieldNumber;
#endif  // !_MSC_VER

MilestoneTarget::MilestoneTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MilestoneTarget::InitAsDefaultInstance() {
}

MilestoneTarget::MilestoneTarget(const MilestoneTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MilestoneTarget::SharedCtor() {
  _cached_size_ = 0;
  targettype_ = 0u;
  r1_ = 0u;
  r2_ = 0u;
  r3_ = 0u;
  r4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilestoneTarget::~MilestoneTarget() {
  SharedDtor();
}

void MilestoneTarget::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MilestoneTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MilestoneTarget& MilestoneTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MilestoneCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MilestoneCfg_2eproto();
#endif
  return *default_instance_;
}

MilestoneTarget* MilestoneTarget::default_instance_ = NULL;

MilestoneTarget* MilestoneTarget::New() const {
  return new MilestoneTarget;
}

void MilestoneTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targettype_ = 0u;
    r1_ = 0u;
    r2_ = 0u;
    r3_ = 0u;
    r4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MilestoneTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TargetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_R1;
        break;
      }

      // required uint32 R1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_R2;
        break;
      }

      // required uint32 R2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_R3;
        break;
      }

      // required uint32 R3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r3_)));
          set_has_r3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_R4;
        break;
      }

      // required uint32 R4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r4_)));
          set_has_r4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilestoneTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TargetType = 1;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targettype(), output);
  }

  // required uint32 R1 = 2;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->r1(), output);
  }

  // required uint32 R2 = 3;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r2(), output);
  }

  // required uint32 R3 = 4;
  if (has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r3(), output);
  }

  // required uint32 R4 = 5;
  if (has_r4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r4(), output);
  }

}

int MilestoneTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TargetType = 1;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // required uint32 R1 = 2;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r1());
    }

    // required uint32 R2 = 3;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r2());
    }

    // required uint32 R3 = 4;
    if (has_r3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r3());
    }

    // required uint32 R4 = 5;
    if (has_r4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r4());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilestoneTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MilestoneTarget*>(&from));
}

void MilestoneTarget::MergeFrom(const MilestoneTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_r3()) {
      set_r3(from.r3());
    }
    if (from.has_r4()) {
      set_r4(from.r4());
    }
  }
}

void MilestoneTarget::CopyFrom(const MilestoneTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilestoneTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MilestoneTarget::Swap(MilestoneTarget* other) {
  if (other != this) {
    std::swap(targettype_, other->targettype_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(r3_, other->r3_);
    std::swap(r4_, other->r4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MilestoneTarget::GetTypeName() const {
  return "com.cfg.vo.MilestoneTarget";
}


// ===================================================================

#ifndef _MSC_VER
const int MilestoneAward::kCoinFieldNumber;
const int MilestoneAward::kGoldFieldNumber;
const int MilestoneAward::kAwardTypeFieldNumber;
const int MilestoneAward::kAwardCfgIDFieldNumber;
const int MilestoneAward::kAwardCntFieldNumber;
#endif  // !_MSC_VER

MilestoneAward::MilestoneAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MilestoneAward::InitAsDefaultInstance() {
}

MilestoneAward::MilestoneAward(const MilestoneAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MilestoneAward::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  gold_ = 0u;
  awardtype_ = 0u;
  awardcfgid_ = 0u;
  awardcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilestoneAward::~MilestoneAward() {
  SharedDtor();
}

void MilestoneAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MilestoneAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MilestoneAward& MilestoneAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MilestoneCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MilestoneCfg_2eproto();
#endif
  return *default_instance_;
}

MilestoneAward* MilestoneAward::default_instance_ = NULL;

MilestoneAward* MilestoneAward::New() const {
  return new MilestoneAward;
}

void MilestoneAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    gold_ = 0u;
    awardtype_ = 0u;
    awardcfgid_ = 0u;
    awardcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MilestoneAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Gold;
        break;
      }

      // required uint32 Gold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_AwardType;
        break;
      }

      // required uint32 AwardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardCfgID;
        break;
      }

      // required uint32 AwardCfgID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcfgid_)));
          set_has_awardcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AwardCnt;
        break;
      }

      // required uint32 AwardCnt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcnt_)));
          set_has_awardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilestoneAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 Gold = 2;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gold(), output);
  }

  // required uint32 AwardType = 3;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->awardtype(), output);
  }

  // required uint32 AwardCfgID = 4;
  if (has_awardcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->awardcfgid(), output);
  }

  // required uint32 AwardCnt = 5;
  if (has_awardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->awardcnt(), output);
  }

}

int MilestoneAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Gold = 2;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 AwardType = 3;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // required uint32 AwardCfgID = 4;
    if (has_awardcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcfgid());
    }

    // required uint32 AwardCnt = 5;
    if (has_awardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilestoneAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MilestoneAward*>(&from));
}

void MilestoneAward::MergeFrom(const MilestoneAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardcfgid()) {
      set_awardcfgid(from.awardcfgid());
    }
    if (from.has_awardcnt()) {
      set_awardcnt(from.awardcnt());
    }
  }
}

void MilestoneAward::CopyFrom(const MilestoneAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilestoneAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MilestoneAward::Swap(MilestoneAward* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(gold_, other->gold_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardcfgid_, other->awardcfgid_);
    std::swap(awardcnt_, other->awardcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MilestoneAward::GetTypeName() const {
  return "com.cfg.vo.MilestoneAward";
}


// ===================================================================

#ifndef _MSC_VER
const int MilestoneCfg::kMilestoneIDFieldNumber;
const int MilestoneCfg::kMilestoneIconFieldNumber;
const int MilestoneCfg::kMilestoneNameFieldNumber;
const int MilestoneCfg::kMilestoneDescFieldNumber;
const int MilestoneCfg::kMilestoneIntroFieldNumber;
const int MilestoneCfg::kLeadIDFieldNumber;
const int MilestoneCfg::kFirstMilestoneIDFieldNumber;
const int MilestoneCfg::kNextMilestoneIDFieldNumber;
const int MilestoneCfg::kTargetFieldNumber;
const int MilestoneCfg::kAwardFieldNumber;
#endif  // !_MSC_VER

MilestoneCfg::MilestoneCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MilestoneCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  target_ = const_cast< ::com::cfg::vo::MilestoneTarget*>(
      ::com::cfg::vo::MilestoneTarget::internal_default_instance());
#else
  target_ = const_cast< ::com::cfg::vo::MilestoneTarget*>(&::com::cfg::vo::MilestoneTarget::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  award_ = const_cast< ::com::cfg::vo::MilestoneAward*>(
      ::com::cfg::vo::MilestoneAward::internal_default_instance());
#else
  award_ = const_cast< ::com::cfg::vo::MilestoneAward*>(&::com::cfg::vo::MilestoneAward::default_instance());
#endif
}

MilestoneCfg::MilestoneCfg(const MilestoneCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MilestoneCfg::SharedCtor() {
  _cached_size_ = 0;
  milestoneid_ = 0u;
  milestoneicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  milestonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  milestonedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  milestoneintro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leadid_ = 0u;
  firstmilestoneid_ = 0u;
  nextmilestoneid_ = 0u;
  target_ = NULL;
  award_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilestoneCfg::~MilestoneCfg() {
  SharedDtor();
}

void MilestoneCfg::SharedDtor() {
  if (milestoneicon_ != &::google::protobuf::internal::kEmptyString) {
    delete milestoneicon_;
  }
  if (milestonename_ != &::google::protobuf::internal::kEmptyString) {
    delete milestonename_;
  }
  if (milestonedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete milestonedesc_;
  }
  if (milestoneintro_ != &::google::protobuf::internal::kEmptyString) {
    delete milestoneintro_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete target_;
    delete award_;
  }
}

void MilestoneCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MilestoneCfg& MilestoneCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MilestoneCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MilestoneCfg_2eproto();
#endif
  return *default_instance_;
}

MilestoneCfg* MilestoneCfg::default_instance_ = NULL;

MilestoneCfg* MilestoneCfg::New() const {
  return new MilestoneCfg;
}

void MilestoneCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    milestoneid_ = 0u;
    if (has_milestoneicon()) {
      if (milestoneicon_ != &::google::protobuf::internal::kEmptyString) {
        milestoneicon_->clear();
      }
    }
    if (has_milestonename()) {
      if (milestonename_ != &::google::protobuf::internal::kEmptyString) {
        milestonename_->clear();
      }
    }
    if (has_milestonedesc()) {
      if (milestonedesc_ != &::google::protobuf::internal::kEmptyString) {
        milestonedesc_->clear();
      }
    }
    if (has_milestoneintro()) {
      if (milestoneintro_ != &::google::protobuf::internal::kEmptyString) {
        milestoneintro_->clear();
      }
    }
    leadid_ = 0u;
    firstmilestoneid_ = 0u;
    nextmilestoneid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_target()) {
      if (target_ != NULL) target_->::com::cfg::vo::MilestoneTarget::Clear();
    }
    if (has_award()) {
      if (award_ != NULL) award_->::com::cfg::vo::MilestoneAward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MilestoneCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MilestoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &milestoneid_)));
          set_has_milestoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_MilestoneIcon;
        break;
      }

      // required string MilestoneIcon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MilestoneIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_milestoneicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_MilestoneName;
        break;
      }

      // required string MilestoneName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MilestoneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_milestonename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MilestoneDesc;
        break;
      }

      // required string MilestoneDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MilestoneDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_milestonedesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_MilestoneIntro;
        break;
      }

      // required string MilestoneIntro = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MilestoneIntro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_milestoneintro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_LeadID;
        break;
      }

      // required uint32 LeadID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeadID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leadid_)));
          set_has_leadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_FirstMilestoneID;
        break;
      }

      // required uint32 FirstMilestoneID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FirstMilestoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstmilestoneid_)));
          set_has_firstmilestoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_NextMilestoneID;
        break;
      }

      // required uint32 NextMilestoneID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextMilestoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nextmilestoneid_)));
          set_has_nextmilestoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_Target;
        break;
      }

      // required .com.cfg.vo.MilestoneTarget Target = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Award;
        break;
      }

      // required .com.cfg.vo.MilestoneAward Award = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilestoneCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MilestoneID = 1;
  if (has_milestoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->milestoneid(), output);
  }

  // required string MilestoneIcon = 2;
  if (has_milestoneicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->milestoneicon(), output);
  }

  // required string MilestoneName = 3;
  if (has_milestonename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->milestonename(), output);
  }

  // required string MilestoneDesc = 4;
  if (has_milestonedesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->milestonedesc(), output);
  }

  // required string MilestoneIntro = 5;
  if (has_milestoneintro()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->milestoneintro(), output);
  }

  // required uint32 LeadID = 6;
  if (has_leadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leadid(), output);
  }

  // required uint32 FirstMilestoneID = 7;
  if (has_firstmilestoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->firstmilestoneid(), output);
  }

  // required uint32 NextMilestoneID = 8;
  if (has_nextmilestoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->nextmilestoneid(), output);
  }

  // required .com.cfg.vo.MilestoneTarget Target = 9;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->target(), output);
  }

  // required .com.cfg.vo.MilestoneAward Award = 10;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->award(), output);
  }

}

int MilestoneCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MilestoneID = 1;
    if (has_milestoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->milestoneid());
    }

    // required string MilestoneIcon = 2;
    if (has_milestoneicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->milestoneicon());
    }

    // required string MilestoneName = 3;
    if (has_milestonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->milestonename());
    }

    // required string MilestoneDesc = 4;
    if (has_milestonedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->milestonedesc());
    }

    // required string MilestoneIntro = 5;
    if (has_milestoneintro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->milestoneintro());
    }

    // required uint32 LeadID = 6;
    if (has_leadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leadid());
    }

    // required uint32 FirstMilestoneID = 7;
    if (has_firstmilestoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstmilestoneid());
    }

    // required uint32 NextMilestoneID = 8;
    if (has_nextmilestoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nextmilestoneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .com.cfg.vo.MilestoneTarget Target = 9;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

    // required .com.cfg.vo.MilestoneAward Award = 10;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilestoneCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MilestoneCfg*>(&from));
}

void MilestoneCfg::MergeFrom(const MilestoneCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_milestoneid()) {
      set_milestoneid(from.milestoneid());
    }
    if (from.has_milestoneicon()) {
      set_milestoneicon(from.milestoneicon());
    }
    if (from.has_milestonename()) {
      set_milestonename(from.milestonename());
    }
    if (from.has_milestonedesc()) {
      set_milestonedesc(from.milestonedesc());
    }
    if (from.has_milestoneintro()) {
      set_milestoneintro(from.milestoneintro());
    }
    if (from.has_leadid()) {
      set_leadid(from.leadid());
    }
    if (from.has_firstmilestoneid()) {
      set_firstmilestoneid(from.firstmilestoneid());
    }
    if (from.has_nextmilestoneid()) {
      set_nextmilestoneid(from.nextmilestoneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_target()) {
      mutable_target()->::com::cfg::vo::MilestoneTarget::MergeFrom(from.target());
    }
    if (from.has_award()) {
      mutable_award()->::com::cfg::vo::MilestoneAward::MergeFrom(from.award());
    }
  }
}

void MilestoneCfg::CopyFrom(const MilestoneCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilestoneCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_award()) {
    if (!this->award().IsInitialized()) return false;
  }
  return true;
}

void MilestoneCfg::Swap(MilestoneCfg* other) {
  if (other != this) {
    std::swap(milestoneid_, other->milestoneid_);
    std::swap(milestoneicon_, other->milestoneicon_);
    std::swap(milestonename_, other->milestonename_);
    std::swap(milestonedesc_, other->milestonedesc_);
    std::swap(milestoneintro_, other->milestoneintro_);
    std::swap(leadid_, other->leadid_);
    std::swap(firstmilestoneid_, other->firstmilestoneid_);
    std::swap(nextmilestoneid_, other->nextmilestoneid_);
    std::swap(target_, other->target_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MilestoneCfg::GetTypeName() const {
  return "com.cfg.vo.MilestoneCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int MilestoneCfgSet::kMilestonecfgFieldNumber;
#endif  // !_MSC_VER

MilestoneCfgSet::MilestoneCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void MilestoneCfgSet::InitAsDefaultInstance() {
}

MilestoneCfgSet::MilestoneCfgSet(const MilestoneCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void MilestoneCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MilestoneCfgSet::~MilestoneCfgSet() {
  SharedDtor();
}

void MilestoneCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void MilestoneCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MilestoneCfgSet& MilestoneCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_MilestoneCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_MilestoneCfg_2eproto();
#endif
  return *default_instance_;
}

MilestoneCfgSet* MilestoneCfgSet::default_instance_ = NULL;

MilestoneCfgSet* MilestoneCfgSet::New() const {
  return new MilestoneCfgSet;
}

void MilestoneCfgSet::Clear() {
  milestonecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool MilestoneCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.MilestoneCfg milestonecfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_milestonecfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_milestonecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_milestonecfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MilestoneCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.MilestoneCfg milestonecfg = 1;
  for (int i = 0; i < this->milestonecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->milestonecfg(i), output);
  }

}

int MilestoneCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.MilestoneCfg milestonecfg = 1;
  total_size += 1 * this->milestonecfg_size();
  for (int i = 0; i < this->milestonecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->milestonecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MilestoneCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MilestoneCfgSet*>(&from));
}

void MilestoneCfgSet::MergeFrom(const MilestoneCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  milestonecfg_.MergeFrom(from.milestonecfg_);
}

void MilestoneCfgSet::CopyFrom(const MilestoneCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MilestoneCfgSet::IsInitialized() const {

  for (int i = 0; i < milestonecfg_size(); i++) {
    if (!this->milestonecfg(i).IsInitialized()) return false;
  }
  return true;
}

void MilestoneCfgSet::Swap(MilestoneCfgSet* other) {
  if (other != this) {
    milestonecfg_.Swap(&other->milestonecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string MilestoneCfgSet::GetTypeName() const {
  return "com.cfg.vo.MilestoneCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
