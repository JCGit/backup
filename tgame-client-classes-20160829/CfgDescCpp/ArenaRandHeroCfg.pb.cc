// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaRandHeroCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArenaRandHeroCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_ArenaRandHeroCfg_2eproto() {
  delete ArenaRandHeroCfg::default_instance_;
  delete ArenaRandHeroCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ArenaRandHeroCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ArenaRandHeroCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ArenaRandHeroCfg::default_instance_ = new ArenaRandHeroCfg();
  ArenaRandHeroCfgSet::default_instance_ = new ArenaRandHeroCfgSet();
  ArenaRandHeroCfg::default_instance_->InitAsDefaultInstance();
  ArenaRandHeroCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArenaRandHeroCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ArenaRandHeroCfg_2eproto_once_);
void protobuf_AddDesc_ArenaRandHeroCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ArenaRandHeroCfg_2eproto_once_,
                 &protobuf_AddDesc_ArenaRandHeroCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArenaRandHeroCfg_2eproto {
  StaticDescriptorInitializer_ArenaRandHeroCfg_2eproto() {
    protobuf_AddDesc_ArenaRandHeroCfg_2eproto();
  }
} static_descriptor_initializer_ArenaRandHeroCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ArenaRandHeroCfg::kHPFieldNumber;
const int ArenaRandHeroCfg::kMPFieldNumber;
const int ArenaRandHeroCfg::kDEFFieldNumber;
const int ArenaRandHeroCfg::kATKFieldNumber;
const int ArenaRandHeroCfg::kDEFTypeFieldNumber;
const int ArenaRandHeroCfg::kATKTypeFieldNumber;
const int ArenaRandHeroCfg::kMoveSpeedFieldNumber;
const int ArenaRandHeroCfg::kBackSpeedFieldNumber;
const int ArenaRandHeroCfg::kFightPowerFieldNumber;
const int ArenaRandHeroCfg::kShowIDFieldNumber;
const int ArenaRandHeroCfg::kDodgeDistFieldNumber;
const int ArenaRandHeroCfg::kDodgeCDFieldNumber;
const int ArenaRandHeroCfg::kAtkSpeedFieldNumber;
const int ArenaRandHeroCfg::kEvolutionSkillIDFieldNumber;
const int ArenaRandHeroCfg::kLevelFieldNumber;
const int ArenaRandHeroCfg::kHitFieldNumber;
const int ArenaRandHeroCfg::kHitWithoutInitValFieldNumber;
const int ArenaRandHeroCfg::kWeaponCfgIDFieldNumber;
const int ArenaRandHeroCfg::kWeaponLevelFieldNumber;
const int ArenaRandHeroCfg::kWeaponQualityFieldNumber;
const int ArenaRandHeroCfg::kScoreFieldNumber;
#endif  // !_MSC_VER

ArenaRandHeroCfg::ArenaRandHeroCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaRandHeroCfg::InitAsDefaultInstance() {
}

ArenaRandHeroCfg::ArenaRandHeroCfg(const ArenaRandHeroCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRandHeroCfg::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0u;
  mp_ = 0u;
  def_ = 0u;
  atk_ = 0u;
  deftype_ = 0u;
  atktype_ = 0u;
  movespeed_ = 0u;
  backspeed_ = 0u;
  fightpower_ = GOOGLE_ULONGLONG(0);
  showid_ = 0u;
  dodgedist_ = 0u;
  dodgecd_ = 0u;
  atkspeed_ = 0u;
  evolutionskillid_ = 0u;
  level_ = 0u;
  hit_ = 0u;
  hitwithoutinitval_ = 0u;
  weaponcfgid_ = 0u;
  weaponlevel_ = 0u;
  weaponquality_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRandHeroCfg::~ArenaRandHeroCfg() {
  SharedDtor();
}

void ArenaRandHeroCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaRandHeroCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaRandHeroCfg& ArenaRandHeroCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaRandHeroCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaRandHeroCfg_2eproto();
#endif
  return *default_instance_;
}

ArenaRandHeroCfg* ArenaRandHeroCfg::default_instance_ = NULL;

ArenaRandHeroCfg* ArenaRandHeroCfg::New() const {
  return new ArenaRandHeroCfg;
}

void ArenaRandHeroCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0u;
    mp_ = 0u;
    def_ = 0u;
    atk_ = 0u;
    deftype_ = 0u;
    atktype_ = 0u;
    movespeed_ = 0u;
    backspeed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fightpower_ = GOOGLE_ULONGLONG(0);
    showid_ = 0u;
    dodgedist_ = 0u;
    dodgecd_ = 0u;
    atkspeed_ = 0u;
    evolutionskillid_ = 0u;
    level_ = 0u;
    hit_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    hitwithoutinitval_ = 0u;
    weaponcfgid_ = 0u;
    weaponlevel_ = 0u;
    weaponquality_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaRandHeroCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MP;
        break;
      }

      // required uint32 MP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_DEF;
        break;
      }

      // required uint32 DEF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ATK;
        break;
      }

      // required uint32 ATK = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DEFType;
        break;
      }

      // required uint32 DEFType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DEFType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ATKType;
        break;
      }

      // required uint32 ATKType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ATKType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atktype_)));
          set_has_atktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_MoveSpeed;
        break;
      }

      // required uint32 MoveSpeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MoveSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_BackSpeed;
        break;
      }

      // required uint32 BackSpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BackSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &backspeed_)));
          set_has_backspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_FightPower;
        break;
      }

      // required uint64 FightPower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ShowID;
        break;
      }

      // required uint32 ShowID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showid_)));
          set_has_showid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_DodgeDist;
        break;
      }

      // required uint32 DodgeDist = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DodgeDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodgedist_)));
          set_has_dodgedist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_DodgeCD;
        break;
      }

      // required uint32 DodgeCD = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DodgeCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dodgecd_)));
          set_has_dodgecd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_AtkSpeed;
        break;
      }

      // required uint32 AtkSpeed = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkspeed_)));
          set_has_atkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_EvolutionSkillID;
        break;
      }

      // required uint32 EvolutionSkillID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvolutionSkillID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evolutionskillid_)));
          set_has_evolutionskillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Level;
        break;
      }

      // required uint32 Level = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_Hit;
        break;
      }

      // required uint32 Hit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Hit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hit_)));
          set_has_hit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_HitWithoutInitVal;
        break;
      }

      // required uint32 HitWithoutInitVal = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitWithoutInitVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitwithoutinitval_)));
          set_has_hitwithoutinitval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_WeaponCfgID;
        break;
      }

      // required uint32 WeaponCfgID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponcfgid_)));
          set_has_weaponcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_WeaponLevel;
        break;
      }

      // required uint32 WeaponLevel = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlevel_)));
          set_has_weaponlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_WeaponQuality;
        break;
      }

      // required uint32 WeaponQuality = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponquality_)));
          set_has_weaponquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_Score;
        break;
      }

      // required uint32 Score = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRandHeroCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HP = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hp(), output);
  }

  // required uint32 MP = 2;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mp(), output);
  }

  // required uint32 DEF = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def(), output);
  }

  // required uint32 ATK = 4;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atk(), output);
  }

  // required uint32 DEFType = 5;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->deftype(), output);
  }

  // required uint32 ATKType = 6;
  if (has_atktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->atktype(), output);
  }

  // required uint32 MoveSpeed = 7;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->movespeed(), output);
  }

  // required uint32 BackSpeed = 8;
  if (has_backspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->backspeed(), output);
  }

  // required uint64 FightPower = 9;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->fightpower(), output);
  }

  // required uint32 ShowID = 10;
  if (has_showid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->showid(), output);
  }

  // required uint32 DodgeDist = 11;
  if (has_dodgedist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->dodgedist(), output);
  }

  // required uint32 DodgeCD = 12;
  if (has_dodgecd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->dodgecd(), output);
  }

  // required uint32 AtkSpeed = 13;
  if (has_atkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->atkspeed(), output);
  }

  // required uint32 EvolutionSkillID = 14;
  if (has_evolutionskillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->evolutionskillid(), output);
  }

  // required uint32 Level = 15;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->level(), output);
  }

  // required uint32 Hit = 16;
  if (has_hit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->hit(), output);
  }

  // required uint32 HitWithoutInitVal = 17;
  if (has_hitwithoutinitval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->hitwithoutinitval(), output);
  }

  // required uint32 WeaponCfgID = 18;
  if (has_weaponcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->weaponcfgid(), output);
  }

  // required uint32 WeaponLevel = 19;
  if (has_weaponlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->weaponlevel(), output);
  }

  // required uint32 WeaponQuality = 20;
  if (has_weaponquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->weaponquality(), output);
  }

  // required uint32 Score = 21;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->score(), output);
  }

}

int ArenaRandHeroCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HP = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // required uint32 MP = 2;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mp());
    }

    // required uint32 DEF = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }

    // required uint32 ATK = 4;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 DEFType = 5;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // required uint32 ATKType = 6;
    if (has_atktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atktype());
    }

    // required uint32 MoveSpeed = 7;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->movespeed());
    }

    // required uint32 BackSpeed = 8;
    if (has_backspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->backspeed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 FightPower = 9;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

    // required uint32 ShowID = 10;
    if (has_showid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showid());
    }

    // required uint32 DodgeDist = 11;
    if (has_dodgedist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodgedist());
    }

    // required uint32 DodgeCD = 12;
    if (has_dodgecd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dodgecd());
    }

    // required uint32 AtkSpeed = 13;
    if (has_atkspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkspeed());
    }

    // required uint32 EvolutionSkillID = 14;
    if (has_evolutionskillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evolutionskillid());
    }

    // required uint32 Level = 15;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 Hit = 16;
    if (has_hit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hit());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 HitWithoutInitVal = 17;
    if (has_hitwithoutinitval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitwithoutinitval());
    }

    // required uint32 WeaponCfgID = 18;
    if (has_weaponcfgid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponcfgid());
    }

    // required uint32 WeaponLevel = 19;
    if (has_weaponlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlevel());
    }

    // required uint32 WeaponQuality = 20;
    if (has_weaponquality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponquality());
    }

    // required uint32 Score = 21;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRandHeroCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaRandHeroCfg*>(&from));
}

void ArenaRandHeroCfg::MergeFrom(const ArenaRandHeroCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_atktype()) {
      set_atktype(from.atktype());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_backspeed()) {
      set_backspeed(from.backspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_showid()) {
      set_showid(from.showid());
    }
    if (from.has_dodgedist()) {
      set_dodgedist(from.dodgedist());
    }
    if (from.has_dodgecd()) {
      set_dodgecd(from.dodgecd());
    }
    if (from.has_atkspeed()) {
      set_atkspeed(from.atkspeed());
    }
    if (from.has_evolutionskillid()) {
      set_evolutionskillid(from.evolutionskillid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hit()) {
      set_hit(from.hit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hitwithoutinitval()) {
      set_hitwithoutinitval(from.hitwithoutinitval());
    }
    if (from.has_weaponcfgid()) {
      set_weaponcfgid(from.weaponcfgid());
    }
    if (from.has_weaponlevel()) {
      set_weaponlevel(from.weaponlevel());
    }
    if (from.has_weaponquality()) {
      set_weaponquality(from.weaponquality());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
}

void ArenaRandHeroCfg::CopyFrom(const ArenaRandHeroCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRandHeroCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void ArenaRandHeroCfg::Swap(ArenaRandHeroCfg* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(def_, other->def_);
    std::swap(atk_, other->atk_);
    std::swap(deftype_, other->deftype_);
    std::swap(atktype_, other->atktype_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(backspeed_, other->backspeed_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(showid_, other->showid_);
    std::swap(dodgedist_, other->dodgedist_);
    std::swap(dodgecd_, other->dodgecd_);
    std::swap(atkspeed_, other->atkspeed_);
    std::swap(evolutionskillid_, other->evolutionskillid_);
    std::swap(level_, other->level_);
    std::swap(hit_, other->hit_);
    std::swap(hitwithoutinitval_, other->hitwithoutinitval_);
    std::swap(weaponcfgid_, other->weaponcfgid_);
    std::swap(weaponlevel_, other->weaponlevel_);
    std::swap(weaponquality_, other->weaponquality_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaRandHeroCfg::GetTypeName() const {
  return "com.cfg.vo.ArenaRandHeroCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaRandHeroCfgSet::kArenaRandHeroCfgFieldNumber;
#endif  // !_MSC_VER

ArenaRandHeroCfgSet::ArenaRandHeroCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaRandHeroCfgSet::InitAsDefaultInstance() {
}

ArenaRandHeroCfgSet::ArenaRandHeroCfgSet(const ArenaRandHeroCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaRandHeroCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaRandHeroCfgSet::~ArenaRandHeroCfgSet() {
  SharedDtor();
}

void ArenaRandHeroCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaRandHeroCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaRandHeroCfgSet& ArenaRandHeroCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaRandHeroCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaRandHeroCfg_2eproto();
#endif
  return *default_instance_;
}

ArenaRandHeroCfgSet* ArenaRandHeroCfgSet::default_instance_ = NULL;

ArenaRandHeroCfgSet* ArenaRandHeroCfgSet::New() const {
  return new ArenaRandHeroCfgSet;
}

void ArenaRandHeroCfgSet::Clear() {
  arenarandherocfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaRandHeroCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.ArenaRandHeroCfg arenaRandHeroCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaRandHeroCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenarandherocfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenaRandHeroCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaRandHeroCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.ArenaRandHeroCfg arenaRandHeroCfg = 1;
  for (int i = 0; i < this->arenarandherocfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->arenarandherocfg(i), output);
  }

}

int ArenaRandHeroCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.ArenaRandHeroCfg arenaRandHeroCfg = 1;
  total_size += 1 * this->arenarandherocfg_size();
  for (int i = 0; i < this->arenarandherocfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenarandherocfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaRandHeroCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaRandHeroCfgSet*>(&from));
}

void ArenaRandHeroCfgSet::MergeFrom(const ArenaRandHeroCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenarandherocfg_.MergeFrom(from.arenarandherocfg_);
}

void ArenaRandHeroCfgSet::CopyFrom(const ArenaRandHeroCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaRandHeroCfgSet::IsInitialized() const {

  for (int i = 0; i < arenarandherocfg_size(); i++) {
    if (!this->arenarandherocfg(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaRandHeroCfgSet::Swap(ArenaRandHeroCfgSet* other) {
  if (other != this) {
    arenarandherocfg_.Swap(&other->arenarandherocfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaRandHeroCfgSet::GetTypeName() const {
  return "com.cfg.vo.ArenaRandHeroCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
