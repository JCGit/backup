// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyInstanceCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DailyInstanceCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DailyInstanceCfg_2eproto() {
  delete DailyInstanceElmt::default_instance_;
  delete DailyInstanceCfg::default_instance_;
  delete DailyInstanceCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DailyInstanceCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DailyInstanceCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DailyInstanceElmt::default_instance_ = new DailyInstanceElmt();
  DailyInstanceCfg::default_instance_ = new DailyInstanceCfg();
  DailyInstanceCfgSet::default_instance_ = new DailyInstanceCfgSet();
  DailyInstanceElmt::default_instance_->InitAsDefaultInstance();
  DailyInstanceCfg::default_instance_->InitAsDefaultInstance();
  DailyInstanceCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DailyInstanceCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DailyInstanceCfg_2eproto_once_);
void protobuf_AddDesc_DailyInstanceCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DailyInstanceCfg_2eproto_once_,
                 &protobuf_AddDesc_DailyInstanceCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DailyInstanceCfg_2eproto {
  StaticDescriptorInitializer_DailyInstanceCfg_2eproto() {
    protobuf_AddDesc_DailyInstanceCfg_2eproto();
  }
} static_descriptor_initializer_DailyInstanceCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DailyInstanceElmt::kInstanceIDFieldNumber;
const int DailyInstanceElmt::kAwardPkgIDFieldNumber;
const int DailyInstanceElmt::kFPFieldNumber;
#endif  // !_MSC_VER

DailyInstanceElmt::DailyInstanceElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyInstanceElmt::InitAsDefaultInstance() {
}

DailyInstanceElmt::DailyInstanceElmt(const DailyInstanceElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyInstanceElmt::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0u;
  awardpkgid_ = 0u;
  fp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyInstanceElmt::~DailyInstanceElmt() {
  SharedDtor();
}

void DailyInstanceElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyInstanceElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyInstanceElmt& DailyInstanceElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyInstanceCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyInstanceCfg_2eproto();
#endif
  return *default_instance_;
}

DailyInstanceElmt* DailyInstanceElmt::default_instance_ = NULL;

DailyInstanceElmt* DailyInstanceElmt::New() const {
  return new DailyInstanceElmt;
}

void DailyInstanceElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0u;
    awardpkgid_ = 0u;
    fp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyInstanceElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_AwardPkgID;
        break;
      }

      // required uint32 AwardPkgID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardPkgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardpkgid_)));
          set_has_awardpkgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FP;
        break;
      }

      // required uint32 FP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fp_)));
          set_has_fp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyInstanceElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->instanceid(), output);
  }

  // required uint32 AwardPkgID = 2;
  if (has_awardpkgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->awardpkgid(), output);
  }

  // required uint32 FP = 3;
  if (has_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fp(), output);
  }

}

int DailyInstanceElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instanceid());
    }

    // required uint32 AwardPkgID = 2;
    if (has_awardpkgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardpkgid());
    }

    // required uint32 FP = 3;
    if (has_fp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyInstanceElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyInstanceElmt*>(&from));
}

void DailyInstanceElmt::MergeFrom(const DailyInstanceElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_awardpkgid()) {
      set_awardpkgid(from.awardpkgid());
    }
    if (from.has_fp()) {
      set_fp(from.fp());
    }
  }
}

void DailyInstanceElmt::CopyFrom(const DailyInstanceElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyInstanceElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DailyInstanceElmt::Swap(DailyInstanceElmt* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(awardpkgid_, other->awardpkgid_);
    std::swap(fp_, other->fp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyInstanceElmt::GetTypeName() const {
  return "com.cfg.vo.DailyInstanceElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyInstanceCfg::kKeyFieldNumber;
const int DailyInstanceCfg::kTodayInstancesFieldNumber;
const int DailyInstanceCfg::kOpenDayFieldNumber;
const int DailyInstanceCfg::kBGNameFieldNumber;
const int DailyInstanceCfg::kInstanceNameFieldNumber;
const int DailyInstanceCfg::kOpenDayDescFieldNumber;
#endif  // !_MSC_VER

DailyInstanceCfg::DailyInstanceCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyInstanceCfg::InitAsDefaultInstance() {
}

DailyInstanceCfg::DailyInstanceCfg(const DailyInstanceCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyInstanceCfg::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  bgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instancename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opendaydesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyInstanceCfg::~DailyInstanceCfg() {
  SharedDtor();
}

void DailyInstanceCfg::SharedDtor() {
  if (bgname_ != &::google::protobuf::internal::kEmptyString) {
    delete bgname_;
  }
  if (instancename_ != &::google::protobuf::internal::kEmptyString) {
    delete instancename_;
  }
  if (opendaydesc_ != &::google::protobuf::internal::kEmptyString) {
    delete opendaydesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyInstanceCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyInstanceCfg& DailyInstanceCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyInstanceCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyInstanceCfg_2eproto();
#endif
  return *default_instance_;
}

DailyInstanceCfg* DailyInstanceCfg::default_instance_ = NULL;

DailyInstanceCfg* DailyInstanceCfg::New() const {
  return new DailyInstanceCfg;
}

void DailyInstanceCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    if (has_bgname()) {
      if (bgname_ != &::google::protobuf::internal::kEmptyString) {
        bgname_->clear();
      }
    }
    if (has_instancename()) {
      if (instancename_ != &::google::protobuf::internal::kEmptyString) {
        instancename_->clear();
      }
    }
    if (has_opendaydesc()) {
      if (opendaydesc_ != &::google::protobuf::internal::kEmptyString) {
        opendaydesc_->clear();
      }
    }
  }
  todayinstances_.Clear();
  openday_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyInstanceCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TodayInstances;
        break;
      }

      // repeated .com.cfg.vo.DailyInstanceElmt TodayInstances = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TodayInstances:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_todayinstances()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TodayInstances;
        if (input->ExpectTag(24)) goto parse_OpenDay;
        break;
      }

      // repeated uint32 OpenDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_openday())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_openday())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OpenDay;
        if (input->ExpectTag(34)) goto parse_BGName;
        break;
      }

      // required string BGName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BGName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_InstanceName;
        break;
      }

      // required string InstanceName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InstanceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instancename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_OpenDayDesc;
        break;
      }

      // required string OpenDayDesc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenDayDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opendaydesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyInstanceCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // repeated .com.cfg.vo.DailyInstanceElmt TodayInstances = 2;
  for (int i = 0; i < this->todayinstances_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->todayinstances(i), output);
  }

  // repeated uint32 OpenDay = 3;
  for (int i = 0; i < this->openday_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->openday(i), output);
  }

  // required string BGName = 4;
  if (has_bgname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bgname(), output);
  }

  // required string InstanceName = 5;
  if (has_instancename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->instancename(), output);
  }

  // required string OpenDayDesc = 6;
  if (has_opendaydesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->opendaydesc(), output);
  }

}

int DailyInstanceCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // required string BGName = 4;
    if (has_bgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bgname());
    }

    // required string InstanceName = 5;
    if (has_instancename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instancename());
    }

    // required string OpenDayDesc = 6;
    if (has_opendaydesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opendaydesc());
    }

  }
  // repeated .com.cfg.vo.DailyInstanceElmt TodayInstances = 2;
  total_size += 1 * this->todayinstances_size();
  for (int i = 0; i < this->todayinstances_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->todayinstances(i));
  }

  // repeated uint32 OpenDay = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->openday_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->openday(i));
    }
    total_size += 1 * this->openday_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyInstanceCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyInstanceCfg*>(&from));
}

void DailyInstanceCfg::MergeFrom(const DailyInstanceCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  todayinstances_.MergeFrom(from.todayinstances_);
  openday_.MergeFrom(from.openday_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_bgname()) {
      set_bgname(from.bgname());
    }
    if (from.has_instancename()) {
      set_instancename(from.instancename());
    }
    if (from.has_opendaydesc()) {
      set_opendaydesc(from.opendaydesc());
    }
  }
}

void DailyInstanceCfg::CopyFrom(const DailyInstanceCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyInstanceCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000039) != 0x00000039) return false;

  for (int i = 0; i < todayinstances_size(); i++) {
    if (!this->todayinstances(i).IsInitialized()) return false;
  }
  return true;
}

void DailyInstanceCfg::Swap(DailyInstanceCfg* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    todayinstances_.Swap(&other->todayinstances_);
    openday_.Swap(&other->openday_);
    std::swap(bgname_, other->bgname_);
    std::swap(instancename_, other->instancename_);
    std::swap(opendaydesc_, other->opendaydesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyInstanceCfg::GetTypeName() const {
  return "com.cfg.vo.DailyInstanceCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyInstanceCfgSet::kInstancecfgFieldNumber;
#endif  // !_MSC_VER

DailyInstanceCfgSet::DailyInstanceCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyInstanceCfgSet::InitAsDefaultInstance() {
}

DailyInstanceCfgSet::DailyInstanceCfgSet(const DailyInstanceCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyInstanceCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyInstanceCfgSet::~DailyInstanceCfgSet() {
  SharedDtor();
}

void DailyInstanceCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyInstanceCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyInstanceCfgSet& DailyInstanceCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyInstanceCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyInstanceCfg_2eproto();
#endif
  return *default_instance_;
}

DailyInstanceCfgSet* DailyInstanceCfgSet::default_instance_ = NULL;

DailyInstanceCfgSet* DailyInstanceCfgSet::New() const {
  return new DailyInstanceCfgSet;
}

void DailyInstanceCfgSet::Clear() {
  instancecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyInstanceCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DailyInstanceCfg instancecfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instancecfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_instancecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_instancecfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyInstanceCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DailyInstanceCfg instancecfg = 1;
  for (int i = 0; i < this->instancecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->instancecfg(i), output);
  }

}

int DailyInstanceCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DailyInstanceCfg instancecfg = 1;
  total_size += 1 * this->instancecfg_size();
  for (int i = 0; i < this->instancecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->instancecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyInstanceCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyInstanceCfgSet*>(&from));
}

void DailyInstanceCfgSet::MergeFrom(const DailyInstanceCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  instancecfg_.MergeFrom(from.instancecfg_);
}

void DailyInstanceCfgSet::CopyFrom(const DailyInstanceCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyInstanceCfgSet::IsInitialized() const {

  for (int i = 0; i < instancecfg_size(); i++) {
    if (!this->instancecfg(i).IsInitialized()) return false;
  }
  return true;
}

void DailyInstanceCfgSet::Swap(DailyInstanceCfgSet* other) {
  if (other != this) {
    instancecfg_.Swap(&other->instancecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyInstanceCfgSet::GetTypeName() const {
  return "com.cfg.vo.DailyInstanceCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
