// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NihilityMonsterShowCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NihilityMonsterShowCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_NihilityMonsterShowCfg_2eproto() {
  delete NihilityMonsterShowCfg::default_instance_;
  delete NihilityMonsterShowCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_NihilityMonsterShowCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_NihilityMonsterShowCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::com::cfg::vo::protobuf_AddDesc_MonsterCfg_2eproto();
  NihilityMonsterShowCfg::default_instance_ = new NihilityMonsterShowCfg();
  NihilityMonsterShowCfgSet::default_instance_ = new NihilityMonsterShowCfgSet();
  NihilityMonsterShowCfg::default_instance_->InitAsDefaultInstance();
  NihilityMonsterShowCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NihilityMonsterShowCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NihilityMonsterShowCfg_2eproto_once_);
void protobuf_AddDesc_NihilityMonsterShowCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NihilityMonsterShowCfg_2eproto_once_,
                 &protobuf_AddDesc_NihilityMonsterShowCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NihilityMonsterShowCfg_2eproto {
  StaticDescriptorInitializer_NihilityMonsterShowCfg_2eproto() {
    protobuf_AddDesc_NihilityMonsterShowCfg_2eproto();
  }
} static_descriptor_initializer_NihilityMonsterShowCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int NihilityMonsterShowCfg::kCfgIDFieldNumber;
const int NihilityMonsterShowCfg::kAvatarFieldNumber;
const int NihilityMonsterShowCfg::kWalkTypeFieldNumber;
const int NihilityMonsterShowCfg::kAtktypeFieldNumber;
const int NihilityMonsterShowCfg::kAtkAttTypeFieldNumber;
const int NihilityMonsterShowCfg::kDeftypeFieldNumber;
const int NihilityMonsterShowCfg::kHighSpeedFieldNumber;
const int NihilityMonsterShowCfg::kEmergeVoiceFieldNumber;
const int NihilityMonsterShowCfg::kHurtVoiceFieldNumber;
const int NihilityMonsterShowCfg::kDieVoiceFieldNumber;
const int NihilityMonsterShowCfg::kSkillsFieldNumber;
const int NihilityMonsterShowCfg::kMonstertypeFieldNumber;
const int NihilityMonsterShowCfg::kHurtActionCDFieldNumber;
const int NihilityMonsterShowCfg::kMonsternameFieldNumber;
const int NihilityMonsterShowCfg::kDescFieldNumber;
const int NihilityMonsterShowCfg::kBallisticFieldNumber;
const int NihilityMonsterShowCfg::kDieAnimationFieldNumber;
const int NihilityMonsterShowCfg::kMinWalkSpeedFieldNumber;
const int NihilityMonsterShowCfg::kMaxWalkSpeedFieldNumber;
const int NihilityMonsterShowCfg::kBubbleIdFieldNumber;
const int NihilityMonsterShowCfg::kFloorBuffIdFieldNumber;
const int NihilityMonsterShowCfg::kAiIDFieldNumber;
const int NihilityMonsterShowCfg::kPatrolAreaFieldNumber;
const int NihilityMonsterShowCfg::kHurtColorFieldNumber;
const int NihilityMonsterShowCfg::kInitScaleFieldNumber;
const int NihilityMonsterShowCfg::kIsBlockFieldNumber;
const int NihilityMonsterShowCfg::kHurtAnimationFieldNumber;
const int NihilityMonsterShowCfg::kDropGoldNumFieldNumber;
const int NihilityMonsterShowCfg::kScoreFieldNumber;
const int NihilityMonsterShowCfg::kActionsFieldNumber;
const int NihilityMonsterShowCfg::kHeadImgFieldNumber;
#endif  // !_MSC_VER

NihilityMonsterShowCfg::NihilityMonsterShowCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NihilityMonsterShowCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  actions_ = const_cast< ::com::cfg::vo::Movement*>(
      ::com::cfg::vo::Movement::internal_default_instance());
#else
  actions_ = const_cast< ::com::cfg::vo::Movement*>(&::com::cfg::vo::Movement::default_instance());
#endif
}

NihilityMonsterShowCfg::NihilityMonsterShowCfg(const NihilityMonsterShowCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NihilityMonsterShowCfg::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  walktype_ = 0u;
  atktype_ = 0u;
  atkatttype_ = 0u;
  deftype_ = 0u;
  highspeed_ = 0u;
  emergevoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hurtvoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dievoice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monstertype_ = 0u;
  hurtactioncd_ = 0u;
  monstername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ballistic_ = 0u;
  dieanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minwalkspeed_ = 0u;
  maxwalkspeed_ = 0u;
  bubbleid_ = 0u;
  floorbuffid_ = 0u;
  aiid_ = 0u;
  patrolarea_ = 0u;
  hurtcolor_ = 0u;
  initscale_ = 0u;
  isblock_ = 0u;
  hurtanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dropgoldnum_ = 0u;
  score_ = 0u;
  actions_ = NULL;
  headimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NihilityMonsterShowCfg::~NihilityMonsterShowCfg() {
  SharedDtor();
}

void NihilityMonsterShowCfg::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  if (emergevoice_ != &::google::protobuf::internal::kEmptyString) {
    delete emergevoice_;
  }
  if (hurtvoice_ != &::google::protobuf::internal::kEmptyString) {
    delete hurtvoice_;
  }
  if (dievoice_ != &::google::protobuf::internal::kEmptyString) {
    delete dievoice_;
  }
  if (monstername_ != &::google::protobuf::internal::kEmptyString) {
    delete monstername_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (dieanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete dieanimation_;
  }
  if (hurtanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete hurtanimation_;
  }
  if (headimg_ != &::google::protobuf::internal::kEmptyString) {
    delete headimg_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete actions_;
  }
}

void NihilityMonsterShowCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NihilityMonsterShowCfg& NihilityMonsterShowCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NihilityMonsterShowCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NihilityMonsterShowCfg_2eproto();
#endif
  return *default_instance_;
}

NihilityMonsterShowCfg* NihilityMonsterShowCfg::default_instance_ = NULL;

NihilityMonsterShowCfg* NihilityMonsterShowCfg::New() const {
  return new NihilityMonsterShowCfg;
}

void NihilityMonsterShowCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
    walktype_ = 0u;
    atktype_ = 0u;
    atkatttype_ = 0u;
    deftype_ = 0u;
    highspeed_ = 0u;
    if (has_emergevoice()) {
      if (emergevoice_ != &::google::protobuf::internal::kEmptyString) {
        emergevoice_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_hurtvoice()) {
      if (hurtvoice_ != &::google::protobuf::internal::kEmptyString) {
        hurtvoice_->clear();
      }
    }
    if (has_dievoice()) {
      if (dievoice_ != &::google::protobuf::internal::kEmptyString) {
        dievoice_->clear();
      }
    }
    monstertype_ = 0u;
    hurtactioncd_ = 0u;
    if (has_monstername()) {
      if (monstername_ != &::google::protobuf::internal::kEmptyString) {
        monstername_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    ballistic_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_dieanimation()) {
      if (dieanimation_ != &::google::protobuf::internal::kEmptyString) {
        dieanimation_->clear();
      }
    }
    minwalkspeed_ = 0u;
    maxwalkspeed_ = 0u;
    bubbleid_ = 0u;
    floorbuffid_ = 0u;
    aiid_ = 0u;
    patrolarea_ = 0u;
    hurtcolor_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    initscale_ = 0u;
    isblock_ = 0u;
    if (has_hurtanimation()) {
      if (hurtanimation_ != &::google::protobuf::internal::kEmptyString) {
        hurtanimation_->clear();
      }
    }
    dropgoldnum_ = 0u;
    score_ = 0u;
    if (has_actions()) {
      if (actions_ != NULL) actions_->::com::cfg::vo::Movement::Clear();
    }
    if (has_headimg()) {
      if (headimg_ != &::google::protobuf::internal::kEmptyString) {
        headimg_->clear();
      }
    }
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NihilityMonsterShowCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_avatar;
        break;
      }

      // required string avatar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_walkType;
        break;
      }

      // required uint32 walkType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_walkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &walktype_)));
          set_has_walktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_atktype;
        break;
      }

      // required uint32 atktype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atktype_)));
          set_has_atktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atkAttType;
        break;
      }

      // required uint32 atkAttType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkAttType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkatttype_)));
          set_has_atkatttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_deftype;
        break;
      }

      // required uint32 deftype = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deftype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deftype_)));
          set_has_deftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_highSpeed;
        break;
      }

      // required uint32 highSpeed = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_highSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highspeed_)));
          set_has_highspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_emergeVoice;
        break;
      }

      // required string emergeVoice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emergeVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emergevoice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_hurtVoice;
        break;
      }

      // required string hurtVoice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurtVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hurtvoice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_dieVoice;
        break;
      }

      // required string dieVoice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dieVoice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dievoice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skills;
        break;
      }

      // repeated uint32 skills = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 88, input, this->mutable_skills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_skills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_skills;
        if (input->ExpectTag(96)) goto parse_monstertype;
        break;
      }

      // required uint32 monstertype = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monstertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monstertype_)));
          set_has_monstertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hurtActionCD;
        break;
      }

      // required uint32 hurtActionCD = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hurtActionCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtactioncd_)));
          set_has_hurtactioncd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_monstername;
        break;
      }

      // required string monstername = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monstername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monstername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_desc;
        break;
      }

      // required string desc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ballistic;
        break;
      }

      // required uint32 ballistic = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ballistic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ballistic_)));
          set_has_ballistic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_dieAnimation;
        break;
      }

      // required string dieAnimation = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dieAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dieanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_minWalkSpeed;
        break;
      }

      // required uint32 minWalkSpeed = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &minwalkspeed_)));
          set_has_minwalkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_maxWalkSpeed;
        break;
      }

      // required uint32 maxWalkSpeed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxWalkSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxwalkspeed_)));
          set_has_maxwalkspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_bubbleId;
        break;
      }

      // required uint32 bubbleId = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bubbleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bubbleid_)));
          set_has_bubbleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_floorBuffId;
        break;
      }

      // required uint32 floorBuffId = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_floorBuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floorbuffid_)));
          set_has_floorbuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_aiID;
        break;
      }

      // required uint32 aiID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aiID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aiid_)));
          set_has_aiid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_patrolArea;
        break;
      }

      // required uint32 patrolArea = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patrolArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &patrolarea_)));
          set_has_patrolarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_HurtColor;
        break;
      }

      // required uint32 HurtColor = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HurtColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hurtcolor_)));
          set_has_hurtcolor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_InitScale;
        break;
      }

      // required uint32 InitScale = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InitScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initscale_)));
          set_has_initscale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_IsBlock;
        break;
      }

      // required uint32 IsBlock = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isblock_)));
          set_has_isblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_hurtAnimation;
        break;
      }

      // required string hurtAnimation = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hurtAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hurtanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_dropGoldNum;
        break;
      }

      // required uint32 dropGoldNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropGoldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropgoldnum_)));
          set_has_dropgoldnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_score;
        break;
      }

      // required uint32 score = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_actions;
        break;
      }

      // required .com.cfg.vo.Movement actions = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_headImg;
        break;
      }

      // required string headImg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_headImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_headimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NihilityMonsterShowCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cfgID = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required string avatar = 2;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->avatar(), output);
  }

  // required uint32 walkType = 3;
  if (has_walktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->walktype(), output);
  }

  // required uint32 atktype = 4;
  if (has_atktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atktype(), output);
  }

  // required uint32 atkAttType = 5;
  if (has_atkatttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->atkatttype(), output);
  }

  // required uint32 deftype = 6;
  if (has_deftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->deftype(), output);
  }

  // required uint32 highSpeed = 7;
  if (has_highspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->highspeed(), output);
  }

  // required string emergeVoice = 8;
  if (has_emergevoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->emergevoice(), output);
  }

  // required string hurtVoice = 9;
  if (has_hurtvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->hurtvoice(), output);
  }

  // required string dieVoice = 10;
  if (has_dievoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dievoice(), output);
  }

  // repeated uint32 skills = 11;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      11, this->skills(i), output);
  }

  // required uint32 monstertype = 12;
  if (has_monstertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->monstertype(), output);
  }

  // required uint32 hurtActionCD = 13;
  if (has_hurtactioncd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->hurtactioncd(), output);
  }

  // required string monstername = 14;
  if (has_monstername()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->monstername(), output);
  }

  // required string desc = 15;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->desc(), output);
  }

  // required uint32 ballistic = 16;
  if (has_ballistic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->ballistic(), output);
  }

  // required string dieAnimation = 17;
  if (has_dieanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->dieanimation(), output);
  }

  // required uint32 minWalkSpeed = 18;
  if (has_minwalkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->minwalkspeed(), output);
  }

  // required uint32 maxWalkSpeed = 19;
  if (has_maxwalkspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->maxwalkspeed(), output);
  }

  // required uint32 bubbleId = 20;
  if (has_bubbleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->bubbleid(), output);
  }

  // required uint32 floorBuffId = 21;
  if (has_floorbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->floorbuffid(), output);
  }

  // required uint32 aiID = 22;
  if (has_aiid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->aiid(), output);
  }

  // required uint32 patrolArea = 23;
  if (has_patrolarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->patrolarea(), output);
  }

  // required uint32 HurtColor = 24;
  if (has_hurtcolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->hurtcolor(), output);
  }

  // required uint32 InitScale = 25;
  if (has_initscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->initscale(), output);
  }

  // required uint32 IsBlock = 26;
  if (has_isblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->isblock(), output);
  }

  // required string hurtAnimation = 27;
  if (has_hurtanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->hurtanimation(), output);
  }

  // required uint32 dropGoldNum = 28;
  if (has_dropgoldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->dropgoldnum(), output);
  }

  // required uint32 score = 29;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->score(), output);
  }

  // required .com.cfg.vo.Movement actions = 30;
  if (has_actions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      30, this->actions(), output);
  }

  // required string headImg = 31;
  if (has_headimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->headimg(), output);
  }

}

int NihilityMonsterShowCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cfgID = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required string avatar = 2;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // required uint32 walkType = 3;
    if (has_walktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->walktype());
    }

    // required uint32 atktype = 4;
    if (has_atktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atktype());
    }

    // required uint32 atkAttType = 5;
    if (has_atkatttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkatttype());
    }

    // required uint32 deftype = 6;
    if (has_deftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deftype());
    }

    // required uint32 highSpeed = 7;
    if (has_highspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highspeed());
    }

    // required string emergeVoice = 8;
    if (has_emergevoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->emergevoice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string hurtVoice = 9;
    if (has_hurtvoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hurtvoice());
    }

    // required string dieVoice = 10;
    if (has_dievoice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dievoice());
    }

    // required uint32 monstertype = 12;
    if (has_monstertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monstertype());
    }

    // required uint32 hurtActionCD = 13;
    if (has_hurtactioncd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtactioncd());
    }

    // required string monstername = 14;
    if (has_monstername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monstername());
    }

    // required string desc = 15;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required uint32 ballistic = 16;
    if (has_ballistic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ballistic());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string dieAnimation = 17;
    if (has_dieanimation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dieanimation());
    }

    // required uint32 minWalkSpeed = 18;
    if (has_minwalkspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->minwalkspeed());
    }

    // required uint32 maxWalkSpeed = 19;
    if (has_maxwalkspeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxwalkspeed());
    }

    // required uint32 bubbleId = 20;
    if (has_bubbleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bubbleid());
    }

    // required uint32 floorBuffId = 21;
    if (has_floorbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floorbuffid());
    }

    // required uint32 aiID = 22;
    if (has_aiid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aiid());
    }

    // required uint32 patrolArea = 23;
    if (has_patrolarea()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->patrolarea());
    }

    // required uint32 HurtColor = 24;
    if (has_hurtcolor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hurtcolor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 InitScale = 25;
    if (has_initscale()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initscale());
    }

    // required uint32 IsBlock = 26;
    if (has_isblock()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isblock());
    }

    // required string hurtAnimation = 27;
    if (has_hurtanimation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hurtanimation());
    }

    // required uint32 dropGoldNum = 28;
    if (has_dropgoldnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropgoldnum());
    }

    // required uint32 score = 29;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // required .com.cfg.vo.Movement actions = 30;
    if (has_actions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actions());
    }

    // required string headImg = 31;
    if (has_headimg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->headimg());
    }

  }
  // repeated uint32 skills = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->skills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->skills(i));
    }
    total_size += 1 * this->skills_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NihilityMonsterShowCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NihilityMonsterShowCfg*>(&from));
}

void NihilityMonsterShowCfg::MergeFrom(const NihilityMonsterShowCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
    if (from.has_walktype()) {
      set_walktype(from.walktype());
    }
    if (from.has_atktype()) {
      set_atktype(from.atktype());
    }
    if (from.has_atkatttype()) {
      set_atkatttype(from.atkatttype());
    }
    if (from.has_deftype()) {
      set_deftype(from.deftype());
    }
    if (from.has_highspeed()) {
      set_highspeed(from.highspeed());
    }
    if (from.has_emergevoice()) {
      set_emergevoice(from.emergevoice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hurtvoice()) {
      set_hurtvoice(from.hurtvoice());
    }
    if (from.has_dievoice()) {
      set_dievoice(from.dievoice());
    }
    if (from.has_monstertype()) {
      set_monstertype(from.monstertype());
    }
    if (from.has_hurtactioncd()) {
      set_hurtactioncd(from.hurtactioncd());
    }
    if (from.has_monstername()) {
      set_monstername(from.monstername());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_ballistic()) {
      set_ballistic(from.ballistic());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_dieanimation()) {
      set_dieanimation(from.dieanimation());
    }
    if (from.has_minwalkspeed()) {
      set_minwalkspeed(from.minwalkspeed());
    }
    if (from.has_maxwalkspeed()) {
      set_maxwalkspeed(from.maxwalkspeed());
    }
    if (from.has_bubbleid()) {
      set_bubbleid(from.bubbleid());
    }
    if (from.has_floorbuffid()) {
      set_floorbuffid(from.floorbuffid());
    }
    if (from.has_aiid()) {
      set_aiid(from.aiid());
    }
    if (from.has_patrolarea()) {
      set_patrolarea(from.patrolarea());
    }
    if (from.has_hurtcolor()) {
      set_hurtcolor(from.hurtcolor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_initscale()) {
      set_initscale(from.initscale());
    }
    if (from.has_isblock()) {
      set_isblock(from.isblock());
    }
    if (from.has_hurtanimation()) {
      set_hurtanimation(from.hurtanimation());
    }
    if (from.has_dropgoldnum()) {
      set_dropgoldnum(from.dropgoldnum());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_actions()) {
      mutable_actions()->::com::cfg::vo::Movement::MergeFrom(from.actions());
    }
    if (from.has_headimg()) {
      set_headimg(from.headimg());
    }
  }
}

void NihilityMonsterShowCfg::CopyFrom(const NihilityMonsterShowCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NihilityMonsterShowCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x7ffffbff) != 0x7ffffbff) return false;

  if (has_actions()) {
    if (!this->actions().IsInitialized()) return false;
  }
  return true;
}

void NihilityMonsterShowCfg::Swap(NihilityMonsterShowCfg* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(avatar_, other->avatar_);
    std::swap(walktype_, other->walktype_);
    std::swap(atktype_, other->atktype_);
    std::swap(atkatttype_, other->atkatttype_);
    std::swap(deftype_, other->deftype_);
    std::swap(highspeed_, other->highspeed_);
    std::swap(emergevoice_, other->emergevoice_);
    std::swap(hurtvoice_, other->hurtvoice_);
    std::swap(dievoice_, other->dievoice_);
    skills_.Swap(&other->skills_);
    std::swap(monstertype_, other->monstertype_);
    std::swap(hurtactioncd_, other->hurtactioncd_);
    std::swap(monstername_, other->monstername_);
    std::swap(desc_, other->desc_);
    std::swap(ballistic_, other->ballistic_);
    std::swap(dieanimation_, other->dieanimation_);
    std::swap(minwalkspeed_, other->minwalkspeed_);
    std::swap(maxwalkspeed_, other->maxwalkspeed_);
    std::swap(bubbleid_, other->bubbleid_);
    std::swap(floorbuffid_, other->floorbuffid_);
    std::swap(aiid_, other->aiid_);
    std::swap(patrolarea_, other->patrolarea_);
    std::swap(hurtcolor_, other->hurtcolor_);
    std::swap(initscale_, other->initscale_);
    std::swap(isblock_, other->isblock_);
    std::swap(hurtanimation_, other->hurtanimation_);
    std::swap(dropgoldnum_, other->dropgoldnum_);
    std::swap(score_, other->score_);
    std::swap(actions_, other->actions_);
    std::swap(headimg_, other->headimg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NihilityMonsterShowCfg::GetTypeName() const {
  return "com.cfg.vo.NihilityMonsterShowCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int NihilityMonsterShowCfgSet::kNihilityMonsterShowCfgFieldNumber;
#endif  // !_MSC_VER

NihilityMonsterShowCfgSet::NihilityMonsterShowCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NihilityMonsterShowCfgSet::InitAsDefaultInstance() {
}

NihilityMonsterShowCfgSet::NihilityMonsterShowCfgSet(const NihilityMonsterShowCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NihilityMonsterShowCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NihilityMonsterShowCfgSet::~NihilityMonsterShowCfgSet() {
  SharedDtor();
}

void NihilityMonsterShowCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NihilityMonsterShowCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NihilityMonsterShowCfgSet& NihilityMonsterShowCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NihilityMonsterShowCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NihilityMonsterShowCfg_2eproto();
#endif
  return *default_instance_;
}

NihilityMonsterShowCfgSet* NihilityMonsterShowCfgSet::default_instance_ = NULL;

NihilityMonsterShowCfgSet* NihilityMonsterShowCfgSet::New() const {
  return new NihilityMonsterShowCfgSet;
}

void NihilityMonsterShowCfgSet::Clear() {
  nihilitymonstershowcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NihilityMonsterShowCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.NihilityMonsterShowCfg nihilityMonsterShowCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nihilityMonsterShowCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nihilitymonstershowcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nihilityMonsterShowCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NihilityMonsterShowCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.NihilityMonsterShowCfg nihilityMonsterShowCfg = 1;
  for (int i = 0; i < this->nihilitymonstershowcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->nihilitymonstershowcfg(i), output);
  }

}

int NihilityMonsterShowCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.NihilityMonsterShowCfg nihilityMonsterShowCfg = 1;
  total_size += 1 * this->nihilitymonstershowcfg_size();
  for (int i = 0; i < this->nihilitymonstershowcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nihilitymonstershowcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NihilityMonsterShowCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NihilityMonsterShowCfgSet*>(&from));
}

void NihilityMonsterShowCfgSet::MergeFrom(const NihilityMonsterShowCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  nihilitymonstershowcfg_.MergeFrom(from.nihilitymonstershowcfg_);
}

void NihilityMonsterShowCfgSet::CopyFrom(const NihilityMonsterShowCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NihilityMonsterShowCfgSet::IsInitialized() const {

  for (int i = 0; i < nihilitymonstershowcfg_size(); i++) {
    if (!this->nihilitymonstershowcfg(i).IsInitialized()) return false;
  }
  return true;
}

void NihilityMonsterShowCfgSet::Swap(NihilityMonsterShowCfgSet* other) {
  if (other != this) {
    nihilitymonstershowcfg_.Swap(&other->nihilitymonstershowcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NihilityMonsterShowCfgSet::GetTypeName() const {
  return "com.cfg.vo.NihilityMonsterShowCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
