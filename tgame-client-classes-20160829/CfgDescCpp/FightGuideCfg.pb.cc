// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FightGuideCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FightGuideCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_FightGuideCfg_2eproto() {
  delete FightGuideCfg::default_instance_;
  delete FightGuideCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_FightGuideCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_FightGuideCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  FightGuideCfg::default_instance_ = new FightGuideCfg();
  FightGuideCfgSet::default_instance_ = new FightGuideCfgSet();
  FightGuideCfg::default_instance_->InitAsDefaultInstance();
  FightGuideCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FightGuideCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_FightGuideCfg_2eproto_once_);
void protobuf_AddDesc_FightGuideCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_FightGuideCfg_2eproto_once_,
                 &protobuf_AddDesc_FightGuideCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FightGuideCfg_2eproto {
  StaticDescriptorInitializer_FightGuideCfg_2eproto() {
    protobuf_AddDesc_FightGuideCfg_2eproto();
  }
} static_descriptor_initializer_FightGuideCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int FightGuideCfg::kStepIDFieldNumber;
const int FightGuideCfg::kTypeFieldNumber;
const int FightGuideCfg::kDescFieldNumber;
const int FightGuideCfg::kIsPlayerFieldNumber;
const int FightGuideCfg::kPauseDescFieldNumber;
const int FightGuideCfg::kMonNameFieldNumber;
#endif  // !_MSC_VER

FightGuideCfg::FightGuideCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGuideCfg::InitAsDefaultInstance() {
}

FightGuideCfg::FightGuideCfg(const FightGuideCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGuideCfg::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  type_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isplayer_ = 0u;
  pausedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  monname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGuideCfg::~FightGuideCfg() {
  SharedDtor();
}

void FightGuideCfg::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (pausedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete pausedesc_;
  }
  if (monname_ != &::google::protobuf::internal::kEmptyString) {
    delete monname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightGuideCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGuideCfg& FightGuideCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightGuideCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightGuideCfg_2eproto();
#endif
  return *default_instance_;
}

FightGuideCfg* FightGuideCfg::default_instance_ = NULL;

FightGuideCfg* FightGuideCfg::New() const {
  return new FightGuideCfg;
}

void FightGuideCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
    type_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    isplayer_ = 0u;
    if (has_pausedesc()) {
      if (pausedesc_ != &::google::protobuf::internal::kEmptyString) {
        pausedesc_->clear();
      }
    }
    if (has_monname()) {
      if (monname_ != &::google::protobuf::internal::kEmptyString) {
        monname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGuideCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // required string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsPlayer;
        break;
      }

      // required uint32 IsPlayer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsPlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isplayer_)));
          set_has_isplayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_PauseDesc;
        break;
      }

      // required string PauseDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PauseDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pausedesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_MonName;
        break;
      }

      // required string MonName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MonName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_monname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGuideCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StepID = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required uint32 IsPlayer = 4;
  if (has_isplayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isplayer(), output);
  }

  // required string PauseDesc = 5;
  if (has_pausedesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pausedesc(), output);
  }

  // required string MonName = 6;
  if (has_monname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->monname(), output);
  }

}

int FightGuideCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required uint32 IsPlayer = 4;
    if (has_isplayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isplayer());
    }

    // required string PauseDesc = 5;
    if (has_pausedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pausedesc());
    }

    // required string MonName = 6;
    if (has_monname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->monname());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuideCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGuideCfg*>(&from));
}

void FightGuideCfg::MergeFrom(const FightGuideCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_isplayer()) {
      set_isplayer(from.isplayer());
    }
    if (from.has_pausedesc()) {
      set_pausedesc(from.pausedesc());
    }
    if (from.has_monname()) {
      set_monname(from.monname());
    }
  }
}

void FightGuideCfg::CopyFrom(const FightGuideCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuideCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FightGuideCfg::Swap(FightGuideCfg* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(type_, other->type_);
    std::swap(desc_, other->desc_);
    std::swap(isplayer_, other->isplayer_);
    std::swap(pausedesc_, other->pausedesc_);
    std::swap(monname_, other->monname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGuideCfg::GetTypeName() const {
  return "com.cfg.vo.FightGuideCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int FightGuideCfgSet::kFightGuideCfgFieldNumber;
#endif  // !_MSC_VER

FightGuideCfgSet::FightGuideCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FightGuideCfgSet::InitAsDefaultInstance() {
}

FightGuideCfgSet::FightGuideCfgSet(const FightGuideCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FightGuideCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightGuideCfgSet::~FightGuideCfgSet() {
  SharedDtor();
}

void FightGuideCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FightGuideCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FightGuideCfgSet& FightGuideCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_FightGuideCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_FightGuideCfg_2eproto();
#endif
  return *default_instance_;
}

FightGuideCfgSet* FightGuideCfgSet::default_instance_ = NULL;

FightGuideCfgSet* FightGuideCfgSet::New() const {
  return new FightGuideCfgSet;
}

void FightGuideCfgSet::Clear() {
  fightguidecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FightGuideCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.FightGuideCfg fightGuideCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fightGuideCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightguidecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fightGuideCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightGuideCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.FightGuideCfg fightGuideCfg = 1;
  for (int i = 0; i < this->fightguidecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->fightguidecfg(i), output);
  }

}

int FightGuideCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.FightGuideCfg fightGuideCfg = 1;
  total_size += 1 * this->fightguidecfg_size();
  for (int i = 0; i < this->fightguidecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightguidecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightGuideCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FightGuideCfgSet*>(&from));
}

void FightGuideCfgSet::MergeFrom(const FightGuideCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  fightguidecfg_.MergeFrom(from.fightguidecfg_);
}

void FightGuideCfgSet::CopyFrom(const FightGuideCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightGuideCfgSet::IsInitialized() const {

  for (int i = 0; i < fightguidecfg_size(); i++) {
    if (!this->fightguidecfg(i).IsInitialized()) return false;
  }
  return true;
}

void FightGuideCfgSet::Swap(FightGuideCfgSet* other) {
  if (other != this) {
    fightguidecfg_.Swap(&other->fightguidecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FightGuideCfgSet::GetTypeName() const {
  return "com.cfg.vo.FightGuideCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
