// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ServerNotifyCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ServerNotifyCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_ServerNotifyCfg_2eproto() {
  delete ServerNotifyCfg::default_instance_;
  delete ServerNotifyCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ServerNotifyCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ServerNotifyCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ServerNotifyCfg::default_instance_ = new ServerNotifyCfg();
  ServerNotifyCfgSet::default_instance_ = new ServerNotifyCfgSet();
  ServerNotifyCfg::default_instance_->InitAsDefaultInstance();
  ServerNotifyCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ServerNotifyCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ServerNotifyCfg_2eproto_once_);
void protobuf_AddDesc_ServerNotifyCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ServerNotifyCfg_2eproto_once_,
                 &protobuf_AddDesc_ServerNotifyCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ServerNotifyCfg_2eproto {
  StaticDescriptorInitializer_ServerNotifyCfg_2eproto() {
    protobuf_AddDesc_ServerNotifyCfg_2eproto();
  }
} static_descriptor_initializer_ServerNotifyCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ServerNotifyCfg::kNotifyIDFieldNumber;
const int ServerNotifyCfg::kNotifyContentFieldNumber;
const int ServerNotifyCfg::kFlagTypeFieldNumber;
const int ServerNotifyCfg::kStartFlagFieldNumber;
#endif  // !_MSC_VER

ServerNotifyCfg::ServerNotifyCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServerNotifyCfg::InitAsDefaultInstance() {
}

ServerNotifyCfg::ServerNotifyCfg(const ServerNotifyCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServerNotifyCfg::SharedCtor() {
  _cached_size_ = 0;
  notifyid_ = 0u;
  notifycontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flagtype_ = 0u;
  startflag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerNotifyCfg::~ServerNotifyCfg() {
  SharedDtor();
}

void ServerNotifyCfg::SharedDtor() {
  if (notifycontent_ != &::google::protobuf::internal::kEmptyString) {
    delete notifycontent_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerNotifyCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerNotifyCfg& ServerNotifyCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerNotifyCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerNotifyCfg_2eproto();
#endif
  return *default_instance_;
}

ServerNotifyCfg* ServerNotifyCfg::default_instance_ = NULL;

ServerNotifyCfg* ServerNotifyCfg::New() const {
  return new ServerNotifyCfg;
}

void ServerNotifyCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    notifyid_ = 0u;
    if (has_notifycontent()) {
      if (notifycontent_ != &::google::protobuf::internal::kEmptyString) {
        notifycontent_->clear();
      }
    }
    flagtype_ = 0u;
    startflag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServerNotifyCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 NotifyID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &notifyid_)));
          set_has_notifyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_NotifyContent;
        break;
      }

      // required string NotifyContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NotifyContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notifycontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FlagType;
        break;
      }

      // required uint32 FlagType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlagType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flagtype_)));
          set_has_flagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_StartFlag;
        break;
      }

      // required uint32 StartFlag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StartFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &startflag_)));
          set_has_startflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerNotifyCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 NotifyID = 1;
  if (has_notifyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->notifyid(), output);
  }

  // required string NotifyContent = 2;
  if (has_notifycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->notifycontent(), output);
  }

  // required uint32 FlagType = 3;
  if (has_flagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flagtype(), output);
  }

  // required uint32 StartFlag = 4;
  if (has_startflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->startflag(), output);
  }

}

int ServerNotifyCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 NotifyID = 1;
    if (has_notifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->notifyid());
    }

    // required string NotifyContent = 2;
    if (has_notifycontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notifycontent());
    }

    // required uint32 FlagType = 3;
    if (has_flagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flagtype());
    }

    // required uint32 StartFlag = 4;
    if (has_startflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->startflag());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerNotifyCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerNotifyCfg*>(&from));
}

void ServerNotifyCfg::MergeFrom(const ServerNotifyCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notifyid()) {
      set_notifyid(from.notifyid());
    }
    if (from.has_notifycontent()) {
      set_notifycontent(from.notifycontent());
    }
    if (from.has_flagtype()) {
      set_flagtype(from.flagtype());
    }
    if (from.has_startflag()) {
      set_startflag(from.startflag());
    }
  }
}

void ServerNotifyCfg::CopyFrom(const ServerNotifyCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerNotifyCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerNotifyCfg::Swap(ServerNotifyCfg* other) {
  if (other != this) {
    std::swap(notifyid_, other->notifyid_);
    std::swap(notifycontent_, other->notifycontent_);
    std::swap(flagtype_, other->flagtype_);
    std::swap(startflag_, other->startflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerNotifyCfg::GetTypeName() const {
  return "com.cfg.vo.ServerNotifyCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int ServerNotifyCfgSet::kServernotifycfgFieldNumber;
#endif  // !_MSC_VER

ServerNotifyCfgSet::ServerNotifyCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ServerNotifyCfgSet::InitAsDefaultInstance() {
}

ServerNotifyCfgSet::ServerNotifyCfgSet(const ServerNotifyCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ServerNotifyCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerNotifyCfgSet::~ServerNotifyCfgSet() {
  SharedDtor();
}

void ServerNotifyCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ServerNotifyCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerNotifyCfgSet& ServerNotifyCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ServerNotifyCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ServerNotifyCfg_2eproto();
#endif
  return *default_instance_;
}

ServerNotifyCfgSet* ServerNotifyCfgSet::default_instance_ = NULL;

ServerNotifyCfgSet* ServerNotifyCfgSet::New() const {
  return new ServerNotifyCfgSet;
}

void ServerNotifyCfgSet::Clear() {
  servernotifycfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ServerNotifyCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.ServerNotifyCfg servernotifycfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_servernotifycfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_servernotifycfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_servernotifycfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerNotifyCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.ServerNotifyCfg servernotifycfg = 1;
  for (int i = 0; i < this->servernotifycfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->servernotifycfg(i), output);
  }

}

int ServerNotifyCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.ServerNotifyCfg servernotifycfg = 1;
  total_size += 1 * this->servernotifycfg_size();
  for (int i = 0; i < this->servernotifycfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->servernotifycfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerNotifyCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerNotifyCfgSet*>(&from));
}

void ServerNotifyCfgSet::MergeFrom(const ServerNotifyCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  servernotifycfg_.MergeFrom(from.servernotifycfg_);
}

void ServerNotifyCfgSet::CopyFrom(const ServerNotifyCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerNotifyCfgSet::IsInitialized() const {

  for (int i = 0; i < servernotifycfg_size(); i++) {
    if (!this->servernotifycfg(i).IsInitialized()) return false;
  }
  return true;
}

void ServerNotifyCfgSet::Swap(ServerNotifyCfgSet* other) {
  if (other != this) {
    servernotifycfg_.Swap(&other->servernotifycfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ServerNotifyCfgSet::GetTypeName() const {
  return "com.cfg.vo.ServerNotifyCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
