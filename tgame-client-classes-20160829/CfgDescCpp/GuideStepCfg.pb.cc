// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuideStepCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuideStepCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_GuideStepCfg_2eproto() {
  delete GuideStepCfg::default_instance_;
  delete GuideStepCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GuideStepCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GuideStepCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GuideStepCfg::default_instance_ = new GuideStepCfg();
  GuideStepCfgSet::default_instance_ = new GuideStepCfgSet();
  GuideStepCfg::default_instance_->InitAsDefaultInstance();
  GuideStepCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuideStepCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GuideStepCfg_2eproto_once_);
void protobuf_AddDesc_GuideStepCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GuideStepCfg_2eproto_once_,
                 &protobuf_AddDesc_GuideStepCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuideStepCfg_2eproto {
  StaticDescriptorInitializer_GuideStepCfg_2eproto() {
    protobuf_AddDesc_GuideStepCfg_2eproto();
  }
} static_descriptor_initializer_GuideStepCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GuideStepCfg::kGuideIDFieldNumber;
const int GuideStepCfg::kStepIDFieldNumber;
const int GuideStepCfg::kStepTypeFieldNumber;
const int GuideStepCfg::kLinkIDFieldNumber;
const int GuideStepCfg::kIsWaitingFieldNumber;
const int GuideStepCfg::kIsForcedFieldNumber;
const int GuideStepCfg::kTimesFieldNumber;
const int GuideStepCfg::kIsCanOverFieldNumber;
const int GuideStepCfg::kViewTypeFieldNumber;
const int GuideStepCfg::kViewNameFieldNumber;
const int GuideStepCfg::kViewShapeFieldNumber;
const int GuideStepCfg::kViewZoomFieldNumber;
const int GuideStepCfg::kPromptWordsFieldNumber;
#endif  // !_MSC_VER

GuideStepCfg::GuideStepCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuideStepCfg::InitAsDefaultInstance() {
}

GuideStepCfg::GuideStepCfg(const GuideStepCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuideStepCfg::SharedCtor() {
  _cached_size_ = 0;
  guideid_ = 0u;
  stepid_ = 0u;
  steptype_ = 0u;
  linkid_ = 0u;
  iswaiting_ = 0u;
  isforced_ = 0u;
  times_ = 0u;
  iscanover_ = 0u;
  viewtype_ = 0u;
  viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viewshape_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viewzoom_ = 0;
  promptwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideStepCfg::~GuideStepCfg() {
  SharedDtor();
}

void GuideStepCfg::SharedDtor() {
  if (viewname_ != &::google::protobuf::internal::kEmptyString) {
    delete viewname_;
  }
  if (viewshape_ != &::google::protobuf::internal::kEmptyString) {
    delete viewshape_;
  }
  if (promptwords_ != &::google::protobuf::internal::kEmptyString) {
    delete promptwords_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuideStepCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuideStepCfg& GuideStepCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuideStepCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuideStepCfg_2eproto();
#endif
  return *default_instance_;
}

GuideStepCfg* GuideStepCfg::default_instance_ = NULL;

GuideStepCfg* GuideStepCfg::New() const {
  return new GuideStepCfg;
}

void GuideStepCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guideid_ = 0u;
    stepid_ = 0u;
    steptype_ = 0u;
    linkid_ = 0u;
    iswaiting_ = 0u;
    isforced_ = 0u;
    times_ = 0u;
    iscanover_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viewtype_ = 0u;
    if (has_viewname()) {
      if (viewname_ != &::google::protobuf::internal::kEmptyString) {
        viewname_->clear();
      }
    }
    if (has_viewshape()) {
      if (viewshape_ != &::google::protobuf::internal::kEmptyString) {
        viewshape_->clear();
      }
    }
    viewzoom_ = 0;
    if (has_promptwords()) {
      if (promptwords_ != &::google::protobuf::internal::kEmptyString) {
        promptwords_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuideStepCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GuideID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guideid_)));
          set_has_guideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StepID;
        break;
      }

      // required uint32 StepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_StepType;
        break;
      }

      // required uint32 StepType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StepType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &steptype_)));
          set_has_steptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LinkID;
        break;
      }

      // required uint32 LinkID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LinkID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_IsWaiting;
        break;
      }

      // required uint32 IsWaiting = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsWaiting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswaiting_)));
          set_has_iswaiting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_IsForced;
        break;
      }

      // required uint32 IsForced = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsForced:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isforced_)));
          set_has_isforced();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Times;
        break;
      }

      // required uint32 Times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsCanOver;
        break;
      }

      // required uint32 IsCanOver = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCanOver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iscanover_)));
          set_has_iscanover();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ViewType;
        break;
      }

      // required uint32 ViewType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viewtype_)));
          set_has_viewtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ViewName;
        break;
      }

      // required string ViewName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ViewName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ViewShape;
        break;
      }

      // required string ViewShape = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ViewShape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_viewshape()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ViewZoom;
        break;
      }

      // required int32 ViewZoom = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ViewZoom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewzoom_)));
          set_has_viewzoom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_PromptWords;
        break;
      }

      // required string PromptWords = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PromptWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_promptwords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideStepCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GuideID = 1;
  if (has_guideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guideid(), output);
  }

  // required uint32 StepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // required uint32 StepType = 3;
  if (has_steptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->steptype(), output);
  }

  // required uint32 LinkID = 4;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->linkid(), output);
  }

  // required uint32 IsWaiting = 5;
  if (has_iswaiting()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->iswaiting(), output);
  }

  // required uint32 IsForced = 6;
  if (has_isforced()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isforced(), output);
  }

  // required uint32 Times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->times(), output);
  }

  // required uint32 IsCanOver = 8;
  if (has_iscanover()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->iscanover(), output);
  }

  // required uint32 ViewType = 9;
  if (has_viewtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->viewtype(), output);
  }

  // required string ViewName = 10;
  if (has_viewname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->viewname(), output);
  }

  // required string ViewShape = 11;
  if (has_viewshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->viewshape(), output);
  }

  // required int32 ViewZoom = 12;
  if (has_viewzoom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->viewzoom(), output);
  }

  // required string PromptWords = 13;
  if (has_promptwords()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->promptwords(), output);
  }

}

int GuideStepCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GuideID = 1;
    if (has_guideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guideid());
    }

    // required uint32 StepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // required uint32 StepType = 3;
    if (has_steptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->steptype());
    }

    // required uint32 LinkID = 4;
    if (has_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkid());
    }

    // required uint32 IsWaiting = 5;
    if (has_iswaiting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswaiting());
    }

    // required uint32 IsForced = 6;
    if (has_isforced()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isforced());
    }

    // required uint32 Times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // required uint32 IsCanOver = 8;
    if (has_iscanover()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iscanover());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ViewType = 9;
    if (has_viewtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viewtype());
    }

    // required string ViewName = 10;
    if (has_viewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewname());
    }

    // required string ViewShape = 11;
    if (has_viewshape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->viewshape());
    }

    // required int32 ViewZoom = 12;
    if (has_viewzoom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewzoom());
    }

    // required string PromptWords = 13;
    if (has_promptwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->promptwords());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideStepCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuideStepCfg*>(&from));
}

void GuideStepCfg::MergeFrom(const GuideStepCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guideid()) {
      set_guideid(from.guideid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_steptype()) {
      set_steptype(from.steptype());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
    if (from.has_iswaiting()) {
      set_iswaiting(from.iswaiting());
    }
    if (from.has_isforced()) {
      set_isforced(from.isforced());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_iscanover()) {
      set_iscanover(from.iscanover());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viewtype()) {
      set_viewtype(from.viewtype());
    }
    if (from.has_viewname()) {
      set_viewname(from.viewname());
    }
    if (from.has_viewshape()) {
      set_viewshape(from.viewshape());
    }
    if (from.has_viewzoom()) {
      set_viewzoom(from.viewzoom());
    }
    if (from.has_promptwords()) {
      set_promptwords(from.promptwords());
    }
  }
}

void GuideStepCfg::CopyFrom(const GuideStepCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideStepCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void GuideStepCfg::Swap(GuideStepCfg* other) {
  if (other != this) {
    std::swap(guideid_, other->guideid_);
    std::swap(stepid_, other->stepid_);
    std::swap(steptype_, other->steptype_);
    std::swap(linkid_, other->linkid_);
    std::swap(iswaiting_, other->iswaiting_);
    std::swap(isforced_, other->isforced_);
    std::swap(times_, other->times_);
    std::swap(iscanover_, other->iscanover_);
    std::swap(viewtype_, other->viewtype_);
    std::swap(viewname_, other->viewname_);
    std::swap(viewshape_, other->viewshape_);
    std::swap(viewzoom_, other->viewzoom_);
    std::swap(promptwords_, other->promptwords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuideStepCfg::GetTypeName() const {
  return "com.cfg.vo.GuideStepCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int GuideStepCfgSet::kGuidestepcfgFieldNumber;
#endif  // !_MSC_VER

GuideStepCfgSet::GuideStepCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuideStepCfgSet::InitAsDefaultInstance() {
}

GuideStepCfgSet::GuideStepCfgSet(const GuideStepCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuideStepCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideStepCfgSet::~GuideStepCfgSet() {
  SharedDtor();
}

void GuideStepCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuideStepCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuideStepCfgSet& GuideStepCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuideStepCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuideStepCfg_2eproto();
#endif
  return *default_instance_;
}

GuideStepCfgSet* GuideStepCfgSet::default_instance_ = NULL;

GuideStepCfgSet* GuideStepCfgSet::New() const {
  return new GuideStepCfgSet;
}

void GuideStepCfgSet::Clear() {
  guidestepcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuideStepCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.GuideStepCfg guidestepcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidestepcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guidestepcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guidestepcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideStepCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.GuideStepCfg guidestepcfg = 1;
  for (int i = 0; i < this->guidestepcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guidestepcfg(i), output);
  }

}

int GuideStepCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.GuideStepCfg guidestepcfg = 1;
  total_size += 1 * this->guidestepcfg_size();
  for (int i = 0; i < this->guidestepcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidestepcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideStepCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuideStepCfgSet*>(&from));
}

void GuideStepCfgSet::MergeFrom(const GuideStepCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  guidestepcfg_.MergeFrom(from.guidestepcfg_);
}

void GuideStepCfgSet::CopyFrom(const GuideStepCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideStepCfgSet::IsInitialized() const {

  for (int i = 0; i < guidestepcfg_size(); i++) {
    if (!this->guidestepcfg(i).IsInitialized()) return false;
  }
  return true;
}

void GuideStepCfgSet::Swap(GuideStepCfgSet* other) {
  if (other != this) {
    guidestepcfg_.Swap(&other->guidestepcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuideStepCfgSet::GetTypeName() const {
  return "com.cfg.vo.GuideStepCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
