// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BulletCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BulletCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_BulletCfg_2eproto() {
  delete BulletAdditionalEff::default_instance_;
  delete BulletCfg::default_instance_;
  delete BulletCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_BulletCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_BulletCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  BulletAdditionalEff::default_instance_ = new BulletAdditionalEff();
  BulletCfg::default_instance_ = new BulletCfg();
  BulletCfgSet::default_instance_ = new BulletCfgSet();
  BulletAdditionalEff::default_instance_->InitAsDefaultInstance();
  BulletCfg::default_instance_->InitAsDefaultInstance();
  BulletCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_BulletCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_BulletCfg_2eproto_once_);
void protobuf_AddDesc_BulletCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_BulletCfg_2eproto_once_,
                 &protobuf_AddDesc_BulletCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_BulletCfg_2eproto {
  StaticDescriptorInitializer_BulletCfg_2eproto() {
    protobuf_AddDesc_BulletCfg_2eproto();
  }
} static_descriptor_initializer_BulletCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int BulletAdditionalEff::kProbFieldNumber;
const int BulletAdditionalEff::kEffTypeFieldNumber;
const int BulletAdditionalEff::kEffValFieldNumber;
#endif  // !_MSC_VER

BulletAdditionalEff::BulletAdditionalEff()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BulletAdditionalEff::InitAsDefaultInstance() {
}

BulletAdditionalEff::BulletAdditionalEff(const BulletAdditionalEff& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BulletAdditionalEff::SharedCtor() {
  _cached_size_ = 0;
  prob_ = 0u;
  efftype_ = 0u;
  effval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletAdditionalEff::~BulletAdditionalEff() {
  SharedDtor();
}

void BulletAdditionalEff::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BulletAdditionalEff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BulletAdditionalEff& BulletAdditionalEff::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BulletCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BulletCfg_2eproto();
#endif
  return *default_instance_;
}

BulletAdditionalEff* BulletAdditionalEff::default_instance_ = NULL;

BulletAdditionalEff* BulletAdditionalEff::New() const {
  return new BulletAdditionalEff;
}

void BulletAdditionalEff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prob_ = 0u;
    efftype_ = 0u;
    effval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BulletAdditionalEff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Prob = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EffType;
        break;
      }

      // required uint32 EffType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &efftype_)));
          set_has_efftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EffVal;
        break;
      }

      // required uint32 EffVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effval_)));
          set_has_effval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletAdditionalEff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Prob = 1;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prob(), output);
  }

  // required uint32 EffType = 2;
  if (has_efftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->efftype(), output);
  }

  // required uint32 EffVal = 3;
  if (has_effval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effval(), output);
  }

}

int BulletAdditionalEff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Prob = 1;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

    // required uint32 EffType = 2;
    if (has_efftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->efftype());
    }

    // required uint32 EffVal = 3;
    if (has_effval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effval());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletAdditionalEff::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BulletAdditionalEff*>(&from));
}

void BulletAdditionalEff::MergeFrom(const BulletAdditionalEff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prob()) {
      set_prob(from.prob());
    }
    if (from.has_efftype()) {
      set_efftype(from.efftype());
    }
    if (from.has_effval()) {
      set_effval(from.effval());
    }
  }
}

void BulletAdditionalEff::CopyFrom(const BulletAdditionalEff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletAdditionalEff::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BulletAdditionalEff::Swap(BulletAdditionalEff* other) {
  if (other != this) {
    std::swap(prob_, other->prob_);
    std::swap(efftype_, other->efftype_);
    std::swap(effval_, other->effval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BulletAdditionalEff::GetTypeName() const {
  return "com.cfg.vo.BulletAdditionalEff";
}


// ===================================================================

#ifndef _MSC_VER
const int BulletCfg::kBulletIDFieldNumber;
const int BulletCfg::kNameFieldNumber;
const int BulletCfg::kDescFieldNumber;
const int BulletCfg::kBulletTypeFieldNumber;
const int BulletCfg::kOridinaryAniFieldNumber;
const int BulletCfg::kSuperAniFieldNumber;
const int BulletCfg::kBeatAnisFieldNumber;
const int BulletCfg::kFlySpeedFieldNumber;
const int BulletCfg::kHitBackDistFieldNumber;
const int BulletCfg::kDamageZoneFieldNumber;
const int BulletCfg::kShootAnimationFieldNumber;
const int BulletCfg::kAdditionalEffsFieldNumber;
const int BulletCfg::kBurstCntFieldNumber;
const int BulletCfg::kBurstAngleFieldNumber;
const int BulletCfg::kPapapaFieldNumber;
const int BulletCfg::kEvtCntFieldNumber;
#endif  // !_MSC_VER

BulletCfg::BulletCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BulletCfg::InitAsDefaultInstance() {
}

BulletCfg::BulletCfg(const BulletCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BulletCfg::SharedCtor() {
  _cached_size_ = 0;
  bulletid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bullettype_ = 0u;
  oridinaryani_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  superani_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beatanis_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flyspeed_ = 0u;
  hitbackdist_ = 0u;
  damagezone_ = 0u;
  shootanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  burstcnt_ = 0u;
  burstangle_ = 0u;
  papapa_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  evtcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletCfg::~BulletCfg() {
  SharedDtor();
}

void BulletCfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (oridinaryani_ != &::google::protobuf::internal::kEmptyString) {
    delete oridinaryani_;
  }
  if (superani_ != &::google::protobuf::internal::kEmptyString) {
    delete superani_;
  }
  if (beatanis_ != &::google::protobuf::internal::kEmptyString) {
    delete beatanis_;
  }
  if (shootanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete shootanimation_;
  }
  if (papapa_ != &::google::protobuf::internal::kEmptyString) {
    delete papapa_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BulletCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BulletCfg& BulletCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BulletCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BulletCfg_2eproto();
#endif
  return *default_instance_;
}

BulletCfg* BulletCfg::default_instance_ = NULL;

BulletCfg* BulletCfg::New() const {
  return new BulletCfg;
}

void BulletCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bulletid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    bullettype_ = 0u;
    if (has_oridinaryani()) {
      if (oridinaryani_ != &::google::protobuf::internal::kEmptyString) {
        oridinaryani_->clear();
      }
    }
    if (has_superani()) {
      if (superani_ != &::google::protobuf::internal::kEmptyString) {
        superani_->clear();
      }
    }
    if (has_beatanis()) {
      if (beatanis_ != &::google::protobuf::internal::kEmptyString) {
        beatanis_->clear();
      }
    }
    flyspeed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hitbackdist_ = 0u;
    damagezone_ = 0u;
    if (has_shootanimation()) {
      if (shootanimation_ != &::google::protobuf::internal::kEmptyString) {
        shootanimation_->clear();
      }
    }
    burstcnt_ = 0u;
    burstangle_ = 0u;
    if (has_papapa()) {
      if (papapa_ != &::google::protobuf::internal::kEmptyString) {
        papapa_->clear();
      }
    }
    evtcnt_ = 0u;
  }
  additionaleffs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BulletCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BulletID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletid_)));
          set_has_bulletid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // required string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BulletType;
        break;
      }

      // required uint32 BulletType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bullettype_)));
          set_has_bullettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OridinaryAni;
        break;
      }

      // required string OridinaryAni = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OridinaryAni:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oridinaryani()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_SuperAni;
        break;
      }

      // required string SuperAni = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SuperAni:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_superani()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_BeatAnis;
        break;
      }

      // required string BeatAnis = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BeatAnis:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beatanis()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FlySpeed;
        break;
      }

      // required uint32 FlySpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flyspeed_)));
          set_has_flyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_HitBackDist;
        break;
      }

      // required uint32 HitBackDist = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitBackDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbackdist_)));
          set_has_hitbackdist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_DamageZone;
        break;
      }

      // required uint32 DamageZone = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamageZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagezone_)));
          set_has_damagezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_ShootAnimation;
        break;
      }

      // required string ShootAnimation = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ShootAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shootanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_AdditionalEffs;
        break;
      }

      // repeated .com.cfg.vo.BulletAdditionalEff AdditionalEffs = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AdditionalEffs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_additionaleffs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_AdditionalEffs;
        if (input->ExpectTag(104)) goto parse_BurstCnt;
        break;
      }

      // required uint32 BurstCnt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BurstCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burstcnt_)));
          set_has_burstcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_BurstAngle;
        break;
      }

      // required uint32 BurstAngle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BurstAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &burstangle_)));
          set_has_burstangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_Papapa;
        break;
      }

      // required string Papapa = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Papapa:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_papapa()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_EvtCnt;
        break;
      }

      // required uint32 EvtCnt = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EvtCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evtcnt_)));
          set_has_evtcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BulletID = 1;
  if (has_bulletid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bulletid(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required uint32 BulletType = 4;
  if (has_bullettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bullettype(), output);
  }

  // required string OridinaryAni = 5;
  if (has_oridinaryani()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->oridinaryani(), output);
  }

  // required string SuperAni = 6;
  if (has_superani()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->superani(), output);
  }

  // required string BeatAnis = 7;
  if (has_beatanis()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->beatanis(), output);
  }

  // required uint32 FlySpeed = 8;
  if (has_flyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flyspeed(), output);
  }

  // required uint32 HitBackDist = 9;
  if (has_hitbackdist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->hitbackdist(), output);
  }

  // required uint32 DamageZone = 10;
  if (has_damagezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->damagezone(), output);
  }

  // required string ShootAnimation = 11;
  if (has_shootanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->shootanimation(), output);
  }

  // repeated .com.cfg.vo.BulletAdditionalEff AdditionalEffs = 12;
  for (int i = 0; i < this->additionaleffs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->additionaleffs(i), output);
  }

  // required uint32 BurstCnt = 13;
  if (has_burstcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->burstcnt(), output);
  }

  // required uint32 BurstAngle = 14;
  if (has_burstangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->burstangle(), output);
  }

  // required string Papapa = 15;
  if (has_papapa()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->papapa(), output);
  }

  // required uint32 EvtCnt = 16;
  if (has_evtcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->evtcnt(), output);
  }

}

int BulletCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BulletID = 1;
    if (has_bulletid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletid());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required uint32 BulletType = 4;
    if (has_bullettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bullettype());
    }

    // required string OridinaryAni = 5;
    if (has_oridinaryani()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oridinaryani());
    }

    // required string SuperAni = 6;
    if (has_superani()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->superani());
    }

    // required string BeatAnis = 7;
    if (has_beatanis()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beatanis());
    }

    // required uint32 FlySpeed = 8;
    if (has_flyspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flyspeed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 HitBackDist = 9;
    if (has_hitbackdist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbackdist());
    }

    // required uint32 DamageZone = 10;
    if (has_damagezone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagezone());
    }

    // required string ShootAnimation = 11;
    if (has_shootanimation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shootanimation());
    }

    // required uint32 BurstCnt = 13;
    if (has_burstcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->burstcnt());
    }

    // required uint32 BurstAngle = 14;
    if (has_burstangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->burstangle());
    }

    // required string Papapa = 15;
    if (has_papapa()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->papapa());
    }

    // required uint32 EvtCnt = 16;
    if (has_evtcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evtcnt());
    }

  }
  // repeated .com.cfg.vo.BulletAdditionalEff AdditionalEffs = 12;
  total_size += 1 * this->additionaleffs_size();
  for (int i = 0; i < this->additionaleffs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->additionaleffs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BulletCfg*>(&from));
}

void BulletCfg::MergeFrom(const BulletCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  additionaleffs_.MergeFrom(from.additionaleffs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bulletid()) {
      set_bulletid(from.bulletid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_bullettype()) {
      set_bullettype(from.bullettype());
    }
    if (from.has_oridinaryani()) {
      set_oridinaryani(from.oridinaryani());
    }
    if (from.has_superani()) {
      set_superani(from.superani());
    }
    if (from.has_beatanis()) {
      set_beatanis(from.beatanis());
    }
    if (from.has_flyspeed()) {
      set_flyspeed(from.flyspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hitbackdist()) {
      set_hitbackdist(from.hitbackdist());
    }
    if (from.has_damagezone()) {
      set_damagezone(from.damagezone());
    }
    if (from.has_shootanimation()) {
      set_shootanimation(from.shootanimation());
    }
    if (from.has_burstcnt()) {
      set_burstcnt(from.burstcnt());
    }
    if (from.has_burstangle()) {
      set_burstangle(from.burstangle());
    }
    if (from.has_papapa()) {
      set_papapa(from.papapa());
    }
    if (from.has_evtcnt()) {
      set_evtcnt(from.evtcnt());
    }
  }
}

void BulletCfg::CopyFrom(const BulletCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000f7ff) != 0x0000f7ff) return false;

  for (int i = 0; i < additionaleffs_size(); i++) {
    if (!this->additionaleffs(i).IsInitialized()) return false;
  }
  return true;
}

void BulletCfg::Swap(BulletCfg* other) {
  if (other != this) {
    std::swap(bulletid_, other->bulletid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(bullettype_, other->bullettype_);
    std::swap(oridinaryani_, other->oridinaryani_);
    std::swap(superani_, other->superani_);
    std::swap(beatanis_, other->beatanis_);
    std::swap(flyspeed_, other->flyspeed_);
    std::swap(hitbackdist_, other->hitbackdist_);
    std::swap(damagezone_, other->damagezone_);
    std::swap(shootanimation_, other->shootanimation_);
    additionaleffs_.Swap(&other->additionaleffs_);
    std::swap(burstcnt_, other->burstcnt_);
    std::swap(burstangle_, other->burstangle_);
    std::swap(papapa_, other->papapa_);
    std::swap(evtcnt_, other->evtcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BulletCfg::GetTypeName() const {
  return "com.cfg.vo.BulletCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int BulletCfgSet::kBulletcfgFieldNumber;
#endif  // !_MSC_VER

BulletCfgSet::BulletCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void BulletCfgSet::InitAsDefaultInstance() {
}

BulletCfgSet::BulletCfgSet(const BulletCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void BulletCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BulletCfgSet::~BulletCfgSet() {
  SharedDtor();
}

void BulletCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void BulletCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BulletCfgSet& BulletCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_BulletCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_BulletCfg_2eproto();
#endif
  return *default_instance_;
}

BulletCfgSet* BulletCfgSet::default_instance_ = NULL;

BulletCfgSet* BulletCfgSet::New() const {
  return new BulletCfgSet;
}

void BulletCfgSet::Clear() {
  bulletcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool BulletCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.BulletCfg bulletcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bulletcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bulletcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bulletcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BulletCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.BulletCfg bulletcfg = 1;
  for (int i = 0; i < this->bulletcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->bulletcfg(i), output);
  }

}

int BulletCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.BulletCfg bulletcfg = 1;
  total_size += 1 * this->bulletcfg_size();
  for (int i = 0; i < this->bulletcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bulletcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BulletCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BulletCfgSet*>(&from));
}

void BulletCfgSet::MergeFrom(const BulletCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  bulletcfg_.MergeFrom(from.bulletcfg_);
}

void BulletCfgSet::CopyFrom(const BulletCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BulletCfgSet::IsInitialized() const {

  for (int i = 0; i < bulletcfg_size(); i++) {
    if (!this->bulletcfg(i).IsInitialized()) return false;
  }
  return true;
}

void BulletCfgSet::Swap(BulletCfgSet* other) {
  if (other != this) {
    bulletcfg_.Swap(&other->bulletcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string BulletCfgSet::GetTypeName() const {
  return "com.cfg.vo.BulletCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
