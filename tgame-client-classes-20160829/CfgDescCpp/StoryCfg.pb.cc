// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StoryCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "StoryCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_StoryCfg_2eproto() {
  delete StoryDialog::default_instance_;
  delete StoryCfg::default_instance_;
  delete StoryCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_StoryCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_StoryCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  StoryDialog::default_instance_ = new StoryDialog();
  StoryCfg::default_instance_ = new StoryCfg();
  StoryCfgSet::default_instance_ = new StoryCfgSet();
  StoryDialog::default_instance_->InitAsDefaultInstance();
  StoryCfg::default_instance_->InitAsDefaultInstance();
  StoryCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_StoryCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_StoryCfg_2eproto_once_);
void protobuf_AddDesc_StoryCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_StoryCfg_2eproto_once_,
                 &protobuf_AddDesc_StoryCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_StoryCfg_2eproto {
  StaticDescriptorInitializer_StoryCfg_2eproto() {
    protobuf_AddDesc_StoryCfg_2eproto();
  }
} static_descriptor_initializer_StoryCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int StoryDialog::kRoleTypeFieldNumber;
const int StoryDialog::kRoleIDFieldNumber;
const int StoryDialog::kWordsFieldNumber;
#endif  // !_MSC_VER

StoryDialog::StoryDialog()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoryDialog::InitAsDefaultInstance() {
}

StoryDialog::StoryDialog(const StoryDialog& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoryDialog::SharedCtor() {
  _cached_size_ = 0;
  roletype_ = 0u;
  roleid_ = 0u;
  words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryDialog::~StoryDialog() {
  SharedDtor();
}

void StoryDialog::SharedDtor() {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    delete words_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoryDialog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoryDialog& StoryDialog::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoryCfg_2eproto();
#endif
  return *default_instance_;
}

StoryDialog* StoryDialog::default_instance_ = NULL;

StoryDialog* StoryDialog::New() const {
  return new StoryDialog;
}

void StoryDialog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roletype_ = 0u;
    roleid_ = 0u;
    if (has_words()) {
      if (words_ != &::google::protobuf::internal::kEmptyString) {
        words_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoryDialog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 RoleType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleID;
        break;
      }

      // required uint32 RoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Words;
        break;
      }

      // required string Words = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_words()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoryDialog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 RoleType = 1;
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roletype(), output);
  }

  // required uint32 RoleID = 2;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roleid(), output);
  }

  // required string Words = 3;
  if (has_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->words(), output);
  }

}

int StoryDialog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 RoleType = 1;
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roletype());
    }

    // required uint32 RoleID = 2;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roleid());
    }

    // required string Words = 3;
    if (has_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->words());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryDialog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoryDialog*>(&from));
}

void StoryDialog::MergeFrom(const StoryDialog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_words()) {
      set_words(from.words());
    }
  }
}

void StoryDialog::CopyFrom(const StoryDialog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryDialog::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StoryDialog::Swap(StoryDialog* other) {
  if (other != this) {
    std::swap(roletype_, other->roletype_);
    std::swap(roleid_, other->roleid_);
    std::swap(words_, other->words_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoryDialog::GetTypeName() const {
  return "com.cfg.vo.StoryDialog";
}


// ===================================================================

#ifndef _MSC_VER
const int StoryCfg::kStoryIDFieldNumber;
const int StoryCfg::kStoryTypeFieldNumber;
const int StoryCfg::kStoryDialogsFieldNumber;
#endif  // !_MSC_VER

StoryCfg::StoryCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoryCfg::InitAsDefaultInstance() {
}

StoryCfg::StoryCfg(const StoryCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoryCfg::SharedCtor() {
  _cached_size_ = 0;
  storyid_ = 0u;
  storytype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryCfg::~StoryCfg() {
  SharedDtor();
}

void StoryCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoryCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoryCfg& StoryCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoryCfg_2eproto();
#endif
  return *default_instance_;
}

StoryCfg* StoryCfg::default_instance_ = NULL;

StoryCfg* StoryCfg::New() const {
  return new StoryCfg;
}

void StoryCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    storyid_ = 0u;
    storytype_ = 0u;
  }
  storydialogs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoryCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 StoryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storyid_)));
          set_has_storyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_StoryType;
        break;
      }

      // required uint32 StoryType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StoryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storytype_)));
          set_has_storytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StoryDialogs;
        break;
      }

      // repeated .com.cfg.vo.StoryDialog StoryDialogs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StoryDialogs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storydialogs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_StoryDialogs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoryCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 StoryID = 1;
  if (has_storyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->storyid(), output);
  }

  // required uint32 StoryType = 2;
  if (has_storytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->storytype(), output);
  }

  // repeated .com.cfg.vo.StoryDialog StoryDialogs = 3;
  for (int i = 0; i < this->storydialogs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->storydialogs(i), output);
  }

}

int StoryCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 StoryID = 1;
    if (has_storyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storyid());
    }

    // required uint32 StoryType = 2;
    if (has_storytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storytype());
    }

  }
  // repeated .com.cfg.vo.StoryDialog StoryDialogs = 3;
  total_size += 1 * this->storydialogs_size();
  for (int i = 0; i < this->storydialogs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storydialogs(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoryCfg*>(&from));
}

void StoryCfg::MergeFrom(const StoryCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  storydialogs_.MergeFrom(from.storydialogs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_storyid()) {
      set_storyid(from.storyid());
    }
    if (from.has_storytype()) {
      set_storytype(from.storytype());
    }
  }
}

void StoryCfg::CopyFrom(const StoryCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < storydialogs_size(); i++) {
    if (!this->storydialogs(i).IsInitialized()) return false;
  }
  return true;
}

void StoryCfg::Swap(StoryCfg* other) {
  if (other != this) {
    std::swap(storyid_, other->storyid_);
    std::swap(storytype_, other->storytype_);
    storydialogs_.Swap(&other->storydialogs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoryCfg::GetTypeName() const {
  return "com.cfg.vo.StoryCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int StoryCfgSet::kStorycfgFieldNumber;
#endif  // !_MSC_VER

StoryCfgSet::StoryCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void StoryCfgSet::InitAsDefaultInstance() {
}

StoryCfgSet::StoryCfgSet(const StoryCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void StoryCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoryCfgSet::~StoryCfgSet() {
  SharedDtor();
}

void StoryCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void StoryCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const StoryCfgSet& StoryCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_StoryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_StoryCfg_2eproto();
#endif
  return *default_instance_;
}

StoryCfgSet* StoryCfgSet::default_instance_ = NULL;

StoryCfgSet* StoryCfgSet::New() const {
  return new StoryCfgSet;
}

void StoryCfgSet::Clear() {
  storycfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool StoryCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.StoryCfg storycfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storycfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storycfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_storycfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoryCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.StoryCfg storycfg = 1;
  for (int i = 0; i < this->storycfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->storycfg(i), output);
  }

}

int StoryCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.StoryCfg storycfg = 1;
  total_size += 1 * this->storycfg_size();
  for (int i = 0; i < this->storycfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storycfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoryCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const StoryCfgSet*>(&from));
}

void StoryCfgSet::MergeFrom(const StoryCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  storycfg_.MergeFrom(from.storycfg_);
}

void StoryCfgSet::CopyFrom(const StoryCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoryCfgSet::IsInitialized() const {

  for (int i = 0; i < storycfg_size(); i++) {
    if (!this->storycfg(i).IsInitialized()) return false;
  }
  return true;
}

void StoryCfgSet::Swap(StoryCfgSet* other) {
  if (other != this) {
    storycfg_.Swap(&other->storycfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string StoryCfgSet::GetTypeName() const {
  return "com.cfg.vo.StoryCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
