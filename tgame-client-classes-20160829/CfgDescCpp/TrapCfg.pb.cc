// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrapCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TrapCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_TrapCfg_2eproto() {
  delete TrapCfg::default_instance_;
  delete TrapCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_TrapCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_TrapCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  TrapCfg::default_instance_ = new TrapCfg();
  TrapCfgSet::default_instance_ = new TrapCfgSet();
  TrapCfg::default_instance_->InitAsDefaultInstance();
  TrapCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrapCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TrapCfg_2eproto_once_);
void protobuf_AddDesc_TrapCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TrapCfg_2eproto_once_,
                 &protobuf_AddDesc_TrapCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrapCfg_2eproto {
  StaticDescriptorInitializer_TrapCfg_2eproto() {
    protobuf_AddDesc_TrapCfg_2eproto();
  }
} static_descriptor_initializer_TrapCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int TrapCfg::kIDFieldNumber;
const int TrapCfg::kResFieldNumber;
const int TrapCfg::kNameFieldNumber;
const int TrapCfg::kTypeFieldNumber;
const int TrapCfg::kCDTimeFieldNumber;
const int TrapCfg::kBuffIDFieldNumber;
const int TrapCfg::kTargetTypeFieldNumber;
const int TrapCfg::kDamgeCntFieldNumber;
const int TrapCfg::kModelTypeFieldNumber;
#endif  // !_MSC_VER

TrapCfg::TrapCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrapCfg::InitAsDefaultInstance() {
}

TrapCfg::TrapCfg(const TrapCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrapCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0u;
  cdtime_ = 0u;
  buffid_ = 0u;
  targettype_ = 0u;
  damgecnt_ = 0u;
  modeltype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapCfg::~TrapCfg() {
  SharedDtor();
}

void TrapCfg::SharedDtor() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TrapCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrapCfg& TrapCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TrapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TrapCfg_2eproto();
#endif
  return *default_instance_;
}

TrapCfg* TrapCfg::default_instance_ = NULL;

TrapCfg* TrapCfg::New() const {
  return new TrapCfg;
}

void TrapCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0u;
    cdtime_ = 0u;
    buffid_ = 0u;
    targettype_ = 0u;
    damgecnt_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modeltype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrapCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Res;
        break;
      }

      // required string Res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Name;
        break;
      }

      // required string Name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Type;
        break;
      }

      // required uint32 Type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_CDTime;
        break;
      }

      // required uint32 CDTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CDTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_BuffID;
        break;
      }

      // required uint32 BuffID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TargetType;
        break;
      }

      // required uint32 TargetType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DamgeCnt;
        break;
      }

      // required uint32 DamgeCnt = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamgeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damgecnt_)));
          set_has_damgecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ModelType;
        break;
      }

      // required uint32 ModelType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modeltype_)));
          set_has_modeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrapCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string Res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->res(), output);
  }

  // required string Name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 Type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // required uint32 CDTime = 5;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->cdtime(), output);
  }

  // required uint32 BuffID = 6;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->buffid(), output);
  }

  // required uint32 TargetType = 7;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->targettype(), output);
  }

  // required uint32 DamgeCnt = 8;
  if (has_damgecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->damgecnt(), output);
  }

  // required uint32 ModelType = 9;
  if (has_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->modeltype(), output);
  }

}

int TrapCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string Res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // required string Name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 Type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 CDTime = 5;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cdtime());
    }

    // required uint32 BuffID = 6;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

    // required uint32 TargetType = 7;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // required uint32 DamgeCnt = 8;
    if (has_damgecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damgecnt());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 ModelType = 9;
    if (has_modeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modeltype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrapCfg*>(&from));
}

void TrapCfg::MergeFrom(const TrapCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_damgecnt()) {
      set_damgecnt(from.damgecnt());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modeltype()) {
      set_modeltype(from.modeltype());
    }
  }
}

void TrapCfg::CopyFrom(const TrapCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void TrapCfg::Swap(TrapCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(res_, other->res_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(buffid_, other->buffid_);
    std::swap(targettype_, other->targettype_);
    std::swap(damgecnt_, other->damgecnt_);
    std::swap(modeltype_, other->modeltype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrapCfg::GetTypeName() const {
  return "com.cfg.vo.TrapCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int TrapCfgSet::kTrapCfgFieldNumber;
#endif  // !_MSC_VER

TrapCfgSet::TrapCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TrapCfgSet::InitAsDefaultInstance() {
}

TrapCfgSet::TrapCfgSet(const TrapCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TrapCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapCfgSet::~TrapCfgSet() {
  SharedDtor();
}

void TrapCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TrapCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TrapCfgSet& TrapCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_TrapCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_TrapCfg_2eproto();
#endif
  return *default_instance_;
}

TrapCfgSet* TrapCfgSet::default_instance_ = NULL;

TrapCfgSet* TrapCfgSet::New() const {
  return new TrapCfgSet;
}

void TrapCfgSet::Clear() {
  trapcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TrapCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.TrapCfg trapCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trapCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trapcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trapCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrapCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.TrapCfg trapCfg = 1;
  for (int i = 0; i < this->trapcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->trapcfg(i), output);
  }

}

int TrapCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.TrapCfg trapCfg = 1;
  total_size += 1 * this->trapcfg_size();
  for (int i = 0; i < this->trapcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trapcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TrapCfgSet*>(&from));
}

void TrapCfgSet::MergeFrom(const TrapCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  trapcfg_.MergeFrom(from.trapcfg_);
}

void TrapCfgSet::CopyFrom(const TrapCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapCfgSet::IsInitialized() const {

  for (int i = 0; i < trapcfg_size(); i++) {
    if (!this->trapcfg(i).IsInitialized()) return false;
  }
  return true;
}

void TrapCfgSet::Swap(TrapCfgSet* other) {
  if (other != this) {
    trapcfg_.Swap(&other->trapcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TrapCfgSet::GetTypeName() const {
  return "com.cfg.vo.TrapCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
