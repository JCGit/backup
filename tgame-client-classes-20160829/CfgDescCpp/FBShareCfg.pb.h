// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FBShareCfg.proto

#ifndef PROTOBUF_FBShareCfg_2eproto__INCLUDED
#define PROTOBUF_FBShareCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_FBShareCfg_2eproto();
void protobuf_AssignDesc_FBShareCfg_2eproto();
void protobuf_ShutdownFile_FBShareCfg_2eproto();

class FBShareCfg;
class FBShareCfgSet;

// ===================================================================

class FBShareCfg : public ::google::protobuf::MessageLite {
 public:
  FBShareCfg();
  virtual ~FBShareCfg();

  FBShareCfg(const FBShareCfg& from);

  inline FBShareCfg& operator=(const FBShareCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const FBShareCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FBShareCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FBShareCfg* other);

  // implements Message ----------------------------------------------

  FBShareCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FBShareCfg& from);
  void MergeFrom(const FBShareCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string caption = 3;
  inline bool has_caption() const;
  inline void clear_caption();
  static const int kCaptionFieldNumber = 3;
  inline const ::std::string& caption() const;
  inline void set_caption(const ::std::string& value);
  inline void set_caption(const char* value);
  inline void set_caption(const char* value, size_t size);
  inline ::std::string* mutable_caption();
  inline ::std::string* release_caption();
  inline void set_allocated_caption(::std::string* caption);

  // required string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // required string link = 5;
  inline bool has_link() const;
  inline void clear_link();
  static const int kLinkFieldNumber = 5;
  inline const ::std::string& link() const;
  inline void set_link(const ::std::string& value);
  inline void set_link(const char* value);
  inline void set_link(const char* value, size_t size);
  inline ::std::string* mutable_link();
  inline ::std::string* release_link();
  inline void set_allocated_link(::std::string* link);

  // required string picture = 6;
  inline bool has_picture() const;
  inline void clear_picture();
  static const int kPictureFieldNumber = 6;
  inline const ::std::string& picture() const;
  inline void set_picture(const ::std::string& value);
  inline void set_picture(const char* value);
  inline void set_picture(const char* value, size_t size);
  inline ::std::string* mutable_picture();
  inline ::std::string* release_picture();
  inline void set_allocated_picture(::std::string* picture);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FBShareCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_caption();
  inline void clear_has_caption();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_link();
  inline void clear_has_link();
  inline void set_has_picture();
  inline void clear_has_picture();

  ::std::string* name_;
  ::std::string* caption_;
  ::std::string* description_;
  ::std::string* link_;
  ::std::string* picture_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FBShareCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FBShareCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FBShareCfg_2eproto();
  friend void protobuf_ShutdownFile_FBShareCfg_2eproto();

  void InitAsDefaultInstance();
  static FBShareCfg* default_instance_;
};
// -------------------------------------------------------------------

class FBShareCfgSet : public ::google::protobuf::MessageLite {
 public:
  FBShareCfgSet();
  virtual ~FBShareCfgSet();

  FBShareCfgSet(const FBShareCfgSet& from);

  inline FBShareCfgSet& operator=(const FBShareCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const FBShareCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const FBShareCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(FBShareCfgSet* other);

  // implements Message ----------------------------------------------

  FBShareCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const FBShareCfgSet& from);
  void MergeFrom(const FBShareCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.FBShareCfg fbShareCfg = 1;
  inline int fbsharecfg_size() const;
  inline void clear_fbsharecfg();
  static const int kFbShareCfgFieldNumber = 1;
  inline const ::com::cfg::vo::FBShareCfg& fbsharecfg(int index) const;
  inline ::com::cfg::vo::FBShareCfg* mutable_fbsharecfg(int index);
  inline ::com::cfg::vo::FBShareCfg* add_fbsharecfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FBShareCfg >&
      fbsharecfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FBShareCfg >*
      mutable_fbsharecfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.FBShareCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FBShareCfg > fbsharecfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_FBShareCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_FBShareCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_FBShareCfg_2eproto();
  friend void protobuf_ShutdownFile_FBShareCfg_2eproto();

  void InitAsDefaultInstance();
  static FBShareCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// FBShareCfg

// required uint32 id = 1;
inline bool FBShareCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FBShareCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FBShareCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FBShareCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 FBShareCfg::id() const {
  return id_;
}
inline void FBShareCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool FBShareCfg::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FBShareCfg::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FBShareCfg::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FBShareCfg::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FBShareCfg::name() const {
  return *name_;
}
inline void FBShareCfg::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FBShareCfg::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FBShareCfg::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FBShareCfg::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FBShareCfg::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FBShareCfg::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string caption = 3;
inline bool FBShareCfg::has_caption() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FBShareCfg::set_has_caption() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FBShareCfg::clear_has_caption() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FBShareCfg::clear_caption() {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    caption_->clear();
  }
  clear_has_caption();
}
inline const ::std::string& FBShareCfg::caption() const {
  return *caption_;
}
inline void FBShareCfg::set_caption(const ::std::string& value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
}
inline void FBShareCfg::set_caption(const char* value) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(value);
}
inline void FBShareCfg::set_caption(const char* value, size_t size) {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  caption_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FBShareCfg::mutable_caption() {
  set_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    caption_ = new ::std::string;
  }
  return caption_;
}
inline ::std::string* FBShareCfg::release_caption() {
  clear_has_caption();
  if (caption_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = caption_;
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FBShareCfg::set_allocated_caption(::std::string* caption) {
  if (caption_ != &::google::protobuf::internal::kEmptyString) {
    delete caption_;
  }
  if (caption) {
    set_has_caption();
    caption_ = caption;
  } else {
    clear_has_caption();
    caption_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string description = 4;
inline bool FBShareCfg::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FBShareCfg::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FBShareCfg::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FBShareCfg::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& FBShareCfg::description() const {
  return *description_;
}
inline void FBShareCfg::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void FBShareCfg::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void FBShareCfg::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FBShareCfg::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* FBShareCfg::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FBShareCfg::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string link = 5;
inline bool FBShareCfg::has_link() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FBShareCfg::set_has_link() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FBShareCfg::clear_has_link() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FBShareCfg::clear_link() {
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    link_->clear();
  }
  clear_has_link();
}
inline const ::std::string& FBShareCfg::link() const {
  return *link_;
}
inline void FBShareCfg::set_link(const ::std::string& value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(value);
}
inline void FBShareCfg::set_link(const char* value) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(value);
}
inline void FBShareCfg::set_link(const char* value, size_t size) {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  link_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FBShareCfg::mutable_link() {
  set_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    link_ = new ::std::string;
  }
  return link_;
}
inline ::std::string* FBShareCfg::release_link() {
  clear_has_link();
  if (link_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = link_;
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FBShareCfg::set_allocated_link(::std::string* link) {
  if (link_ != &::google::protobuf::internal::kEmptyString) {
    delete link_;
  }
  if (link) {
    set_has_link();
    link_ = link;
  } else {
    clear_has_link();
    link_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string picture = 6;
inline bool FBShareCfg::has_picture() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FBShareCfg::set_has_picture() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FBShareCfg::clear_has_picture() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FBShareCfg::clear_picture() {
  if (picture_ != &::google::protobuf::internal::kEmptyString) {
    picture_->clear();
  }
  clear_has_picture();
}
inline const ::std::string& FBShareCfg::picture() const {
  return *picture_;
}
inline void FBShareCfg::set_picture(const ::std::string& value) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
}
inline void FBShareCfg::set_picture(const char* value) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  picture_->assign(value);
}
inline void FBShareCfg::set_picture(const char* value, size_t size) {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  picture_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FBShareCfg::mutable_picture() {
  set_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    picture_ = new ::std::string;
  }
  return picture_;
}
inline ::std::string* FBShareCfg::release_picture() {
  clear_has_picture();
  if (picture_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = picture_;
    picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FBShareCfg::set_allocated_picture(::std::string* picture) {
  if (picture_ != &::google::protobuf::internal::kEmptyString) {
    delete picture_;
  }
  if (picture) {
    set_has_picture();
    picture_ = picture;
  } else {
    clear_has_picture();
    picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FBShareCfgSet

// repeated .com.cfg.vo.FBShareCfg fbShareCfg = 1;
inline int FBShareCfgSet::fbsharecfg_size() const {
  return fbsharecfg_.size();
}
inline void FBShareCfgSet::clear_fbsharecfg() {
  fbsharecfg_.Clear();
}
inline const ::com::cfg::vo::FBShareCfg& FBShareCfgSet::fbsharecfg(int index) const {
  return fbsharecfg_.Get(index);
}
inline ::com::cfg::vo::FBShareCfg* FBShareCfgSet::mutable_fbsharecfg(int index) {
  return fbsharecfg_.Mutable(index);
}
inline ::com::cfg::vo::FBShareCfg* FBShareCfgSet::add_fbsharecfg() {
  return fbsharecfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FBShareCfg >&
FBShareCfgSet::fbsharecfg() const {
  return fbsharecfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::FBShareCfg >*
FBShareCfgSet::mutable_fbsharecfg() {
  return &fbsharecfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FBShareCfg_2eproto__INCLUDED
