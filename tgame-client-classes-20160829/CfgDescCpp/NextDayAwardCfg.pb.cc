// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NextDayAwardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NextDayAwardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_NextDayAwardCfg_2eproto() {
  delete NextDayCfgElmt::default_instance_;
  delete NextDayCfg::default_instance_;
  delete NextDayCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_NextDayAwardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_NextDayAwardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  NextDayCfgElmt::default_instance_ = new NextDayCfgElmt();
  NextDayCfg::default_instance_ = new NextDayCfg();
  NextDayCfgSet::default_instance_ = new NextDayCfgSet();
  NextDayCfgElmt::default_instance_->InitAsDefaultInstance();
  NextDayCfg::default_instance_->InitAsDefaultInstance();
  NextDayCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NextDayAwardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NextDayAwardCfg_2eproto_once_);
void protobuf_AddDesc_NextDayAwardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NextDayAwardCfg_2eproto_once_,
                 &protobuf_AddDesc_NextDayAwardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NextDayAwardCfg_2eproto {
  StaticDescriptorInitializer_NextDayAwardCfg_2eproto() {
    protobuf_AddDesc_NextDayAwardCfg_2eproto();
  }
} static_descriptor_initializer_NextDayAwardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int NextDayCfgElmt::kElementTypeFieldNumber;
const int NextDayCfgElmt::kElementIDFieldNumber;
const int NextDayCfgElmt::kElementCntFieldNumber;
#endif  // !_MSC_VER

NextDayCfgElmt::NextDayCfgElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextDayCfgElmt::InitAsDefaultInstance() {
}

NextDayCfgElmt::NextDayCfgElmt(const NextDayCfgElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextDayCfgElmt::SharedCtor() {
  _cached_size_ = 0;
  elementtype_ = 0u;
  elementid_ = 0u;
  elementcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextDayCfgElmt::~NextDayCfgElmt() {
  SharedDtor();
}

void NextDayCfgElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NextDayCfgElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextDayCfgElmt& NextDayCfgElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NextDayAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NextDayAwardCfg_2eproto();
#endif
  return *default_instance_;
}

NextDayCfgElmt* NextDayCfgElmt::default_instance_ = NULL;

NextDayCfgElmt* NextDayCfgElmt::New() const {
  return new NextDayCfgElmt;
}

void NextDayCfgElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementtype_ = 0u;
    elementid_ = 0u;
    elementcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextDayCfgElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementID;
        break;
      }

      // required uint32 ElementID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementCnt;
        break;
      }

      // required uint32 ElementCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcnt_)));
          set_has_elementcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextDayCfgElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementType = 1;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementtype(), output);
  }

  // required uint32 ElementID = 2;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementid(), output);
  }

  // required uint32 ElementCnt = 3;
  if (has_elementcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementcnt(), output);
  }

}

int NextDayCfgElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementType = 1;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 ElementID = 2;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementCnt = 3;
    if (has_elementcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextDayCfgElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextDayCfgElmt*>(&from));
}

void NextDayCfgElmt::MergeFrom(const NextDayCfgElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementcnt()) {
      set_elementcnt(from.elementcnt());
    }
  }
}

void NextDayCfgElmt::CopyFrom(const NextDayCfgElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextDayCfgElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void NextDayCfgElmt::Swap(NextDayCfgElmt* other) {
  if (other != this) {
    std::swap(elementtype_, other->elementtype_);
    std::swap(elementid_, other->elementid_);
    std::swap(elementcnt_, other->elementcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextDayCfgElmt::GetTypeName() const {
  return "com.cfg.vo.NextDayCfgElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int NextDayCfg::kLevelFieldNumber;
const int NextDayCfg::kElmtLstFieldNumber;
#endif  // !_MSC_VER

NextDayCfg::NextDayCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextDayCfg::InitAsDefaultInstance() {
}

NextDayCfg::NextDayCfg(const NextDayCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextDayCfg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextDayCfg::~NextDayCfg() {
  SharedDtor();
}

void NextDayCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NextDayCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextDayCfg& NextDayCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NextDayAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NextDayAwardCfg_2eproto();
#endif
  return *default_instance_;
}

NextDayCfg* NextDayCfg::default_instance_ = NULL;

NextDayCfg* NextDayCfg::New() const {
  return new NextDayCfg;
}

void NextDayCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  elmtlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextDayCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ElmtLst;
        break;
      }

      // repeated .com.cfg.vo.NextDayCfgElmt ElmtLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElmtLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elmtlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ElmtLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextDayCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // repeated .com.cfg.vo.NextDayCfgElmt ElmtLst = 3;
  for (int i = 0; i < this->elmtlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->elmtlst(i), output);
  }

}

int NextDayCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated .com.cfg.vo.NextDayCfgElmt ElmtLst = 3;
  total_size += 1 * this->elmtlst_size();
  for (int i = 0; i < this->elmtlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elmtlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextDayCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextDayCfg*>(&from));
}

void NextDayCfg::MergeFrom(const NextDayCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  elmtlst_.MergeFrom(from.elmtlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void NextDayCfg::CopyFrom(const NextDayCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextDayCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < elmtlst_size(); i++) {
    if (!this->elmtlst(i).IsInitialized()) return false;
  }
  return true;
}

void NextDayCfg::Swap(NextDayCfg* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    elmtlst_.Swap(&other->elmtlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextDayCfg::GetTypeName() const {
  return "com.cfg.vo.NextDayCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int NextDayCfgSet::kNextDayCfgFieldNumber;
#endif  // !_MSC_VER

NextDayCfgSet::NextDayCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NextDayCfgSet::InitAsDefaultInstance() {
}

NextDayCfgSet::NextDayCfgSet(const NextDayCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NextDayCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NextDayCfgSet::~NextDayCfgSet() {
  SharedDtor();
}

void NextDayCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NextDayCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextDayCfgSet& NextDayCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NextDayAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NextDayAwardCfg_2eproto();
#endif
  return *default_instance_;
}

NextDayCfgSet* NextDayCfgSet::default_instance_ = NULL;

NextDayCfgSet* NextDayCfgSet::New() const {
  return new NextDayCfgSet;
}

void NextDayCfgSet::Clear() {
  nextdaycfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NextDayCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.NextDayCfg nextDayCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nextDayCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nextdaycfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_nextDayCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NextDayCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.NextDayCfg nextDayCfg = 1;
  for (int i = 0; i < this->nextdaycfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->nextdaycfg(i), output);
  }

}

int NextDayCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.NextDayCfg nextDayCfg = 1;
  total_size += 1 * this->nextdaycfg_size();
  for (int i = 0; i < this->nextdaycfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nextdaycfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextDayCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextDayCfgSet*>(&from));
}

void NextDayCfgSet::MergeFrom(const NextDayCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  nextdaycfg_.MergeFrom(from.nextdaycfg_);
}

void NextDayCfgSet::CopyFrom(const NextDayCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextDayCfgSet::IsInitialized() const {

  for (int i = 0; i < nextdaycfg_size(); i++) {
    if (!this->nextdaycfg(i).IsInitialized()) return false;
  }
  return true;
}

void NextDayCfgSet::Swap(NextDayCfgSet* other) {
  if (other != this) {
    nextdaycfg_.Swap(&other->nextdaycfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NextDayCfgSet::GetTypeName() const {
  return "com.cfg.vo.NextDayCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
