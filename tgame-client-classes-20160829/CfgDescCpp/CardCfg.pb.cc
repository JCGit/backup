// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_CardCfg_2eproto() {
  delete CardElement::default_instance_;
  delete CardCfg::default_instance_;
  delete CardCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CardElement::default_instance_ = new CardElement();
  CardCfg::default_instance_ = new CardCfg();
  CardCfgSet::default_instance_ = new CardCfgSet();
  CardElement::default_instance_->InitAsDefaultInstance();
  CardCfg::default_instance_->InitAsDefaultInstance();
  CardCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CardCfg_2eproto_once_);
void protobuf_AddDesc_CardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CardCfg_2eproto_once_,
                 &protobuf_AddDesc_CardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CardCfg_2eproto {
  StaticDescriptorInitializer_CardCfg_2eproto() {
    protobuf_AddDesc_CardCfg_2eproto();
  }
} static_descriptor_initializer_CardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CardElement::kElementIDFieldNumber;
const int CardElement::kElementTypeFieldNumber;
const int CardElement::kElementCntFieldNumber;
const int CardElement::kProbFieldNumber;
#endif  // !_MSC_VER

CardElement::CardElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardElement::InitAsDefaultInstance() {
}

CardElement::CardElement(const CardElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardElement::SharedCtor() {
  _cached_size_ = 0;
  elementid_ = 0u;
  elementtype_ = 0u;
  elementcnt_ = 0u;
  prob_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardElement::~CardElement() {
  SharedDtor();
}

void CardElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardElement& CardElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CardCfg_2eproto();
#endif
  return *default_instance_;
}

CardElement* CardElement::default_instance_ = NULL;

CardElement* CardElement::New() const {
  return new CardElement;
}

void CardElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementid_ = 0u;
    elementtype_ = 0u;
    elementcnt_ = 0u;
    prob_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementType;
        break;
      }

      // required uint32 ElementType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementCnt;
        break;
      }

      // required uint32 ElementCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcnt_)));
          set_has_elementcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Prob;
        break;
      }

      // required uint32 Prob = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Prob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_)));
          set_has_prob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementID = 1;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementid(), output);
  }

  // required uint32 ElementType = 2;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementtype(), output);
  }

  // required uint32 ElementCnt = 3;
  if (has_elementcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementcnt(), output);
  }

  // required uint32 Prob = 4;
  if (has_prob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prob(), output);
  }

}

int CardElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementID = 1;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementType = 2;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 ElementCnt = 3;
    if (has_elementcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcnt());
    }

    // required uint32 Prob = 4;
    if (has_prob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardElement*>(&from));
}

void CardElement::MergeFrom(const CardElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_elementcnt()) {
      set_elementcnt(from.elementcnt());
    }
    if (from.has_prob()) {
      set_prob(from.prob());
    }
  }
}

void CardElement::CopyFrom(const CardElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CardElement::Swap(CardElement* other) {
  if (other != this) {
    std::swap(elementid_, other->elementid_);
    std::swap(elementtype_, other->elementtype_);
    std::swap(elementcnt_, other->elementcnt_);
    std::swap(prob_, other->prob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardElement::GetTypeName() const {
  return "com.cfg.vo.CardElement";
}


// ===================================================================

#ifndef _MSC_VER
const int CardCfg::kCardIDFieldNumber;
const int CardCfg::kFreeElementLstFieldNumber;
const int CardCfg::kCostElementLstFieldNumber;
#endif  // !_MSC_VER

CardCfg::CardCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardCfg::InitAsDefaultInstance() {
}

CardCfg::CardCfg(const CardCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardCfg::SharedCtor() {
  _cached_size_ = 0;
  cardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardCfg::~CardCfg() {
  SharedDtor();
}

void CardCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardCfg& CardCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CardCfg_2eproto();
#endif
  return *default_instance_;
}

CardCfg* CardCfg::default_instance_ = NULL;

CardCfg* CardCfg::New() const {
  return new CardCfg;
}

void CardCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cardid_ = 0u;
  }
  freeelementlst_.Clear();
  costelementlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cardid_)));
          set_has_cardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_freeElementLst;
        break;
      }

      // repeated .com.cfg.vo.CardElement freeElementLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_freeElementLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_freeelementlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_freeElementLst;
        if (input->ExpectTag(26)) goto parse_costElementLst;
        break;
      }

      // repeated .com.cfg.vo.CardElement costElementLst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costElementLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costelementlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_costElementLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cardID = 1;
  if (has_cardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cardid(), output);
  }

  // repeated .com.cfg.vo.CardElement freeElementLst = 2;
  for (int i = 0; i < this->freeelementlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->freeelementlst(i), output);
  }

  // repeated .com.cfg.vo.CardElement costElementLst = 3;
  for (int i = 0; i < this->costelementlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->costelementlst(i), output);
  }

}

int CardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cardID = 1;
    if (has_cardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cardid());
    }

  }
  // repeated .com.cfg.vo.CardElement freeElementLst = 2;
  total_size += 1 * this->freeelementlst_size();
  for (int i = 0; i < this->freeelementlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->freeelementlst(i));
  }

  // repeated .com.cfg.vo.CardElement costElementLst = 3;
  total_size += 1 * this->costelementlst_size();
  for (int i = 0; i < this->costelementlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costelementlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardCfg*>(&from));
}

void CardCfg::MergeFrom(const CardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  freeelementlst_.MergeFrom(from.freeelementlst_);
  costelementlst_.MergeFrom(from.costelementlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cardid()) {
      set_cardid(from.cardid());
    }
  }
}

void CardCfg::CopyFrom(const CardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < freeelementlst_size(); i++) {
    if (!this->freeelementlst(i).IsInitialized()) return false;
  }
  for (int i = 0; i < costelementlst_size(); i++) {
    if (!this->costelementlst(i).IsInitialized()) return false;
  }
  return true;
}

void CardCfg::Swap(CardCfg* other) {
  if (other != this) {
    std::swap(cardid_, other->cardid_);
    freeelementlst_.Swap(&other->freeelementlst_);
    costelementlst_.Swap(&other->costelementlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardCfg::GetTypeName() const {
  return "com.cfg.vo.CardCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int CardCfgSet::kCardCfgFieldNumber;
#endif  // !_MSC_VER

CardCfgSet::CardCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CardCfgSet::InitAsDefaultInstance() {
}

CardCfgSet::CardCfgSet(const CardCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CardCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardCfgSet::~CardCfgSet() {
  SharedDtor();
}

void CardCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CardCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CardCfgSet& CardCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CardCfg_2eproto();
#endif
  return *default_instance_;
}

CardCfgSet* CardCfgSet::default_instance_ = NULL;

CardCfgSet* CardCfgSet::New() const {
  return new CardCfgSet;
}

void CardCfgSet::Clear() {
  cardcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CardCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.CardCfg cardCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cardCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cardcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cardCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CardCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.CardCfg cardCfg = 1;
  for (int i = 0; i < this->cardcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cardcfg(i), output);
  }

}

int CardCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.CardCfg cardCfg = 1;
  total_size += 1 * this->cardcfg_size();
  for (int i = 0; i < this->cardcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cardcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CardCfgSet*>(&from));
}

void CardCfgSet::MergeFrom(const CardCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardcfg_.MergeFrom(from.cardcfg_);
}

void CardCfgSet::CopyFrom(const CardCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardCfgSet::IsInitialized() const {

  for (int i = 0; i < cardcfg_size(); i++) {
    if (!this->cardcfg(i).IsInitialized()) return false;
  }
  return true;
}

void CardCfgSet::Swap(CardCfgSet* other) {
  if (other != this) {
    cardcfg_.Swap(&other->cardcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CardCfgSet::GetTypeName() const {
  return "com.cfg.vo.CardCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
