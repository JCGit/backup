// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipRefitCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipRefitCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EquipRefitCfg_2eproto() {
  delete EquipRefitConsumeElement::default_instance_;
  delete EquipRefitCfg::default_instance_;
  delete EquipRefitCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EquipRefitCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EquipRefitCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EquipRefitConsumeElement::default_instance_ = new EquipRefitConsumeElement();
  EquipRefitCfg::default_instance_ = new EquipRefitCfg();
  EquipRefitCfgSet::default_instance_ = new EquipRefitCfgSet();
  EquipRefitConsumeElement::default_instance_->InitAsDefaultInstance();
  EquipRefitCfg::default_instance_->InitAsDefaultInstance();
  EquipRefitCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipRefitCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EquipRefitCfg_2eproto_once_);
void protobuf_AddDesc_EquipRefitCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EquipRefitCfg_2eproto_once_,
                 &protobuf_AddDesc_EquipRefitCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipRefitCfg_2eproto {
  StaticDescriptorInitializer_EquipRefitCfg_2eproto() {
    protobuf_AddDesc_EquipRefitCfg_2eproto();
  }
} static_descriptor_initializer_EquipRefitCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EquipRefitConsumeElement::kElementIDFieldNumber;
const int EquipRefitConsumeElement::kElementTypeFieldNumber;
const int EquipRefitConsumeElement::kElementCntFieldNumber;
#endif  // !_MSC_VER

EquipRefitConsumeElement::EquipRefitConsumeElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipRefitConsumeElement::InitAsDefaultInstance() {
}

EquipRefitConsumeElement::EquipRefitConsumeElement(const EquipRefitConsumeElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipRefitConsumeElement::SharedCtor() {
  _cached_size_ = 0;
  elementid_ = 0u;
  elementtype_ = 0u;
  elementcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRefitConsumeElement::~EquipRefitConsumeElement() {
  SharedDtor();
}

void EquipRefitConsumeElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipRefitConsumeElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipRefitConsumeElement& EquipRefitConsumeElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipRefitCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipRefitCfg_2eproto();
#endif
  return *default_instance_;
}

EquipRefitConsumeElement* EquipRefitConsumeElement::default_instance_ = NULL;

EquipRefitConsumeElement* EquipRefitConsumeElement::New() const {
  return new EquipRefitConsumeElement;
}

void EquipRefitConsumeElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    elementid_ = 0u;
    elementtype_ = 0u;
    elementcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipRefitConsumeElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ElementID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementid_)));
          set_has_elementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ElementType;
        break;
      }

      // required uint32 ElementType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementtype_)));
          set_has_elementtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ElementCnt;
        break;
      }

      // required uint32 ElementCnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElementCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &elementcnt_)));
          set_has_elementcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipRefitConsumeElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ElementID = 1;
  if (has_elementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->elementid(), output);
  }

  // required uint32 ElementType = 2;
  if (has_elementtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->elementtype(), output);
  }

  // required uint32 ElementCnt = 3;
  if (has_elementcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->elementcnt(), output);
  }

}

int EquipRefitConsumeElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ElementID = 1;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementid());
    }

    // required uint32 ElementType = 2;
    if (has_elementtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementtype());
    }

    // required uint32 ElementCnt = 3;
    if (has_elementcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->elementcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRefitConsumeElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipRefitConsumeElement*>(&from));
}

void EquipRefitConsumeElement::MergeFrom(const EquipRefitConsumeElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_elementid()) {
      set_elementid(from.elementid());
    }
    if (from.has_elementtype()) {
      set_elementtype(from.elementtype());
    }
    if (from.has_elementcnt()) {
      set_elementcnt(from.elementcnt());
    }
  }
}

void EquipRefitConsumeElement::CopyFrom(const EquipRefitConsumeElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRefitConsumeElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EquipRefitConsumeElement::Swap(EquipRefitConsumeElement* other) {
  if (other != this) {
    std::swap(elementid_, other->elementid_);
    std::swap(elementtype_, other->elementtype_);
    std::swap(elementcnt_, other->elementcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipRefitConsumeElement::GetTypeName() const {
  return "com.cfg.vo.EquipRefitConsumeElement";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRefitCfg::kPartFieldNumber;
const int EquipRefitCfg::kColorFieldNumber;
const int EquipRefitCfg::kCostCoinFieldNumber;
const int EquipRefitCfg::kElmtListFieldNumber;
#endif  // !_MSC_VER

EquipRefitCfg::EquipRefitCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipRefitCfg::InitAsDefaultInstance() {
}

EquipRefitCfg::EquipRefitCfg(const EquipRefitCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipRefitCfg::SharedCtor() {
  _cached_size_ = 0;
  part_ = 0u;
  color_ = 0u;
  costcoin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRefitCfg::~EquipRefitCfg() {
  SharedDtor();
}

void EquipRefitCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipRefitCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipRefitCfg& EquipRefitCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipRefitCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipRefitCfg_2eproto();
#endif
  return *default_instance_;
}

EquipRefitCfg* EquipRefitCfg::default_instance_ = NULL;

EquipRefitCfg* EquipRefitCfg::New() const {
  return new EquipRefitCfg;
}

void EquipRefitCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    part_ = 0u;
    color_ = 0u;
    costcoin_ = 0u;
  }
  elmtlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipRefitCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Part = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &part_)));
          set_has_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Color;
        break;
      }

      // required uint32 Color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_CostCoin;
        break;
      }

      // required uint32 CostCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costcoin_)));
          set_has_costcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ElmtList;
        break;
      }

      // repeated .com.cfg.vo.EquipRefitConsumeElement ElmtList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElmtList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elmtlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ElmtList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipRefitCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Part = 1;
  if (has_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->part(), output);
  }

  // required uint32 Color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }

  // required uint32 CostCoin = 3;
  if (has_costcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->costcoin(), output);
  }

  // repeated .com.cfg.vo.EquipRefitConsumeElement ElmtList = 4;
  for (int i = 0; i < this->elmtlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->elmtlist(i), output);
  }

}

int EquipRefitCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Part = 1;
    if (has_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->part());
    }

    // required uint32 Color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // required uint32 CostCoin = 3;
    if (has_costcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costcoin());
    }

  }
  // repeated .com.cfg.vo.EquipRefitConsumeElement ElmtList = 4;
  total_size += 1 * this->elmtlist_size();
  for (int i = 0; i < this->elmtlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elmtlist(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRefitCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipRefitCfg*>(&from));
}

void EquipRefitCfg::MergeFrom(const EquipRefitCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  elmtlist_.MergeFrom(from.elmtlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_part()) {
      set_part(from.part());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_costcoin()) {
      set_costcoin(from.costcoin());
    }
  }
}

void EquipRefitCfg::CopyFrom(const EquipRefitCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRefitCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < elmtlist_size(); i++) {
    if (!this->elmtlist(i).IsInitialized()) return false;
  }
  return true;
}

void EquipRefitCfg::Swap(EquipRefitCfg* other) {
  if (other != this) {
    std::swap(part_, other->part_);
    std::swap(color_, other->color_);
    std::swap(costcoin_, other->costcoin_);
    elmtlist_.Swap(&other->elmtlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipRefitCfg::GetTypeName() const {
  return "com.cfg.vo.EquipRefitCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipRefitCfgSet::kEquiprefitcfgFieldNumber;
#endif  // !_MSC_VER

EquipRefitCfgSet::EquipRefitCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipRefitCfgSet::InitAsDefaultInstance() {
}

EquipRefitCfgSet::EquipRefitCfgSet(const EquipRefitCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipRefitCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipRefitCfgSet::~EquipRefitCfgSet() {
  SharedDtor();
}

void EquipRefitCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipRefitCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipRefitCfgSet& EquipRefitCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipRefitCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipRefitCfg_2eproto();
#endif
  return *default_instance_;
}

EquipRefitCfgSet* EquipRefitCfgSet::default_instance_ = NULL;

EquipRefitCfgSet* EquipRefitCfgSet::New() const {
  return new EquipRefitCfgSet;
}

void EquipRefitCfgSet::Clear() {
  equiprefitcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipRefitCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EquipRefitCfg equiprefitcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equiprefitcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equiprefitcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equiprefitcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipRefitCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EquipRefitCfg equiprefitcfg = 1;
  for (int i = 0; i < this->equiprefitcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equiprefitcfg(i), output);
  }

}

int EquipRefitCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EquipRefitCfg equiprefitcfg = 1;
  total_size += 1 * this->equiprefitcfg_size();
  for (int i = 0; i < this->equiprefitcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equiprefitcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipRefitCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipRefitCfgSet*>(&from));
}

void EquipRefitCfgSet::MergeFrom(const EquipRefitCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  equiprefitcfg_.MergeFrom(from.equiprefitcfg_);
}

void EquipRefitCfgSet::CopyFrom(const EquipRefitCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipRefitCfgSet::IsInitialized() const {

  for (int i = 0; i < equiprefitcfg_size(); i++) {
    if (!this->equiprefitcfg(i).IsInitialized()) return false;
  }
  return true;
}

void EquipRefitCfgSet::Swap(EquipRefitCfgSet* other) {
  if (other != this) {
    equiprefitcfg_.Swap(&other->equiprefitcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipRefitCfgSet::GetTypeName() const {
  return "com.cfg.vo.EquipRefitCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
