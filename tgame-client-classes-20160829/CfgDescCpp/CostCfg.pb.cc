// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CostCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CostCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_CostCfg_2eproto() {
  delete CostCfg::default_instance_;
  delete CostCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CostCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CostCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CostCfg::default_instance_ = new CostCfg();
  CostCfgSet::default_instance_ = new CostCfgSet();
  CostCfg::default_instance_->InitAsDefaultInstance();
  CostCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CostCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CostCfg_2eproto_once_);
void protobuf_AddDesc_CostCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CostCfg_2eproto_once_,
                 &protobuf_AddDesc_CostCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CostCfg_2eproto {
  StaticDescriptorInitializer_CostCfg_2eproto() {
    protobuf_AddDesc_CostCfg_2eproto();
  }
} static_descriptor_initializer_CostCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CostCfg::kCountFieldNumber;
const int CostCfg::kBuyManualCostFieldNumber;
#endif  // !_MSC_VER

CostCfg::CostCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CostCfg::InitAsDefaultInstance() {
}

CostCfg::CostCfg(const CostCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CostCfg::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  buymanualcost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCfg::~CostCfg() {
  SharedDtor();
}

void CostCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CostCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CostCfg& CostCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CostCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CostCfg_2eproto();
#endif
  return *default_instance_;
}

CostCfg* CostCfg::default_instance_ = NULL;

CostCfg* CostCfg::New() const {
  return new CostCfg;
}

void CostCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    buymanualcost_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CostCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BuyManualCost;
        break;
      }

      // required uint32 BuyManualCost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyManualCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buymanualcost_)));
          set_has_buymanualcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CostCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }

  // required uint32 BuyManualCost = 2;
  if (has_buymanualcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buymanualcost(), output);
  }

}

int CostCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // required uint32 BuyManualCost = 2;
    if (has_buymanualcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buymanualcost());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CostCfg*>(&from));
}

void CostCfg::MergeFrom(const CostCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_buymanualcost()) {
      set_buymanualcost(from.buymanualcost());
    }
  }
}

void CostCfg::CopyFrom(const CostCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CostCfg::Swap(CostCfg* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(buymanualcost_, other->buymanualcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CostCfg::GetTypeName() const {
  return "com.cfg.vo.CostCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int CostCfgSet::kBuycostcfgFieldNumber;
#endif  // !_MSC_VER

CostCfgSet::CostCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CostCfgSet::InitAsDefaultInstance() {
}

CostCfgSet::CostCfgSet(const CostCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CostCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CostCfgSet::~CostCfgSet() {
  SharedDtor();
}

void CostCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CostCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CostCfgSet& CostCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CostCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CostCfg_2eproto();
#endif
  return *default_instance_;
}

CostCfgSet* CostCfgSet::default_instance_ = NULL;

CostCfgSet* CostCfgSet::New() const {
  return new CostCfgSet;
}

void CostCfgSet::Clear() {
  buycostcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CostCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.CostCfg buycostcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buycostcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buycostcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_buycostcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CostCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.CostCfg buycostcfg = 1;
  for (int i = 0; i < this->buycostcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->buycostcfg(i), output);
  }

}

int CostCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.CostCfg buycostcfg = 1;
  total_size += 1 * this->buycostcfg_size();
  for (int i = 0; i < this->buycostcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buycostcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CostCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CostCfgSet*>(&from));
}

void CostCfgSet::MergeFrom(const CostCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  buycostcfg_.MergeFrom(from.buycostcfg_);
}

void CostCfgSet::CopyFrom(const CostCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostCfgSet::IsInitialized() const {

  for (int i = 0; i < buycostcfg_size(); i++) {
    if (!this->buycostcfg(i).IsInitialized()) return false;
  }
  return true;
}

void CostCfgSet::Swap(CostCfgSet* other) {
  if (other != this) {
    buycostcfg_.Swap(&other->buycostcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CostCfgSet::GetTypeName() const {
  return "com.cfg.vo.CostCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
