// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneCfg.proto

#ifndef PROTOBUF_SceneCfg_2eproto__INCLUDED
#define PROTOBUF_SceneCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneCfg_2eproto();
void protobuf_AssignDesc_SceneCfg_2eproto();
void protobuf_ShutdownFile_SceneCfg_2eproto();

class SceneCfg;
class SceneCfgSet;

// ===================================================================

class SceneCfg : public ::google::protobuf::MessageLite {
 public:
  SceneCfg();
  virtual ~SceneCfg();

  SceneCfg(const SceneCfg& from);

  inline SceneCfg& operator=(const SceneCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const SceneCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SceneCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SceneCfg* other);

  // implements Message ----------------------------------------------

  SceneCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SceneCfg& from);
  void MergeFrom(const SceneCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 SceneID = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 1;
  inline ::google::protobuf::uint32 sceneid() const;
  inline void set_sceneid(::google::protobuf::uint32 value);

  // required uint32 SceneType = 2;
  inline bool has_scenetype() const;
  inline void clear_scenetype();
  static const int kSceneTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 scenetype() const;
  inline void set_scenetype(::google::protobuf::uint32 value);

  // required string SceneName = 3;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kSceneNameFieldNumber = 3;
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // required string BgSoundRes = 4;
  inline bool has_bgsoundres() const;
  inline void clear_bgsoundres();
  static const int kBgSoundResFieldNumber = 4;
  inline const ::std::string& bgsoundres() const;
  inline void set_bgsoundres(const ::std::string& value);
  inline void set_bgsoundres(const char* value);
  inline void set_bgsoundres(const char* value, size_t size);
  inline ::std::string* mutable_bgsoundres();
  inline ::std::string* release_bgsoundres();
  inline void set_allocated_bgsoundres(::std::string* bgsoundres);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.SceneCfg)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_scenetype();
  inline void clear_has_scenetype();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_bgsoundres();
  inline void clear_has_bgsoundres();

  ::google::protobuf::uint32 sceneid_;
  ::google::protobuf::uint32 scenetype_;
  ::std::string* scenename_;
  ::std::string* bgsoundres_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SceneCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SceneCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_SceneCfg_2eproto();
  friend void protobuf_ShutdownFile_SceneCfg_2eproto();

  void InitAsDefaultInstance();
  static SceneCfg* default_instance_;
};
// -------------------------------------------------------------------

class SceneCfgSet : public ::google::protobuf::MessageLite {
 public:
  SceneCfgSet();
  virtual ~SceneCfgSet();

  SceneCfgSet(const SceneCfgSet& from);

  inline SceneCfgSet& operator=(const SceneCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const SceneCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SceneCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SceneCfgSet* other);

  // implements Message ----------------------------------------------

  SceneCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SceneCfgSet& from);
  void MergeFrom(const SceneCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.SceneCfg scenecfg = 1;
  inline int scenecfg_size() const;
  inline void clear_scenecfg();
  static const int kScenecfgFieldNumber = 1;
  inline const ::com::cfg::vo::SceneCfg& scenecfg(int index) const;
  inline ::com::cfg::vo::SceneCfg* mutable_scenecfg(int index);
  inline ::com::cfg::vo::SceneCfg* add_scenecfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneCfg >&
      scenecfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneCfg >*
      mutable_scenecfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.SceneCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneCfg > scenecfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SceneCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SceneCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_SceneCfg_2eproto();
  friend void protobuf_ShutdownFile_SceneCfg_2eproto();

  void InitAsDefaultInstance();
  static SceneCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneCfg

// required uint32 SceneID = 1;
inline bool SceneCfg::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneCfg::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneCfg::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneCfg::clear_sceneid() {
  sceneid_ = 0u;
  clear_has_sceneid();
}
inline ::google::protobuf::uint32 SceneCfg::sceneid() const {
  return sceneid_;
}
inline void SceneCfg::set_sceneid(::google::protobuf::uint32 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// required uint32 SceneType = 2;
inline bool SceneCfg::has_scenetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneCfg::set_has_scenetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneCfg::clear_has_scenetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneCfg::clear_scenetype() {
  scenetype_ = 0u;
  clear_has_scenetype();
}
inline ::google::protobuf::uint32 SceneCfg::scenetype() const {
  return scenetype_;
}
inline void SceneCfg::set_scenetype(::google::protobuf::uint32 value) {
  set_has_scenetype();
  scenetype_ = value;
}

// required string SceneName = 3;
inline bool SceneCfg::has_scenename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneCfg::set_has_scenename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneCfg::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneCfg::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::kEmptyString) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& SceneCfg::scenename() const {
  return *scenename_;
}
inline void SceneCfg::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::kEmptyString) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
}
inline void SceneCfg::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::kEmptyString) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
}
inline void SceneCfg::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::kEmptyString) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneCfg::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::kEmptyString) {
    scenename_ = new ::std::string;
  }
  return scenename_;
}
inline ::std::string* SceneCfg::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneCfg::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::kEmptyString) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string BgSoundRes = 4;
inline bool SceneCfg::has_bgsoundres() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneCfg::set_has_bgsoundres() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneCfg::clear_has_bgsoundres() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneCfg::clear_bgsoundres() {
  if (bgsoundres_ != &::google::protobuf::internal::kEmptyString) {
    bgsoundres_->clear();
  }
  clear_has_bgsoundres();
}
inline const ::std::string& SceneCfg::bgsoundres() const {
  return *bgsoundres_;
}
inline void SceneCfg::set_bgsoundres(const ::std::string& value) {
  set_has_bgsoundres();
  if (bgsoundres_ == &::google::protobuf::internal::kEmptyString) {
    bgsoundres_ = new ::std::string;
  }
  bgsoundres_->assign(value);
}
inline void SceneCfg::set_bgsoundres(const char* value) {
  set_has_bgsoundres();
  if (bgsoundres_ == &::google::protobuf::internal::kEmptyString) {
    bgsoundres_ = new ::std::string;
  }
  bgsoundres_->assign(value);
}
inline void SceneCfg::set_bgsoundres(const char* value, size_t size) {
  set_has_bgsoundres();
  if (bgsoundres_ == &::google::protobuf::internal::kEmptyString) {
    bgsoundres_ = new ::std::string;
  }
  bgsoundres_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneCfg::mutable_bgsoundres() {
  set_has_bgsoundres();
  if (bgsoundres_ == &::google::protobuf::internal::kEmptyString) {
    bgsoundres_ = new ::std::string;
  }
  return bgsoundres_;
}
inline ::std::string* SceneCfg::release_bgsoundres() {
  clear_has_bgsoundres();
  if (bgsoundres_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bgsoundres_;
    bgsoundres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneCfg::set_allocated_bgsoundres(::std::string* bgsoundres) {
  if (bgsoundres_ != &::google::protobuf::internal::kEmptyString) {
    delete bgsoundres_;
  }
  if (bgsoundres) {
    set_has_bgsoundres();
    bgsoundres_ = bgsoundres;
  } else {
    clear_has_bgsoundres();
    bgsoundres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SceneCfgSet

// repeated .com.cfg.vo.SceneCfg scenecfg = 1;
inline int SceneCfgSet::scenecfg_size() const {
  return scenecfg_.size();
}
inline void SceneCfgSet::clear_scenecfg() {
  scenecfg_.Clear();
}
inline const ::com::cfg::vo::SceneCfg& SceneCfgSet::scenecfg(int index) const {
  return scenecfg_.Get(index);
}
inline ::com::cfg::vo::SceneCfg* SceneCfgSet::mutable_scenecfg(int index) {
  return scenecfg_.Mutable(index);
}
inline ::com::cfg::vo::SceneCfg* SceneCfgSet::add_scenecfg() {
  return scenecfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneCfg >&
SceneCfgSet::scenecfg() const {
  return scenecfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneCfg >*
SceneCfgSet::mutable_scenecfg() {
  return &scenecfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneCfg_2eproto__INCLUDED
