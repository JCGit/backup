// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneEffCfg.proto

#ifndef PROTOBUF_SceneEffCfg_2eproto__INCLUDED
#define PROTOBUF_SceneEffCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneEffCfg_2eproto();
void protobuf_AssignDesc_SceneEffCfg_2eproto();
void protobuf_ShutdownFile_SceneEffCfg_2eproto();

class SceneEffCfg;
class SceneEffCfgSet;

// ===================================================================

class SceneEffCfg : public ::google::protobuf::MessageLite {
 public:
  SceneEffCfg();
  virtual ~SceneEffCfg();

  SceneEffCfg(const SceneEffCfg& from);

  inline SceneEffCfg& operator=(const SceneEffCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const SceneEffCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SceneEffCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SceneEffCfg* other);

  // implements Message ----------------------------------------------

  SceneEffCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SceneEffCfg& from);
  void MergeFrom(const SceneEffCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // required string EffRes = 3;
  inline bool has_effres() const;
  inline void clear_effres();
  static const int kEffResFieldNumber = 3;
  inline const ::std::string& effres() const;
  inline void set_effres(const ::std::string& value);
  inline void set_effres(const char* value);
  inline void set_effres(const char* value, size_t size);
  inline ::std::string* mutable_effres();
  inline ::std::string* release_effres();
  inline void set_allocated_effres(::std::string* effres);

  // required string EffSound = 4;
  inline bool has_effsound() const;
  inline void clear_effsound();
  static const int kEffSoundFieldNumber = 4;
  inline const ::std::string& effsound() const;
  inline void set_effsound(const ::std::string& value);
  inline void set_effsound(const char* value);
  inline void set_effsound(const char* value, size_t size);
  inline ::std::string* mutable_effsound();
  inline ::std::string* release_effsound();
  inline void set_allocated_effsound(::std::string* effsound);

  // required uint32 NextEffID = 5;
  inline bool has_nexteffid() const;
  inline void clear_nexteffid();
  static const int kNextEffIDFieldNumber = 5;
  inline ::google::protobuf::uint32 nexteffid() const;
  inline void set_nexteffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.SceneEffCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_effres();
  inline void clear_has_effres();
  inline void set_has_effsound();
  inline void clear_has_effsound();
  inline void set_has_nexteffid();
  inline void clear_has_nexteffid();

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 type_;
  ::std::string* effres_;
  ::std::string* effsound_;
  ::google::protobuf::uint32 nexteffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SceneEffCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SceneEffCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_SceneEffCfg_2eproto();
  friend void protobuf_ShutdownFile_SceneEffCfg_2eproto();

  void InitAsDefaultInstance();
  static SceneEffCfg* default_instance_;
};
// -------------------------------------------------------------------

class SceneEffCfgSet : public ::google::protobuf::MessageLite {
 public:
  SceneEffCfgSet();
  virtual ~SceneEffCfgSet();

  SceneEffCfgSet(const SceneEffCfgSet& from);

  inline SceneEffCfgSet& operator=(const SceneEffCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const SceneEffCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const SceneEffCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(SceneEffCfgSet* other);

  // implements Message ----------------------------------------------

  SceneEffCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const SceneEffCfgSet& from);
  void MergeFrom(const SceneEffCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.SceneEffCfg sceneEffCfg = 1;
  inline int sceneeffcfg_size() const;
  inline void clear_sceneeffcfg();
  static const int kSceneEffCfgFieldNumber = 1;
  inline const ::com::cfg::vo::SceneEffCfg& sceneeffcfg(int index) const;
  inline ::com::cfg::vo::SceneEffCfg* mutable_sceneeffcfg(int index);
  inline ::com::cfg::vo::SceneEffCfg* add_sceneeffcfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneEffCfg >&
      sceneeffcfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneEffCfg >*
      mutable_sceneeffcfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.SceneEffCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneEffCfg > sceneeffcfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_SceneEffCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_SceneEffCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_SceneEffCfg_2eproto();
  friend void protobuf_ShutdownFile_SceneEffCfg_2eproto();

  void InitAsDefaultInstance();
  static SceneEffCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// SceneEffCfg

// required uint32 ID = 1;
inline bool SceneEffCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneEffCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneEffCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneEffCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 SceneEffCfg::id() const {
  return id_;
}
inline void SceneEffCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required uint32 type = 2;
inline bool SceneEffCfg::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SceneEffCfg::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SceneEffCfg::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SceneEffCfg::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 SceneEffCfg::type() const {
  return type_;
}
inline void SceneEffCfg::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// required string EffRes = 3;
inline bool SceneEffCfg::has_effres() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SceneEffCfg::set_has_effres() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SceneEffCfg::clear_has_effres() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SceneEffCfg::clear_effres() {
  if (effres_ != &::google::protobuf::internal::kEmptyString) {
    effres_->clear();
  }
  clear_has_effres();
}
inline const ::std::string& SceneEffCfg::effres() const {
  return *effres_;
}
inline void SceneEffCfg::set_effres(const ::std::string& value) {
  set_has_effres();
  if (effres_ == &::google::protobuf::internal::kEmptyString) {
    effres_ = new ::std::string;
  }
  effres_->assign(value);
}
inline void SceneEffCfg::set_effres(const char* value) {
  set_has_effres();
  if (effres_ == &::google::protobuf::internal::kEmptyString) {
    effres_ = new ::std::string;
  }
  effres_->assign(value);
}
inline void SceneEffCfg::set_effres(const char* value, size_t size) {
  set_has_effres();
  if (effres_ == &::google::protobuf::internal::kEmptyString) {
    effres_ = new ::std::string;
  }
  effres_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneEffCfg::mutable_effres() {
  set_has_effres();
  if (effres_ == &::google::protobuf::internal::kEmptyString) {
    effres_ = new ::std::string;
  }
  return effres_;
}
inline ::std::string* SceneEffCfg::release_effres() {
  clear_has_effres();
  if (effres_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effres_;
    effres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneEffCfg::set_allocated_effres(::std::string* effres) {
  if (effres_ != &::google::protobuf::internal::kEmptyString) {
    delete effres_;
  }
  if (effres) {
    set_has_effres();
    effres_ = effres;
  } else {
    clear_has_effres();
    effres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string EffSound = 4;
inline bool SceneEffCfg::has_effsound() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SceneEffCfg::set_has_effsound() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SceneEffCfg::clear_has_effsound() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SceneEffCfg::clear_effsound() {
  if (effsound_ != &::google::protobuf::internal::kEmptyString) {
    effsound_->clear();
  }
  clear_has_effsound();
}
inline const ::std::string& SceneEffCfg::effsound() const {
  return *effsound_;
}
inline void SceneEffCfg::set_effsound(const ::std::string& value) {
  set_has_effsound();
  if (effsound_ == &::google::protobuf::internal::kEmptyString) {
    effsound_ = new ::std::string;
  }
  effsound_->assign(value);
}
inline void SceneEffCfg::set_effsound(const char* value) {
  set_has_effsound();
  if (effsound_ == &::google::protobuf::internal::kEmptyString) {
    effsound_ = new ::std::string;
  }
  effsound_->assign(value);
}
inline void SceneEffCfg::set_effsound(const char* value, size_t size) {
  set_has_effsound();
  if (effsound_ == &::google::protobuf::internal::kEmptyString) {
    effsound_ = new ::std::string;
  }
  effsound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SceneEffCfg::mutable_effsound() {
  set_has_effsound();
  if (effsound_ == &::google::protobuf::internal::kEmptyString) {
    effsound_ = new ::std::string;
  }
  return effsound_;
}
inline ::std::string* SceneEffCfg::release_effsound() {
  clear_has_effsound();
  if (effsound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = effsound_;
    effsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SceneEffCfg::set_allocated_effsound(::std::string* effsound) {
  if (effsound_ != &::google::protobuf::internal::kEmptyString) {
    delete effsound_;
  }
  if (effsound) {
    set_has_effsound();
    effsound_ = effsound;
  } else {
    clear_has_effsound();
    effsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 NextEffID = 5;
inline bool SceneEffCfg::has_nexteffid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SceneEffCfg::set_has_nexteffid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SceneEffCfg::clear_has_nexteffid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SceneEffCfg::clear_nexteffid() {
  nexteffid_ = 0u;
  clear_has_nexteffid();
}
inline ::google::protobuf::uint32 SceneEffCfg::nexteffid() const {
  return nexteffid_;
}
inline void SceneEffCfg::set_nexteffid(::google::protobuf::uint32 value) {
  set_has_nexteffid();
  nexteffid_ = value;
}

// -------------------------------------------------------------------

// SceneEffCfgSet

// repeated .com.cfg.vo.SceneEffCfg sceneEffCfg = 1;
inline int SceneEffCfgSet::sceneeffcfg_size() const {
  return sceneeffcfg_.size();
}
inline void SceneEffCfgSet::clear_sceneeffcfg() {
  sceneeffcfg_.Clear();
}
inline const ::com::cfg::vo::SceneEffCfg& SceneEffCfgSet::sceneeffcfg(int index) const {
  return sceneeffcfg_.Get(index);
}
inline ::com::cfg::vo::SceneEffCfg* SceneEffCfgSet::mutable_sceneeffcfg(int index) {
  return sceneeffcfg_.Mutable(index);
}
inline ::com::cfg::vo::SceneEffCfg* SceneEffCfgSet::add_sceneeffcfg() {
  return sceneeffcfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneEffCfg >&
SceneEffCfgSet::sceneeffcfg() const {
  return sceneeffcfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::SceneEffCfg >*
SceneEffCfgSet::mutable_sceneeffcfg() {
  return &sceneeffcfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneEffCfg_2eproto__INCLUDED
