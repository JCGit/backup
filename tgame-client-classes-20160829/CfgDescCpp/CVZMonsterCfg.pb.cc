// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CVZMonsterCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CVZMonsterCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_CVZMonsterCfg_2eproto() {
  delete CVZMonsterAtt::default_instance_;
  delete CVZMonsterCfg::default_instance_;
  delete CVZMonsterCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CVZMonsterCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CVZMonsterCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ::com::cfg::vo::protobuf_AddDesc_MonsterCfg_2eproto();
  CVZMonsterAtt::default_instance_ = new CVZMonsterAtt();
  CVZMonsterCfg::default_instance_ = new CVZMonsterCfg();
  CVZMonsterCfgSet::default_instance_ = new CVZMonsterCfgSet();
  CVZMonsterAtt::default_instance_->InitAsDefaultInstance();
  CVZMonsterCfg::default_instance_->InitAsDefaultInstance();
  CVZMonsterCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CVZMonsterCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CVZMonsterCfg_2eproto_once_);
void protobuf_AddDesc_CVZMonsterCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CVZMonsterCfg_2eproto_once_,
                 &protobuf_AddDesc_CVZMonsterCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CVZMonsterCfg_2eproto {
  StaticDescriptorInitializer_CVZMonsterCfg_2eproto() {
    protobuf_AddDesc_CVZMonsterCfg_2eproto();
  }
} static_descriptor_initializer_CVZMonsterCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CVZMonsterAtt::kHpFieldNumber;
const int CVZMonsterAtt::kAtkFieldNumber;
const int CVZMonsterAtt::kDefFieldNumber;
const int CVZMonsterAtt::kAtkAttFieldNumber;
#endif  // !_MSC_VER

CVZMonsterAtt::CVZMonsterAtt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CVZMonsterAtt::InitAsDefaultInstance() {
}

CVZMonsterAtt::CVZMonsterAtt(const CVZMonsterAtt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CVZMonsterAtt::SharedCtor() {
  _cached_size_ = 0;
  hp_ = GOOGLE_ULONGLONG(0);
  atk_ = 0u;
  def_ = 0u;
  atkatt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVZMonsterAtt::~CVZMonsterAtt() {
  SharedDtor();
}

void CVZMonsterAtt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CVZMonsterAtt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CVZMonsterAtt& CVZMonsterAtt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CVZMonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CVZMonsterCfg_2eproto();
#endif
  return *default_instance_;
}

CVZMonsterAtt* CVZMonsterAtt::default_instance_ = NULL;

CVZMonsterAtt* CVZMonsterAtt::New() const {
  return new CVZMonsterAtt;
}

void CVZMonsterAtt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = GOOGLE_ULONGLONG(0);
    atk_ = 0u;
    def_ = 0u;
    atkatt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CVZMonsterAtt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_atk;
        break;
      }

      // required uint32 atk = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atk_)));
          set_has_atk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_def;
        break;
      }

      // required uint32 def = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_def:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_)));
          set_has_def();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_atkAtt;
        break;
      }

      // required uint32 atkAtt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atkAtt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkatt_)));
          set_has_atkatt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CVZMonsterAtt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->hp(), output);
  }

  // required uint32 atk = 2;
  if (has_atk()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->atk(), output);
  }

  // required uint32 def = 3;
  if (has_def()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def(), output);
  }

  // required uint32 atkAtt = 4;
  if (has_atkatt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->atkatt(), output);
  }

}

int CVZMonsterAtt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // required uint32 atk = 2;
    if (has_atk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atk());
    }

    // required uint32 def = 3;
    if (has_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def());
    }

    // required uint32 atkAtt = 4;
    if (has_atkatt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkatt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVZMonsterAtt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CVZMonsterAtt*>(&from));
}

void CVZMonsterAtt::MergeFrom(const CVZMonsterAtt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_atk()) {
      set_atk(from.atk());
    }
    if (from.has_def()) {
      set_def(from.def());
    }
    if (from.has_atkatt()) {
      set_atkatt(from.atkatt());
    }
  }
}

void CVZMonsterAtt::CopyFrom(const CVZMonsterAtt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVZMonsterAtt::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CVZMonsterAtt::Swap(CVZMonsterAtt* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(atk_, other->atk_);
    std::swap(def_, other->def_);
    std::swap(atkatt_, other->atkatt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CVZMonsterAtt::GetTypeName() const {
  return "com.cfg.vo.CVZMonsterAtt";
}


// ===================================================================

#ifndef _MSC_VER
const int CVZMonsterCfg::kLevelFieldNumber;
const int CVZMonsterCfg::kMonsterAttFieldNumber;
const int CVZMonsterCfg::kDefAttsFieldNumber;
#endif  // !_MSC_VER

CVZMonsterCfg::CVZMonsterCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CVZMonsterCfg::InitAsDefaultInstance() {
}

CVZMonsterCfg::CVZMonsterCfg(const CVZMonsterCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CVZMonsterCfg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVZMonsterCfg::~CVZMonsterCfg() {
  SharedDtor();
}

void CVZMonsterCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CVZMonsterCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CVZMonsterCfg& CVZMonsterCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CVZMonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CVZMonsterCfg_2eproto();
#endif
  return *default_instance_;
}

CVZMonsterCfg* CVZMonsterCfg::default_instance_ = NULL;

CVZMonsterCfg* CVZMonsterCfg::New() const {
  return new CVZMonsterCfg;
}

void CVZMonsterCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  monsteratt_.Clear();
  defatts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CVZMonsterCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterAtt;
        break;
      }

      // repeated .com.cfg.vo.CVZMonsterAtt monsterAtt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsterAtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsteratt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsterAtt;
        if (input->ExpectTag(26)) goto parse_defAtts;
        break;
      }

      // repeated .com.cfg.vo.DefAttElement defAtts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defAtts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_defatts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defAtts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CVZMonsterCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // repeated .com.cfg.vo.CVZMonsterAtt monsterAtt = 2;
  for (int i = 0; i < this->monsteratt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->monsteratt(i), output);
  }

  // repeated .com.cfg.vo.DefAttElement defAtts = 3;
  for (int i = 0; i < this->defatts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->defatts(i), output);
  }

}

int CVZMonsterCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated .com.cfg.vo.CVZMonsterAtt monsterAtt = 2;
  total_size += 1 * this->monsteratt_size();
  for (int i = 0; i < this->monsteratt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsteratt(i));
  }

  // repeated .com.cfg.vo.DefAttElement defAtts = 3;
  total_size += 1 * this->defatts_size();
  for (int i = 0; i < this->defatts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->defatts(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVZMonsterCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CVZMonsterCfg*>(&from));
}

void CVZMonsterCfg::MergeFrom(const CVZMonsterCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsteratt_.MergeFrom(from.monsteratt_);
  defatts_.MergeFrom(from.defatts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void CVZMonsterCfg::CopyFrom(const CVZMonsterCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVZMonsterCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < monsteratt_size(); i++) {
    if (!this->monsteratt(i).IsInitialized()) return false;
  }
  for (int i = 0; i < defatts_size(); i++) {
    if (!this->defatts(i).IsInitialized()) return false;
  }
  return true;
}

void CVZMonsterCfg::Swap(CVZMonsterCfg* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    monsteratt_.Swap(&other->monsteratt_);
    defatts_.Swap(&other->defatts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CVZMonsterCfg::GetTypeName() const {
  return "com.cfg.vo.CVZMonsterCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int CVZMonsterCfgSet::kCvzmonstercfgFieldNumber;
#endif  // !_MSC_VER

CVZMonsterCfgSet::CVZMonsterCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CVZMonsterCfgSet::InitAsDefaultInstance() {
}

CVZMonsterCfgSet::CVZMonsterCfgSet(const CVZMonsterCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CVZMonsterCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CVZMonsterCfgSet::~CVZMonsterCfgSet() {
  SharedDtor();
}

void CVZMonsterCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void CVZMonsterCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CVZMonsterCfgSet& CVZMonsterCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CVZMonsterCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CVZMonsterCfg_2eproto();
#endif
  return *default_instance_;
}

CVZMonsterCfgSet* CVZMonsterCfgSet::default_instance_ = NULL;

CVZMonsterCfgSet* CVZMonsterCfgSet::New() const {
  return new CVZMonsterCfgSet;
}

void CVZMonsterCfgSet::Clear() {
  cvzmonstercfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CVZMonsterCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.CVZMonsterCfg cvzmonstercfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cvzmonstercfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cvzmonstercfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cvzmonstercfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CVZMonsterCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.CVZMonsterCfg cvzmonstercfg = 1;
  for (int i = 0; i < this->cvzmonstercfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->cvzmonstercfg(i), output);
  }

}

int CVZMonsterCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.CVZMonsterCfg cvzmonstercfg = 1;
  total_size += 1 * this->cvzmonstercfg_size();
  for (int i = 0; i < this->cvzmonstercfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cvzmonstercfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CVZMonsterCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CVZMonsterCfgSet*>(&from));
}

void CVZMonsterCfgSet::MergeFrom(const CVZMonsterCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  cvzmonstercfg_.MergeFrom(from.cvzmonstercfg_);
}

void CVZMonsterCfgSet::CopyFrom(const CVZMonsterCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CVZMonsterCfgSet::IsInitialized() const {

  for (int i = 0; i < cvzmonstercfg_size(); i++) {
    if (!this->cvzmonstercfg(i).IsInitialized()) return false;
  }
  return true;
}

void CVZMonsterCfgSet::Swap(CVZMonsterCfgSet* other) {
  if (other != this) {
    cvzmonstercfg_.Swap(&other->cvzmonstercfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CVZMonsterCfgSet::GetTypeName() const {
  return "com.cfg.vo.CVZMonsterCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
