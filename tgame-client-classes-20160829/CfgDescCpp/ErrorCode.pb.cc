// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorCode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ErrorCode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_ErrorCode_2eproto() {
  delete ErrorCode::default_instance_;
  delete ErrorCodeSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ErrorCode_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ErrorCode_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ErrorCode::default_instance_ = new ErrorCode();
  ErrorCodeSet::default_instance_ = new ErrorCodeSet();
  ErrorCode::default_instance_->InitAsDefaultInstance();
  ErrorCodeSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ErrorCode_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ErrorCode_2eproto_once_);
void protobuf_AddDesc_ErrorCode_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ErrorCode_2eproto_once_,
                 &protobuf_AddDesc_ErrorCode_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ErrorCode_2eproto {
  StaticDescriptorInitializer_ErrorCode_2eproto() {
    protobuf_AddDesc_ErrorCode_2eproto();
  }
} static_descriptor_initializer_ErrorCode_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ErrorCode::kIDFieldNumber;
const int ErrorCode::kDESCFieldNumber;
#endif  // !_MSC_VER

ErrorCode::ErrorCode()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ErrorCode::InitAsDefaultInstance() {
}

ErrorCode::ErrorCode(const ErrorCode& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorCode::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorCode::~ErrorCode() {
  SharedDtor();
}

void ErrorCode::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ErrorCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ErrorCode& ErrorCode::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ErrorCode_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorCode_2eproto();
#endif
  return *default_instance_;
}

ErrorCode* ErrorCode::default_instance_ = NULL;

ErrorCode* ErrorCode::New() const {
  return new ErrorCode;
}

void ErrorCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ErrorCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_DESC;
        break;
      }

      // required string DESC = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DESC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string DESC = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

}

int ErrorCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required string DESC = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCode::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrorCode*>(&from));
}

void ErrorCode::MergeFrom(const ErrorCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
}

void ErrorCode::CopyFrom(const ErrorCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ErrorCode::Swap(ErrorCode* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ErrorCode::GetTypeName() const {
  return "com.cfg.vo.ErrorCode";
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorCodeSet::kErrorcodeFieldNumber;
#endif  // !_MSC_VER

ErrorCodeSet::ErrorCodeSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ErrorCodeSet::InitAsDefaultInstance() {
}

ErrorCodeSet::ErrorCodeSet(const ErrorCodeSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorCodeSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorCodeSet::~ErrorCodeSet() {
  SharedDtor();
}

void ErrorCodeSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ErrorCodeSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ErrorCodeSet& ErrorCodeSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ErrorCode_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorCode_2eproto();
#endif
  return *default_instance_;
}

ErrorCodeSet* ErrorCodeSet::default_instance_ = NULL;

ErrorCodeSet* ErrorCodeSet::New() const {
  return new ErrorCodeSet;
}

void ErrorCodeSet::Clear() {
  errorcode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ErrorCodeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.ErrorCode errorcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errorcode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_errorcode;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorCodeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.ErrorCode errorcode = 1;
  for (int i = 0; i < this->errorcode_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->errorcode(i), output);
  }

}

int ErrorCodeSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.ErrorCode errorcode = 1;
  total_size += 1 * this->errorcode_size();
  for (int i = 0; i < this->errorcode_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->errorcode(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCodeSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrorCodeSet*>(&from));
}

void ErrorCodeSet::MergeFrom(const ErrorCodeSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  errorcode_.MergeFrom(from.errorcode_);
}

void ErrorCodeSet::CopyFrom(const ErrorCodeSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCodeSet::IsInitialized() const {

  for (int i = 0; i < errorcode_size(); i++) {
    if (!this->errorcode(i).IsInitialized()) return false;
  }
  return true;
}

void ErrorCodeSet::Swap(ErrorCodeSet* other) {
  if (other != this) {
    errorcode_.Swap(&other->errorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ErrorCodeSet::GetTypeName() const {
  return "com.cfg.vo.ErrorCodeSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
