// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuideCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuideCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_GuideCfg_2eproto() {
  delete GuideCfg::default_instance_;
  delete GuideCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GuideCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GuideCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GuideCfg::default_instance_ = new GuideCfg();
  GuideCfgSet::default_instance_ = new GuideCfgSet();
  GuideCfg::default_instance_->InitAsDefaultInstance();
  GuideCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuideCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GuideCfg_2eproto_once_);
void protobuf_AddDesc_GuideCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GuideCfg_2eproto_once_,
                 &protobuf_AddDesc_GuideCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuideCfg_2eproto {
  StaticDescriptorInitializer_GuideCfg_2eproto() {
    protobuf_AddDesc_GuideCfg_2eproto();
  }
} static_descriptor_initializer_GuideCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GuideCfg::kGuideIDFieldNumber;
const int GuideCfg::kGuideNameFieldNumber;
const int GuideCfg::kIsLockedFieldNumber;
const int GuideCfg::kTriggerTypeFieldNumber;
const int GuideCfg::kLinkIDFieldNumber;
#endif  // !_MSC_VER

GuideCfg::GuideCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuideCfg::InitAsDefaultInstance() {
}

GuideCfg::GuideCfg(const GuideCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuideCfg::SharedCtor() {
  _cached_size_ = 0;
  guideid_ = 0u;
  guidename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  islocked_ = 0u;
  triggertype_ = 0u;
  linkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideCfg::~GuideCfg() {
  SharedDtor();
}

void GuideCfg::SharedDtor() {
  if (guidename_ != &::google::protobuf::internal::kEmptyString) {
    delete guidename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuideCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuideCfg& GuideCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuideCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuideCfg_2eproto();
#endif
  return *default_instance_;
}

GuideCfg* GuideCfg::default_instance_ = NULL;

GuideCfg* GuideCfg::New() const {
  return new GuideCfg;
}

void GuideCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guideid_ = 0u;
    if (has_guidename()) {
      if (guidename_ != &::google::protobuf::internal::kEmptyString) {
        guidename_->clear();
      }
    }
    islocked_ = 0u;
    triggertype_ = 0u;
    linkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuideCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 GuideID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guideid_)));
          set_has_guideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_GuideName;
        break;
      }

      // required string GuideName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GuideName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guidename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsLocked;
        break;
      }

      // required uint32 IsLocked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsLocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TriggerType;
        break;
      }

      // required uint32 TriggerType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LinkID;
        break;
      }

      // required uint32 LinkID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LinkID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 GuideID = 1;
  if (has_guideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guideid(), output);
  }

  // required string GuideName = 2;
  if (has_guidename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guidename(), output);
  }

  // required uint32 IsLocked = 3;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->islocked(), output);
  }

  // required uint32 TriggerType = 4;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->triggertype(), output);
  }

  // required uint32 LinkID = 5;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->linkid(), output);
  }

}

int GuideCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 GuideID = 1;
    if (has_guideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guideid());
    }

    // required string GuideName = 2;
    if (has_guidename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guidename());
    }

    // required uint32 IsLocked = 3;
    if (has_islocked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->islocked());
    }

    // required uint32 TriggerType = 4;
    if (has_triggertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

    // required uint32 LinkID = 5;
    if (has_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linkid());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuideCfg*>(&from));
}

void GuideCfg::MergeFrom(const GuideCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guideid()) {
      set_guideid(from.guideid());
    }
    if (from.has_guidename()) {
      set_guidename(from.guidename());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
  }
}

void GuideCfg::CopyFrom(const GuideCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuideCfg::Swap(GuideCfg* other) {
  if (other != this) {
    std::swap(guideid_, other->guideid_);
    std::swap(guidename_, other->guidename_);
    std::swap(islocked_, other->islocked_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(linkid_, other->linkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuideCfg::GetTypeName() const {
  return "com.cfg.vo.GuideCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int GuideCfgSet::kGuidecfgFieldNumber;
#endif  // !_MSC_VER

GuideCfgSet::GuideCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuideCfgSet::InitAsDefaultInstance() {
}

GuideCfgSet::GuideCfgSet(const GuideCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuideCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuideCfgSet::~GuideCfgSet() {
  SharedDtor();
}

void GuideCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuideCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuideCfgSet& GuideCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuideCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuideCfg_2eproto();
#endif
  return *default_instance_;
}

GuideCfgSet* GuideCfgSet::default_instance_ = NULL;

GuideCfgSet* GuideCfgSet::New() const {
  return new GuideCfgSet;
}

void GuideCfgSet::Clear() {
  guidecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuideCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.GuideCfg guidecfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guidecfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guidecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guidecfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuideCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.GuideCfg guidecfg = 1;
  for (int i = 0; i < this->guidecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guidecfg(i), output);
  }

}

int GuideCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.GuideCfg guidecfg = 1;
  total_size += 1 * this->guidecfg_size();
  for (int i = 0; i < this->guidecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guidecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuideCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuideCfgSet*>(&from));
}

void GuideCfgSet::MergeFrom(const GuideCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  guidecfg_.MergeFrom(from.guidecfg_);
}

void GuideCfgSet::CopyFrom(const GuideCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuideCfgSet::IsInitialized() const {

  for (int i = 0; i < guidecfg_size(); i++) {
    if (!this->guidecfg(i).IsInitialized()) return false;
  }
  return true;
}

void GuideCfgSet::Swap(GuideCfgSet* other) {
  if (other != this) {
    guidecfg_.Swap(&other->guidecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuideCfgSet::GetTypeName() const {
  return "com.cfg.vo.GuideCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
