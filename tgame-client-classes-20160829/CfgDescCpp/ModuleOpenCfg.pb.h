// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModuleOpenCfg.proto

#ifndef PROTOBUF_ModuleOpenCfg_2eproto__INCLUDED
#define PROTOBUF_ModuleOpenCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ModuleOpenCfg_2eproto();
void protobuf_AssignDesc_ModuleOpenCfg_2eproto();
void protobuf_ShutdownFile_ModuleOpenCfg_2eproto();

class ModuleOpenCfg;
class ModuleOpenCfgSet;

// ===================================================================

class ModuleOpenCfg : public ::google::protobuf::MessageLite {
 public:
  ModuleOpenCfg();
  virtual ~ModuleOpenCfg();

  ModuleOpenCfg(const ModuleOpenCfg& from);

  inline ModuleOpenCfg& operator=(const ModuleOpenCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ModuleOpenCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ModuleOpenCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ModuleOpenCfg* other);

  // implements Message ----------------------------------------------

  ModuleOpenCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ModuleOpenCfg& from);
  void MergeFrom(const ModuleOpenCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ModuleID = 1;
  inline bool has_moduleid() const;
  inline void clear_moduleid();
  static const int kModuleIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moduleid() const;
  inline void set_moduleid(::google::protobuf::uint32 value);

  // required uint32 TaskID = 2;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 2;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // required uint32 ShowingOnScreen = 3;
  inline bool has_showingonscreen() const;
  inline void clear_showingonscreen();
  static const int kShowingOnScreenFieldNumber = 3;
  inline ::google::protobuf::uint32 showingonscreen() const;
  inline void set_showingonscreen(::google::protobuf::uint32 value);

  // required string OpenWords = 4;
  inline bool has_openwords() const;
  inline void clear_openwords();
  static const int kOpenWordsFieldNumber = 4;
  inline const ::std::string& openwords() const;
  inline void set_openwords(const ::std::string& value);
  inline void set_openwords(const char* value);
  inline void set_openwords(const char* value, size_t size);
  inline ::std::string* mutable_openwords();
  inline ::std::string* release_openwords();
  inline void set_allocated_openwords(::std::string* openwords);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.ModuleOpenCfg)
 private:
  inline void set_has_moduleid();
  inline void clear_has_moduleid();
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_showingonscreen();
  inline void clear_has_showingonscreen();
  inline void set_has_openwords();
  inline void clear_has_openwords();

  ::google::protobuf::uint32 moduleid_;
  ::google::protobuf::uint32 taskid_;
  ::std::string* openwords_;
  ::google::protobuf::uint32 showingonscreen_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ModuleOpenCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ModuleOpenCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ModuleOpenCfg_2eproto();
  friend void protobuf_ShutdownFile_ModuleOpenCfg_2eproto();

  void InitAsDefaultInstance();
  static ModuleOpenCfg* default_instance_;
};
// -------------------------------------------------------------------

class ModuleOpenCfgSet : public ::google::protobuf::MessageLite {
 public:
  ModuleOpenCfgSet();
  virtual ~ModuleOpenCfgSet();

  ModuleOpenCfgSet(const ModuleOpenCfgSet& from);

  inline ModuleOpenCfgSet& operator=(const ModuleOpenCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const ModuleOpenCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ModuleOpenCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ModuleOpenCfgSet* other);

  // implements Message ----------------------------------------------

  ModuleOpenCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ModuleOpenCfgSet& from);
  void MergeFrom(const ModuleOpenCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.ModuleOpenCfg moduleopencfg = 1;
  inline int moduleopencfg_size() const;
  inline void clear_moduleopencfg();
  static const int kModuleopencfgFieldNumber = 1;
  inline const ::com::cfg::vo::ModuleOpenCfg& moduleopencfg(int index) const;
  inline ::com::cfg::vo::ModuleOpenCfg* mutable_moduleopencfg(int index);
  inline ::com::cfg::vo::ModuleOpenCfg* add_moduleopencfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ModuleOpenCfg >&
      moduleopencfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ModuleOpenCfg >*
      mutable_moduleopencfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.ModuleOpenCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ModuleOpenCfg > moduleopencfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_ModuleOpenCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_ModuleOpenCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_ModuleOpenCfg_2eproto();
  friend void protobuf_ShutdownFile_ModuleOpenCfg_2eproto();

  void InitAsDefaultInstance();
  static ModuleOpenCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// ModuleOpenCfg

// required uint32 ModuleID = 1;
inline bool ModuleOpenCfg::has_moduleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleOpenCfg::set_has_moduleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleOpenCfg::clear_has_moduleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleOpenCfg::clear_moduleid() {
  moduleid_ = 0u;
  clear_has_moduleid();
}
inline ::google::protobuf::uint32 ModuleOpenCfg::moduleid() const {
  return moduleid_;
}
inline void ModuleOpenCfg::set_moduleid(::google::protobuf::uint32 value) {
  set_has_moduleid();
  moduleid_ = value;
}

// required uint32 TaskID = 2;
inline bool ModuleOpenCfg::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleOpenCfg::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleOpenCfg::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleOpenCfg::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 ModuleOpenCfg::taskid() const {
  return taskid_;
}
inline void ModuleOpenCfg::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// required uint32 ShowingOnScreen = 3;
inline bool ModuleOpenCfg::has_showingonscreen() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleOpenCfg::set_has_showingonscreen() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleOpenCfg::clear_has_showingonscreen() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleOpenCfg::clear_showingonscreen() {
  showingonscreen_ = 0u;
  clear_has_showingonscreen();
}
inline ::google::protobuf::uint32 ModuleOpenCfg::showingonscreen() const {
  return showingonscreen_;
}
inline void ModuleOpenCfg::set_showingonscreen(::google::protobuf::uint32 value) {
  set_has_showingonscreen();
  showingonscreen_ = value;
}

// required string OpenWords = 4;
inline bool ModuleOpenCfg::has_openwords() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleOpenCfg::set_has_openwords() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleOpenCfg::clear_has_openwords() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleOpenCfg::clear_openwords() {
  if (openwords_ != &::google::protobuf::internal::kEmptyString) {
    openwords_->clear();
  }
  clear_has_openwords();
}
inline const ::std::string& ModuleOpenCfg::openwords() const {
  return *openwords_;
}
inline void ModuleOpenCfg::set_openwords(const ::std::string& value) {
  set_has_openwords();
  if (openwords_ == &::google::protobuf::internal::kEmptyString) {
    openwords_ = new ::std::string;
  }
  openwords_->assign(value);
}
inline void ModuleOpenCfg::set_openwords(const char* value) {
  set_has_openwords();
  if (openwords_ == &::google::protobuf::internal::kEmptyString) {
    openwords_ = new ::std::string;
  }
  openwords_->assign(value);
}
inline void ModuleOpenCfg::set_openwords(const char* value, size_t size) {
  set_has_openwords();
  if (openwords_ == &::google::protobuf::internal::kEmptyString) {
    openwords_ = new ::std::string;
  }
  openwords_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ModuleOpenCfg::mutable_openwords() {
  set_has_openwords();
  if (openwords_ == &::google::protobuf::internal::kEmptyString) {
    openwords_ = new ::std::string;
  }
  return openwords_;
}
inline ::std::string* ModuleOpenCfg::release_openwords() {
  clear_has_openwords();
  if (openwords_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openwords_;
    openwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ModuleOpenCfg::set_allocated_openwords(::std::string* openwords) {
  if (openwords_ != &::google::protobuf::internal::kEmptyString) {
    delete openwords_;
  }
  if (openwords) {
    set_has_openwords();
    openwords_ = openwords;
  } else {
    clear_has_openwords();
    openwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ModuleOpenCfgSet

// repeated .com.cfg.vo.ModuleOpenCfg moduleopencfg = 1;
inline int ModuleOpenCfgSet::moduleopencfg_size() const {
  return moduleopencfg_.size();
}
inline void ModuleOpenCfgSet::clear_moduleopencfg() {
  moduleopencfg_.Clear();
}
inline const ::com::cfg::vo::ModuleOpenCfg& ModuleOpenCfgSet::moduleopencfg(int index) const {
  return moduleopencfg_.Get(index);
}
inline ::com::cfg::vo::ModuleOpenCfg* ModuleOpenCfgSet::mutable_moduleopencfg(int index) {
  return moduleopencfg_.Mutable(index);
}
inline ::com::cfg::vo::ModuleOpenCfg* ModuleOpenCfgSet::add_moduleopencfg() {
  return moduleopencfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ModuleOpenCfg >&
ModuleOpenCfgSet::moduleopencfg() const {
  return moduleopencfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::ModuleOpenCfg >*
ModuleOpenCfgSet::mutable_moduleopencfg() {
  return &moduleopencfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ModuleOpenCfg_2eproto__INCLUDED
