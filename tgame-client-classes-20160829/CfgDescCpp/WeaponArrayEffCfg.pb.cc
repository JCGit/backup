// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponArrayEffCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeaponArrayEffCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WeaponArrayEffCfg_2eproto() {
  delete EffectElmt::default_instance_;
  delete WeaponArrayEffCfg::default_instance_;
  delete WeaponArrayEffCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WeaponArrayEffCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WeaponArrayEffCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EffectElmt::default_instance_ = new EffectElmt();
  WeaponArrayEffCfg::default_instance_ = new WeaponArrayEffCfg();
  WeaponArrayEffCfgSet::default_instance_ = new WeaponArrayEffCfgSet();
  EffectElmt::default_instance_->InitAsDefaultInstance();
  WeaponArrayEffCfg::default_instance_->InitAsDefaultInstance();
  WeaponArrayEffCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeaponArrayEffCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WeaponArrayEffCfg_2eproto_once_);
void protobuf_AddDesc_WeaponArrayEffCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WeaponArrayEffCfg_2eproto_once_,
                 &protobuf_AddDesc_WeaponArrayEffCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeaponArrayEffCfg_2eproto {
  StaticDescriptorInitializer_WeaponArrayEffCfg_2eproto() {
    protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
  }
} static_descriptor_initializer_WeaponArrayEffCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EffectElmt::kEffTypeFieldNumber;
const int EffectElmt::kEffValFieldNumber;
#endif  // !_MSC_VER

EffectElmt::EffectElmt()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EffectElmt::InitAsDefaultInstance() {
}

EffectElmt::EffectElmt(const EffectElmt& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EffectElmt::SharedCtor() {
  _cached_size_ = 0;
  efftype_ = 0u;
  effval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectElmt::~EffectElmt() {
  SharedDtor();
}

void EffectElmt::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EffectElmt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EffectElmt& EffectElmt::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
#endif
  return *default_instance_;
}

EffectElmt* EffectElmt::default_instance_ = NULL;

EffectElmt* EffectElmt::New() const {
  return new EffectElmt;
}

void EffectElmt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    efftype_ = 0u;
    effval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EffectElmt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EffType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &efftype_)));
          set_has_efftype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EffVal;
        break;
      }

      // required uint32 EffVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effval_)));
          set_has_effval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EffectElmt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EffType = 1;
  if (has_efftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->efftype(), output);
  }

  // required uint32 EffVal = 2;
  if (has_effval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effval(), output);
  }

}

int EffectElmt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EffType = 1;
    if (has_efftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->efftype());
    }

    // required uint32 EffVal = 2;
    if (has_effval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effval());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectElmt::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EffectElmt*>(&from));
}

void EffectElmt::MergeFrom(const EffectElmt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_efftype()) {
      set_efftype(from.efftype());
    }
    if (from.has_effval()) {
      set_effval(from.effval());
    }
  }
}

void EffectElmt::CopyFrom(const EffectElmt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectElmt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EffectElmt::Swap(EffectElmt* other) {
  if (other != this) {
    std::swap(efftype_, other->efftype_);
    std::swap(effval_, other->effval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EffectElmt::GetTypeName() const {
  return "com.cfg.vo.EffectElmt";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponArrayEffCfg::kIdxFieldNumber;
const int WeaponArrayEffCfg::kWeaponStarFieldNumber;
const int WeaponArrayEffCfg::kWeaponStepFieldNumber;
const int WeaponArrayEffCfg::kHPAddFieldNumber;
const int WeaponArrayEffCfg::kAtkAddFieldNumber;
const int WeaponArrayEffCfg::kDefAddFieldNumber;
#endif  // !_MSC_VER

WeaponArrayEffCfg::WeaponArrayEffCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponArrayEffCfg::InitAsDefaultInstance() {
}

WeaponArrayEffCfg::WeaponArrayEffCfg(const WeaponArrayEffCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponArrayEffCfg::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  weaponstar_ = 0u;
  weaponstep_ = 0u;
  hpadd_ = 0u;
  atkadd_ = 0u;
  defadd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponArrayEffCfg::~WeaponArrayEffCfg() {
  SharedDtor();
}

void WeaponArrayEffCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponArrayEffCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponArrayEffCfg& WeaponArrayEffCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponArrayEffCfg* WeaponArrayEffCfg::default_instance_ = NULL;

WeaponArrayEffCfg* WeaponArrayEffCfg::New() const {
  return new WeaponArrayEffCfg;
}

void WeaponArrayEffCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    weaponstar_ = 0u;
    weaponstep_ = 0u;
    hpadd_ = 0u;
    atkadd_ = 0u;
    defadd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponArrayEffCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_WeaponStar;
        break;
      }

      // required uint32 WeaponStar = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponStar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponstar_)));
          set_has_weaponstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_WeaponStep;
        break;
      }

      // required uint32 WeaponStep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponstep_)));
          set_has_weaponstep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HPAdd;
        break;
      }

      // required uint32 HPAdd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HPAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hpadd_)));
          set_has_hpadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AtkAdd;
        break;
      }

      // required uint32 AtkAdd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AtkAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkadd_)));
          set_has_atkadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DefAdd;
        break;
      }

      // required uint32 DefAdd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DefAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defadd_)));
          set_has_defadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponArrayEffCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // required uint32 WeaponStar = 2;
  if (has_weaponstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->weaponstar(), output);
  }

  // required uint32 WeaponStep = 3;
  if (has_weaponstep()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->weaponstep(), output);
  }

  // required uint32 HPAdd = 4;
  if (has_hpadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hpadd(), output);
  }

  // required uint32 AtkAdd = 5;
  if (has_atkadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->atkadd(), output);
  }

  // required uint32 DefAdd = 6;
  if (has_defadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->defadd(), output);
  }

}

int WeaponArrayEffCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // required uint32 WeaponStar = 2;
    if (has_weaponstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponstar());
    }

    // required uint32 WeaponStep = 3;
    if (has_weaponstep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponstep());
    }

    // required uint32 HPAdd = 4;
    if (has_hpadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hpadd());
    }

    // required uint32 AtkAdd = 5;
    if (has_atkadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkadd());
    }

    // required uint32 DefAdd = 6;
    if (has_defadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defadd());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponArrayEffCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponArrayEffCfg*>(&from));
}

void WeaponArrayEffCfg::MergeFrom(const WeaponArrayEffCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_weaponstar()) {
      set_weaponstar(from.weaponstar());
    }
    if (from.has_weaponstep()) {
      set_weaponstep(from.weaponstep());
    }
    if (from.has_hpadd()) {
      set_hpadd(from.hpadd());
    }
    if (from.has_atkadd()) {
      set_atkadd(from.atkadd());
    }
    if (from.has_defadd()) {
      set_defadd(from.defadd());
    }
  }
}

void WeaponArrayEffCfg::CopyFrom(const WeaponArrayEffCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponArrayEffCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void WeaponArrayEffCfg::Swap(WeaponArrayEffCfg* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(weaponstar_, other->weaponstar_);
    std::swap(weaponstep_, other->weaponstep_);
    std::swap(hpadd_, other->hpadd_);
    std::swap(atkadd_, other->atkadd_);
    std::swap(defadd_, other->defadd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponArrayEffCfg::GetTypeName() const {
  return "com.cfg.vo.WeaponArrayEffCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponArrayEffCfgSet::kEffectsFieldNumber;
#endif  // !_MSC_VER

WeaponArrayEffCfgSet::WeaponArrayEffCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponArrayEffCfgSet::InitAsDefaultInstance() {
}

WeaponArrayEffCfgSet::WeaponArrayEffCfgSet(const WeaponArrayEffCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponArrayEffCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponArrayEffCfgSet::~WeaponArrayEffCfgSet() {
  SharedDtor();
}

void WeaponArrayEffCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponArrayEffCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponArrayEffCfgSet& WeaponArrayEffCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponArrayEffCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponArrayEffCfgSet* WeaponArrayEffCfgSet::default_instance_ = NULL;

WeaponArrayEffCfgSet* WeaponArrayEffCfgSet::New() const {
  return new WeaponArrayEffCfgSet;
}

void WeaponArrayEffCfgSet::Clear() {
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponArrayEffCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WeaponArrayEffCfg effects = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_effects;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponArrayEffCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WeaponArrayEffCfg effects = 1;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->effects(i), output);
  }

}

int WeaponArrayEffCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WeaponArrayEffCfg effects = 1;
  total_size += 1 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponArrayEffCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponArrayEffCfgSet*>(&from));
}

void WeaponArrayEffCfgSet::MergeFrom(const WeaponArrayEffCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
}

void WeaponArrayEffCfgSet::CopyFrom(const WeaponArrayEffCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponArrayEffCfgSet::IsInitialized() const {

  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void WeaponArrayEffCfgSet::Swap(WeaponArrayEffCfgSet* other) {
  if (other != this) {
    effects_.Swap(&other->effects_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponArrayEffCfgSet::GetTypeName() const {
  return "com.cfg.vo.WeaponArrayEffCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
