// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_SceneCfg_2eproto() {
  delete SceneCfg::default_instance_;
  delete SceneCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SceneCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SceneCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SceneCfg::default_instance_ = new SceneCfg();
  SceneCfgSet::default_instance_ = new SceneCfgSet();
  SceneCfg::default_instance_->InitAsDefaultInstance();
  SceneCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SceneCfg_2eproto_once_);
void protobuf_AddDesc_SceneCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SceneCfg_2eproto_once_,
                 &protobuf_AddDesc_SceneCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneCfg_2eproto {
  StaticDescriptorInitializer_SceneCfg_2eproto() {
    protobuf_AddDesc_SceneCfg_2eproto();
  }
} static_descriptor_initializer_SceneCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SceneCfg::kSceneIDFieldNumber;
const int SceneCfg::kSceneTypeFieldNumber;
const int SceneCfg::kSceneNameFieldNumber;
const int SceneCfg::kBgSoundResFieldNumber;
#endif  // !_MSC_VER

SceneCfg::SceneCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SceneCfg::InitAsDefaultInstance() {
}

SceneCfg::SceneCfg(const SceneCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SceneCfg::SharedCtor() {
  _cached_size_ = 0;
  sceneid_ = 0u;
  scenetype_ = 0u;
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bgsoundres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneCfg::~SceneCfg() {
  SharedDtor();
}

void SceneCfg::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::kEmptyString) {
    delete scenename_;
  }
  if (bgsoundres_ != &::google::protobuf::internal::kEmptyString) {
    delete bgsoundres_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SceneCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SceneCfg& SceneCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SceneCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SceneCfg_2eproto();
#endif
  return *default_instance_;
}

SceneCfg* SceneCfg::default_instance_ = NULL;

SceneCfg* SceneCfg::New() const {
  return new SceneCfg;
}

void SceneCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sceneid_ = 0u;
    scenetype_ = 0u;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::kEmptyString) {
        scenename_->clear();
      }
    }
    if (has_bgsoundres()) {
      if (bgsoundres_ != &::google::protobuf::internal::kEmptyString) {
        bgsoundres_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SceneCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SceneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SceneType;
        break;
      }

      // required uint32 SceneType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SceneType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scenetype_)));
          set_has_scenetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_SceneName;
        break;
      }

      // required string SceneName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SceneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_BgSoundRes;
        break;
      }

      // required string BgSoundRes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BgSoundRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgsoundres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SceneID = 1;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneid(), output);
  }

  // required uint32 SceneType = 2;
  if (has_scenetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scenetype(), output);
  }

  // required string SceneName = 3;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->scenename(), output);
  }

  // required string BgSoundRes = 4;
  if (has_bgsoundres()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bgsoundres(), output);
  }

}

int SceneCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SceneID = 1;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // required uint32 SceneType = 2;
    if (has_scenetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scenetype());
    }

    // required string SceneName = 3;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

    // required string BgSoundRes = 4;
    if (has_bgsoundres()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bgsoundres());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SceneCfg*>(&from));
}

void SceneCfg::MergeFrom(const SceneCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_scenetype()) {
      set_scenetype(from.scenetype());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
    if (from.has_bgsoundres()) {
      set_bgsoundres(from.bgsoundres());
    }
  }
}

void SceneCfg::CopyFrom(const SceneCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SceneCfg::Swap(SceneCfg* other) {
  if (other != this) {
    std::swap(sceneid_, other->sceneid_);
    std::swap(scenetype_, other->scenetype_);
    std::swap(scenename_, other->scenename_);
    std::swap(bgsoundres_, other->bgsoundres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SceneCfg::GetTypeName() const {
  return "com.cfg.vo.SceneCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int SceneCfgSet::kScenecfgFieldNumber;
#endif  // !_MSC_VER

SceneCfgSet::SceneCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SceneCfgSet::InitAsDefaultInstance() {
}

SceneCfgSet::SceneCfgSet(const SceneCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SceneCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneCfgSet::~SceneCfgSet() {
  SharedDtor();
}

void SceneCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SceneCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SceneCfgSet& SceneCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SceneCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SceneCfg_2eproto();
#endif
  return *default_instance_;
}

SceneCfgSet* SceneCfgSet::default_instance_ = NULL;

SceneCfgSet* SceneCfgSet::New() const {
  return new SceneCfgSet;
}

void SceneCfgSet::Clear() {
  scenecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SceneCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.SceneCfg scenecfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scenecfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_scenecfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SceneCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.SceneCfg scenecfg = 1;
  for (int i = 0; i < this->scenecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->scenecfg(i), output);
  }

}

int SceneCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.SceneCfg scenecfg = 1;
  total_size += 1 * this->scenecfg_size();
  for (int i = 0; i < this->scenecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SceneCfgSet*>(&from));
}

void SceneCfgSet::MergeFrom(const SceneCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenecfg_.MergeFrom(from.scenecfg_);
}

void SceneCfgSet::CopyFrom(const SceneCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneCfgSet::IsInitialized() const {

  for (int i = 0; i < scenecfg_size(); i++) {
    if (!this->scenecfg(i).IsInitialized()) return false;
  }
  return true;
}

void SceneCfgSet::Swap(SceneCfgSet* other) {
  if (other != this) {
    scenecfg_.Swap(&other->scenecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SceneCfgSet::GetTypeName() const {
  return "com.cfg.vo.SceneCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
