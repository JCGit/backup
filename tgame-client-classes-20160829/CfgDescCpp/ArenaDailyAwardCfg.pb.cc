// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ArenaDailyAwardCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ArenaDailyAwardCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_ArenaDailyAwardCfg_2eproto() {
  delete ArenaAwardElement::default_instance_;
  delete ArenaDailyAwardCfg::default_instance_;
  delete ArenaDailyAwardCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ArenaDailyAwardCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ArenaDailyAwardCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ArenaAwardElement::default_instance_ = new ArenaAwardElement();
  ArenaDailyAwardCfg::default_instance_ = new ArenaDailyAwardCfg();
  ArenaDailyAwardCfgSet::default_instance_ = new ArenaDailyAwardCfgSet();
  ArenaAwardElement::default_instance_->InitAsDefaultInstance();
  ArenaDailyAwardCfg::default_instance_->InitAsDefaultInstance();
  ArenaDailyAwardCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ArenaDailyAwardCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ArenaDailyAwardCfg_2eproto_once_);
void protobuf_AddDesc_ArenaDailyAwardCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ArenaDailyAwardCfg_2eproto_once_,
                 &protobuf_AddDesc_ArenaDailyAwardCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ArenaDailyAwardCfg_2eproto {
  StaticDescriptorInitializer_ArenaDailyAwardCfg_2eproto() {
    protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
  }
} static_descriptor_initializer_ArenaDailyAwardCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ArenaAwardElement::kCfgIDFieldNumber;
const int ArenaAwardElement::kTypeFieldNumber;
const int ArenaAwardElement::kCntFieldNumber;
#endif  // !_MSC_VER

ArenaAwardElement::ArenaAwardElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaAwardElement::InitAsDefaultInstance() {
}

ArenaAwardElement::ArenaAwardElement(const ArenaAwardElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaAwardElement::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  type_ = 0u;
  cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaAwardElement::~ArenaAwardElement() {
  SharedDtor();
}

void ArenaAwardElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaAwardElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaAwardElement& ArenaAwardElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
#endif
  return *default_instance_;
}

ArenaAwardElement* ArenaAwardElement::default_instance_ = NULL;

ArenaAwardElement* ArenaAwardElement::New() const {
  return new ArenaAwardElement;
}

void ArenaAwardElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    type_ = 0u;
    cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaAwardElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Cnt;
        break;
      }

      // required uint32 Cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaAwardElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CfgID = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Cnt = 3;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cnt(), output);
  }

}

int ArenaAwardElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CfgID = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaAwardElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaAwardElement*>(&from));
}

void ArenaAwardElement::MergeFrom(const ArenaAwardElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
}

void ArenaAwardElement::CopyFrom(const ArenaAwardElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaAwardElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ArenaAwardElement::Swap(ArenaAwardElement* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(type_, other->type_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaAwardElement::GetTypeName() const {
  return "com.cfg.vo.ArenaAwardElement";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaDailyAwardCfg::kLevelFieldNumber;
const int ArenaDailyAwardCfg::kElmtLstFieldNumber;
#endif  // !_MSC_VER

ArenaDailyAwardCfg::ArenaDailyAwardCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaDailyAwardCfg::InitAsDefaultInstance() {
}

ArenaDailyAwardCfg::ArenaDailyAwardCfg(const ArenaDailyAwardCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaDailyAwardCfg::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaDailyAwardCfg::~ArenaDailyAwardCfg() {
  SharedDtor();
}

void ArenaDailyAwardCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaDailyAwardCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaDailyAwardCfg& ArenaDailyAwardCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
#endif
  return *default_instance_;
}

ArenaDailyAwardCfg* ArenaDailyAwardCfg::default_instance_ = NULL;

ArenaDailyAwardCfg* ArenaDailyAwardCfg::New() const {
  return new ArenaDailyAwardCfg;
}

void ArenaDailyAwardCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
  }
  elmtlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaDailyAwardCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ElmtLst;
        break;
      }

      // repeated .com.cfg.vo.ArenaAwardElement ElmtLst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElmtLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elmtlst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ElmtLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaDailyAwardCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // repeated .com.cfg.vo.ArenaAwardElement ElmtLst = 2;
  for (int i = 0; i < this->elmtlst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->elmtlst(i), output);
  }

}

int ArenaDailyAwardCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  // repeated .com.cfg.vo.ArenaAwardElement ElmtLst = 2;
  total_size += 1 * this->elmtlst_size();
  for (int i = 0; i < this->elmtlst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elmtlst(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaDailyAwardCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaDailyAwardCfg*>(&from));
}

void ArenaDailyAwardCfg::MergeFrom(const ArenaDailyAwardCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  elmtlst_.MergeFrom(from.elmtlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
}

void ArenaDailyAwardCfg::CopyFrom(const ArenaDailyAwardCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaDailyAwardCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < elmtlst_size(); i++) {
    if (!this->elmtlst(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaDailyAwardCfg::Swap(ArenaDailyAwardCfg* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    elmtlst_.Swap(&other->elmtlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaDailyAwardCfg::GetTypeName() const {
  return "com.cfg.vo.ArenaDailyAwardCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaDailyAwardCfgSet::kArenaDailyAwardCfgFieldNumber;
#endif  // !_MSC_VER

ArenaDailyAwardCfgSet::ArenaDailyAwardCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ArenaDailyAwardCfgSet::InitAsDefaultInstance() {
}

ArenaDailyAwardCfgSet::ArenaDailyAwardCfgSet(const ArenaDailyAwardCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaDailyAwardCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaDailyAwardCfgSet::~ArenaDailyAwardCfgSet() {
  SharedDtor();
}

void ArenaDailyAwardCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ArenaDailyAwardCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ArenaDailyAwardCfgSet& ArenaDailyAwardCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ArenaDailyAwardCfg_2eproto();
#endif
  return *default_instance_;
}

ArenaDailyAwardCfgSet* ArenaDailyAwardCfgSet::default_instance_ = NULL;

ArenaDailyAwardCfgSet* ArenaDailyAwardCfgSet::New() const {
  return new ArenaDailyAwardCfgSet;
}

void ArenaDailyAwardCfgSet::Clear() {
  arenadailyawardcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ArenaDailyAwardCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.ArenaDailyAwardCfg arenaDailyAwardCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaDailyAwardCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arenadailyawardcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_arenaDailyAwardCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaDailyAwardCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.ArenaDailyAwardCfg arenaDailyAwardCfg = 1;
  for (int i = 0; i < this->arenadailyawardcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->arenadailyawardcfg(i), output);
  }

}

int ArenaDailyAwardCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.ArenaDailyAwardCfg arenaDailyAwardCfg = 1;
  total_size += 1 * this->arenadailyawardcfg_size();
  for (int i = 0; i < this->arenadailyawardcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arenadailyawardcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaDailyAwardCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ArenaDailyAwardCfgSet*>(&from));
}

void ArenaDailyAwardCfgSet::MergeFrom(const ArenaDailyAwardCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  arenadailyawardcfg_.MergeFrom(from.arenadailyawardcfg_);
}

void ArenaDailyAwardCfgSet::CopyFrom(const ArenaDailyAwardCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaDailyAwardCfgSet::IsInitialized() const {

  for (int i = 0; i < arenadailyawardcfg_size(); i++) {
    if (!this->arenadailyawardcfg(i).IsInitialized()) return false;
  }
  return true;
}

void ArenaDailyAwardCfgSet::Swap(ArenaDailyAwardCfgSet* other) {
  if (other != this) {
    arenadailyawardcfg_.Swap(&other->arenadailyawardcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ArenaDailyAwardCfgSet::GetTypeName() const {
  return "com.cfg.vo.ArenaDailyAwardCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
