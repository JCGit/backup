// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: VIPCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VIPCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_VIPCfg_2eproto() {
  delete VIPCfg::default_instance_;
  delete VIPCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_VIPCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_VIPCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  VIPCfg::default_instance_ = new VIPCfg();
  VIPCfgSet::default_instance_ = new VIPCfgSet();
  VIPCfg::default_instance_->InitAsDefaultInstance();
  VIPCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VIPCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_VIPCfg_2eproto_once_);
void protobuf_AddDesc_VIPCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_VIPCfg_2eproto_once_,
                 &protobuf_AddDesc_VIPCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VIPCfg_2eproto {
  StaticDescriptorInitializer_VIPCfg_2eproto() {
    protobuf_AddDesc_VIPCfg_2eproto();
  }
} static_descriptor_initializer_VIPCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int VIPCfg::kVIPModuleIDFieldNumber;
const int VIPCfg::kTitleFieldNumber;
const int VIPCfg::kDescFieldNumber;
const int VIPCfg::kVIPExtraPermFieldNumber;
const int VIPCfg::kTopLvPromptFieldNumber;
const int VIPCfg::kVIPParamFieldNumber;
#endif  // !_MSC_VER

VIPCfg::VIPCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VIPCfg::InitAsDefaultInstance() {
}

VIPCfg::VIPCfg(const VIPCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VIPCfg::SharedCtor() {
  _cached_size_ = 0;
  vipmoduleid_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vipextraperm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  toplvprompt_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPCfg::~VIPCfg() {
  SharedDtor();
}

void VIPCfg::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (vipextraperm_ != &::google::protobuf::internal::kEmptyString) {
    delete vipextraperm_;
  }
  if (toplvprompt_ != &::google::protobuf::internal::kEmptyString) {
    delete toplvprompt_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPCfg& VIPCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VIPCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VIPCfg_2eproto();
#endif
  return *default_instance_;
}

VIPCfg* VIPCfg::default_instance_ = NULL;

VIPCfg* VIPCfg::New() const {
  return new VIPCfg;
}

void VIPCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipmoduleid_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_vipextraperm()) {
      if (vipextraperm_ != &::google::protobuf::internal::kEmptyString) {
        vipextraperm_->clear();
      }
    }
    if (has_toplvprompt()) {
      if (toplvprompt_ != &::google::protobuf::internal::kEmptyString) {
        toplvprompt_->clear();
      }
    }
  }
  vipparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VIPCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 VIPModuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vipmoduleid_)));
          set_has_vipmoduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Title;
        break;
      }

      // required string Title = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // required string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_VIPExtraPerm;
        break;
      }

      // required string VIPExtraPerm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_VIPExtraPerm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vipextraperm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_TopLvPrompt;
        break;
      }

      // required string TopLvPrompt = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TopLvPrompt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_toplvprompt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VIPParam;
        break;
      }

      // repeated uint32 VIPParam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_vipparam())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_vipparam())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_VIPParam;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 VIPModuleID = 1;
  if (has_vipmoduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->vipmoduleid(), output);
  }

  // required string Title = 2;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->title(), output);
  }

  // required string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required string VIPExtraPerm = 4;
  if (has_vipextraperm()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->vipextraperm(), output);
  }

  // required string TopLvPrompt = 5;
  if (has_toplvprompt()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->toplvprompt(), output);
  }

  // repeated uint32 VIPParam = 6;
  for (int i = 0; i < this->vipparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->vipparam(i), output);
  }

}

int VIPCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 VIPModuleID = 1;
    if (has_vipmoduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vipmoduleid());
    }

    // required string Title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string VIPExtraPerm = 4;
    if (has_vipextraperm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vipextraperm());
    }

    // required string TopLvPrompt = 5;
    if (has_toplvprompt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->toplvprompt());
    }

  }
  // repeated uint32 VIPParam = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->vipparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->vipparam(i));
    }
    total_size += 1 * this->vipparam_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPCfg*>(&from));
}

void VIPCfg::MergeFrom(const VIPCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipparam_.MergeFrom(from.vipparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipmoduleid()) {
      set_vipmoduleid(from.vipmoduleid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_vipextraperm()) {
      set_vipextraperm(from.vipextraperm());
    }
    if (from.has_toplvprompt()) {
      set_toplvprompt(from.toplvprompt());
    }
  }
}

void VIPCfg::CopyFrom(const VIPCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void VIPCfg::Swap(VIPCfg* other) {
  if (other != this) {
    std::swap(vipmoduleid_, other->vipmoduleid_);
    std::swap(title_, other->title_);
    std::swap(desc_, other->desc_);
    std::swap(vipextraperm_, other->vipextraperm_);
    std::swap(toplvprompt_, other->toplvprompt_);
    vipparam_.Swap(&other->vipparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPCfg::GetTypeName() const {
  return "com.cfg.vo.VIPCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int VIPCfgSet::kVipcfgFieldNumber;
#endif  // !_MSC_VER

VIPCfgSet::VIPCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void VIPCfgSet::InitAsDefaultInstance() {
}

VIPCfgSet::VIPCfgSet(const VIPCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void VIPCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VIPCfgSet::~VIPCfgSet() {
  SharedDtor();
}

void VIPCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void VIPCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VIPCfgSet& VIPCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_VIPCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_VIPCfg_2eproto();
#endif
  return *default_instance_;
}

VIPCfgSet* VIPCfgSet::default_instance_ = NULL;

VIPCfgSet* VIPCfgSet::New() const {
  return new VIPCfgSet;
}

void VIPCfgSet::Clear() {
  vipcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool VIPCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.VIPCfg vipcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_vipcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VIPCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.VIPCfg vipcfg = 1;
  for (int i = 0; i < this->vipcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->vipcfg(i), output);
  }

}

int VIPCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.VIPCfg vipcfg = 1;
  total_size += 1 * this->vipcfg_size();
  for (int i = 0; i < this->vipcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VIPCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VIPCfgSet*>(&from));
}

void VIPCfgSet::MergeFrom(const VIPCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipcfg_.MergeFrom(from.vipcfg_);
}

void VIPCfgSet::CopyFrom(const VIPCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VIPCfgSet::IsInitialized() const {

  for (int i = 0; i < vipcfg_size(); i++) {
    if (!this->vipcfg(i).IsInitialized()) return false;
  }
  return true;
}

void VIPCfgSet::Swap(VIPCfgSet* other) {
  if (other != this) {
    vipcfg_.Swap(&other->vipcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string VIPCfgSet::GetTypeName() const {
  return "com.cfg.vo.VIPCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
