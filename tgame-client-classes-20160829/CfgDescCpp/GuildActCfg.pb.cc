// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildActCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildActCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_GuildActCfg_2eproto() {
  delete GuildActCfg::default_instance_;
  delete GuildActCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GuildActCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GuildActCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GuildActCfg::default_instance_ = new GuildActCfg();
  GuildActCfgSet::default_instance_ = new GuildActCfgSet();
  GuildActCfg::default_instance_->InitAsDefaultInstance();
  GuildActCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildActCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GuildActCfg_2eproto_once_);
void protobuf_AddDesc_GuildActCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GuildActCfg_2eproto_once_,
                 &protobuf_AddDesc_GuildActCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildActCfg_2eproto {
  StaticDescriptorInitializer_GuildActCfg_2eproto() {
    protobuf_AddDesc_GuildActCfg_2eproto();
  }
} static_descriptor_initializer_GuildActCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GuildActCfg::kIDFieldNumber;
const int GuildActCfg::kTimeFieldNumber;
const int GuildActCfg::kPerDropHpFieldNumber;
const int GuildActCfg::kDropGoldFieldNumber;
const int GuildActCfg::kAvatarFieldNumber;
#endif  // !_MSC_VER

GuildActCfg::GuildActCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuildActCfg::InitAsDefaultInstance() {
}

GuildActCfg::GuildActCfg(const GuildActCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuildActCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  perdrophp_ = 0u;
  dropgold_ = 0u;
  avatar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildActCfg::~GuildActCfg() {
  SharedDtor();
}

void GuildActCfg::SharedDtor() {
  if (avatar_ != &::google::protobuf::internal::kEmptyString) {
    delete avatar_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuildActCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuildActCfg& GuildActCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuildActCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuildActCfg_2eproto();
#endif
  return *default_instance_;
}

GuildActCfg* GuildActCfg::default_instance_ = NULL;

GuildActCfg* GuildActCfg::New() const {
  return new GuildActCfg;
}

void GuildActCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    time_ = 0u;
    perdrophp_ = 0u;
    dropgold_ = 0u;
    if (has_avatar()) {
      if (avatar_ != &::google::protobuf::internal::kEmptyString) {
        avatar_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuildActCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // required uint32 Time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_PerDropHp;
        break;
      }

      // required uint32 PerDropHp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PerDropHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &perdrophp_)));
          set_has_perdrophp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_DropGold;
        break;
      }

      // required uint32 DropGold = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DropGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropgold_)));
          set_has_dropgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_avatar;
        break;
      }

      // required string avatar = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avatar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildActCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // required uint32 PerDropHp = 3;
  if (has_perdrophp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->perdrophp(), output);
  }

  // required uint32 DropGold = 4;
  if (has_dropgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dropgold(), output);
  }

  // required string avatar = 5;
  if (has_avatar()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->avatar(), output);
  }

}

int GuildActCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // required uint32 PerDropHp = 3;
    if (has_perdrophp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->perdrophp());
    }

    // required uint32 DropGold = 4;
    if (has_dropgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropgold());
    }

    // required string avatar = 5;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildActCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuildActCfg*>(&from));
}

void GuildActCfg::MergeFrom(const GuildActCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_perdrophp()) {
      set_perdrophp(from.perdrophp());
    }
    if (from.has_dropgold()) {
      set_dropgold(from.dropgold());
    }
    if (from.has_avatar()) {
      set_avatar(from.avatar());
    }
  }
}

void GuildActCfg::CopyFrom(const GuildActCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildActCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GuildActCfg::Swap(GuildActCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(perdrophp_, other->perdrophp_);
    std::swap(dropgold_, other->dropgold_);
    std::swap(avatar_, other->avatar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuildActCfg::GetTypeName() const {
  return "com.cfg.vo.GuildActCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int GuildActCfgSet::kGuildActCfgFieldNumber;
#endif  // !_MSC_VER

GuildActCfgSet::GuildActCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GuildActCfgSet::InitAsDefaultInstance() {
}

GuildActCfgSet::GuildActCfgSet(const GuildActCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GuildActCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildActCfgSet::~GuildActCfgSet() {
  SharedDtor();
}

void GuildActCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GuildActCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GuildActCfgSet& GuildActCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GuildActCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GuildActCfg_2eproto();
#endif
  return *default_instance_;
}

GuildActCfgSet* GuildActCfgSet::default_instance_ = NULL;

GuildActCfgSet* GuildActCfgSet::New() const {
  return new GuildActCfgSet;
}

void GuildActCfgSet::Clear() {
  guildactcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GuildActCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.GuildActCfg guildActCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildActCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildactcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildActCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuildActCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.GuildActCfg guildActCfg = 1;
  for (int i = 0; i < this->guildactcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->guildactcfg(i), output);
  }

}

int GuildActCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.GuildActCfg guildActCfg = 1;
  total_size += 1 * this->guildactcfg_size();
  for (int i = 0; i < this->guildactcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildactcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildActCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GuildActCfgSet*>(&from));
}

void GuildActCfgSet::MergeFrom(const GuildActCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildactcfg_.MergeFrom(from.guildactcfg_);
}

void GuildActCfgSet::CopyFrom(const GuildActCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildActCfgSet::IsInitialized() const {

  for (int i = 0; i < guildactcfg_size(); i++) {
    if (!this->guildactcfg(i).IsInitialized()) return false;
  }
  return true;
}

void GuildActCfgSet::Swap(GuildActCfgSet* other) {
  if (other != this) {
    guildactcfg_.Swap(&other->guildactcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GuildActCfgSet::GetTypeName() const {
  return "com.cfg.vo.GuildActCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
