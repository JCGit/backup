// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ModuleOpenCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ModuleOpenCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_ModuleOpenCfg_2eproto() {
  delete ModuleOpenCfg::default_instance_;
  delete ModuleOpenCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_ModuleOpenCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_ModuleOpenCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  ModuleOpenCfg::default_instance_ = new ModuleOpenCfg();
  ModuleOpenCfgSet::default_instance_ = new ModuleOpenCfgSet();
  ModuleOpenCfg::default_instance_->InitAsDefaultInstance();
  ModuleOpenCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ModuleOpenCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ModuleOpenCfg_2eproto_once_);
void protobuf_AddDesc_ModuleOpenCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ModuleOpenCfg_2eproto_once_,
                 &protobuf_AddDesc_ModuleOpenCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ModuleOpenCfg_2eproto {
  StaticDescriptorInitializer_ModuleOpenCfg_2eproto() {
    protobuf_AddDesc_ModuleOpenCfg_2eproto();
  }
} static_descriptor_initializer_ModuleOpenCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int ModuleOpenCfg::kModuleIDFieldNumber;
const int ModuleOpenCfg::kTaskIDFieldNumber;
const int ModuleOpenCfg::kShowingOnScreenFieldNumber;
const int ModuleOpenCfg::kOpenWordsFieldNumber;
#endif  // !_MSC_VER

ModuleOpenCfg::ModuleOpenCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ModuleOpenCfg::InitAsDefaultInstance() {
}

ModuleOpenCfg::ModuleOpenCfg(const ModuleOpenCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleOpenCfg::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 0u;
  taskid_ = 0u;
  showingonscreen_ = 0u;
  openwords_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleOpenCfg::~ModuleOpenCfg() {
  SharedDtor();
}

void ModuleOpenCfg::SharedDtor() {
  if (openwords_ != &::google::protobuf::internal::kEmptyString) {
    delete openwords_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModuleOpenCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModuleOpenCfg& ModuleOpenCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ModuleOpenCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ModuleOpenCfg_2eproto();
#endif
  return *default_instance_;
}

ModuleOpenCfg* ModuleOpenCfg::default_instance_ = NULL;

ModuleOpenCfg* ModuleOpenCfg::New() const {
  return new ModuleOpenCfg;
}

void ModuleOpenCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moduleid_ = 0u;
    taskid_ = 0u;
    showingonscreen_ = 0u;
    if (has_openwords()) {
      if (openwords_ != &::google::protobuf::internal::kEmptyString) {
        openwords_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ModuleOpenCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ModuleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TaskID;
        break;
      }

      // required uint32 TaskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TaskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ShowingOnScreen;
        break;
      }

      // required uint32 ShowingOnScreen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ShowingOnScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &showingonscreen_)));
          set_has_showingonscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OpenWords;
        break;
      }

      // required string OpenWords = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OpenWords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openwords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleOpenCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ModuleID = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moduleid(), output);
  }

  // required uint32 TaskID = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  // required uint32 ShowingOnScreen = 3;
  if (has_showingonscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->showingonscreen(), output);
  }

  // required string OpenWords = 4;
  if (has_openwords()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->openwords(), output);
  }

}

int ModuleOpenCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ModuleID = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }

    // required uint32 TaskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // required uint32 ShowingOnScreen = 3;
    if (has_showingonscreen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->showingonscreen());
    }

    // required string OpenWords = 4;
    if (has_openwords()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openwords());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleOpenCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModuleOpenCfg*>(&from));
}

void ModuleOpenCfg::MergeFrom(const ModuleOpenCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_showingonscreen()) {
      set_showingonscreen(from.showingonscreen());
    }
    if (from.has_openwords()) {
      set_openwords(from.openwords());
    }
  }
}

void ModuleOpenCfg::CopyFrom(const ModuleOpenCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleOpenCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ModuleOpenCfg::Swap(ModuleOpenCfg* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(taskid_, other->taskid_);
    std::swap(showingonscreen_, other->showingonscreen_);
    std::swap(openwords_, other->openwords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ModuleOpenCfg::GetTypeName() const {
  return "com.cfg.vo.ModuleOpenCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int ModuleOpenCfgSet::kModuleopencfgFieldNumber;
#endif  // !_MSC_VER

ModuleOpenCfgSet::ModuleOpenCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ModuleOpenCfgSet::InitAsDefaultInstance() {
}

ModuleOpenCfgSet::ModuleOpenCfgSet(const ModuleOpenCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ModuleOpenCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModuleOpenCfgSet::~ModuleOpenCfgSet() {
  SharedDtor();
}

void ModuleOpenCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ModuleOpenCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModuleOpenCfgSet& ModuleOpenCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_ModuleOpenCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_ModuleOpenCfg_2eproto();
#endif
  return *default_instance_;
}

ModuleOpenCfgSet* ModuleOpenCfgSet::default_instance_ = NULL;

ModuleOpenCfgSet* ModuleOpenCfgSet::New() const {
  return new ModuleOpenCfgSet;
}

void ModuleOpenCfgSet::Clear() {
  moduleopencfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ModuleOpenCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.ModuleOpenCfg moduleopencfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moduleopencfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moduleopencfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_moduleopencfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModuleOpenCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.ModuleOpenCfg moduleopencfg = 1;
  for (int i = 0; i < this->moduleopencfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->moduleopencfg(i), output);
  }

}

int ModuleOpenCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.ModuleOpenCfg moduleopencfg = 1;
  total_size += 1 * this->moduleopencfg_size();
  for (int i = 0; i < this->moduleopencfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moduleopencfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleOpenCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModuleOpenCfgSet*>(&from));
}

void ModuleOpenCfgSet::MergeFrom(const ModuleOpenCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  moduleopencfg_.MergeFrom(from.moduleopencfg_);
}

void ModuleOpenCfgSet::CopyFrom(const ModuleOpenCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleOpenCfgSet::IsInitialized() const {

  for (int i = 0; i < moduleopencfg_size(); i++) {
    if (!this->moduleopencfg(i).IsInitialized()) return false;
  }
  return true;
}

void ModuleOpenCfgSet::Swap(ModuleOpenCfgSet* other) {
  if (other != this) {
    moduleopencfg_.Swap(&other->moduleopencfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ModuleOpenCfgSet::GetTypeName() const {
  return "com.cfg.vo.ModuleOpenCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
