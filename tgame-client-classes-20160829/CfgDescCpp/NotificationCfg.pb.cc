// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NotificationCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NotificationCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_NotificationCfg_2eproto() {
  delete Notification::default_instance_;
  delete NotificationCfg::default_instance_;
  delete NotificationCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_NotificationCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_NotificationCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Notification::default_instance_ = new Notification();
  NotificationCfg::default_instance_ = new NotificationCfg();
  NotificationCfgSet::default_instance_ = new NotificationCfgSet();
  Notification::default_instance_->InitAsDefaultInstance();
  NotificationCfg::default_instance_->InitAsDefaultInstance();
  NotificationCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_NotificationCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_NotificationCfg_2eproto_once_);
void protobuf_AddDesc_NotificationCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_NotificationCfg_2eproto_once_,
                 &protobuf_AddDesc_NotificationCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_NotificationCfg_2eproto {
  StaticDescriptorInitializer_NotificationCfg_2eproto() {
    protobuf_AddDesc_NotificationCfg_2eproto();
  }
} static_descriptor_initializer_NotificationCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int Notification::kEntryIDFieldNumber;
const int Notification::kTagFieldNumber;
const int Notification::kRemindWayFieldNumber;
const int Notification::kBadgeNumFieldNumber;
const int Notification::kWordsFieldNumber;
#endif  // !_MSC_VER

Notification::Notification()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Notification::InitAsDefaultInstance() {
}

Notification::Notification(const Notification& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Notification::SharedCtor() {
  _cached_size_ = 0;
  entryid_ = 0u;
  tag_ = 0u;
  remindway_ = 0u;
  badgenum_ = 0u;
  words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Notification::~Notification() {
  SharedDtor();
}

void Notification::SharedDtor() {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    delete words_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Notification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Notification& Notification::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NotificationCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NotificationCfg_2eproto();
#endif
  return *default_instance_;
}

Notification* Notification::default_instance_ = NULL;

Notification* Notification::New() const {
  return new Notification;
}

void Notification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entryid_ = 0u;
    tag_ = 0u;
    remindway_ = 0u;
    badgenum_ = 0u;
    if (has_words()) {
      if (words_ != &::google::protobuf::internal::kEmptyString) {
        words_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Notification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EntryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryid_)));
          set_has_entryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Tag;
        break;
      }

      // required uint32 Tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_RemindWay;
        break;
      }

      // required uint32 RemindWay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemindWay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindway_)));
          set_has_remindway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BadgeNum;
        break;
      }

      // optional uint32 BadgeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BadgeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badgenum_)));
          set_has_badgenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_Words;
        break;
      }

      // optional string Words = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_words()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Notification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EntryID = 1;
  if (has_entryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entryid(), output);
  }

  // required uint32 Tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tag(), output);
  }

  // required uint32 RemindWay = 3;
  if (has_remindway()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remindway(), output);
  }

  // optional uint32 BadgeNum = 4;
  if (has_badgenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->badgenum(), output);
  }

  // optional string Words = 5;
  if (has_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->words(), output);
  }

}

int Notification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EntryID = 1;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryid());
    }

    // required uint32 Tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

    // required uint32 RemindWay = 3;
    if (has_remindway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remindway());
    }

    // optional uint32 BadgeNum = 4;
    if (has_badgenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badgenum());
    }

    // optional string Words = 5;
    if (has_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->words());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Notification::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Notification*>(&from));
}

void Notification::MergeFrom(const Notification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entryid()) {
      set_entryid(from.entryid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_remindway()) {
      set_remindway(from.remindway());
    }
    if (from.has_badgenum()) {
      set_badgenum(from.badgenum());
    }
    if (from.has_words()) {
      set_words(from.words());
    }
  }
}

void Notification::CopyFrom(const Notification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Notification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Notification::Swap(Notification* other) {
  if (other != this) {
    std::swap(entryid_, other->entryid_);
    std::swap(tag_, other->tag_);
    std::swap(remindway_, other->remindway_);
    std::swap(badgenum_, other->badgenum_);
    std::swap(words_, other->words_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Notification::GetTypeName() const {
  return "com.cfg.vo.Notification";
}


// ===================================================================

#ifndef _MSC_VER
const int NotificationCfg::kEntryIDFieldNumber;
const int NotificationCfg::kTagFieldNumber;
const int NotificationCfg::kLockedFieldNumber;
const int NotificationCfg::kModuleIDFieldNumber;
const int NotificationCfg::kRemindWayFieldNumber;
const int NotificationCfg::kWordsFieldNumber;
const int NotificationCfg::kWordsParamsFieldNumber;
#endif  // !_MSC_VER

NotificationCfg::NotificationCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationCfg::InitAsDefaultInstance() {
}

NotificationCfg::NotificationCfg(const NotificationCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationCfg::SharedCtor() {
  _cached_size_ = 0;
  entryid_ = 0u;
  tag_ = 0u;
  locked_ = 0u;
  moduleid_ = 0u;
  remindway_ = 0u;
  words_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationCfg::~NotificationCfg() {
  SharedDtor();
}

void NotificationCfg::SharedDtor() {
  if (words_ != &::google::protobuf::internal::kEmptyString) {
    delete words_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotificationCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationCfg& NotificationCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NotificationCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NotificationCfg_2eproto();
#endif
  return *default_instance_;
}

NotificationCfg* NotificationCfg::default_instance_ = NULL;

NotificationCfg* NotificationCfg::New() const {
  return new NotificationCfg;
}

void NotificationCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entryid_ = 0u;
    tag_ = 0u;
    locked_ = 0u;
    moduleid_ = 0u;
    remindway_ = 0u;
    if (has_words()) {
      if (words_ != &::google::protobuf::internal::kEmptyString) {
        words_->clear();
      }
    }
  }
  wordsparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EntryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryid_)));
          set_has_entryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Tag;
        break;
      }

      // required uint32 Tag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Locked;
        break;
      }

      // required uint32 Locked = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Locked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &locked_)));
          set_has_locked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ModuleID;
        break;
      }

      // required uint32 ModuleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ModuleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RemindWay;
        break;
      }

      // required uint32 RemindWay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RemindWay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remindway_)));
          set_has_remindway();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Words;
        break;
      }

      // required string Words = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Words:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_words()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WordsParams;
        break;
      }

      // repeated uint32 WordsParams = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WordsParams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_wordsparams())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_wordsparams())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_WordsParams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EntryID = 1;
  if (has_entryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entryid(), output);
  }

  // required uint32 Tag = 2;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tag(), output);
  }

  // required uint32 Locked = 3;
  if (has_locked()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->locked(), output);
  }

  // required uint32 ModuleID = 4;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->moduleid(), output);
  }

  // required uint32 RemindWay = 5;
  if (has_remindway()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->remindway(), output);
  }

  // required string Words = 6;
  if (has_words()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->words(), output);
  }

  // repeated uint32 WordsParams = 7;
  for (int i = 0; i < this->wordsparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->wordsparams(i), output);
  }

}

int NotificationCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EntryID = 1;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryid());
    }

    // required uint32 Tag = 2;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

    // required uint32 Locked = 3;
    if (has_locked()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->locked());
    }

    // required uint32 ModuleID = 4;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }

    // required uint32 RemindWay = 5;
    if (has_remindway()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remindway());
    }

    // required string Words = 6;
    if (has_words()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->words());
    }

  }
  // repeated uint32 WordsParams = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->wordsparams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->wordsparams(i));
    }
    total_size += 1 * this->wordsparams_size() + data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationCfg*>(&from));
}

void NotificationCfg::MergeFrom(const NotificationCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  wordsparams_.MergeFrom(from.wordsparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entryid()) {
      set_entryid(from.entryid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_locked()) {
      set_locked(from.locked());
    }
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_remindway()) {
      set_remindway(from.remindway());
    }
    if (from.has_words()) {
      set_words(from.words());
    }
  }
}

void NotificationCfg::CopyFrom(const NotificationCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void NotificationCfg::Swap(NotificationCfg* other) {
  if (other != this) {
    std::swap(entryid_, other->entryid_);
    std::swap(tag_, other->tag_);
    std::swap(locked_, other->locked_);
    std::swap(moduleid_, other->moduleid_);
    std::swap(remindway_, other->remindway_);
    std::swap(words_, other->words_);
    wordsparams_.Swap(&other->wordsparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationCfg::GetTypeName() const {
  return "com.cfg.vo.NotificationCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int NotificationCfgSet::kNotificationcfgFieldNumber;
#endif  // !_MSC_VER

NotificationCfgSet::NotificationCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NotificationCfgSet::InitAsDefaultInstance() {
}

NotificationCfgSet::NotificationCfgSet(const NotificationCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NotificationCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotificationCfgSet::~NotificationCfgSet() {
  SharedDtor();
}

void NotificationCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NotificationCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NotificationCfgSet& NotificationCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_NotificationCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_NotificationCfg_2eproto();
#endif
  return *default_instance_;
}

NotificationCfgSet* NotificationCfgSet::default_instance_ = NULL;

NotificationCfgSet* NotificationCfgSet::New() const {
  return new NotificationCfgSet;
}

void NotificationCfgSet::Clear() {
  notificationcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NotificationCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.NotificationCfg notificationcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notificationcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_notificationcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_notificationcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotificationCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.NotificationCfg notificationcfg = 1;
  for (int i = 0; i < this->notificationcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->notificationcfg(i), output);
  }

}

int NotificationCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.NotificationCfg notificationcfg = 1;
  total_size += 1 * this->notificationcfg_size();
  for (int i = 0; i < this->notificationcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->notificationcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotificationCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NotificationCfgSet*>(&from));
}

void NotificationCfgSet::MergeFrom(const NotificationCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  notificationcfg_.MergeFrom(from.notificationcfg_);
}

void NotificationCfgSet::CopyFrom(const NotificationCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationCfgSet::IsInitialized() const {

  for (int i = 0; i < notificationcfg_size(); i++) {
    if (!this->notificationcfg(i).IsInitialized()) return false;
  }
  return true;
}

void NotificationCfgSet::Swap(NotificationCfgSet* other) {
  if (other != this) {
    notificationcfg_.Swap(&other->notificationcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NotificationCfgSet::GetTypeName() const {
  return "com.cfg.vo.NotificationCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
