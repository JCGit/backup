// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GlobalCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GlobalCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_GlobalCfg_2eproto() {
  delete GlobalCfg::default_instance_;
  delete GlobalCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_GlobalCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_GlobalCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  GlobalCfg::default_instance_ = new GlobalCfg();
  GlobalCfgSet::default_instance_ = new GlobalCfgSet();
  GlobalCfg::default_instance_->InitAsDefaultInstance();
  GlobalCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GlobalCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_GlobalCfg_2eproto_once_);
void protobuf_AddDesc_GlobalCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_GlobalCfg_2eproto_once_,
                 &protobuf_AddDesc_GlobalCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GlobalCfg_2eproto {
  StaticDescriptorInitializer_GlobalCfg_2eproto() {
    protobuf_AddDesc_GlobalCfg_2eproto();
  }
} static_descriptor_initializer_GlobalCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int GlobalCfg::kWeaponEatRadioFieldNumber;
const int GlobalCfg::kCarCostGoldFieldNumber;
const int GlobalCfg::kBuyManualGoldFieldNumber;
const int GlobalCfg::kManualFieldNumber;
const int GlobalCfg::kDailyTaskReflashCostFieldNumber;
const int GlobalCfg::kDailyTaskReflashCntFieldNumber;
const int GlobalCfg::kCreateGuildCostCoinFieldNumber;
const int GlobalCfg::kWeaponExpCoinCostFieldNumber;
const int GlobalCfg::kWeaponLotNormalTimeFieldNumber;
const int GlobalCfg::kWeaponLotAdvanceTimeFieldNumber;
const int GlobalCfg::kWeaponLotNormalGoldFieldNumber;
const int GlobalCfg::kWeaponLotAdvanceGoldFieldNumber;
const int GlobalCfg::kAwardRankTimeFieldNumber;
const int GlobalCfg::kPowerStoneIDFieldNumber;
const int GlobalCfg::kInfiniteManualFieldNumber;
const int GlobalCfg::kWaveCoinFieldNumber;
const int GlobalCfg::kWeaponBatLotDiscountFieldNumber;
const int GlobalCfg::kSweepOnOffFieldNumber;
const int GlobalCfg::kArenaStoreRefreshTimeFieldNumber;
const int GlobalCfg::kFreeQiangHunCntFieldNumber;
const int GlobalCfg::kGoldQiangHunFieldNumber;
const int GlobalCfg::kWeaponLotNormalCoinFieldNumber;
const int GlobalCfg::kNihilityDropProbFieldNumber;
const int GlobalCfg::kNihilityBaseGoldFieldNumber;
const int GlobalCfg::kEquipexpcoincostFieldNumber;
const int GlobalCfg::kEquipEatRadioFieldNumber;
const int GlobalCfg::kArenaLoseScoreFieldNumber;
const int GlobalCfg::kArenaOppLoseScoreFieldNumber;
const int GlobalCfg::kArenaOppLoseCoinRadioFieldNumber;
const int GlobalCfg::kArenaOppMaxLoseCntFieldNumber;
const int GlobalCfg::kArenaWinScoreFieldNumber;
const int GlobalCfg::kArenaCleanCDCostFieldNumber;
const int GlobalCfg::kFirstChargeGiftPkgFieldNumber;
const int GlobalCfg::kWeaponLotVIPCostFieldNumber;
const int GlobalCfg::kDailyInstanceManualCostFieldNumber;
const int GlobalCfg::kBuyManualGoldAddFieldNumber;
const int GlobalCfg::kRelive1StCostFieldNumber;
const int GlobalCfg::kRelive2NdCostFieldNumber;
const int GlobalCfg::kRelive3RdCostFieldNumber;
const int GlobalCfg::kReliveCostDeltaFieldNumber;
const int GlobalCfg::kBulletBaseCostFieldNumber;
const int GlobalCfg::kBulletCostDeltaFieldNumber;
#endif  // !_MSC_VER

GlobalCfg::GlobalCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GlobalCfg::InitAsDefaultInstance() {
}

GlobalCfg::GlobalCfg(const GlobalCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalCfg::SharedCtor() {
  _cached_size_ = 0;
  weaponeatradio_ = 0u;
  carcostgold_ = 0u;
  buymanualgold_ = 0u;
  manual_ = 0u;
  dailytaskreflashcost_ = 0u;
  dailytaskreflashcnt_ = 0u;
  createguildcostcoin_ = 0u;
  weaponexpcoincost_ = 0u;
  weaponlotnormaltime_ = 0u;
  weaponlotadvancetime_ = 0u;
  weaponlotnormalgold_ = 0u;
  weaponlotadvancegold_ = 0u;
  awardranktime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  powerstoneid_ = 0u;
  infinitemanual_ = 0u;
  wavecoin_ = 0u;
  weaponbatlotdiscount_ = 0u;
  sweeponoff_ = 0u;
  arenastorerefreshtime_ = 0u;
  freeqianghuncnt_ = 0u;
  goldqianghun_ = 0u;
  weaponlotnormalcoin_ = 0u;
  nihilitydropprob_ = 0u;
  nihilitybasegold_ = 0u;
  equipexpcoincost_ = 0u;
  equipeatradio_ = 0u;
  arenalosescore_ = 0u;
  arenaopplosescore_ = 0u;
  arenaopplosecoinradio_ = 0u;
  arenaoppmaxlosecnt_ = 0u;
  arenawinscore_ = 0u;
  arenacleancdcost_ = 0u;
  firstchargegiftpkg_ = 0u;
  weaponlotvipcost_ = 0u;
  dailyinstancemanualcost_ = 0u;
  buymanualgoldadd_ = 0u;
  relive1stcost_ = 0u;
  relive2ndcost_ = 0u;
  relive3rdcost_ = 0u;
  relivecostdelta_ = 0u;
  bulletbasecost_ = 0u;
  bulletcostdelta_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalCfg::~GlobalCfg() {
  SharedDtor();
}

void GlobalCfg::SharedDtor() {
  if (awardranktime_ != &::google::protobuf::internal::kEmptyString) {
    delete awardranktime_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GlobalCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GlobalCfg& GlobalCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GlobalCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GlobalCfg_2eproto();
#endif
  return *default_instance_;
}

GlobalCfg* GlobalCfg::default_instance_ = NULL;

GlobalCfg* GlobalCfg::New() const {
  return new GlobalCfg;
}

void GlobalCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    weaponeatradio_ = 0u;
    carcostgold_ = 0u;
    buymanualgold_ = 0u;
    manual_ = 0u;
    dailytaskreflashcost_ = 0u;
    dailytaskreflashcnt_ = 0u;
    createguildcostcoin_ = 0u;
    weaponexpcoincost_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weaponlotnormaltime_ = 0u;
    weaponlotadvancetime_ = 0u;
    weaponlotnormalgold_ = 0u;
    weaponlotadvancegold_ = 0u;
    if (has_awardranktime()) {
      if (awardranktime_ != &::google::protobuf::internal::kEmptyString) {
        awardranktime_->clear();
      }
    }
    powerstoneid_ = 0u;
    infinitemanual_ = 0u;
    wavecoin_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    weaponbatlotdiscount_ = 0u;
    sweeponoff_ = 0u;
    arenastorerefreshtime_ = 0u;
    freeqianghuncnt_ = 0u;
    goldqianghun_ = 0u;
    weaponlotnormalcoin_ = 0u;
    nihilitydropprob_ = 0u;
    nihilitybasegold_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    equipexpcoincost_ = 0u;
    equipeatradio_ = 0u;
    arenalosescore_ = 0u;
    arenaopplosescore_ = 0u;
    arenaopplosecoinradio_ = 0u;
    arenaoppmaxlosecnt_ = 0u;
    arenawinscore_ = 0u;
    arenacleancdcost_ = 0u;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    firstchargegiftpkg_ = 0u;
    weaponlotvipcost_ = 0u;
    dailyinstancemanualcost_ = 0u;
    buymanualgoldadd_ = 0u;
    relive1stcost_ = 0u;
    relive2ndcost_ = 0u;
    relive3rdcost_ = 0u;
    relivecostdelta_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    bulletbasecost_ = 0u;
    bulletcostdelta_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GlobalCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 WeaponEatRadio = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponeatradio_)));
          set_has_weaponeatradio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CarCostGold;
        break;
      }

      // required uint32 CarCostGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CarCostGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carcostgold_)));
          set_has_carcostgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BuyManualGold;
        break;
      }

      // required uint32 BuyManualGold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyManualGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buymanualgold_)));
          set_has_buymanualgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Manual;
        break;
      }

      // required uint32 Manual = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Manual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manual_)));
          set_has_manual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_DailyTaskReflashCost;
        break;
      }

      // required uint32 DailyTaskReflashCost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyTaskReflashCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailytaskreflashcost_)));
          set_has_dailytaskreflashcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DailyTaskReflashCnt;
        break;
      }

      // required uint32 DailyTaskReflashCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyTaskReflashCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailytaskreflashcnt_)));
          set_has_dailytaskreflashcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CreateGuildCostCoin;
        break;
      }

      // required uint32 CreateGuildCostCoin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateGuildCostCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createguildcostcoin_)));
          set_has_createguildcostcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_WeaponExpCoinCost;
        break;
      }

      // required uint32 WeaponExpCoinCost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponExpCoinCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponexpcoincost_)));
          set_has_weaponexpcoincost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_WeaponLotNormalTime;
        break;
      }

      // required uint32 WeaponLotNormalTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLotNormalTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlotnormaltime_)));
          set_has_weaponlotnormaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_WeaponLotAdvanceTime;
        break;
      }

      // required uint32 WeaponLotAdvanceTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLotAdvanceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlotadvancetime_)));
          set_has_weaponlotadvancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_WeaponLotNormalGold;
        break;
      }

      // required uint32 WeaponLotNormalGold = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLotNormalGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlotnormalgold_)));
          set_has_weaponlotnormalgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_WeaponLotAdvanceGold;
        break;
      }

      // required uint32 WeaponLotAdvanceGold = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLotAdvanceGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlotadvancegold_)));
          set_has_weaponlotadvancegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_AwardRankTime;
        break;
      }

      // required string AwardRankTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardRankTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awardranktime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PowerStoneID;
        break;
      }

      // required uint32 PowerStoneID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PowerStoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &powerstoneid_)));
          set_has_powerstoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_InfiniteManual;
        break;
      }

      // required uint32 InfiniteManual = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InfiniteManual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &infinitemanual_)));
          set_has_infinitemanual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_WaveCoin;
        break;
      }

      // required uint32 WaveCoin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WaveCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wavecoin_)));
          set_has_wavecoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_WeaponBatLotDiscount;
        break;
      }

      // required uint32 WeaponBatLotDiscount = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponBatLotDiscount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponbatlotdiscount_)));
          set_has_weaponbatlotdiscount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_SweepOnOff;
        break;
      }

      // required uint32 SweepOnOff = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SweepOnOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sweeponoff_)));
          set_has_sweeponoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ArenaStoreRefreshTime;
        break;
      }

      // required uint32 ArenaStoreRefreshTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaStoreRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenastorerefreshtime_)));
          set_has_arenastorerefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_FreeQiangHunCnt;
        break;
      }

      // required uint32 FreeQiangHunCnt = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FreeQiangHunCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freeqianghuncnt_)));
          set_has_freeqianghuncnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_GoldQiangHun;
        break;
      }

      // required uint32 GoldQiangHun = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GoldQiangHun:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldqianghun_)));
          set_has_goldqianghun();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_WeaponLotNormalCoin;
        break;
      }

      // required uint32 WeaponLotNormalCoin = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLotNormalCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlotnormalcoin_)));
          set_has_weaponlotnormalcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_NihilityDropProb;
        break;
      }

      // required uint32 NihilityDropProb = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NihilityDropProb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nihilitydropprob_)));
          set_has_nihilitydropprob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_NihilityBaseGold;
        break;
      }

      // required uint32 NihilityBaseGold = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NihilityBaseGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nihilitybasegold_)));
          set_has_nihilitybasegold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_Equipexpcoincost;
        break;
      }

      // required uint32 Equipexpcoincost = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Equipexpcoincost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipexpcoincost_)));
          set_has_equipexpcoincost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_EquipEatRadio;
        break;
      }

      // required uint32 EquipEatRadio = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipEatRadio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipeatradio_)));
          set_has_equipeatradio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_ArenaLoseScore;
        break;
      }

      // required uint32 ArenaLoseScore = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaLoseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenalosescore_)));
          set_has_arenalosescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_ArenaOppLoseScore;
        break;
      }

      // required uint32 ArenaOppLoseScore = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaOppLoseScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaopplosescore_)));
          set_has_arenaopplosescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_ArenaOppLoseCoinRadio;
        break;
      }

      // required uint32 ArenaOppLoseCoinRadio = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaOppLoseCoinRadio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaopplosecoinradio_)));
          set_has_arenaopplosecoinradio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_ArenaOppMaxLoseCnt;
        break;
      }

      // required uint32 ArenaOppMaxLoseCnt = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaOppMaxLoseCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenaoppmaxlosecnt_)));
          set_has_arenaoppmaxlosecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_ArenaWinScore;
        break;
      }

      // required uint32 ArenaWinScore = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaWinScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenawinscore_)));
          set_has_arenawinscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_ArenaCleanCDCost;
        break;
      }

      // required uint32 ArenaCleanCDCost = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ArenaCleanCDCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arenacleancdcost_)));
          set_has_arenacleancdcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_FirstChargeGiftPkg;
        break;
      }

      // required uint32 FirstChargeGiftPkg = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FirstChargeGiftPkg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstchargegiftpkg_)));
          set_has_firstchargegiftpkg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_WeaponLotVIPCost;
        break;
      }

      // required uint32 WeaponLotVIPCost = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WeaponLotVIPCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponlotvipcost_)));
          set_has_weaponlotvipcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_DailyInstanceManualCost;
        break;
      }

      // required uint32 DailyInstanceManualCost = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyInstanceManualCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyinstancemanualcost_)));
          set_has_dailyinstancemanualcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_BuyManualGoldAdd;
        break;
      }

      // required uint32 BuyManualGoldAdd = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuyManualGoldAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buymanualgoldadd_)));
          set_has_buymanualgoldadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_Relive1stCost;
        break;
      }

      // required uint32 Relive1stCost = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Relive1stCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relive1stcost_)));
          set_has_relive1stcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_Relive2ndCost;
        break;
      }

      // required uint32 Relive2ndCost = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Relive2ndCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relive2ndcost_)));
          set_has_relive2ndcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_Relive3rdCost;
        break;
      }

      // required uint32 Relive3rdCost = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Relive3rdCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relive3rdcost_)));
          set_has_relive3rdcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_ReliveCostDelta;
        break;
      }

      // required uint32 ReliveCostDelta = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReliveCostDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relivecostdelta_)));
          set_has_relivecostdelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_BulletBaseCost;
        break;
      }

      // required uint32 BulletBaseCost = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletBaseCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletbasecost_)));
          set_has_bulletbasecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_BulletCostDelta;
        break;
      }

      // required uint32 BulletCostDelta = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BulletCostDelta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bulletcostdelta_)));
          set_has_bulletcostdelta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 WeaponEatRadio = 1;
  if (has_weaponeatradio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->weaponeatradio(), output);
  }

  // required uint32 CarCostGold = 2;
  if (has_carcostgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->carcostgold(), output);
  }

  // required uint32 BuyManualGold = 3;
  if (has_buymanualgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buymanualgold(), output);
  }

  // required uint32 Manual = 4;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->manual(), output);
  }

  // required uint32 DailyTaskReflashCost = 5;
  if (has_dailytaskreflashcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dailytaskreflashcost(), output);
  }

  // required uint32 DailyTaskReflashCnt = 6;
  if (has_dailytaskreflashcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dailytaskreflashcnt(), output);
  }

  // required uint32 CreateGuildCostCoin = 7;
  if (has_createguildcostcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->createguildcostcoin(), output);
  }

  // required uint32 WeaponExpCoinCost = 8;
  if (has_weaponexpcoincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->weaponexpcoincost(), output);
  }

  // required uint32 WeaponLotNormalTime = 9;
  if (has_weaponlotnormaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->weaponlotnormaltime(), output);
  }

  // required uint32 WeaponLotAdvanceTime = 10;
  if (has_weaponlotadvancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weaponlotadvancetime(), output);
  }

  // required uint32 WeaponLotNormalGold = 11;
  if (has_weaponlotnormalgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weaponlotnormalgold(), output);
  }

  // required uint32 WeaponLotAdvanceGold = 12;
  if (has_weaponlotadvancegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weaponlotadvancegold(), output);
  }

  // required string AwardRankTime = 13;
  if (has_awardranktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->awardranktime(), output);
  }

  // required uint32 PowerStoneID = 14;
  if (has_powerstoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->powerstoneid(), output);
  }

  // required uint32 InfiniteManual = 15;
  if (has_infinitemanual()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->infinitemanual(), output);
  }

  // required uint32 WaveCoin = 16;
  if (has_wavecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->wavecoin(), output);
  }

  // required uint32 WeaponBatLotDiscount = 17;
  if (has_weaponbatlotdiscount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->weaponbatlotdiscount(), output);
  }

  // required uint32 SweepOnOff = 18;
  if (has_sweeponoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->sweeponoff(), output);
  }

  // required uint32 ArenaStoreRefreshTime = 19;
  if (has_arenastorerefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->arenastorerefreshtime(), output);
  }

  // required uint32 FreeQiangHunCnt = 20;
  if (has_freeqianghuncnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->freeqianghuncnt(), output);
  }

  // required uint32 GoldQiangHun = 21;
  if (has_goldqianghun()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->goldqianghun(), output);
  }

  // required uint32 WeaponLotNormalCoin = 22;
  if (has_weaponlotnormalcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->weaponlotnormalcoin(), output);
  }

  // required uint32 NihilityDropProb = 24;
  if (has_nihilitydropprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->nihilitydropprob(), output);
  }

  // required uint32 NihilityBaseGold = 25;
  if (has_nihilitybasegold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->nihilitybasegold(), output);
  }

  // required uint32 Equipexpcoincost = 26;
  if (has_equipexpcoincost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->equipexpcoincost(), output);
  }

  // required uint32 EquipEatRadio = 27;
  if (has_equipeatradio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->equipeatradio(), output);
  }

  // required uint32 ArenaLoseScore = 28;
  if (has_arenalosescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->arenalosescore(), output);
  }

  // required uint32 ArenaOppLoseScore = 29;
  if (has_arenaopplosescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->arenaopplosescore(), output);
  }

  // required uint32 ArenaOppLoseCoinRadio = 30;
  if (has_arenaopplosecoinradio()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->arenaopplosecoinradio(), output);
  }

  // required uint32 ArenaOppMaxLoseCnt = 31;
  if (has_arenaoppmaxlosecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->arenaoppmaxlosecnt(), output);
  }

  // required uint32 ArenaWinScore = 32;
  if (has_arenawinscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->arenawinscore(), output);
  }

  // required uint32 ArenaCleanCDCost = 33;
  if (has_arenacleancdcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->arenacleancdcost(), output);
  }

  // required uint32 FirstChargeGiftPkg = 34;
  if (has_firstchargegiftpkg()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->firstchargegiftpkg(), output);
  }

  // required uint32 WeaponLotVIPCost = 35;
  if (has_weaponlotvipcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(35, this->weaponlotvipcost(), output);
  }

  // required uint32 DailyInstanceManualCost = 36;
  if (has_dailyinstancemanualcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(36, this->dailyinstancemanualcost(), output);
  }

  // required uint32 BuyManualGoldAdd = 37;
  if (has_buymanualgoldadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->buymanualgoldadd(), output);
  }

  // required uint32 Relive1stCost = 38;
  if (has_relive1stcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->relive1stcost(), output);
  }

  // required uint32 Relive2ndCost = 39;
  if (has_relive2ndcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(39, this->relive2ndcost(), output);
  }

  // required uint32 Relive3rdCost = 40;
  if (has_relive3rdcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->relive3rdcost(), output);
  }

  // required uint32 ReliveCostDelta = 41;
  if (has_relivecostdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(41, this->relivecostdelta(), output);
  }

  // required uint32 BulletBaseCost = 42;
  if (has_bulletbasecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(42, this->bulletbasecost(), output);
  }

  // required uint32 BulletCostDelta = 43;
  if (has_bulletcostdelta()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(43, this->bulletcostdelta(), output);
  }

}

int GlobalCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 WeaponEatRadio = 1;
    if (has_weaponeatradio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponeatradio());
    }

    // required uint32 CarCostGold = 2;
    if (has_carcostgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carcostgold());
    }

    // required uint32 BuyManualGold = 3;
    if (has_buymanualgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buymanualgold());
    }

    // required uint32 Manual = 4;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manual());
    }

    // required uint32 DailyTaskReflashCost = 5;
    if (has_dailytaskreflashcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailytaskreflashcost());
    }

    // required uint32 DailyTaskReflashCnt = 6;
    if (has_dailytaskreflashcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailytaskreflashcnt());
    }

    // required uint32 CreateGuildCostCoin = 7;
    if (has_createguildcostcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createguildcostcoin());
    }

    // required uint32 WeaponExpCoinCost = 8;
    if (has_weaponexpcoincost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponexpcoincost());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 WeaponLotNormalTime = 9;
    if (has_weaponlotnormaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlotnormaltime());
    }

    // required uint32 WeaponLotAdvanceTime = 10;
    if (has_weaponlotadvancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlotadvancetime());
    }

    // required uint32 WeaponLotNormalGold = 11;
    if (has_weaponlotnormalgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlotnormalgold());
    }

    // required uint32 WeaponLotAdvanceGold = 12;
    if (has_weaponlotadvancegold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlotadvancegold());
    }

    // required string AwardRankTime = 13;
    if (has_awardranktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awardranktime());
    }

    // required uint32 PowerStoneID = 14;
    if (has_powerstoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->powerstoneid());
    }

    // required uint32 InfiniteManual = 15;
    if (has_infinitemanual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->infinitemanual());
    }

    // required uint32 WaveCoin = 16;
    if (has_wavecoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wavecoin());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 WeaponBatLotDiscount = 17;
    if (has_weaponbatlotdiscount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponbatlotdiscount());
    }

    // required uint32 SweepOnOff = 18;
    if (has_sweeponoff()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sweeponoff());
    }

    // required uint32 ArenaStoreRefreshTime = 19;
    if (has_arenastorerefreshtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenastorerefreshtime());
    }

    // required uint32 FreeQiangHunCnt = 20;
    if (has_freeqianghuncnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freeqianghuncnt());
    }

    // required uint32 GoldQiangHun = 21;
    if (has_goldqianghun()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldqianghun());
    }

    // required uint32 WeaponLotNormalCoin = 22;
    if (has_weaponlotnormalcoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlotnormalcoin());
    }

    // required uint32 NihilityDropProb = 24;
    if (has_nihilitydropprob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nihilitydropprob());
    }

    // required uint32 NihilityBaseGold = 25;
    if (has_nihilitybasegold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nihilitybasegold());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required uint32 Equipexpcoincost = 26;
    if (has_equipexpcoincost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipexpcoincost());
    }

    // required uint32 EquipEatRadio = 27;
    if (has_equipeatradio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipeatradio());
    }

    // required uint32 ArenaLoseScore = 28;
    if (has_arenalosescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenalosescore());
    }

    // required uint32 ArenaOppLoseScore = 29;
    if (has_arenaopplosescore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaopplosescore());
    }

    // required uint32 ArenaOppLoseCoinRadio = 30;
    if (has_arenaopplosecoinradio()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaopplosecoinradio());
    }

    // required uint32 ArenaOppMaxLoseCnt = 31;
    if (has_arenaoppmaxlosecnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenaoppmaxlosecnt());
    }

    // required uint32 ArenaWinScore = 32;
    if (has_arenawinscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenawinscore());
    }

    // required uint32 ArenaCleanCDCost = 33;
    if (has_arenacleancdcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arenacleancdcost());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required uint32 FirstChargeGiftPkg = 34;
    if (has_firstchargegiftpkg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstchargegiftpkg());
    }

    // required uint32 WeaponLotVIPCost = 35;
    if (has_weaponlotvipcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponlotvipcost());
    }

    // required uint32 DailyInstanceManualCost = 36;
    if (has_dailyinstancemanualcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyinstancemanualcost());
    }

    // required uint32 BuyManualGoldAdd = 37;
    if (has_buymanualgoldadd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buymanualgoldadd());
    }

    // required uint32 Relive1stCost = 38;
    if (has_relive1stcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relive1stcost());
    }

    // required uint32 Relive2ndCost = 39;
    if (has_relive2ndcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relive2ndcost());
    }

    // required uint32 Relive3rdCost = 40;
    if (has_relive3rdcost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relive3rdcost());
    }

    // required uint32 ReliveCostDelta = 41;
    if (has_relivecostdelta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relivecostdelta());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required uint32 BulletBaseCost = 42;
    if (has_bulletbasecost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletbasecost());
    }

    // required uint32 BulletCostDelta = 43;
    if (has_bulletcostdelta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bulletcostdelta());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GlobalCfg*>(&from));
}

void GlobalCfg::MergeFrom(const GlobalCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_weaponeatradio()) {
      set_weaponeatradio(from.weaponeatradio());
    }
    if (from.has_carcostgold()) {
      set_carcostgold(from.carcostgold());
    }
    if (from.has_buymanualgold()) {
      set_buymanualgold(from.buymanualgold());
    }
    if (from.has_manual()) {
      set_manual(from.manual());
    }
    if (from.has_dailytaskreflashcost()) {
      set_dailytaskreflashcost(from.dailytaskreflashcost());
    }
    if (from.has_dailytaskreflashcnt()) {
      set_dailytaskreflashcnt(from.dailytaskreflashcnt());
    }
    if (from.has_createguildcostcoin()) {
      set_createguildcostcoin(from.createguildcostcoin());
    }
    if (from.has_weaponexpcoincost()) {
      set_weaponexpcoincost(from.weaponexpcoincost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weaponlotnormaltime()) {
      set_weaponlotnormaltime(from.weaponlotnormaltime());
    }
    if (from.has_weaponlotadvancetime()) {
      set_weaponlotadvancetime(from.weaponlotadvancetime());
    }
    if (from.has_weaponlotnormalgold()) {
      set_weaponlotnormalgold(from.weaponlotnormalgold());
    }
    if (from.has_weaponlotadvancegold()) {
      set_weaponlotadvancegold(from.weaponlotadvancegold());
    }
    if (from.has_awardranktime()) {
      set_awardranktime(from.awardranktime());
    }
    if (from.has_powerstoneid()) {
      set_powerstoneid(from.powerstoneid());
    }
    if (from.has_infinitemanual()) {
      set_infinitemanual(from.infinitemanual());
    }
    if (from.has_wavecoin()) {
      set_wavecoin(from.wavecoin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_weaponbatlotdiscount()) {
      set_weaponbatlotdiscount(from.weaponbatlotdiscount());
    }
    if (from.has_sweeponoff()) {
      set_sweeponoff(from.sweeponoff());
    }
    if (from.has_arenastorerefreshtime()) {
      set_arenastorerefreshtime(from.arenastorerefreshtime());
    }
    if (from.has_freeqianghuncnt()) {
      set_freeqianghuncnt(from.freeqianghuncnt());
    }
    if (from.has_goldqianghun()) {
      set_goldqianghun(from.goldqianghun());
    }
    if (from.has_weaponlotnormalcoin()) {
      set_weaponlotnormalcoin(from.weaponlotnormalcoin());
    }
    if (from.has_nihilitydropprob()) {
      set_nihilitydropprob(from.nihilitydropprob());
    }
    if (from.has_nihilitybasegold()) {
      set_nihilitybasegold(from.nihilitybasegold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_equipexpcoincost()) {
      set_equipexpcoincost(from.equipexpcoincost());
    }
    if (from.has_equipeatradio()) {
      set_equipeatradio(from.equipeatradio());
    }
    if (from.has_arenalosescore()) {
      set_arenalosescore(from.arenalosescore());
    }
    if (from.has_arenaopplosescore()) {
      set_arenaopplosescore(from.arenaopplosescore());
    }
    if (from.has_arenaopplosecoinradio()) {
      set_arenaopplosecoinradio(from.arenaopplosecoinradio());
    }
    if (from.has_arenaoppmaxlosecnt()) {
      set_arenaoppmaxlosecnt(from.arenaoppmaxlosecnt());
    }
    if (from.has_arenawinscore()) {
      set_arenawinscore(from.arenawinscore());
    }
    if (from.has_arenacleancdcost()) {
      set_arenacleancdcost(from.arenacleancdcost());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_firstchargegiftpkg()) {
      set_firstchargegiftpkg(from.firstchargegiftpkg());
    }
    if (from.has_weaponlotvipcost()) {
      set_weaponlotvipcost(from.weaponlotvipcost());
    }
    if (from.has_dailyinstancemanualcost()) {
      set_dailyinstancemanualcost(from.dailyinstancemanualcost());
    }
    if (from.has_buymanualgoldadd()) {
      set_buymanualgoldadd(from.buymanualgoldadd());
    }
    if (from.has_relive1stcost()) {
      set_relive1stcost(from.relive1stcost());
    }
    if (from.has_relive2ndcost()) {
      set_relive2ndcost(from.relive2ndcost());
    }
    if (from.has_relive3rdcost()) {
      set_relive3rdcost(from.relive3rdcost());
    }
    if (from.has_relivecostdelta()) {
      set_relivecostdelta(from.relivecostdelta());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_bulletbasecost()) {
      set_bulletbasecost(from.bulletbasecost());
    }
    if (from.has_bulletcostdelta()) {
      set_bulletcostdelta(from.bulletcostdelta());
    }
  }
}

void GlobalCfg::CopyFrom(const GlobalCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0xffffffff) != 0xffffffff) return false;
  if ((_has_bits_[1] & 0x000003ff) != 0x000003ff) return false;

  return true;
}

void GlobalCfg::Swap(GlobalCfg* other) {
  if (other != this) {
    std::swap(weaponeatradio_, other->weaponeatradio_);
    std::swap(carcostgold_, other->carcostgold_);
    std::swap(buymanualgold_, other->buymanualgold_);
    std::swap(manual_, other->manual_);
    std::swap(dailytaskreflashcost_, other->dailytaskreflashcost_);
    std::swap(dailytaskreflashcnt_, other->dailytaskreflashcnt_);
    std::swap(createguildcostcoin_, other->createguildcostcoin_);
    std::swap(weaponexpcoincost_, other->weaponexpcoincost_);
    std::swap(weaponlotnormaltime_, other->weaponlotnormaltime_);
    std::swap(weaponlotadvancetime_, other->weaponlotadvancetime_);
    std::swap(weaponlotnormalgold_, other->weaponlotnormalgold_);
    std::swap(weaponlotadvancegold_, other->weaponlotadvancegold_);
    std::swap(awardranktime_, other->awardranktime_);
    std::swap(powerstoneid_, other->powerstoneid_);
    std::swap(infinitemanual_, other->infinitemanual_);
    std::swap(wavecoin_, other->wavecoin_);
    std::swap(weaponbatlotdiscount_, other->weaponbatlotdiscount_);
    std::swap(sweeponoff_, other->sweeponoff_);
    std::swap(arenastorerefreshtime_, other->arenastorerefreshtime_);
    std::swap(freeqianghuncnt_, other->freeqianghuncnt_);
    std::swap(goldqianghun_, other->goldqianghun_);
    std::swap(weaponlotnormalcoin_, other->weaponlotnormalcoin_);
    std::swap(nihilitydropprob_, other->nihilitydropprob_);
    std::swap(nihilitybasegold_, other->nihilitybasegold_);
    std::swap(equipexpcoincost_, other->equipexpcoincost_);
    std::swap(equipeatradio_, other->equipeatradio_);
    std::swap(arenalosescore_, other->arenalosescore_);
    std::swap(arenaopplosescore_, other->arenaopplosescore_);
    std::swap(arenaopplosecoinradio_, other->arenaopplosecoinradio_);
    std::swap(arenaoppmaxlosecnt_, other->arenaoppmaxlosecnt_);
    std::swap(arenawinscore_, other->arenawinscore_);
    std::swap(arenacleancdcost_, other->arenacleancdcost_);
    std::swap(firstchargegiftpkg_, other->firstchargegiftpkg_);
    std::swap(weaponlotvipcost_, other->weaponlotvipcost_);
    std::swap(dailyinstancemanualcost_, other->dailyinstancemanualcost_);
    std::swap(buymanualgoldadd_, other->buymanualgoldadd_);
    std::swap(relive1stcost_, other->relive1stcost_);
    std::swap(relive2ndcost_, other->relive2ndcost_);
    std::swap(relive3rdcost_, other->relive3rdcost_);
    std::swap(relivecostdelta_, other->relivecostdelta_);
    std::swap(bulletbasecost_, other->bulletbasecost_);
    std::swap(bulletcostdelta_, other->bulletcostdelta_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GlobalCfg::GetTypeName() const {
  return "com.cfg.vo.GlobalCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalCfgSet::kGlobalcfgFieldNumber;
#endif  // !_MSC_VER

GlobalCfgSet::GlobalCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void GlobalCfgSet::InitAsDefaultInstance() {
}

GlobalCfgSet::GlobalCfgSet(const GlobalCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalCfgSet::~GlobalCfgSet() {
  SharedDtor();
}

void GlobalCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void GlobalCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GlobalCfgSet& GlobalCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_GlobalCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_GlobalCfg_2eproto();
#endif
  return *default_instance_;
}

GlobalCfgSet* GlobalCfgSet::default_instance_ = NULL;

GlobalCfgSet* GlobalCfgSet::New() const {
  return new GlobalCfgSet;
}

void GlobalCfgSet::Clear() {
  globalcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool GlobalCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.GlobalCfg globalcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_globalcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_globalcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_globalcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.GlobalCfg globalcfg = 1;
  for (int i = 0; i < this->globalcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->globalcfg(i), output);
  }

}

int GlobalCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.GlobalCfg globalcfg = 1;
  total_size += 1 * this->globalcfg_size();
  for (int i = 0; i < this->globalcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->globalcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GlobalCfgSet*>(&from));
}

void GlobalCfgSet::MergeFrom(const GlobalCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  globalcfg_.MergeFrom(from.globalcfg_);
}

void GlobalCfgSet::CopyFrom(const GlobalCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalCfgSet::IsInitialized() const {

  for (int i = 0; i < globalcfg_size(); i++) {
    if (!this->globalcfg(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalCfgSet::Swap(GlobalCfgSet* other) {
  if (other != this) {
    globalcfg_.Swap(&other->globalcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string GlobalCfgSet::GetTypeName() const {
  return "com.cfg.vo.GlobalCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
