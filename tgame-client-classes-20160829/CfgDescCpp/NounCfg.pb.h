// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NounCfg.proto

#ifndef PROTOBUF_NounCfg_2eproto__INCLUDED
#define PROTOBUF_NounCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NounCfg_2eproto();
void protobuf_AssignDesc_NounCfg_2eproto();
void protobuf_ShutdownFile_NounCfg_2eproto();

class NounCfg;
class NounCfgSet;

// ===================================================================

class NounCfg : public ::google::protobuf::MessageLite {
 public:
  NounCfg();
  virtual ~NounCfg();

  NounCfg(const NounCfg& from);

  inline NounCfg& operator=(const NounCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const NounCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NounCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NounCfg* other);

  // implements Message ----------------------------------------------

  NounCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NounCfg& from);
  void MergeFrom(const NounCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::uint32 key() const;
  inline void set_key(::google::protobuf::uint32 value);

  // required string Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.NounCfg)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::std::string* value_;
  ::google::protobuf::uint32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NounCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NounCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NounCfg_2eproto();
  friend void protobuf_ShutdownFile_NounCfg_2eproto();

  void InitAsDefaultInstance();
  static NounCfg* default_instance_;
};
// -------------------------------------------------------------------

class NounCfgSet : public ::google::protobuf::MessageLite {
 public:
  NounCfgSet();
  virtual ~NounCfgSet();

  NounCfgSet(const NounCfgSet& from);

  inline NounCfgSet& operator=(const NounCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const NounCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NounCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NounCfgSet* other);

  // implements Message ----------------------------------------------

  NounCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NounCfgSet& from);
  void MergeFrom(const NounCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.NounCfg nouncfg = 1;
  inline int nouncfg_size() const;
  inline void clear_nouncfg();
  static const int kNouncfgFieldNumber = 1;
  inline const ::com::cfg::vo::NounCfg& nouncfg(int index) const;
  inline ::com::cfg::vo::NounCfg* mutable_nouncfg(int index);
  inline ::com::cfg::vo::NounCfg* add_nouncfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NounCfg >&
      nouncfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NounCfg >*
      mutable_nouncfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.NounCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NounCfg > nouncfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NounCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NounCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NounCfg_2eproto();
  friend void protobuf_ShutdownFile_NounCfg_2eproto();

  void InitAsDefaultInstance();
  static NounCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// NounCfg

// required uint32 Key = 1;
inline bool NounCfg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NounCfg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NounCfg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NounCfg::clear_key() {
  key_ = 0u;
  clear_has_key();
}
inline ::google::protobuf::uint32 NounCfg::key() const {
  return key_;
}
inline void NounCfg::set_key(::google::protobuf::uint32 value) {
  set_has_key();
  key_ = value;
}

// required string Value = 2;
inline bool NounCfg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NounCfg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NounCfg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NounCfg::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& NounCfg::value() const {
  return *value_;
}
inline void NounCfg::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void NounCfg::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void NounCfg::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NounCfg::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* NounCfg::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NounCfg::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NounCfgSet

// repeated .com.cfg.vo.NounCfg nouncfg = 1;
inline int NounCfgSet::nouncfg_size() const {
  return nouncfg_.size();
}
inline void NounCfgSet::clear_nouncfg() {
  nouncfg_.Clear();
}
inline const ::com::cfg::vo::NounCfg& NounCfgSet::nouncfg(int index) const {
  return nouncfg_.Get(index);
}
inline ::com::cfg::vo::NounCfg* NounCfgSet::mutable_nouncfg(int index) {
  return nouncfg_.Mutable(index);
}
inline ::com::cfg::vo::NounCfg* NounCfgSet::add_nouncfg() {
  return nouncfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NounCfg >&
NounCfgSet::nouncfg() const {
  return nouncfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NounCfg >*
NounCfgSet::mutable_nouncfg() {
  return &nouncfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NounCfg_2eproto__INCLUDED
