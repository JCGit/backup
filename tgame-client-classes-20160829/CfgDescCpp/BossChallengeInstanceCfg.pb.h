// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BossChallengeInstanceCfg.proto

#ifndef PROTOBUF_BossChallengeInstanceCfg_2eproto__INCLUDED
#define PROTOBUF_BossChallengeInstanceCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BossChallengeInstanceCfg_2eproto();
void protobuf_AssignDesc_BossChallengeInstanceCfg_2eproto();
void protobuf_ShutdownFile_BossChallengeInstanceCfg_2eproto();

class BossChallengeCfg;
class BossChallengeCfgSet;

// ===================================================================

class BossChallengeCfg : public ::google::protobuf::MessageLite {
 public:
  BossChallengeCfg();
  virtual ~BossChallengeCfg();

  BossChallengeCfg(const BossChallengeCfg& from);

  inline BossChallengeCfg& operator=(const BossChallengeCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const BossChallengeCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BossChallengeCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BossChallengeCfg* other);

  // implements Message ----------------------------------------------

  BossChallengeCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BossChallengeCfg& from);
  void MergeFrom(const BossChallengeCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ChallengeType = 1;
  inline bool has_challengetype() const;
  inline void clear_challengetype();
  static const int kChallengeTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 challengetype() const;
  inline void set_challengetype(::google::protobuf::uint32 value);

  // repeated uint32 TopRankerAwardPkgs = 2;
  inline int toprankerawardpkgs_size() const;
  inline void clear_toprankerawardpkgs();
  static const int kTopRankerAwardPkgsFieldNumber = 2;
  inline ::google::protobuf::uint32 toprankerawardpkgs(int index) const;
  inline void set_toprankerawardpkgs(int index, ::google::protobuf::uint32 value);
  inline void add_toprankerawardpkgs(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      toprankerawardpkgs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_toprankerawardpkgs();

  // required uint32 AttendeeAwardPkg = 3;
  inline bool has_attendeeawardpkg() const;
  inline void clear_attendeeawardpkg();
  static const int kAttendeeAwardPkgFieldNumber = 3;
  inline ::google::protobuf::uint32 attendeeawardpkg() const;
  inline void set_attendeeawardpkg(::google::protobuf::uint32 value);

  // required uint32 StartNotifyID = 4;
  inline bool has_startnotifyid() const;
  inline void clear_startnotifyid();
  static const int kStartNotifyIDFieldNumber = 4;
  inline ::google::protobuf::uint32 startnotifyid() const;
  inline void set_startnotifyid(::google::protobuf::uint32 value);

  // required uint32 SuccessNotifyID = 5;
  inline bool has_successnotifyid() const;
  inline void clear_successnotifyid();
  static const int kSuccessNotifyIDFieldNumber = 5;
  inline ::google::protobuf::uint32 successnotifyid() const;
  inline void set_successnotifyid(::google::protobuf::uint32 value);

  // required uint32 PrepareNotifyID = 6;
  inline bool has_preparenotifyid() const;
  inline void clear_preparenotifyid();
  static const int kPrepareNotifyIDFieldNumber = 6;
  inline ::google::protobuf::uint32 preparenotifyid() const;
  inline void set_preparenotifyid(::google::protobuf::uint32 value);

  // required uint32 FailNotifyID = 7;
  inline bool has_failnotifyid() const;
  inline void clear_failnotifyid();
  static const int kFailNotifyIDFieldNumber = 7;
  inline ::google::protobuf::uint32 failnotifyid() const;
  inline void set_failnotifyid(::google::protobuf::uint32 value);

  // required string ActName = 8;
  inline bool has_actname() const;
  inline void clear_actname();
  static const int kActNameFieldNumber = 8;
  inline const ::std::string& actname() const;
  inline void set_actname(const ::std::string& value);
  inline void set_actname(const char* value);
  inline void set_actname(const char* value, size_t size);
  inline ::std::string* mutable_actname();
  inline ::std::string* release_actname();
  inline void set_allocated_actname(::std::string* actname);

  // required uint32 ReliveCost = 9;
  inline bool has_relivecost() const;
  inline void clear_relivecost();
  static const int kReliveCostFieldNumber = 9;
  inline ::google::protobuf::uint32 relivecost() const;
  inline void set_relivecost(::google::protobuf::uint32 value);

  // required uint32 ReliveTime = 10;
  inline bool has_relivetime() const;
  inline void clear_relivetime();
  static const int kReliveTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 relivetime() const;
  inline void set_relivetime(::google::protobuf::uint32 value);

  // required uint32 DelegateCost = 11;
  inline bool has_delegatecost() const;
  inline void clear_delegatecost();
  static const int kDelegateCostFieldNumber = 11;
  inline ::google::protobuf::uint32 delegatecost() const;
  inline void set_delegatecost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.BossChallengeCfg)
 private:
  inline void set_has_challengetype();
  inline void clear_has_challengetype();
  inline void set_has_attendeeawardpkg();
  inline void clear_has_attendeeawardpkg();
  inline void set_has_startnotifyid();
  inline void clear_has_startnotifyid();
  inline void set_has_successnotifyid();
  inline void clear_has_successnotifyid();
  inline void set_has_preparenotifyid();
  inline void clear_has_preparenotifyid();
  inline void set_has_failnotifyid();
  inline void clear_has_failnotifyid();
  inline void set_has_actname();
  inline void clear_has_actname();
  inline void set_has_relivecost();
  inline void clear_has_relivecost();
  inline void set_has_relivetime();
  inline void clear_has_relivetime();
  inline void set_has_delegatecost();
  inline void clear_has_delegatecost();

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > toprankerawardpkgs_;
  ::google::protobuf::uint32 challengetype_;
  ::google::protobuf::uint32 attendeeawardpkg_;
  ::google::protobuf::uint32 startnotifyid_;
  ::google::protobuf::uint32 successnotifyid_;
  ::google::protobuf::uint32 preparenotifyid_;
  ::google::protobuf::uint32 failnotifyid_;
  ::std::string* actname_;
  ::google::protobuf::uint32 relivecost_;
  ::google::protobuf::uint32 relivetime_;
  ::google::protobuf::uint32 delegatecost_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BossChallengeInstanceCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BossChallengeInstanceCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_BossChallengeInstanceCfg_2eproto();
  friend void protobuf_ShutdownFile_BossChallengeInstanceCfg_2eproto();

  void InitAsDefaultInstance();
  static BossChallengeCfg* default_instance_;
};
// -------------------------------------------------------------------

class BossChallengeCfgSet : public ::google::protobuf::MessageLite {
 public:
  BossChallengeCfgSet();
  virtual ~BossChallengeCfgSet();

  BossChallengeCfgSet(const BossChallengeCfgSet& from);

  inline BossChallengeCfgSet& operator=(const BossChallengeCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const BossChallengeCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const BossChallengeCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(BossChallengeCfgSet* other);

  // implements Message ----------------------------------------------

  BossChallengeCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const BossChallengeCfgSet& from);
  void MergeFrom(const BossChallengeCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.BossChallengeCfg bosschallengecfgset = 1;
  inline int bosschallengecfgset_size() const;
  inline void clear_bosschallengecfgset();
  static const int kBosschallengecfgsetFieldNumber = 1;
  inline const ::com::cfg::vo::BossChallengeCfg& bosschallengecfgset(int index) const;
  inline ::com::cfg::vo::BossChallengeCfg* mutable_bosschallengecfgset(int index);
  inline ::com::cfg::vo::BossChallengeCfg* add_bosschallengecfgset();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::BossChallengeCfg >&
      bosschallengecfgset() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::BossChallengeCfg >*
      mutable_bosschallengecfgset();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.BossChallengeCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::BossChallengeCfg > bosschallengecfgset_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_BossChallengeInstanceCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_BossChallengeInstanceCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_BossChallengeInstanceCfg_2eproto();
  friend void protobuf_ShutdownFile_BossChallengeInstanceCfg_2eproto();

  void InitAsDefaultInstance();
  static BossChallengeCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// BossChallengeCfg

// required uint32 ChallengeType = 1;
inline bool BossChallengeCfg::has_challengetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossChallengeCfg::set_has_challengetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossChallengeCfg::clear_has_challengetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossChallengeCfg::clear_challengetype() {
  challengetype_ = 0u;
  clear_has_challengetype();
}
inline ::google::protobuf::uint32 BossChallengeCfg::challengetype() const {
  return challengetype_;
}
inline void BossChallengeCfg::set_challengetype(::google::protobuf::uint32 value) {
  set_has_challengetype();
  challengetype_ = value;
}

// repeated uint32 TopRankerAwardPkgs = 2;
inline int BossChallengeCfg::toprankerawardpkgs_size() const {
  return toprankerawardpkgs_.size();
}
inline void BossChallengeCfg::clear_toprankerawardpkgs() {
  toprankerawardpkgs_.Clear();
}
inline ::google::protobuf::uint32 BossChallengeCfg::toprankerawardpkgs(int index) const {
  return toprankerawardpkgs_.Get(index);
}
inline void BossChallengeCfg::set_toprankerawardpkgs(int index, ::google::protobuf::uint32 value) {
  toprankerawardpkgs_.Set(index, value);
}
inline void BossChallengeCfg::add_toprankerawardpkgs(::google::protobuf::uint32 value) {
  toprankerawardpkgs_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BossChallengeCfg::toprankerawardpkgs() const {
  return toprankerawardpkgs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BossChallengeCfg::mutable_toprankerawardpkgs() {
  return &toprankerawardpkgs_;
}

// required uint32 AttendeeAwardPkg = 3;
inline bool BossChallengeCfg::has_attendeeawardpkg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossChallengeCfg::set_has_attendeeawardpkg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossChallengeCfg::clear_has_attendeeawardpkg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossChallengeCfg::clear_attendeeawardpkg() {
  attendeeawardpkg_ = 0u;
  clear_has_attendeeawardpkg();
}
inline ::google::protobuf::uint32 BossChallengeCfg::attendeeawardpkg() const {
  return attendeeawardpkg_;
}
inline void BossChallengeCfg::set_attendeeawardpkg(::google::protobuf::uint32 value) {
  set_has_attendeeawardpkg();
  attendeeawardpkg_ = value;
}

// required uint32 StartNotifyID = 4;
inline bool BossChallengeCfg::has_startnotifyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossChallengeCfg::set_has_startnotifyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossChallengeCfg::clear_has_startnotifyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossChallengeCfg::clear_startnotifyid() {
  startnotifyid_ = 0u;
  clear_has_startnotifyid();
}
inline ::google::protobuf::uint32 BossChallengeCfg::startnotifyid() const {
  return startnotifyid_;
}
inline void BossChallengeCfg::set_startnotifyid(::google::protobuf::uint32 value) {
  set_has_startnotifyid();
  startnotifyid_ = value;
}

// required uint32 SuccessNotifyID = 5;
inline bool BossChallengeCfg::has_successnotifyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BossChallengeCfg::set_has_successnotifyid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BossChallengeCfg::clear_has_successnotifyid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BossChallengeCfg::clear_successnotifyid() {
  successnotifyid_ = 0u;
  clear_has_successnotifyid();
}
inline ::google::protobuf::uint32 BossChallengeCfg::successnotifyid() const {
  return successnotifyid_;
}
inline void BossChallengeCfg::set_successnotifyid(::google::protobuf::uint32 value) {
  set_has_successnotifyid();
  successnotifyid_ = value;
}

// required uint32 PrepareNotifyID = 6;
inline bool BossChallengeCfg::has_preparenotifyid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BossChallengeCfg::set_has_preparenotifyid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BossChallengeCfg::clear_has_preparenotifyid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BossChallengeCfg::clear_preparenotifyid() {
  preparenotifyid_ = 0u;
  clear_has_preparenotifyid();
}
inline ::google::protobuf::uint32 BossChallengeCfg::preparenotifyid() const {
  return preparenotifyid_;
}
inline void BossChallengeCfg::set_preparenotifyid(::google::protobuf::uint32 value) {
  set_has_preparenotifyid();
  preparenotifyid_ = value;
}

// required uint32 FailNotifyID = 7;
inline bool BossChallengeCfg::has_failnotifyid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BossChallengeCfg::set_has_failnotifyid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BossChallengeCfg::clear_has_failnotifyid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BossChallengeCfg::clear_failnotifyid() {
  failnotifyid_ = 0u;
  clear_has_failnotifyid();
}
inline ::google::protobuf::uint32 BossChallengeCfg::failnotifyid() const {
  return failnotifyid_;
}
inline void BossChallengeCfg::set_failnotifyid(::google::protobuf::uint32 value) {
  set_has_failnotifyid();
  failnotifyid_ = value;
}

// required string ActName = 8;
inline bool BossChallengeCfg::has_actname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BossChallengeCfg::set_has_actname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BossChallengeCfg::clear_has_actname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BossChallengeCfg::clear_actname() {
  if (actname_ != &::google::protobuf::internal::kEmptyString) {
    actname_->clear();
  }
  clear_has_actname();
}
inline const ::std::string& BossChallengeCfg::actname() const {
  return *actname_;
}
inline void BossChallengeCfg::set_actname(const ::std::string& value) {
  set_has_actname();
  if (actname_ == &::google::protobuf::internal::kEmptyString) {
    actname_ = new ::std::string;
  }
  actname_->assign(value);
}
inline void BossChallengeCfg::set_actname(const char* value) {
  set_has_actname();
  if (actname_ == &::google::protobuf::internal::kEmptyString) {
    actname_ = new ::std::string;
  }
  actname_->assign(value);
}
inline void BossChallengeCfg::set_actname(const char* value, size_t size) {
  set_has_actname();
  if (actname_ == &::google::protobuf::internal::kEmptyString) {
    actname_ = new ::std::string;
  }
  actname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossChallengeCfg::mutable_actname() {
  set_has_actname();
  if (actname_ == &::google::protobuf::internal::kEmptyString) {
    actname_ = new ::std::string;
  }
  return actname_;
}
inline ::std::string* BossChallengeCfg::release_actname() {
  clear_has_actname();
  if (actname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = actname_;
    actname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossChallengeCfg::set_allocated_actname(::std::string* actname) {
  if (actname_ != &::google::protobuf::internal::kEmptyString) {
    delete actname_;
  }
  if (actname) {
    set_has_actname();
    actname_ = actname;
  } else {
    clear_has_actname();
    actname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 ReliveCost = 9;
inline bool BossChallengeCfg::has_relivecost() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BossChallengeCfg::set_has_relivecost() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BossChallengeCfg::clear_has_relivecost() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BossChallengeCfg::clear_relivecost() {
  relivecost_ = 0u;
  clear_has_relivecost();
}
inline ::google::protobuf::uint32 BossChallengeCfg::relivecost() const {
  return relivecost_;
}
inline void BossChallengeCfg::set_relivecost(::google::protobuf::uint32 value) {
  set_has_relivecost();
  relivecost_ = value;
}

// required uint32 ReliveTime = 10;
inline bool BossChallengeCfg::has_relivetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BossChallengeCfg::set_has_relivetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BossChallengeCfg::clear_has_relivetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BossChallengeCfg::clear_relivetime() {
  relivetime_ = 0u;
  clear_has_relivetime();
}
inline ::google::protobuf::uint32 BossChallengeCfg::relivetime() const {
  return relivetime_;
}
inline void BossChallengeCfg::set_relivetime(::google::protobuf::uint32 value) {
  set_has_relivetime();
  relivetime_ = value;
}

// required uint32 DelegateCost = 11;
inline bool BossChallengeCfg::has_delegatecost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BossChallengeCfg::set_has_delegatecost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BossChallengeCfg::clear_has_delegatecost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BossChallengeCfg::clear_delegatecost() {
  delegatecost_ = 0u;
  clear_has_delegatecost();
}
inline ::google::protobuf::uint32 BossChallengeCfg::delegatecost() const {
  return delegatecost_;
}
inline void BossChallengeCfg::set_delegatecost(::google::protobuf::uint32 value) {
  set_has_delegatecost();
  delegatecost_ = value;
}

// -------------------------------------------------------------------

// BossChallengeCfgSet

// repeated .com.cfg.vo.BossChallengeCfg bosschallengecfgset = 1;
inline int BossChallengeCfgSet::bosschallengecfgset_size() const {
  return bosschallengecfgset_.size();
}
inline void BossChallengeCfgSet::clear_bosschallengecfgset() {
  bosschallengecfgset_.Clear();
}
inline const ::com::cfg::vo::BossChallengeCfg& BossChallengeCfgSet::bosschallengecfgset(int index) const {
  return bosschallengecfgset_.Get(index);
}
inline ::com::cfg::vo::BossChallengeCfg* BossChallengeCfgSet::mutable_bosschallengecfgset(int index) {
  return bosschallengecfgset_.Mutable(index);
}
inline ::com::cfg::vo::BossChallengeCfg* BossChallengeCfgSet::add_bosschallengecfgset() {
  return bosschallengecfgset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::BossChallengeCfg >&
BossChallengeCfgSet::bosschallengecfgset() const {
  return bosschallengecfgset_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::BossChallengeCfg >*
BossChallengeCfgSet::mutable_bosschallengecfgset() {
  return &bosschallengecfgset_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BossChallengeInstanceCfg_2eproto__INCLUDED
