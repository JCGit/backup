// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponTypeCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeaponTypeCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WeaponTypeCfg_2eproto() {
  delete WeaponTypeCfg::default_instance_;
  delete WeaponTypeCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WeaponTypeCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WeaponTypeCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  WeaponTypeCfg::default_instance_ = new WeaponTypeCfg();
  WeaponTypeCfgSet::default_instance_ = new WeaponTypeCfgSet();
  WeaponTypeCfg::default_instance_->InitAsDefaultInstance();
  WeaponTypeCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeaponTypeCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WeaponTypeCfg_2eproto_once_);
void protobuf_AddDesc_WeaponTypeCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WeaponTypeCfg_2eproto_once_,
                 &protobuf_AddDesc_WeaponTypeCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeaponTypeCfg_2eproto {
  StaticDescriptorInitializer_WeaponTypeCfg_2eproto() {
    protobuf_AddDesc_WeaponTypeCfg_2eproto();
  }
} static_descriptor_initializer_WeaponTypeCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WeaponTypeCfg::kTypeFieldNumber;
const int WeaponTypeCfg::kDescFieldNumber;
const int WeaponTypeCfg::kIconFieldNumber;
#endif  // !_MSC_VER

WeaponTypeCfg::WeaponTypeCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponTypeCfg::InitAsDefaultInstance() {
}

WeaponTypeCfg::WeaponTypeCfg(const WeaponTypeCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponTypeCfg::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponTypeCfg::~WeaponTypeCfg() {
  SharedDtor();
}

void WeaponTypeCfg::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponTypeCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponTypeCfg& WeaponTypeCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponTypeCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponTypeCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponTypeCfg* WeaponTypeCfg::default_instance_ = NULL;

WeaponTypeCfg* WeaponTypeCfg::New() const {
  return new WeaponTypeCfg;
}

void WeaponTypeCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponTypeCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Desc;
        break;
      }

      // required string Desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Icon;
        break;
      }

      // required string Icon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponTypeCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required string Desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // required string Icon = 3;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->icon(), output);
  }

}

int WeaponTypeCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required string Desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required string Icon = 3;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponTypeCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponTypeCfg*>(&from));
}

void WeaponTypeCfg::MergeFrom(const WeaponTypeCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
}

void WeaponTypeCfg::CopyFrom(const WeaponTypeCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponTypeCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WeaponTypeCfg::Swap(WeaponTypeCfg* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(desc_, other->desc_);
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponTypeCfg::GetTypeName() const {
  return "com.cfg.vo.WeaponTypeCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponTypeCfgSet::kWeaponTypeCfgFieldNumber;
#endif  // !_MSC_VER

WeaponTypeCfgSet::WeaponTypeCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponTypeCfgSet::InitAsDefaultInstance() {
}

WeaponTypeCfgSet::WeaponTypeCfgSet(const WeaponTypeCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponTypeCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponTypeCfgSet::~WeaponTypeCfgSet() {
  SharedDtor();
}

void WeaponTypeCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponTypeCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponTypeCfgSet& WeaponTypeCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponTypeCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponTypeCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponTypeCfgSet* WeaponTypeCfgSet::default_instance_ = NULL;

WeaponTypeCfgSet* WeaponTypeCfgSet::New() const {
  return new WeaponTypeCfgSet;
}

void WeaponTypeCfgSet::Clear() {
  weapontypecfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponTypeCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WeaponTypeCfg weaponTypeCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaponTypeCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weapontypecfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weaponTypeCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponTypeCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WeaponTypeCfg weaponTypeCfg = 1;
  for (int i = 0; i < this->weapontypecfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->weapontypecfg(i), output);
  }

}

int WeaponTypeCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WeaponTypeCfg weaponTypeCfg = 1;
  total_size += 1 * this->weapontypecfg_size();
  for (int i = 0; i < this->weapontypecfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weapontypecfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponTypeCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponTypeCfgSet*>(&from));
}

void WeaponTypeCfgSet::MergeFrom(const WeaponTypeCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  weapontypecfg_.MergeFrom(from.weapontypecfg_);
}

void WeaponTypeCfgSet::CopyFrom(const WeaponTypeCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponTypeCfgSet::IsInitialized() const {

  for (int i = 0; i < weapontypecfg_size(); i++) {
    if (!this->weapontypecfg(i).IsInitialized()) return false;
  }
  return true;
}

void WeaponTypeCfgSet::Swap(WeaponTypeCfgSet* other) {
  if (other != this) {
    weapontypecfg_.Swap(&other->weapontypecfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponTypeCfgSet::GetTypeName() const {
  return "com.cfg.vo.WeaponTypeCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
