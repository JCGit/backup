// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NameCfg.proto

#ifndef PROTOBUF_NameCfg_2eproto__INCLUDED
#define PROTOBUF_NameCfg_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_NameCfg_2eproto();
void protobuf_AssignDesc_NameCfg_2eproto();
void protobuf_ShutdownFile_NameCfg_2eproto();

class NameCfg;
class NameCfgSet;

// ===================================================================

class NameCfg : public ::google::protobuf::MessageLite {
 public:
  NameCfg();
  virtual ~NameCfg();

  NameCfg(const NameCfg& from);

  inline NameCfg& operator=(const NameCfg& from) {
    CopyFrom(from);
    return *this;
  }

  static const NameCfg& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NameCfg* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NameCfg* other);

  // implements Message ----------------------------------------------

  NameCfg* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NameCfg& from);
  void MergeFrom(const NameCfg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // required string FirstName = 2;
  inline bool has_firstname() const;
  inline void clear_firstname();
  static const int kFirstNameFieldNumber = 2;
  inline const ::std::string& firstname() const;
  inline void set_firstname(const ::std::string& value);
  inline void set_firstname(const char* value);
  inline void set_firstname(const char* value, size_t size);
  inline ::std::string* mutable_firstname();
  inline ::std::string* release_firstname();
  inline void set_allocated_firstname(::std::string* firstname);

  // required string SecondNameMale = 3;
  inline bool has_secondnamemale() const;
  inline void clear_secondnamemale();
  static const int kSecondNameMaleFieldNumber = 3;
  inline const ::std::string& secondnamemale() const;
  inline void set_secondnamemale(const ::std::string& value);
  inline void set_secondnamemale(const char* value);
  inline void set_secondnamemale(const char* value, size_t size);
  inline ::std::string* mutable_secondnamemale();
  inline ::std::string* release_secondnamemale();
  inline void set_allocated_secondnamemale(::std::string* secondnamemale);

  // required string SecondNameFemale = 4;
  inline bool has_secondnamefemale() const;
  inline void clear_secondnamefemale();
  static const int kSecondNameFemaleFieldNumber = 4;
  inline const ::std::string& secondnamefemale() const;
  inline void set_secondnamefemale(const ::std::string& value);
  inline void set_secondnamefemale(const char* value);
  inline void set_secondnamefemale(const char* value, size_t size);
  inline ::std::string* mutable_secondnamefemale();
  inline ::std::string* release_secondnamefemale();
  inline void set_allocated_secondnamefemale(::std::string* secondnamefemale);

  // @@protoc_insertion_point(class_scope:com.cfg.vo.NameCfg)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_firstname();
  inline void clear_has_firstname();
  inline void set_has_secondnamemale();
  inline void clear_has_secondnamemale();
  inline void set_has_secondnamefemale();
  inline void clear_has_secondnamefemale();

  ::std::string* firstname_;
  ::std::string* secondnamemale_;
  ::std::string* secondnamefemale_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NameCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NameCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NameCfg_2eproto();
  friend void protobuf_ShutdownFile_NameCfg_2eproto();

  void InitAsDefaultInstance();
  static NameCfg* default_instance_;
};
// -------------------------------------------------------------------

class NameCfgSet : public ::google::protobuf::MessageLite {
 public:
  NameCfgSet();
  virtual ~NameCfgSet();

  NameCfgSet(const NameCfgSet& from);

  inline NameCfgSet& operator=(const NameCfgSet& from) {
    CopyFrom(from);
    return *this;
  }

  static const NameCfgSet& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const NameCfgSet* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(NameCfgSet* other);

  // implements Message ----------------------------------------------

  NameCfgSet* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const NameCfgSet& from);
  void MergeFrom(const NameCfgSet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.cfg.vo.NameCfg nameCfg = 1;
  inline int namecfg_size() const;
  inline void clear_namecfg();
  static const int kNameCfgFieldNumber = 1;
  inline const ::com::cfg::vo::NameCfg& namecfg(int index) const;
  inline ::com::cfg::vo::NameCfg* mutable_namecfg(int index);
  inline ::com::cfg::vo::NameCfg* add_namecfg();
  inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NameCfg >&
      namecfg() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NameCfg >*
      mutable_namecfg();

  // @@protoc_insertion_point(class_scope:com.cfg.vo.NameCfgSet)
 private:

  ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NameCfg > namecfg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_NameCfg_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_NameCfg_2eproto();
  #endif
  friend void protobuf_AssignDesc_NameCfg_2eproto();
  friend void protobuf_ShutdownFile_NameCfg_2eproto();

  void InitAsDefaultInstance();
  static NameCfgSet* default_instance_;
};
// ===================================================================


// ===================================================================

// NameCfg

// required uint32 ID = 1;
inline bool NameCfg::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameCfg::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameCfg::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameCfg::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NameCfg::id() const {
  return id_;
}
inline void NameCfg::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// required string FirstName = 2;
inline bool NameCfg::has_firstname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameCfg::set_has_firstname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameCfg::clear_has_firstname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameCfg::clear_firstname() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    firstname_->clear();
  }
  clear_has_firstname();
}
inline const ::std::string& NameCfg::firstname() const {
  return *firstname_;
}
inline void NameCfg::set_firstname(const ::std::string& value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void NameCfg::set_firstname(const char* value) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(value);
}
inline void NameCfg::set_firstname(const char* value, size_t size) {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  firstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameCfg::mutable_firstname() {
  set_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    firstname_ = new ::std::string;
  }
  return firstname_;
}
inline ::std::string* NameCfg::release_firstname() {
  clear_has_firstname();
  if (firstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = firstname_;
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameCfg::set_allocated_firstname(::std::string* firstname) {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (firstname) {
    set_has_firstname();
    firstname_ = firstname;
  } else {
    clear_has_firstname();
    firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SecondNameMale = 3;
inline bool NameCfg::has_secondnamemale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameCfg::set_has_secondnamemale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameCfg::clear_has_secondnamemale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameCfg::clear_secondnamemale() {
  if (secondnamemale_ != &::google::protobuf::internal::kEmptyString) {
    secondnamemale_->clear();
  }
  clear_has_secondnamemale();
}
inline const ::std::string& NameCfg::secondnamemale() const {
  return *secondnamemale_;
}
inline void NameCfg::set_secondnamemale(const ::std::string& value) {
  set_has_secondnamemale();
  if (secondnamemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamemale_ = new ::std::string;
  }
  secondnamemale_->assign(value);
}
inline void NameCfg::set_secondnamemale(const char* value) {
  set_has_secondnamemale();
  if (secondnamemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamemale_ = new ::std::string;
  }
  secondnamemale_->assign(value);
}
inline void NameCfg::set_secondnamemale(const char* value, size_t size) {
  set_has_secondnamemale();
  if (secondnamemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamemale_ = new ::std::string;
  }
  secondnamemale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameCfg::mutable_secondnamemale() {
  set_has_secondnamemale();
  if (secondnamemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamemale_ = new ::std::string;
  }
  return secondnamemale_;
}
inline ::std::string* NameCfg::release_secondnamemale() {
  clear_has_secondnamemale();
  if (secondnamemale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondnamemale_;
    secondnamemale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameCfg::set_allocated_secondnamemale(::std::string* secondnamemale) {
  if (secondnamemale_ != &::google::protobuf::internal::kEmptyString) {
    delete secondnamemale_;
  }
  if (secondnamemale) {
    set_has_secondnamemale();
    secondnamemale_ = secondnamemale;
  } else {
    clear_has_secondnamemale();
    secondnamemale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string SecondNameFemale = 4;
inline bool NameCfg::has_secondnamefemale() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NameCfg::set_has_secondnamefemale() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NameCfg::clear_has_secondnamefemale() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NameCfg::clear_secondnamefemale() {
  if (secondnamefemale_ != &::google::protobuf::internal::kEmptyString) {
    secondnamefemale_->clear();
  }
  clear_has_secondnamefemale();
}
inline const ::std::string& NameCfg::secondnamefemale() const {
  return *secondnamefemale_;
}
inline void NameCfg::set_secondnamefemale(const ::std::string& value) {
  set_has_secondnamefemale();
  if (secondnamefemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamefemale_ = new ::std::string;
  }
  secondnamefemale_->assign(value);
}
inline void NameCfg::set_secondnamefemale(const char* value) {
  set_has_secondnamefemale();
  if (secondnamefemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamefemale_ = new ::std::string;
  }
  secondnamefemale_->assign(value);
}
inline void NameCfg::set_secondnamefemale(const char* value, size_t size) {
  set_has_secondnamefemale();
  if (secondnamefemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamefemale_ = new ::std::string;
  }
  secondnamefemale_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NameCfg::mutable_secondnamefemale() {
  set_has_secondnamefemale();
  if (secondnamefemale_ == &::google::protobuf::internal::kEmptyString) {
    secondnamefemale_ = new ::std::string;
  }
  return secondnamefemale_;
}
inline ::std::string* NameCfg::release_secondnamefemale() {
  clear_has_secondnamefemale();
  if (secondnamefemale_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = secondnamefemale_;
    secondnamefemale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NameCfg::set_allocated_secondnamefemale(::std::string* secondnamefemale) {
  if (secondnamefemale_ != &::google::protobuf::internal::kEmptyString) {
    delete secondnamefemale_;
  }
  if (secondnamefemale) {
    set_has_secondnamefemale();
    secondnamefemale_ = secondnamefemale;
  } else {
    clear_has_secondnamefemale();
    secondnamefemale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// NameCfgSet

// repeated .com.cfg.vo.NameCfg nameCfg = 1;
inline int NameCfgSet::namecfg_size() const {
  return namecfg_.size();
}
inline void NameCfgSet::clear_namecfg() {
  namecfg_.Clear();
}
inline const ::com::cfg::vo::NameCfg& NameCfgSet::namecfg(int index) const {
  return namecfg_.Get(index);
}
inline ::com::cfg::vo::NameCfg* NameCfgSet::mutable_namecfg(int index) {
  return namecfg_.Mutable(index);
}
inline ::com::cfg::vo::NameCfg* NameCfgSet::add_namecfg() {
  return namecfg_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NameCfg >&
NameCfgSet::namecfg() const {
  return namecfg_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::cfg::vo::NameCfg >*
NameCfgSet::mutable_namecfg() {
  return &namecfg_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_NameCfg_2eproto__INCLUDED
