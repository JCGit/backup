// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeaponLotteryCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeaponLotteryCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_WeaponLotteryCfg_2eproto() {
  delete WeaponLotteryElement::default_instance_;
  delete WeaponLotteryCfg::default_instance_;
  delete WeaponLotteryCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_WeaponLotteryCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_WeaponLotteryCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  WeaponLotteryElement::default_instance_ = new WeaponLotteryElement();
  WeaponLotteryCfg::default_instance_ = new WeaponLotteryCfg();
  WeaponLotteryCfgSet::default_instance_ = new WeaponLotteryCfgSet();
  WeaponLotteryElement::default_instance_->InitAsDefaultInstance();
  WeaponLotteryCfg::default_instance_->InitAsDefaultInstance();
  WeaponLotteryCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeaponLotteryCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_WeaponLotteryCfg_2eproto_once_);
void protobuf_AddDesc_WeaponLotteryCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_WeaponLotteryCfg_2eproto_once_,
                 &protobuf_AddDesc_WeaponLotteryCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeaponLotteryCfg_2eproto {
  StaticDescriptorInitializer_WeaponLotteryCfg_2eproto() {
    protobuf_AddDesc_WeaponLotteryCfg_2eproto();
  }
} static_descriptor_initializer_WeaponLotteryCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int WeaponLotteryElement::kCfgIDFieldNumber;
const int WeaponLotteryElement::kTypeFieldNumber;
const int WeaponLotteryElement::kCntFieldNumber;
#endif  // !_MSC_VER

WeaponLotteryElement::WeaponLotteryElement()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponLotteryElement::InitAsDefaultInstance() {
}

WeaponLotteryElement::WeaponLotteryElement(const WeaponLotteryElement& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponLotteryElement::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0u;
  type_ = 0u;
  cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponLotteryElement::~WeaponLotteryElement() {
  SharedDtor();
}

void WeaponLotteryElement::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponLotteryElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponLotteryElement& WeaponLotteryElement::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponLotteryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponLotteryCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponLotteryElement* WeaponLotteryElement::default_instance_ = NULL;

WeaponLotteryElement* WeaponLotteryElement::New() const {
  return new WeaponLotteryElement;
}

void WeaponLotteryElement::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0u;
    type_ = 0u;
    cnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponLotteryElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Cnt;
        break;
      }

      // required uint32 Cnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponLotteryElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CfgID = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cfgid(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 Cnt = 3;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cnt(), output);
  }

}

int WeaponLotteryElement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CfgID = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cfgid());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required uint32 Cnt = 3;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponLotteryElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponLotteryElement*>(&from));
}

void WeaponLotteryElement::MergeFrom(const WeaponLotteryElement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
}

void WeaponLotteryElement::CopyFrom(const WeaponLotteryElement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponLotteryElement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WeaponLotteryElement::Swap(WeaponLotteryElement* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(type_, other->type_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponLotteryElement::GetTypeName() const {
  return "com.cfg.vo.WeaponLotteryElement";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponLotteryCfg::kIDFieldNumber;
const int WeaponLotteryCfg::kTypeFieldNumber;
const int WeaponLotteryCfg::kFixedElmtFieldNumber;
#endif  // !_MSC_VER

WeaponLotteryCfg::WeaponLotteryCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponLotteryCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fixedelmt_ = const_cast< ::com::cfg::vo::WeaponLotteryElement*>(
      ::com::cfg::vo::WeaponLotteryElement::internal_default_instance());
#else
  fixedelmt_ = const_cast< ::com::cfg::vo::WeaponLotteryElement*>(&::com::cfg::vo::WeaponLotteryElement::default_instance());
#endif
}

WeaponLotteryCfg::WeaponLotteryCfg(const WeaponLotteryCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponLotteryCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  fixedelmt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponLotteryCfg::~WeaponLotteryCfg() {
  SharedDtor();
}

void WeaponLotteryCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fixedelmt_;
  }
}

void WeaponLotteryCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponLotteryCfg& WeaponLotteryCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponLotteryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponLotteryCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponLotteryCfg* WeaponLotteryCfg::default_instance_ = NULL;

WeaponLotteryCfg* WeaponLotteryCfg::New() const {
  return new WeaponLotteryCfg;
}

void WeaponLotteryCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    if (has_fixedelmt()) {
      if (fixedelmt_ != NULL) fixedelmt_->::com::cfg::vo::WeaponLotteryElement::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponLotteryCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // required uint32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FixedElmt;
        break;
      }

      // required .com.cfg.vo.WeaponLotteryElement FixedElmt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FixedElmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedelmt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponLotteryCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required .com.cfg.vo.WeaponLotteryElement FixedElmt = 3;
  if (has_fixedelmt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->fixedelmt(), output);
  }

}

int WeaponLotteryCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // required .com.cfg.vo.WeaponLotteryElement FixedElmt = 3;
    if (has_fixedelmt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedelmt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponLotteryCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponLotteryCfg*>(&from));
}

void WeaponLotteryCfg::MergeFrom(const WeaponLotteryCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fixedelmt()) {
      mutable_fixedelmt()->::com::cfg::vo::WeaponLotteryElement::MergeFrom(from.fixedelmt());
    }
  }
}

void WeaponLotteryCfg::CopyFrom(const WeaponLotteryCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponLotteryCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_fixedelmt()) {
    if (!this->fixedelmt().IsInitialized()) return false;
  }
  return true;
}

void WeaponLotteryCfg::Swap(WeaponLotteryCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(fixedelmt_, other->fixedelmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponLotteryCfg::GetTypeName() const {
  return "com.cfg.vo.WeaponLotteryCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponLotteryCfgSet::kWeaponlotterycfgFieldNumber;
#endif  // !_MSC_VER

WeaponLotteryCfgSet::WeaponLotteryCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WeaponLotteryCfgSet::InitAsDefaultInstance() {
}

WeaponLotteryCfgSet::WeaponLotteryCfgSet(const WeaponLotteryCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponLotteryCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponLotteryCfgSet::~WeaponLotteryCfgSet() {
  SharedDtor();
}

void WeaponLotteryCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void WeaponLotteryCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WeaponLotteryCfgSet& WeaponLotteryCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_WeaponLotteryCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_WeaponLotteryCfg_2eproto();
#endif
  return *default_instance_;
}

WeaponLotteryCfgSet* WeaponLotteryCfgSet::default_instance_ = NULL;

WeaponLotteryCfgSet* WeaponLotteryCfgSet::New() const {
  return new WeaponLotteryCfgSet;
}

void WeaponLotteryCfgSet::Clear() {
  weaponlotterycfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WeaponLotteryCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.WeaponLotteryCfg weaponlotterycfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weaponlotterycfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weaponlotterycfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weaponlotterycfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponLotteryCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.WeaponLotteryCfg weaponlotterycfg = 1;
  for (int i = 0; i < this->weaponlotterycfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->weaponlotterycfg(i), output);
  }

}

int WeaponLotteryCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.WeaponLotteryCfg weaponlotterycfg = 1;
  total_size += 1 * this->weaponlotterycfg_size();
  for (int i = 0; i < this->weaponlotterycfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weaponlotterycfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponLotteryCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WeaponLotteryCfgSet*>(&from));
}

void WeaponLotteryCfgSet::MergeFrom(const WeaponLotteryCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  weaponlotterycfg_.MergeFrom(from.weaponlotterycfg_);
}

void WeaponLotteryCfgSet::CopyFrom(const WeaponLotteryCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponLotteryCfgSet::IsInitialized() const {

  for (int i = 0; i < weaponlotterycfg_size(); i++) {
    if (!this->weaponlotterycfg(i).IsInitialized()) return false;
  }
  return true;
}

void WeaponLotteryCfgSet::Swap(WeaponLotteryCfgSet* other) {
  if (other != this) {
    weaponlotterycfg_.Swap(&other->weaponlotterycfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WeaponLotteryCfgSet::GetTypeName() const {
  return "com.cfg.vo.WeaponLotteryCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
