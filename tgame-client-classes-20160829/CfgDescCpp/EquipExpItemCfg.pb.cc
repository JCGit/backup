// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: EquipExpItemCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EquipExpItemCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_EquipExpItemCfg_2eproto() {
  delete EquipExpItemCfg::default_instance_;
  delete EquipExpItemCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_EquipExpItemCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_EquipExpItemCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  EquipExpItemCfg::default_instance_ = new EquipExpItemCfg();
  EquipExpItemCfgSet::default_instance_ = new EquipExpItemCfgSet();
  EquipExpItemCfg::default_instance_->InitAsDefaultInstance();
  EquipExpItemCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EquipExpItemCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_EquipExpItemCfg_2eproto_once_);
void protobuf_AddDesc_EquipExpItemCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_EquipExpItemCfg_2eproto_once_,
                 &protobuf_AddDesc_EquipExpItemCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EquipExpItemCfg_2eproto {
  StaticDescriptorInitializer_EquipExpItemCfg_2eproto() {
    protobuf_AddDesc_EquipExpItemCfg_2eproto();
  }
} static_descriptor_initializer_EquipExpItemCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int EquipExpItemCfg::kItemCfgIDFieldNumber;
const int EquipExpItemCfg::kEquipExpFieldNumber;
#endif  // !_MSC_VER

EquipExpItemCfg::EquipExpItemCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipExpItemCfg::InitAsDefaultInstance() {
}

EquipExpItemCfg::EquipExpItemCfg(const EquipExpItemCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipExpItemCfg::SharedCtor() {
  _cached_size_ = 0;
  itemcfgid_ = 0u;
  equipexp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipExpItemCfg::~EquipExpItemCfg() {
  SharedDtor();
}

void EquipExpItemCfg::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipExpItemCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipExpItemCfg& EquipExpItemCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipExpItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipExpItemCfg_2eproto();
#endif
  return *default_instance_;
}

EquipExpItemCfg* EquipExpItemCfg::default_instance_ = NULL;

EquipExpItemCfg* EquipExpItemCfg::New() const {
  return new EquipExpItemCfg;
}

void EquipExpItemCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemcfgid_ = 0u;
    equipexp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipExpItemCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ItemCfgID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcfgid_)));
          set_has_itemcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EquipExp;
        break;
      }

      // required uint32 EquipExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipexp_)));
          set_has_equipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipExpItemCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ItemCfgID = 1;
  if (has_itemcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemcfgid(), output);
  }

  // required uint32 EquipExp = 2;
  if (has_equipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->equipexp(), output);
  }

}

int EquipExpItemCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ItemCfgID = 1;
    if (has_itemcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcfgid());
    }

    // required uint32 EquipExp = 2;
    if (has_equipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipexp());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipExpItemCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipExpItemCfg*>(&from));
}

void EquipExpItemCfg::MergeFrom(const EquipExpItemCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemcfgid()) {
      set_itemcfgid(from.itemcfgid());
    }
    if (from.has_equipexp()) {
      set_equipexp(from.equipexp());
    }
  }
}

void EquipExpItemCfg::CopyFrom(const EquipExpItemCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipExpItemCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void EquipExpItemCfg::Swap(EquipExpItemCfg* other) {
  if (other != this) {
    std::swap(itemcfgid_, other->itemcfgid_);
    std::swap(equipexp_, other->equipexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipExpItemCfg::GetTypeName() const {
  return "com.cfg.vo.EquipExpItemCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int EquipExpItemCfgSet::kEquipexpitemcfgFieldNumber;
#endif  // !_MSC_VER

EquipExpItemCfgSet::EquipExpItemCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void EquipExpItemCfgSet::InitAsDefaultInstance() {
}

EquipExpItemCfgSet::EquipExpItemCfgSet(const EquipExpItemCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void EquipExpItemCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipExpItemCfgSet::~EquipExpItemCfgSet() {
  SharedDtor();
}

void EquipExpItemCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void EquipExpItemCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EquipExpItemCfgSet& EquipExpItemCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_EquipExpItemCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_EquipExpItemCfg_2eproto();
#endif
  return *default_instance_;
}

EquipExpItemCfgSet* EquipExpItemCfgSet::default_instance_ = NULL;

EquipExpItemCfgSet* EquipExpItemCfgSet::New() const {
  return new EquipExpItemCfgSet;
}

void EquipExpItemCfgSet::Clear() {
  equipexpitemcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool EquipExpItemCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.EquipExpItemCfg equipexpitemcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipexpitemcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipexpitemcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipexpitemcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipExpItemCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.EquipExpItemCfg equipexpitemcfg = 1;
  for (int i = 0; i < this->equipexpitemcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->equipexpitemcfg(i), output);
  }

}

int EquipExpItemCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.EquipExpItemCfg equipexpitemcfg = 1;
  total_size += 1 * this->equipexpitemcfg_size();
  for (int i = 0; i < this->equipexpitemcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipexpitemcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipExpItemCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EquipExpItemCfgSet*>(&from));
}

void EquipExpItemCfgSet::MergeFrom(const EquipExpItemCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipexpitemcfg_.MergeFrom(from.equipexpitemcfg_);
}

void EquipExpItemCfgSet::CopyFrom(const EquipExpItemCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipExpItemCfgSet::IsInitialized() const {

  for (int i = 0; i < equipexpitemcfg_size(); i++) {
    if (!this->equipexpitemcfg(i).IsInitialized()) return false;
  }
  return true;
}

void EquipExpItemCfgSet::Swap(EquipExpItemCfgSet* other) {
  if (other != this) {
    equipexpitemcfg_.Swap(&other->equipexpitemcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string EquipExpItemCfgSet::GetTypeName() const {
  return "com.cfg.vo.EquipExpItemCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
