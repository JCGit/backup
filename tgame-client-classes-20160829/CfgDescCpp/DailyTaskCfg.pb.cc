// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyTaskCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DailyTaskCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DailyTaskCfg_2eproto() {
  delete DailyTarget::default_instance_;
  delete DailyAward::default_instance_;
  delete DailyTaskCfg::default_instance_;
  delete DailyTaskCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DailyTaskCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DailyTaskCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DailyTarget::default_instance_ = new DailyTarget();
  DailyAward::default_instance_ = new DailyAward();
  DailyTaskCfg::default_instance_ = new DailyTaskCfg();
  DailyTaskCfgSet::default_instance_ = new DailyTaskCfgSet();
  DailyTarget::default_instance_->InitAsDefaultInstance();
  DailyAward::default_instance_->InitAsDefaultInstance();
  DailyTaskCfg::default_instance_->InitAsDefaultInstance();
  DailyTaskCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DailyTaskCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DailyTaskCfg_2eproto_once_);
void protobuf_AddDesc_DailyTaskCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DailyTaskCfg_2eproto_once_,
                 &protobuf_AddDesc_DailyTaskCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DailyTaskCfg_2eproto {
  StaticDescriptorInitializer_DailyTaskCfg_2eproto() {
    protobuf_AddDesc_DailyTaskCfg_2eproto();
  }
} static_descriptor_initializer_DailyTaskCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DailyTarget::kTargetTypeFieldNumber;
const int DailyTarget::kR1FieldNumber;
const int DailyTarget::kR2FieldNumber;
const int DailyTarget::kR3FieldNumber;
const int DailyTarget::kR4FieldNumber;
#endif  // !_MSC_VER

DailyTarget::DailyTarget()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyTarget::InitAsDefaultInstance() {
}

DailyTarget::DailyTarget(const DailyTarget& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTarget::SharedCtor() {
  _cached_size_ = 0;
  targettype_ = 0u;
  r1_ = 0u;
  r2_ = 0u;
  r3_ = 0u;
  r4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTarget::~DailyTarget() {
  SharedDtor();
}

void DailyTarget::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyTarget& DailyTarget::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskCfg_2eproto();
#endif
  return *default_instance_;
}

DailyTarget* DailyTarget::default_instance_ = NULL;

DailyTarget* DailyTarget::New() const {
  return new DailyTarget;
}

void DailyTarget::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targettype_ = 0u;
    r1_ = 0u;
    r2_ = 0u;
    r3_ = 0u;
    r4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TargetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_R1;
        break;
      }

      // required uint32 R1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r1_)));
          set_has_r1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_R2;
        break;
      }

      // required uint32 R2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r2_)));
          set_has_r2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_R3;
        break;
      }

      // required uint32 R3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r3_)));
          set_has_r3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_R4;
        break;
      }

      // required uint32 R4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_R4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &r4_)));
          set_has_r4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TargetType = 1;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targettype(), output);
  }

  // required uint32 R1 = 2;
  if (has_r1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->r1(), output);
  }

  // required uint32 R2 = 3;
  if (has_r2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->r2(), output);
  }

  // required uint32 R3 = 4;
  if (has_r3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->r3(), output);
  }

  // required uint32 R4 = 5;
  if (has_r4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->r4(), output);
  }

}

int DailyTarget::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TargetType = 1;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // required uint32 R1 = 2;
    if (has_r1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r1());
    }

    // required uint32 R2 = 3;
    if (has_r2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r2());
    }

    // required uint32 R3 = 4;
    if (has_r3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r3());
    }

    // required uint32 R4 = 5;
    if (has_r4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->r4());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTarget::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyTarget*>(&from));
}

void DailyTarget::MergeFrom(const DailyTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_r1()) {
      set_r1(from.r1());
    }
    if (from.has_r2()) {
      set_r2(from.r2());
    }
    if (from.has_r3()) {
      set_r3(from.r3());
    }
    if (from.has_r4()) {
      set_r4(from.r4());
    }
  }
}

void DailyTarget::CopyFrom(const DailyTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTarget::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DailyTarget::Swap(DailyTarget* other) {
  if (other != this) {
    std::swap(targettype_, other->targettype_);
    std::swap(r1_, other->r1_);
    std::swap(r2_, other->r2_);
    std::swap(r3_, other->r3_);
    std::swap(r4_, other->r4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyTarget::GetTypeName() const {
  return "com.cfg.vo.DailyTarget";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyAward::kCoinFieldNumber;
const int DailyAward::kExpFieldNumber;
const int DailyAward::kGoldFieldNumber;
const int DailyAward::kAwardTypeFieldNumber;
const int DailyAward::kAwardCfgIDFieldNumber;
const int DailyAward::kAwardCntFieldNumber;
#endif  // !_MSC_VER

DailyAward::DailyAward()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyAward::InitAsDefaultInstance() {
}

DailyAward::DailyAward(const DailyAward& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyAward::SharedCtor() {
  _cached_size_ = 0;
  coin_ = 0u;
  exp_ = 0u;
  gold_ = 0u;
  awardtype_ = 0u;
  awardcfgid_ = 0u;
  awardcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyAward::~DailyAward() {
  SharedDtor();
}

void DailyAward::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyAward& DailyAward::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskCfg_2eproto();
#endif
  return *default_instance_;
}

DailyAward* DailyAward::default_instance_ = NULL;

DailyAward* DailyAward::New() const {
  return new DailyAward;
}

void DailyAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coin_ = 0u;
    exp_ = 0u;
    gold_ = 0u;
    awardtype_ = 0u;
    awardcfgid_ = 0u;
    awardcnt_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Coin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coin_)));
          set_has_coin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Exp;
        break;
      }

      // required uint32 Exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Gold;
        break;
      }

      // required uint32 Gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AwardType;
        break;
      }

      // required uint32 AwardType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardtype_)));
          set_has_awardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_AwardCfgID;
        break;
      }

      // required uint32 AwardCfgID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCfgID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcfgid_)));
          set_has_awardcfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AwardCnt;
        break;
      }

      // required uint32 AwardCnt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AwardCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardcnt_)));
          set_has_awardcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Coin = 1;
  if (has_coin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coin(), output);
  }

  // required uint32 Exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // required uint32 Gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gold(), output);
  }

  // required uint32 AwardType = 4;
  if (has_awardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->awardtype(), output);
  }

  // required uint32 AwardCfgID = 5;
  if (has_awardcfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->awardcfgid(), output);
  }

  // required uint32 AwardCnt = 6;
  if (has_awardcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->awardcnt(), output);
  }

}

int DailyAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Coin = 1;
    if (has_coin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coin());
    }

    // required uint32 Exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // required uint32 Gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gold());
    }

    // required uint32 AwardType = 4;
    if (has_awardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardtype());
    }

    // required uint32 AwardCfgID = 5;
    if (has_awardcfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcfgid());
    }

    // required uint32 AwardCnt = 6;
    if (has_awardcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardcnt());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyAward::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyAward*>(&from));
}

void DailyAward::MergeFrom(const DailyAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coin()) {
      set_coin(from.coin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_awardtype()) {
      set_awardtype(from.awardtype());
    }
    if (from.has_awardcfgid()) {
      set_awardcfgid(from.awardcfgid());
    }
    if (from.has_awardcnt()) {
      set_awardcnt(from.awardcnt());
    }
  }
}

void DailyAward::CopyFrom(const DailyAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void DailyAward::Swap(DailyAward* other) {
  if (other != this) {
    std::swap(coin_, other->coin_);
    std::swap(exp_, other->exp_);
    std::swap(gold_, other->gold_);
    std::swap(awardtype_, other->awardtype_);
    std::swap(awardcfgid_, other->awardcfgid_);
    std::swap(awardcnt_, other->awardcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyAward::GetTypeName() const {
  return "com.cfg.vo.DailyAward";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskCfg::kIDFieldNumber;
const int DailyTaskCfg::kSysTypeFieldNumber;
const int DailyTaskCfg::kDailyTaskIconFieldNumber;
const int DailyTaskCfg::kDailyTaskNameFieldNumber;
const int DailyTaskCfg::kDailyTaskDescFieldNumber;
const int DailyTaskCfg::kDailyTaskIntroFieldNumber;
const int DailyTaskCfg::kDailyLeadIDFieldNumber;
const int DailyTaskCfg::kTargetFieldNumber;
const int DailyTaskCfg::kMainAwardTypeFieldNumber;
const int DailyTaskCfg::kAwardFieldNumber;
#endif  // !_MSC_VER

DailyTaskCfg::DailyTaskCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyTaskCfg::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  target_ = const_cast< ::com::cfg::vo::DailyTarget*>(
      ::com::cfg::vo::DailyTarget::internal_default_instance());
#else
  target_ = const_cast< ::com::cfg::vo::DailyTarget*>(&::com::cfg::vo::DailyTarget::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  award_ = const_cast< ::com::cfg::vo::DailyAward*>(
      ::com::cfg::vo::DailyAward::internal_default_instance());
#else
  award_ = const_cast< ::com::cfg::vo::DailyAward*>(&::com::cfg::vo::DailyAward::default_instance());
#endif
}

DailyTaskCfg::DailyTaskCfg(const DailyTaskCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  systype_ = 0u;
  dailytaskicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailytaskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailytaskdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailytaskintro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailyleadid_ = 0u;
  target_ = NULL;
  mainawardtype_ = 0u;
  award_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskCfg::~DailyTaskCfg() {
  SharedDtor();
}

void DailyTaskCfg::SharedDtor() {
  if (dailytaskicon_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskicon_;
  }
  if (dailytaskname_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskname_;
  }
  if (dailytaskdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskdesc_;
  }
  if (dailytaskintro_ != &::google::protobuf::internal::kEmptyString) {
    delete dailytaskintro_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete target_;
    delete award_;
  }
}

void DailyTaskCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyTaskCfg& DailyTaskCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskCfg_2eproto();
#endif
  return *default_instance_;
}

DailyTaskCfg* DailyTaskCfg::default_instance_ = NULL;

DailyTaskCfg* DailyTaskCfg::New() const {
  return new DailyTaskCfg;
}

void DailyTaskCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    systype_ = 0u;
    if (has_dailytaskicon()) {
      if (dailytaskicon_ != &::google::protobuf::internal::kEmptyString) {
        dailytaskicon_->clear();
      }
    }
    if (has_dailytaskname()) {
      if (dailytaskname_ != &::google::protobuf::internal::kEmptyString) {
        dailytaskname_->clear();
      }
    }
    if (has_dailytaskdesc()) {
      if (dailytaskdesc_ != &::google::protobuf::internal::kEmptyString) {
        dailytaskdesc_->clear();
      }
    }
    if (has_dailytaskintro()) {
      if (dailytaskintro_ != &::google::protobuf::internal::kEmptyString) {
        dailytaskintro_->clear();
      }
    }
    dailyleadid_ = 0u;
    if (has_target()) {
      if (target_ != NULL) target_->::com::cfg::vo::DailyTarget::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mainawardtype_ = 0u;
    if (has_award()) {
      if (award_ != NULL) award_->::com::cfg::vo::DailyAward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyTaskCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_SysType;
        break;
      }

      // required uint32 SysType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SysType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &systype_)));
          set_has_systype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DailyTaskIcon;
        break;
      }

      // required string DailyTaskIcon = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyTaskIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dailytaskicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DailyTaskName;
        break;
      }

      // required string DailyTaskName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyTaskName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dailytaskname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DailyTaskDesc;
        break;
      }

      // required string DailyTaskDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyTaskDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dailytaskdesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DailyTaskIntro;
        break;
      }

      // required string DailyTaskIntro = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyTaskIntro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dailytaskintro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DailyLeadID;
        break;
      }

      // required uint32 DailyLeadID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DailyLeadID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyleadid_)));
          set_has_dailyleadid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_Target;
        break;
      }

      // required .com.cfg.vo.DailyTarget Target = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_MainAwardType;
        break;
      }

      // required uint32 MainAwardType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MainAwardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainawardtype_)));
          set_has_mainawardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_Award;
        break;
      }

      // required .com.cfg.vo.DailyAward Award = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Award:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_award()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 SysType = 2;
  if (has_systype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->systype(), output);
  }

  // required string DailyTaskIcon = 3;
  if (has_dailytaskicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->dailytaskicon(), output);
  }

  // required string DailyTaskName = 4;
  if (has_dailytaskname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dailytaskname(), output);
  }

  // required string DailyTaskDesc = 5;
  if (has_dailytaskdesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dailytaskdesc(), output);
  }

  // required string DailyTaskIntro = 6;
  if (has_dailytaskintro()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->dailytaskintro(), output);
  }

  // required uint32 DailyLeadID = 7;
  if (has_dailyleadid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dailyleadid(), output);
  }

  // required .com.cfg.vo.DailyTarget Target = 8;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->target(), output);
  }

  // required uint32 MainAwardType = 9;
  if (has_mainawardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mainawardtype(), output);
  }

  // required .com.cfg.vo.DailyAward Award = 10;
  if (has_award()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->award(), output);
  }

}

int DailyTaskCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 SysType = 2;
    if (has_systype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->systype());
    }

    // required string DailyTaskIcon = 3;
    if (has_dailytaskicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dailytaskicon());
    }

    // required string DailyTaskName = 4;
    if (has_dailytaskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dailytaskname());
    }

    // required string DailyTaskDesc = 5;
    if (has_dailytaskdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dailytaskdesc());
    }

    // required string DailyTaskIntro = 6;
    if (has_dailytaskintro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dailytaskintro());
    }

    // required uint32 DailyLeadID = 7;
    if (has_dailyleadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyleadid());
    }

    // required .com.cfg.vo.DailyTarget Target = 8;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 MainAwardType = 9;
    if (has_mainawardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mainawardtype());
    }

    // required .com.cfg.vo.DailyAward Award = 10;
    if (has_award()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->award());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyTaskCfg*>(&from));
}

void DailyTaskCfg::MergeFrom(const DailyTaskCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_systype()) {
      set_systype(from.systype());
    }
    if (from.has_dailytaskicon()) {
      set_dailytaskicon(from.dailytaskicon());
    }
    if (from.has_dailytaskname()) {
      set_dailytaskname(from.dailytaskname());
    }
    if (from.has_dailytaskdesc()) {
      set_dailytaskdesc(from.dailytaskdesc());
    }
    if (from.has_dailytaskintro()) {
      set_dailytaskintro(from.dailytaskintro());
    }
    if (from.has_dailyleadid()) {
      set_dailyleadid(from.dailyleadid());
    }
    if (from.has_target()) {
      mutable_target()->::com::cfg::vo::DailyTarget::MergeFrom(from.target());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mainawardtype()) {
      set_mainawardtype(from.mainawardtype());
    }
    if (from.has_award()) {
      mutable_award()->::com::cfg::vo::DailyAward::MergeFrom(from.award());
    }
  }
}

void DailyTaskCfg::CopyFrom(const DailyTaskCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;

  if (has_target()) {
    if (!this->target().IsInitialized()) return false;
  }
  if (has_award()) {
    if (!this->award().IsInitialized()) return false;
  }
  return true;
}

void DailyTaskCfg::Swap(DailyTaskCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(systype_, other->systype_);
    std::swap(dailytaskicon_, other->dailytaskicon_);
    std::swap(dailytaskname_, other->dailytaskname_);
    std::swap(dailytaskdesc_, other->dailytaskdesc_);
    std::swap(dailytaskintro_, other->dailytaskintro_);
    std::swap(dailyleadid_, other->dailyleadid_);
    std::swap(target_, other->target_);
    std::swap(mainawardtype_, other->mainawardtype_);
    std::swap(award_, other->award_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyTaskCfg::GetTypeName() const {
  return "com.cfg.vo.DailyTaskCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskCfgSet::kDailytaskcfgFieldNumber;
#endif  // !_MSC_VER

DailyTaskCfgSet::DailyTaskCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyTaskCfgSet::InitAsDefaultInstance() {
}

DailyTaskCfgSet::DailyTaskCfgSet(const DailyTaskCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskCfgSet::~DailyTaskCfgSet() {
  SharedDtor();
}

void DailyTaskCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyTaskCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyTaskCfgSet& DailyTaskCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyTaskCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyTaskCfg_2eproto();
#endif
  return *default_instance_;
}

DailyTaskCfgSet* DailyTaskCfgSet::default_instance_ = NULL;

DailyTaskCfgSet* DailyTaskCfgSet::New() const {
  return new DailyTaskCfgSet;
}

void DailyTaskCfgSet::Clear() {
  dailytaskcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyTaskCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DailyTaskCfg dailytaskcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailytaskcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailytaskcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailytaskcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DailyTaskCfg dailytaskcfg = 1;
  for (int i = 0; i < this->dailytaskcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dailytaskcfg(i), output);
  }

}

int DailyTaskCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DailyTaskCfg dailytaskcfg = 1;
  total_size += 1 * this->dailytaskcfg_size();
  for (int i = 0; i < this->dailytaskcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailytaskcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyTaskCfgSet*>(&from));
}

void DailyTaskCfgSet::MergeFrom(const DailyTaskCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailytaskcfg_.MergeFrom(from.dailytaskcfg_);
}

void DailyTaskCfgSet::CopyFrom(const DailyTaskCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskCfgSet::IsInitialized() const {

  for (int i = 0; i < dailytaskcfg_size(); i++) {
    if (!this->dailytaskcfg(i).IsInitialized()) return false;
  }
  return true;
}

void DailyTaskCfgSet::Swap(DailyTaskCfgSet* other) {
  if (other != this) {
    dailytaskcfg_.Swap(&other->dailytaskcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyTaskCfgSet::GetTypeName() const {
  return "com.cfg.vo.DailyTaskCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
