// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SkillCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SkillCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_SkillCfg_2eproto() {
  delete SkillEffect::default_instance_;
  delete SkillCfg::default_instance_;
  delete SkillCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_SkillCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_SkillCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  SkillEffect::default_instance_ = new SkillEffect();
  SkillCfg::default_instance_ = new SkillCfg();
  SkillCfgSet::default_instance_ = new SkillCfgSet();
  SkillEffect::default_instance_->InitAsDefaultInstance();
  SkillCfg::default_instance_->InitAsDefaultInstance();
  SkillCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SkillCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_SkillCfg_2eproto_once_);
void protobuf_AddDesc_SkillCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_SkillCfg_2eproto_once_,
                 &protobuf_AddDesc_SkillCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SkillCfg_2eproto {
  StaticDescriptorInitializer_SkillCfg_2eproto() {
    protobuf_AddDesc_SkillCfg_2eproto();
  }
} static_descriptor_initializer_SkillCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int SkillEffect::kTargetTypeFieldNumber;
const int SkillEffect::kEffectTypeFieldNumber;
const int SkillEffect::kEffectValFieldNumber;
#endif  // !_MSC_VER

SkillEffect::SkillEffect()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkillEffect::InitAsDefaultInstance() {
}

SkillEffect::SkillEffect(const SkillEffect& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkillEffect::SharedCtor() {
  _cached_size_ = 0;
  targettype_ = 0u;
  effecttype_ = 0u;
  effectval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEffect::~SkillEffect() {
  SharedDtor();
}

void SkillEffect::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillEffect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillEffect& SkillEffect::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SkillCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SkillCfg_2eproto();
#endif
  return *default_instance_;
}

SkillEffect* SkillEffect::default_instance_ = NULL;

SkillEffect* SkillEffect::New() const {
  return new SkillEffect;
}

void SkillEffect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targettype_ = 0u;
    effecttype_ = 0u;
    effectval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkillEffect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TargetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EffectType;
        break;
      }

      // required uint32 EffectType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EffectVal;
        break;
      }

      // required uint32 EffectVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectval_)));
          set_has_effectval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillEffect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TargetType = 1;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targettype(), output);
  }

  // required uint32 EffectType = 2;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->effecttype(), output);
  }

  // required uint32 EffectVal = 3;
  if (has_effectval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->effectval(), output);
  }

}

int SkillEffect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TargetType = 1;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targettype());
    }

    // required uint32 EffectType = 2;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effecttype());
    }

    // required uint32 EffectVal = 3;
    if (has_effectval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectval());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEffect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillEffect*>(&from));
}

void SkillEffect::MergeFrom(const SkillEffect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_effectval()) {
      set_effectval(from.effectval());
    }
  }
}

void SkillEffect::CopyFrom(const SkillEffect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEffect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SkillEffect::Swap(SkillEffect* other) {
  if (other != this) {
    std::swap(targettype_, other->targettype_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(effectval_, other->effectval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillEffect::GetTypeName() const {
  return "com.cfg.vo.SkillEffect";
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCfg::kSkillIDFieldNumber;
const int SkillCfg::kNameFieldNumber;
const int SkillCfg::kDescFieldNumber;
const int SkillCfg::kCDFieldNumber;
const int SkillCfg::kEPCostFieldNumber;
const int SkillCfg::kCastDistFieldNumber;
const int SkillCfg::kCastLoopCntFieldNumber;
const int SkillCfg::kFlySpeedFieldNumber;
const int SkillCfg::kCastActionFieldNumber;
const int SkillCfg::kCastAnimationFieldNumber;
const int SkillCfg::kCastSoundFieldNumber;
const int SkillCfg::kFlyAnimationFieldNumber;
const int SkillCfg::kAtkSoundFieldNumber;
const int SkillCfg::kHurtAnimationFieldNumber;
const int SkillCfg::kHitSoundFieldNumber;
const int SkillCfg::kTriggerTypeFieldNumber;
const int SkillCfg::kDamageZoneFieldNumber;
const int SkillCfg::kTargetCntFieldNumber;
const int SkillCfg::kDamageAreaTypeFieldNumber;
const int SkillCfg::kEffectXFieldNumber;
const int SkillCfg::kEffectYFieldNumber;
const int SkillCfg::kHitBackDistFieldNumber;
const int SkillCfg::kEffectsFieldNumber;
const int SkillCfg::kFloorBuffIDFieldNumber;
const int SkillCfg::kSkillIconFieldNumber;
const int SkillCfg::kGunAnimationFieldNumber;
const int SkillCfg::kSkillValidTimeFieldNumber;
const int SkillCfg::kCastCondTypeFieldNumber;
const int SkillCfg::kCastCondValueFieldNumber;
const int SkillCfg::kDamageCntFieldNumber;
const int SkillCfg::kEffInterFieldNumber;
const int SkillCfg::kNextActionFieldNumber;
const int SkillCfg::kNextActSoundFieldNumber;
const int SkillCfg::kDieActionFieldNumber;
#endif  // !_MSC_VER

SkillCfg::SkillCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkillCfg::InitAsDefaultInstance() {
}

SkillCfg::SkillCfg(const SkillCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCfg::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cd_ = 0u;
  epcost_ = 0u;
  castdist_ = 0u;
  castloopcnt_ = 0u;
  flyspeed_ = 0u;
  castaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  castanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  castsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flyanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  atksound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hurtanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  triggertype_ = 0u;
  damagezone_ = 0u;
  targetcnt_ = 0u;
  damageareatype_ = 0u;
  effectx_ = 0u;
  effecty_ = 0u;
  hitbackdist_ = 0u;
  floorbuffid_ = 0u;
  skillicon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gunanimation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  skillvalidtime_ = 0u;
  castcondtype_ = 0u;
  castcondvalue_ = 0u;
  damagecnt_ = 0u;
  effinter_ = 0u;
  nextaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nextactsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dieaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCfg::~SkillCfg() {
  SharedDtor();
}

void SkillCfg::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (castaction_ != &::google::protobuf::internal::kEmptyString) {
    delete castaction_;
  }
  if (castanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete castanimation_;
  }
  if (castsound_ != &::google::protobuf::internal::kEmptyString) {
    delete castsound_;
  }
  if (flyanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete flyanimation_;
  }
  if (atksound_ != &::google::protobuf::internal::kEmptyString) {
    delete atksound_;
  }
  if (hurtanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete hurtanimation_;
  }
  if (hitsound_ != &::google::protobuf::internal::kEmptyString) {
    delete hitsound_;
  }
  if (skillicon_ != &::google::protobuf::internal::kEmptyString) {
    delete skillicon_;
  }
  if (gunanimation_ != &::google::protobuf::internal::kEmptyString) {
    delete gunanimation_;
  }
  if (nextaction_ != &::google::protobuf::internal::kEmptyString) {
    delete nextaction_;
  }
  if (nextactsound_ != &::google::protobuf::internal::kEmptyString) {
    delete nextactsound_;
  }
  if (dieaction_ != &::google::protobuf::internal::kEmptyString) {
    delete dieaction_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillCfg& SkillCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SkillCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SkillCfg_2eproto();
#endif
  return *default_instance_;
}

SkillCfg* SkillCfg::default_instance_ = NULL;

SkillCfg* SkillCfg::New() const {
  return new SkillCfg;
}

void SkillCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    cd_ = 0u;
    epcost_ = 0u;
    castdist_ = 0u;
    castloopcnt_ = 0u;
    flyspeed_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_castaction()) {
      if (castaction_ != &::google::protobuf::internal::kEmptyString) {
        castaction_->clear();
      }
    }
    if (has_castanimation()) {
      if (castanimation_ != &::google::protobuf::internal::kEmptyString) {
        castanimation_->clear();
      }
    }
    if (has_castsound()) {
      if (castsound_ != &::google::protobuf::internal::kEmptyString) {
        castsound_->clear();
      }
    }
    if (has_flyanimation()) {
      if (flyanimation_ != &::google::protobuf::internal::kEmptyString) {
        flyanimation_->clear();
      }
    }
    if (has_atksound()) {
      if (atksound_ != &::google::protobuf::internal::kEmptyString) {
        atksound_->clear();
      }
    }
    if (has_hurtanimation()) {
      if (hurtanimation_ != &::google::protobuf::internal::kEmptyString) {
        hurtanimation_->clear();
      }
    }
    if (has_hitsound()) {
      if (hitsound_ != &::google::protobuf::internal::kEmptyString) {
        hitsound_->clear();
      }
    }
    triggertype_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    damagezone_ = 0u;
    targetcnt_ = 0u;
    damageareatype_ = 0u;
    effectx_ = 0u;
    effecty_ = 0u;
    hitbackdist_ = 0u;
    floorbuffid_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_skillicon()) {
      if (skillicon_ != &::google::protobuf::internal::kEmptyString) {
        skillicon_->clear();
      }
    }
    if (has_gunanimation()) {
      if (gunanimation_ != &::google::protobuf::internal::kEmptyString) {
        gunanimation_->clear();
      }
    }
    skillvalidtime_ = 0u;
    castcondtype_ = 0u;
    castcondvalue_ = 0u;
    damagecnt_ = 0u;
    effinter_ = 0u;
    if (has_nextaction()) {
      if (nextaction_ != &::google::protobuf::internal::kEmptyString) {
        nextaction_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_nextactsound()) {
      if (nextactsound_ != &::google::protobuf::internal::kEmptyString) {
        nextactsound_->clear();
      }
    }
    if (has_dieaction()) {
      if (dieaction_ != &::google::protobuf::internal::kEmptyString) {
        dieaction_->clear();
      }
    }
  }
  effects_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkillCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SkillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Name;
        break;
      }

      // required string Name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Desc;
        break;
      }

      // required string Desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_CD;
        break;
      }

      // required uint32 CD = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_EPCost;
        break;
      }

      // required uint32 EPCost = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EPCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epcost_)));
          set_has_epcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CastDist;
        break;
      }

      // required uint32 CastDist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CastDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castdist_)));
          set_has_castdist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CastLoopCnt;
        break;
      }

      // required uint32 CastLoopCnt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CastLoopCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castloopcnt_)));
          set_has_castloopcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_FlySpeed;
        break;
      }

      // required uint32 FlySpeed = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlySpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flyspeed_)));
          set_has_flyspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CastAction;
        break;
      }

      // required string CastAction = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CastAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_castaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_CastAnimation;
        break;
      }

      // required string CastAnimation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CastAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_castanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_CastSound;
        break;
      }

      // required string CastSound = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CastSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_castsound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_FlyAnimation;
        break;
      }

      // required string FlyAnimation = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FlyAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flyanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_AtkSound;
        break;
      }

      // required string AtkSound = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AtkSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_atksound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_HurtAnimation;
        break;
      }

      // required string HurtAnimation = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HurtAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hurtanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_HitSound;
        break;
      }

      // required string HitSound = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HitSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitsound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_TriggerType;
        break;
      }

      // required uint32 TriggerType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TriggerType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggertype_)));
          set_has_triggertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_DamageZone;
        break;
      }

      // required uint32 DamageZone = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamageZone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagezone_)));
          set_has_damagezone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_TargetCnt;
        break;
      }

      // required uint32 TargetCnt = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TargetCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcnt_)));
          set_has_targetcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_DamageAreaType;
        break;
      }

      // required uint32 DamageAreaType = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamageAreaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damageareatype_)));
          set_has_damageareatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_EffectX;
        break;
      }

      // required uint32 EffectX = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectx_)));
          set_has_effectx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_EffectY;
        break;
      }

      // required uint32 EffectY = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffectY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effecty_)));
          set_has_effecty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_HitBackDist;
        break;
      }

      // required uint32 HitBackDist = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HitBackDist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hitbackdist_)));
          set_has_hitbackdist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_Effects;
        break;
      }

      // repeated .com.cfg.vo.SkillEffect Effects = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Effects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_effects()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_Effects;
        if (input->ExpectTag(192)) goto parse_FloorBuffID;
        break;
      }

      // required uint32 FloorBuffID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FloorBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &floorbuffid_)));
          set_has_floorbuffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_SkillIcon;
        break;
      }

      // required string SkillIcon = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SkillIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillicon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_GunAnimation;
        break;
      }

      // required string GunAnimation = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GunAnimation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gunanimation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_SkillValidTime;
        break;
      }

      // required uint32 SkillValidTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SkillValidTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillvalidtime_)));
          set_has_skillvalidtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_CastCondType;
        break;
      }

      // required uint32 CastCondType = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CastCondType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castcondtype_)));
          set_has_castcondtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_CastCondValue;
        break;
      }

      // required uint32 CastCondValue = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CastCondValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &castcondvalue_)));
          set_has_castcondvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_DamageCnt;
        break;
      }

      // required uint32 DamageCnt = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DamageCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damagecnt_)));
          set_has_damagecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_EffInter;
        break;
      }

      // required uint32 EffInter = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EffInter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effinter_)));
          set_has_effinter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_NextAction;
        break;
      }

      // required string NextAction = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_NextActSound;
        break;
      }

      // required string NextActSound = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_NextActSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nextactsound()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_DieAction;
        break;
      }

      // required string DieAction = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DieAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dieaction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SkillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // required string Name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string Desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // required uint32 CD = 4;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cd(), output);
  }

  // required uint32 EPCost = 5;
  if (has_epcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->epcost(), output);
  }

  // required uint32 CastDist = 6;
  if (has_castdist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->castdist(), output);
  }

  // required uint32 CastLoopCnt = 7;
  if (has_castloopcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->castloopcnt(), output);
  }

  // required uint32 FlySpeed = 8;
  if (has_flyspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flyspeed(), output);
  }

  // required string CastAction = 9;
  if (has_castaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->castaction(), output);
  }

  // required string CastAnimation = 10;
  if (has_castanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->castanimation(), output);
  }

  // required string CastSound = 11;
  if (has_castsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->castsound(), output);
  }

  // required string FlyAnimation = 12;
  if (has_flyanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->flyanimation(), output);
  }

  // required string AtkSound = 13;
  if (has_atksound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->atksound(), output);
  }

  // required string HurtAnimation = 14;
  if (has_hurtanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->hurtanimation(), output);
  }

  // required string HitSound = 15;
  if (has_hitsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->hitsound(), output);
  }

  // required uint32 TriggerType = 16;
  if (has_triggertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->triggertype(), output);
  }

  // required uint32 DamageZone = 17;
  if (has_damagezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->damagezone(), output);
  }

  // required uint32 TargetCnt = 18;
  if (has_targetcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->targetcnt(), output);
  }

  // required uint32 DamageAreaType = 19;
  if (has_damageareatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->damageareatype(), output);
  }

  // required uint32 EffectX = 20;
  if (has_effectx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effectx(), output);
  }

  // required uint32 EffectY = 21;
  if (has_effecty()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->effecty(), output);
  }

  // required uint32 HitBackDist = 22;
  if (has_hitbackdist()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->hitbackdist(), output);
  }

  // repeated .com.cfg.vo.SkillEffect Effects = 23;
  for (int i = 0; i < this->effects_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->effects(i), output);
  }

  // required uint32 FloorBuffID = 24;
  if (has_floorbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->floorbuffid(), output);
  }

  // required string SkillIcon = 28;
  if (has_skillicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->skillicon(), output);
  }

  // required string GunAnimation = 29;
  if (has_gunanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->gunanimation(), output);
  }

  // required uint32 SkillValidTime = 30;
  if (has_skillvalidtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->skillvalidtime(), output);
  }

  // required uint32 CastCondType = 31;
  if (has_castcondtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->castcondtype(), output);
  }

  // required uint32 CastCondValue = 32;
  if (has_castcondvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(32, this->castcondvalue(), output);
  }

  // required uint32 DamageCnt = 33;
  if (has_damagecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->damagecnt(), output);
  }

  // required uint32 EffInter = 34;
  if (has_effinter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->effinter(), output);
  }

  // required string NextAction = 35;
  if (has_nextaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->nextaction(), output);
  }

  // required string NextActSound = 36;
  if (has_nextactsound()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->nextactsound(), output);
  }

  // required string DieAction = 37;
  if (has_dieaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->dieaction(), output);
  }

}

int SkillCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SkillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // required string Name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string Desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // required uint32 CD = 4;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cd());
    }

    // required uint32 EPCost = 5;
    if (has_epcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epcost());
    }

    // required uint32 CastDist = 6;
    if (has_castdist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castdist());
    }

    // required uint32 CastLoopCnt = 7;
    if (has_castloopcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castloopcnt());
    }

    // required uint32 FlySpeed = 8;
    if (has_flyspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flyspeed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string CastAction = 9;
    if (has_castaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->castaction());
    }

    // required string CastAnimation = 10;
    if (has_castanimation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->castanimation());
    }

    // required string CastSound = 11;
    if (has_castsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->castsound());
    }

    // required string FlyAnimation = 12;
    if (has_flyanimation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flyanimation());
    }

    // required string AtkSound = 13;
    if (has_atksound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->atksound());
    }

    // required string HurtAnimation = 14;
    if (has_hurtanimation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hurtanimation());
    }

    // required string HitSound = 15;
    if (has_hitsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitsound());
    }

    // required uint32 TriggerType = 16;
    if (has_triggertype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggertype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required uint32 DamageZone = 17;
    if (has_damagezone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagezone());
    }

    // required uint32 TargetCnt = 18;
    if (has_targetcnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcnt());
    }

    // required uint32 DamageAreaType = 19;
    if (has_damageareatype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damageareatype());
    }

    // required uint32 EffectX = 20;
    if (has_effectx()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectx());
    }

    // required uint32 EffectY = 21;
    if (has_effecty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effecty());
    }

    // required uint32 HitBackDist = 22;
    if (has_hitbackdist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hitbackdist());
    }

    // required uint32 FloorBuffID = 24;
    if (has_floorbuffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->floorbuffid());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required string SkillIcon = 28;
    if (has_skillicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillicon());
    }

    // required string GunAnimation = 29;
    if (has_gunanimation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gunanimation());
    }

    // required uint32 SkillValidTime = 30;
    if (has_skillvalidtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillvalidtime());
    }

    // required uint32 CastCondType = 31;
    if (has_castcondtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castcondtype());
    }

    // required uint32 CastCondValue = 32;
    if (has_castcondvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->castcondvalue());
    }

    // required uint32 DamageCnt = 33;
    if (has_damagecnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damagecnt());
    }

    // required uint32 EffInter = 34;
    if (has_effinter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effinter());
    }

    // required string NextAction = 35;
    if (has_nextaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextaction());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string NextActSound = 36;
    if (has_nextactsound()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nextactsound());
    }

    // required string DieAction = 37;
    if (has_dieaction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dieaction());
    }

  }
  // repeated .com.cfg.vo.SkillEffect Effects = 23;
  total_size += 2 * this->effects_size();
  for (int i = 0; i < this->effects_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->effects(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillCfg*>(&from));
}

void SkillCfg::MergeFrom(const SkillCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  effects_.MergeFrom(from.effects_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_epcost()) {
      set_epcost(from.epcost());
    }
    if (from.has_castdist()) {
      set_castdist(from.castdist());
    }
    if (from.has_castloopcnt()) {
      set_castloopcnt(from.castloopcnt());
    }
    if (from.has_flyspeed()) {
      set_flyspeed(from.flyspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_castaction()) {
      set_castaction(from.castaction());
    }
    if (from.has_castanimation()) {
      set_castanimation(from.castanimation());
    }
    if (from.has_castsound()) {
      set_castsound(from.castsound());
    }
    if (from.has_flyanimation()) {
      set_flyanimation(from.flyanimation());
    }
    if (from.has_atksound()) {
      set_atksound(from.atksound());
    }
    if (from.has_hurtanimation()) {
      set_hurtanimation(from.hurtanimation());
    }
    if (from.has_hitsound()) {
      set_hitsound(from.hitsound());
    }
    if (from.has_triggertype()) {
      set_triggertype(from.triggertype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_damagezone()) {
      set_damagezone(from.damagezone());
    }
    if (from.has_targetcnt()) {
      set_targetcnt(from.targetcnt());
    }
    if (from.has_damageareatype()) {
      set_damageareatype(from.damageareatype());
    }
    if (from.has_effectx()) {
      set_effectx(from.effectx());
    }
    if (from.has_effecty()) {
      set_effecty(from.effecty());
    }
    if (from.has_hitbackdist()) {
      set_hitbackdist(from.hitbackdist());
    }
    if (from.has_floorbuffid()) {
      set_floorbuffid(from.floorbuffid());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_skillicon()) {
      set_skillicon(from.skillicon());
    }
    if (from.has_gunanimation()) {
      set_gunanimation(from.gunanimation());
    }
    if (from.has_skillvalidtime()) {
      set_skillvalidtime(from.skillvalidtime());
    }
    if (from.has_castcondtype()) {
      set_castcondtype(from.castcondtype());
    }
    if (from.has_castcondvalue()) {
      set_castcondvalue(from.castcondvalue());
    }
    if (from.has_damagecnt()) {
      set_damagecnt(from.damagecnt());
    }
    if (from.has_effinter()) {
      set_effinter(from.effinter());
    }
    if (from.has_nextaction()) {
      set_nextaction(from.nextaction());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_nextactsound()) {
      set_nextactsound(from.nextactsound());
    }
    if (from.has_dieaction()) {
      set_dieaction(from.dieaction());
    }
  }
}

void SkillCfg::CopyFrom(const SkillCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0xffbfffff) != 0xffbfffff) return false;
  if ((_has_bits_[1] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < effects_size(); i++) {
    if (!this->effects(i).IsInitialized()) return false;
  }
  return true;
}

void SkillCfg::Swap(SkillCfg* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(name_, other->name_);
    std::swap(desc_, other->desc_);
    std::swap(cd_, other->cd_);
    std::swap(epcost_, other->epcost_);
    std::swap(castdist_, other->castdist_);
    std::swap(castloopcnt_, other->castloopcnt_);
    std::swap(flyspeed_, other->flyspeed_);
    std::swap(castaction_, other->castaction_);
    std::swap(castanimation_, other->castanimation_);
    std::swap(castsound_, other->castsound_);
    std::swap(flyanimation_, other->flyanimation_);
    std::swap(atksound_, other->atksound_);
    std::swap(hurtanimation_, other->hurtanimation_);
    std::swap(hitsound_, other->hitsound_);
    std::swap(triggertype_, other->triggertype_);
    std::swap(damagezone_, other->damagezone_);
    std::swap(targetcnt_, other->targetcnt_);
    std::swap(damageareatype_, other->damageareatype_);
    std::swap(effectx_, other->effectx_);
    std::swap(effecty_, other->effecty_);
    std::swap(hitbackdist_, other->hitbackdist_);
    effects_.Swap(&other->effects_);
    std::swap(floorbuffid_, other->floorbuffid_);
    std::swap(skillicon_, other->skillicon_);
    std::swap(gunanimation_, other->gunanimation_);
    std::swap(skillvalidtime_, other->skillvalidtime_);
    std::swap(castcondtype_, other->castcondtype_);
    std::swap(castcondvalue_, other->castcondvalue_);
    std::swap(damagecnt_, other->damagecnt_);
    std::swap(effinter_, other->effinter_);
    std::swap(nextaction_, other->nextaction_);
    std::swap(nextactsound_, other->nextactsound_);
    std::swap(dieaction_, other->dieaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillCfg::GetTypeName() const {
  return "com.cfg.vo.SkillCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int SkillCfgSet::kSkillcfgFieldNumber;
#endif  // !_MSC_VER

SkillCfgSet::SkillCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SkillCfgSet::InitAsDefaultInstance() {
}

SkillCfgSet::SkillCfgSet(const SkillCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SkillCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillCfgSet::~SkillCfgSet() {
  SharedDtor();
}

void SkillCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void SkillCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SkillCfgSet& SkillCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_SkillCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_SkillCfg_2eproto();
#endif
  return *default_instance_;
}

SkillCfgSet* SkillCfgSet::default_instance_ = NULL;

SkillCfgSet* SkillCfgSet::New() const {
  return new SkillCfgSet;
}

void SkillCfgSet::Clear() {
  skillcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SkillCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.SkillCfg skillcfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillcfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skillcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_skillcfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.SkillCfg skillcfg = 1;
  for (int i = 0; i < this->skillcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->skillcfg(i), output);
  }

}

int SkillCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.SkillCfg skillcfg = 1;
  total_size += 1 * this->skillcfg_size();
  for (int i = 0; i < this->skillcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skillcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SkillCfgSet*>(&from));
}

void SkillCfgSet::MergeFrom(const SkillCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillcfg_.MergeFrom(from.skillcfg_);
}

void SkillCfgSet::CopyFrom(const SkillCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillCfgSet::IsInitialized() const {

  for (int i = 0; i < skillcfg_size(); i++) {
    if (!this->skillcfg(i).IsInitialized()) return false;
  }
  return true;
}

void SkillCfgSet::Swap(SkillCfgSet* other) {
  if (other != this) {
    skillcfg_.Swap(&other->skillcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SkillCfgSet::GetTypeName() const {
  return "com.cfg.vo.SkillCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
