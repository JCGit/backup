// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DailyActCfg.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DailyActCfg.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace cfg {
namespace vo {

void protobuf_ShutdownFile_DailyActCfg_2eproto() {
  delete DailyActCfg::default_instance_;
  delete DailyActCfgSet::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_DailyActCfg_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_DailyActCfg_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  DailyActCfg::default_instance_ = new DailyActCfg();
  DailyActCfgSet::default_instance_ = new DailyActCfgSet();
  DailyActCfg::default_instance_->InitAsDefaultInstance();
  DailyActCfgSet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DailyActCfg_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_DailyActCfg_2eproto_once_);
void protobuf_AddDesc_DailyActCfg_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_DailyActCfg_2eproto_once_,
                 &protobuf_AddDesc_DailyActCfg_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DailyActCfg_2eproto {
  StaticDescriptorInitializer_DailyActCfg_2eproto() {
    protobuf_AddDesc_DailyActCfg_2eproto();
  }
} static_descriptor_initializer_DailyActCfg_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int DailyActCfg::kActIDFieldNumber;
const int DailyActCfg::kActIconFieldNumber;
const int DailyActCfg::kTitleImgFieldNumber;
const int DailyActCfg::kTimeDescFieldNumber;
const int DailyActCfg::kAwardDescFieldNumber;
#endif  // !_MSC_VER

DailyActCfg::DailyActCfg()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyActCfg::InitAsDefaultInstance() {
}

DailyActCfg::DailyActCfg(const DailyActCfg& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyActCfg::SharedCtor() {
  _cached_size_ = 0;
  actid_ = 0u;
  acticon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  titleimg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timedesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  awarddesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyActCfg::~DailyActCfg() {
  SharedDtor();
}

void DailyActCfg::SharedDtor() {
  if (acticon_ != &::google::protobuf::internal::kEmptyString) {
    delete acticon_;
  }
  if (titleimg_ != &::google::protobuf::internal::kEmptyString) {
    delete titleimg_;
  }
  if (timedesc_ != &::google::protobuf::internal::kEmptyString) {
    delete timedesc_;
  }
  if (awarddesc_ != &::google::protobuf::internal::kEmptyString) {
    delete awarddesc_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyActCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyActCfg& DailyActCfg::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyActCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyActCfg_2eproto();
#endif
  return *default_instance_;
}

DailyActCfg* DailyActCfg::default_instance_ = NULL;

DailyActCfg* DailyActCfg::New() const {
  return new DailyActCfg;
}

void DailyActCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = 0u;
    if (has_acticon()) {
      if (acticon_ != &::google::protobuf::internal::kEmptyString) {
        acticon_->clear();
      }
    }
    if (has_titleimg()) {
      if (titleimg_ != &::google::protobuf::internal::kEmptyString) {
        titleimg_->clear();
      }
    }
    if (has_timedesc()) {
      if (timedesc_ != &::google::protobuf::internal::kEmptyString) {
        timedesc_->clear();
      }
    }
    if (has_awarddesc()) {
      if (awarddesc_ != &::google::protobuf::internal::kEmptyString) {
        awarddesc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyActCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ActID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ActIcon;
        break;
      }

      // required string ActIcon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActIcon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acticon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_TitleImg;
        break;
      }

      // required string TitleImg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TitleImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titleimg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TimeDesc;
        break;
      }

      // required string TimeDesc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TimeDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timedesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_AwardDesc;
        break;
      }

      // required string AwardDesc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_awarddesc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyActCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ActID = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->actid(), output);
  }

  // required string ActIcon = 2;
  if (has_acticon()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acticon(), output);
  }

  // required string TitleImg = 3;
  if (has_titleimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titleimg(), output);
  }

  // required string TimeDesc = 4;
  if (has_timedesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->timedesc(), output);
  }

  // required string AwardDesc = 5;
  if (has_awarddesc()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->awarddesc(), output);
  }

}

int DailyActCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ActID = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actid());
    }

    // required string ActIcon = 2;
    if (has_acticon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acticon());
    }

    // required string TitleImg = 3;
    if (has_titleimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titleimg());
    }

    // required string TimeDesc = 4;
    if (has_timedesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timedesc());
    }

    // required string AwardDesc = 5;
    if (has_awarddesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->awarddesc());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyActCfg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyActCfg*>(&from));
}

void DailyActCfg::MergeFrom(const DailyActCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_acticon()) {
      set_acticon(from.acticon());
    }
    if (from.has_titleimg()) {
      set_titleimg(from.titleimg());
    }
    if (from.has_timedesc()) {
      set_timedesc(from.timedesc());
    }
    if (from.has_awarddesc()) {
      set_awarddesc(from.awarddesc());
    }
  }
}

void DailyActCfg::CopyFrom(const DailyActCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyActCfg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DailyActCfg::Swap(DailyActCfg* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(acticon_, other->acticon_);
    std::swap(titleimg_, other->titleimg_);
    std::swap(timedesc_, other->timedesc_);
    std::swap(awarddesc_, other->awarddesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyActCfg::GetTypeName() const {
  return "com.cfg.vo.DailyActCfg";
}


// ===================================================================

#ifndef _MSC_VER
const int DailyActCfgSet::kDailyActCfgFieldNumber;
#endif  // !_MSC_VER

DailyActCfgSet::DailyActCfgSet()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void DailyActCfgSet::InitAsDefaultInstance() {
}

DailyActCfgSet::DailyActCfgSet(const DailyActCfgSet& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void DailyActCfgSet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyActCfgSet::~DailyActCfgSet() {
  SharedDtor();
}

void DailyActCfgSet::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void DailyActCfgSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DailyActCfgSet& DailyActCfgSet::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_DailyActCfg_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_DailyActCfg_2eproto();
#endif
  return *default_instance_;
}

DailyActCfgSet* DailyActCfgSet::default_instance_ = NULL;

DailyActCfgSet* DailyActCfgSet::New() const {
  return new DailyActCfgSet;
}

void DailyActCfgSet::Clear() {
  dailyactcfg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool DailyActCfgSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.cfg.vo.DailyActCfg dailyActCfg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dailyActCfg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailyactcfg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dailyActCfg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyActCfgSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .com.cfg.vo.DailyActCfg dailyActCfg = 1;
  for (int i = 0; i < this->dailyactcfg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->dailyactcfg(i), output);
  }

}

int DailyActCfgSet::ByteSize() const {
  int total_size = 0;

  // repeated .com.cfg.vo.DailyActCfg dailyActCfg = 1;
  total_size += 1 * this->dailyactcfg_size();
  for (int i = 0; i < this->dailyactcfg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailyactcfg(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyActCfgSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DailyActCfgSet*>(&from));
}

void DailyActCfgSet::MergeFrom(const DailyActCfgSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailyactcfg_.MergeFrom(from.dailyactcfg_);
}

void DailyActCfgSet::CopyFrom(const DailyActCfgSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyActCfgSet::IsInitialized() const {

  for (int i = 0; i < dailyactcfg_size(); i++) {
    if (!this->dailyactcfg(i).IsInitialized()) return false;
  }
  return true;
}

void DailyActCfgSet::Swap(DailyActCfgSet* other) {
  if (other != this) {
    dailyactcfg_.Swap(&other->dailyactcfg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string DailyActCfgSet::GetTypeName() const {
  return "com.cfg.vo.DailyActCfgSet";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace vo
}  // namespace cfg
}  // namespace com

// @@protoc_insertion_point(global_scope)
